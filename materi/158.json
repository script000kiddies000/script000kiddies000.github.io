{"response_code":"00","response_msg":"Berhasil mendapatkan materi kelas","materi_kelas":{"id":20,"uuid":"098b6379-f342-4291-8209-ec312b8e9c4f","kategori_kelas_id":18,"versi":"1.0.0","created_by":8089,"updated_by":8089,"created_at":"2021-03-01 09:26:44","updated_at":null},"section":[{"id":171,"uuid":"654ad185-18d5-4d01-8977-9fcdfd5fb964","materi_id":20,"nama":"Pendahuluan","permalink":"pendahuluan","urutan":1,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 09:27:18","updated_at":null,"posting":[{"id":591,"uuid":"5ac74c01-1153-487e-b4f3-a24f494fde9b","author_user_id":8089,"materi_section_id":171,"judul":"Persiapan Perangkat","permalink":"persiapan-perangkat","konten":"<div class=\"entry-content\">\r\n<p>Selamat datang peserta Bootcamp Sanbercode kelas NodeJS Backend Development with Adonis . Sebelum membahas proses membuat aplikasi web API menggunakan framework Adonis, terlebih dahulu kita akan membahas berbagai perangkat yang perlu dipersiapkan.<\/p>\r\n<h2 id=\"perangkat-yang-diperlukan\"><strong>Perangkat yang Diperlukan<\/strong><\/h2>\r\n<p>Untuk mengikuti bootcamp Nodejs Adonis ini, diperlukan perangkat utama yaitu <strong>PC\/Laptop<\/strong>&nbsp;yang terhubung dengan&nbsp;<strong>internet<\/strong>. Spesifikasi PC\/Laptop minimal memiliki&nbsp;<strong>RAM 2GB <\/strong>( 4GB lebih diutamakan)<strong>.<\/strong><\/p>\r\n<h2 id=\"perangkat-lunak-dan-teknologi-yang-digunakan\"><strong>Perangkat Lunak dan Teknologi yang Digunakan<\/strong><\/h2>\r\n<h3>0. (Opsional\/Tidak Wajib) Sistem Operasi&nbsp;<\/h3>\r\n<p>Tahap ini adalah <strong>OPSIONAL\/TIDAK WAJIB<\/strong> sehingga bagi teman-teman yang tidak ingin memasangkan kedua opsi berikut maka lewati dan langsung menuju ke poin 1 (Terminal atau console).<\/p>\r\n<ul>\r\n<li>\r\n<h4>Rekomendasi OS untuk pemrograman<\/h4>\r\n<p>Sistem Operasi yang disarankan : Linux atau OSX. Beberapa alasan kenapa memilih Linux atau OSX adalah kedua sistem operasi tersebut mendukung banyak bahasa pemrograman dan lingkungan yang mendukung dalam pengembangan <em>open source<\/em>. Untuk menginstall OSX tentunya harus memiliki perangkat khusus seperti MacBook, iMac atau Mac Mini. Sedangkan untuk menginstall Linux kita bisa gunakan opsi <em>dual boot&nbsp;<\/em>disandingkan dengan OS Windows. Berikut ini <a href=\"https:\/\/omkomputer.com\/cara-install-ubuntu-20-04-dual-boot\/\" target=\"_blank\" rel=\"noopener\">link tutorial menginstall dual boot Windows 10 dengan Linux Ubuntu 20.04<\/a>.&nbsp;<\/p>\r\n<\/li>\r\n<li>\r\n<h4>Alternatif bagi pengguna Windows 10<\/h4>\r\n<p>Microsoft dengan sistem operasi Windows 10 kini sudah membuka diri ke dunia <em>open source&nbsp;<\/em>dengan adanya dukungan <a href=\"https:\/\/docs.microsoft.com\/en-us\/windows\/wsl\/about\" target=\"_blank\" rel=\"noopener\">Windows Subsystem for Linux (WSL)<\/a>. Kita tidak perlu lagi gunakan opsi dual boot untuk menggunakan linux di perangkat komputer yang sudah terinstall Windows 10. Dengan WSL kita dapat gunakan environment Linux yang berada pada sub-sistem Windows 10 untuk keperluan pengembangan software atau pemrograman. Tutorial untuk menginstall WSL dapat diikuti dari <a href=\"https:\/\/docs.microsoft.com\/id-id\/windows\/wsl\/install-win10\" target=\"_blank\" rel=\"noopener\">dokumentasi resmi WSL di laman Microsoft berikut<\/a>.&nbsp;<\/p>\r\n<\/li>\r\n<\/ul>\r\n<h3 id=\"1-terminal-atau-console\">1. Terminal atau Console<\/h3>\r\n<p>Pada Bootcamp kali ini, diperlukan sebuah terminal untuk mengeksekusi berbagai perintah dasar yang berkaitan dengan Git, Node. Kita bisa menggunakan terminal bawaan dari Sistem Operasi yang digunakan seperti Command Prompt\/Windows PowerShell pada OS Windows dan Terminal pada OS Linux maupun OSX. Dan ketika melakukan proses instalasi Git juga terdapat Git Bash yang memiliki fungsi yang serupa. Selain itu, peserta juga bisa menggunakan&nbsp;<a href=\"https:\/\/cmder.net\/\">cmder<\/a> (terutama yang menggunakan OS Windows) karena cmder memiliki banyak fitur yang tidak dimiliki command prompt atau terminal bawaan Windows. Proses instalasi bisa dilakukan menggunakan konfigurasi default\/recommended<\/p>\r\n<h3 id=\"2-git\">2. Git<\/h3>\r\n<p><a href=\"https:\/\/git-scm.com\/\">Git&nbsp;<\/a>merupakan version control yang banyak digunakan oleh para programmer atau software developer. Untuk dapat menggunakannya, download dan install&nbsp;<a href=\"https:\/\/git-scm.com\/\">Git&nbsp;<\/a>sesuai dengan platform OS yang bersangkutan. Dan jalankan perintah instalasi dengan konfigurasi default\/recommended.<\/p>\r\n<h3 id=\"3-visual-studio-code\">3. Visual Studio Code<\/h3>\r\n<p><a href=\"https:\/\/code.visualstudio.com\/\">Visual Studio Code<\/a>&nbsp;adalah salah satu IDE (Integrated Development Environment) yang direkomendasikan untuk digunakan selama bootcamp ini. Salah satu kelebihannya adalah kemudahan pengoperasian dan user inteface yang lebih mudah dipahami oleh orang yang awam dalam pemrograman. Selain itu juga terdapat banyak extension atau plugin yang sangat membantu dalam menuliskan kode selama membangun suatu program\/aplikasi.<\/p>\r\n<p>IDE lainnya yang juga dapat digunakan adalah&nbsp;<a href=\"https:\/\/www.sublimetext.com\/\">Sublime Text<\/a>&nbsp;atau&nbsp;<a href=\"https:\/\/atom.io\/\">Atom<\/a>. Untuk kemudahan proses pembelajaran kami tidak merekomendasikan Notepad atau Notepad++<\/p>\r\n<h3 id=\"4-node-js\">4. Node js<\/h3>\r\n<p>Node js (<a href=\"https:\/\/nodejs.org\/en\/download\/\">https:\/\/nodejs.org\/en\/download\/<\/a>) adalah JavaScript run-time, yang menjadikan program JavaScript bisa berjalan, baik di web browser, node maupun di environment yang kompatibel lainnya. Selain menjadi eksekutor, pada pengembangan aplikasi berbasis Nodejs juga terdapat <strong>npm<\/strong> (node package manager) yang akan banyak digunakan dalam mengelola <em>dependencies<\/em> atau fitur-fitur tambahan pada aplikasi yang kita buat.<\/p>\r\n<p>Silahkan download dan install&nbsp;<a href=\"https:\/\/nodejs.org\/en\/download\/\">node js<\/a>&nbsp;di local\/komputer Anda sesuai dengan OS ter-install. Disarankan untuk mendownload node js versi LTS.<\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-07-11 09:00:00","status_publish":"publish","urutan":1,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 09:59:29","updated_at":"2021-08-23 13:10:18","waktu_publish_formatted":" Minggu, 11 Juli 2021. 09:00:00 WIB."},{"id":678,"uuid":"7e9377f5-7dbb-48eb-952a-ecf120a9d065","author_user_id":8089,"materi_section_id":171,"judul":"Pengumpulan Tugas","permalink":"pengumpulan-tugas","konten":"<p>Setiap harinya kalian diminta untuk menyelesaikan tugas dan\/atau quiz yang diberikan. Disarankan untuk membuat satu folder khusus dalam local PC\/Laptop untuk menyimpan file-file tugas yang terhubung dengan repository project pada tugas Git. Berikut tahapan atau tata cara mengumpulkan tugas<\/p>\r\n<p>Dalam hal ini tahapan yang bisa digunakan adalah sebagai berikut:<\/p>\r\n<ul>\r\n<li>Buat folder tugas (misal &ldquo;tugas-2&rdquo;)<\/li>\r\n<li>Setelah masuk ke dalam folder tugas tersebut, kerjakanlah tugas harian kalian mengikuti instruksi soal. Jika harus membuat folder dan file baru di dalamnya silakan buat di dalam folder tugas tersebut.<\/li>\r\n<li>Jika di dalam tugas terdapat beberapa soal atau beberapa output soal, kalian bisa gunakan fitur toggle comment pada visual studio code untuk pemisah antar soal (dengan menekan shortcut Ctrl + \/ pada Windows atau \u2318\/ pada Mac). contoh:\r\n<pre class=\"wp-block-preformatted\">\/\/ Soal 1 <br \/>{ jawaban soal 1 } <br \/>\/\/ Soal 2 <br \/>{ jawaban soal 2 } <br \/>\/\/ dst.<\/pre>\r\n<\/li>\r\n<li>Jika tugas adalah satu folder project maka masukan seluruh isi di dalam folder project kecuali folder node-modules jika tidak di-gitignore (defaultnya di gitignore)<\/li>\r\n<li>Jika tugas telah selesai, upload file tugas ke Gitlab (kalian bisa menggunakan command di bawah ini).\r\n<pre class=\"wp-block-preformatted\">$ git add .   <br \/>$ git commit -m \"Selesai : tugas 5 <strong>&lt;nama kalian&gt;<\/strong>\"    <br \/>$ git push <\/pre>\r\n<\/li>\r\n<li>Jika proses git push telah berhasil, periksa halaman Gitlab kalian dan masuk ke menu &ldquo;<strong>Repository<\/strong>&rdquo; =&gt; &ldquo;<strong>Commits<\/strong>&rdquo; (yang terdapat di sidebar) kemudian copy link commit tugas kalian.<\/li>\r\n<\/ul>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: center;\"><img class=\"wp-image-6128\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-24-1024x367.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-24-1024x367.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-24-300x107.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-24-768x275.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-24.png 1346w\" alt=\"\" width=\"1024\" height=\"367\" \/>\r\n<figcaption>Contoh Copy Link Commit<\/figcaption>\r\n<\/figure>\r\n<p>Setelah itu,&nbsp;<em>login&nbsp;<\/em>ke sanbercode.com kemudian akses kelas yang diikuti, pilih tab &lsquo;Kelola Tugas&rsquo;.<\/p>\r\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/1-1024x232.png\" alt=\"Gambar ini memiliki atribut alt yang kosong; nama filenya adalah 1-1024x232.png\" \/><\/figure>\r\n<p>Setelah memilih tugas yang akan di input pada menu&nbsp;<em>drop-down<\/em>, klik tombol &lsquo;Input Tugas&rsquo;. Kemudian masukkan link commit tadi.<\/p>\r\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-14-at-16.05.59-1024x325.png\" alt=\"\" \/><\/figure>\r\n<p>Tunggu hingga upload berhasil dan muncul&nbsp;<em>pop up <\/em>pemberitahuan bahwa tugas berhasil diinput.<\/p>\r\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/Screenshot-from-2020-06-14-20-52-10.png\" alt=\"Gambar ini memiliki atribut alt yang kosong; nama filenya adalah Screenshot-from-2020-06-14-20-52-10.png\" \/><\/figure>\r\n<h3 id=\"tambahan\"><strong>Tambahan<\/strong><\/h3>\r\n<p>Tugas bisa di kumpulkan menggunakan gitlab ataupun github<\/p>","waktu_publish":"2021-07-11 09:00:00","status_publish":"publish","urutan":2,"created_by":8089,"updated_by":8089,"created_at":"2021-03-16 22:00:31","updated_at":"2021-07-11 05:28:39","waktu_publish_formatted":" Minggu, 11 Juli 2021. 09:00:00 WIB."}]},{"id":172,"uuid":"75dae49a-6bef-4c8a-8068-f48269f94cfb","materi_id":20,"nama":"Materi Pekan 1","permalink":"materi-pekan-1","urutan":2,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 09:27:37","updated_at":null,"posting":[{"id":592,"uuid":"0cf0ec95-740b-4d63-a069-3d7b8c67ffbe","author_user_id":8089,"materi_section_id":172,"judul":"Hari 1 - Command Line Interface","permalink":"hari-1-command-line-interface","konten":"<h2 id=\"apa-itu-command-line-interface\"><strong>Apa itu&nbsp;<em>command line Interface<\/em>?&nbsp;<\/strong><\/h2>\r\n<p><em>Command line<\/em>&nbsp;<em>Interface<\/em>&nbsp;(CLI) atau yang biasa kita kenal cmd atau&nbsp;<em>command prompt<\/em>&nbsp;atau&nbsp;<em>terminal&nbsp;<\/em>adalah&nbsp;<em>software&nbsp;<\/em>atau antar muka untuk memberikan perintah-perintah dasar pada komputer kita. Biasanya kita mengoperasikan komputer seperti&nbsp;<em>browsing media<\/em>, mencari&nbsp;<em>file<\/em>, membuat&nbsp;<em>file&nbsp;<\/em>atau&nbsp;<em>folder<\/em>, dan lain-lain dengan GUI (<em>Graphical User Interface<\/em>) yang sudah disediakan pengembang Sistem Operasi seperti&nbsp;<em>Windows<\/em>,&nbsp;<em>Linux<\/em>, atau OSX. Namun pada dasarnya kita juga bisa melakukan operasi-operasi tersebut dalam suatu perintah yang kita kirimkan melalui cmd\/<em>terminal<\/em>. Berikut ini beberapa contohnya:<\/p>\r\n<h4><strong>Menuju&nbsp;<em>folder<\/em>\/direktori tertentu<\/strong><\/h4>\r\n<p>Untuk menuju posisi&nbsp;<em>folder&nbsp;<\/em>atau direktori tertentu bisa gunakan perintah&nbsp;<code>cd<\/code>&nbsp;atau kepanjangan dari&nbsp;<em>change directory<\/em><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Menuju Desktop\r\n$ cd Desktop\r\n\/\/ Menuju ke direktori <em>parent <\/em>(sebelumnya)\r\n$ cd ..<\/pre>\r\n<h4><strong>Mengetahui alamat dari direktori yang sedang dibuka<\/strong><\/h4>\r\n<p>Terkadang kita butuh tahu sedang dimana posisi terminal kita berjalan. Perintah untuk fungsi ini yaitu&nbsp;<code>pwd<\/code>&nbsp;atau kependekan dari path of working directory<\/p>\r\n<pre class=\"wp-block-preformatted\">$ pwd\r\n\/home\/users\r\n\/\/ sedang berada di folder home\/users<\/pre>\r\n<h4><strong>Mengetahui daftar isi dari sebuah direktori\/<em>folder<\/em><\/strong><\/h4>\r\n<p>Kamu bisa gunakan perintah&nbsp;<code>ls<\/code>&nbsp;atau&nbsp;<code>dir<\/code>&nbsp;. contohnya sebagai berikut<\/p>\r\n<pre class=\"wp-block-preformatted\">$ ls \r\nDocument Desktop Image index.html\r\n$ dir\r\nDocument Desktop Image index.html <\/pre>\r\n<h4><strong>Membuat&nbsp;<em>folder<\/em>&nbsp;baru<\/strong><\/h4>\r\n<p>Perintahnya adalah&nbsp;<code>mkdir<\/code>&nbsp;atau singkatan dari&nbsp;<em>make directory<\/em>. contohnya sebagai berikut<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ membuat folder baru bernama new-folder\r\n$ mkdir new-folder\r\n\/\/ mengecek apakah sudah berhasil buat folder baru\r\n$ ls\r\nnew-folder ... ...  <\/pre>\r\n<h4><strong>Membuat&nbsp;<em>file&nbsp;<\/em>baru<\/strong><\/h4>\r\n<p>Gunakan perintah&nbsp;<code>touch<\/code>&nbsp;untuk membuat file baru<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ membuat <em>file <\/em>index.html\r\n$ touch index.html\r\n\/\/ mengecek apakah sudah berhasil buat <em>file <\/em>baru\r\n$ ls \r\nindex.html ... ... <\/pre>\r\n<h2 id=\"software-terminal-command-line-yang-direkomendasikan\"><strong><em>Software terminal&nbsp;<\/em>\/&nbsp;<em>command line<\/em>&nbsp;yang direkomendasikan&nbsp;<\/strong><\/h2>\r\n<p>Untuk OS Windows,&nbsp;<em>terminal&nbsp;<\/em>bawaannya adalah&nbsp;<em>command prompt<\/em>&nbsp;atau cmd yang relatif kurang nyaman untuk dipakai dalam tahap&nbsp;<em>development<\/em>. Oleh karena itu direkomendasikan untuk&nbsp;<em>install terminal<\/em>&nbsp;di bawah ini agar lebih optimal dalam mengerjakan&nbsp;<em>project<\/em>.<\/p>\r\n<ul>\r\n<li>Cmder,&nbsp;<em>link download<\/em>:&nbsp;<a href=\"https:\/\/cmder.net\/\" target=\"_blank\" rel=\"noreferrer noopener\">cmder<\/a><\/li>\r\n<li>Git bash, Git bash biasanya ter-<em>install<\/em>&nbsp;jika kita meng-<em>install<\/em> git di pc\/laptop kita.<\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<p>Tutorial Video&nbsp;<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/7aLJWluyQJc\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>","waktu_publish":"2021-07-12 09:00:00","status_publish":"publish","urutan":1,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 14:09:34","updated_at":"2021-07-11 05:28:59","waktu_publish_formatted":" Senin, 12 Juli 2021. 09:00:00 WIB."},{"id":593,"uuid":"b6452e25-da1d-41b6-971b-f9427cd48463","author_user_id":8089,"materi_section_id":172,"judul":"Hari 1 - Git","permalink":"hari-1-git","konten":"<h2 id=\"apa-itu-git\"><strong>Apa itu Git ?<\/strong><\/h2>\r\n<p>Git adalah sebuah&nbsp;<em>Version Control System<\/em>&nbsp;yaitu sistem yang mengelola perubahan dari sebuah dokumen, program komputer, website dan kumpulan informasi lain.<\/p>\r\n<p>Selain itu, Git memungkinkan para pengembang perangkat lunak dari berbagai belahan dunia mengerjakan banyak projek bersama-sama tanpa mengharuskan bertatap muka.<\/p>\r\n<p>Git sendiri disimpan dalam sebuah folder atau directory project yang biasa di sebut repository<\/p>\r\n<h2 id=\"installasi-git\"><strong>Installasi Git<\/strong><\/h2>\r\n<h3 id=\"installasi-di-windows-dan-mac\"><code>Installasi di Windows dan Mac<\/code><\/h3>\r\n<p>Untuk menginstall git ke dalam windows dan mac, download terlebih dahulu file instalasi nya dari halaman&nbsp;<a href=\"https:\/\/git-scm.com\/download\">download git<\/a>.<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: center;\"><img class=\"wp-image-4753\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-36-1024x767.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-36-1024x767.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-36-300x225.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-36-768x575.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-36.png 1027w\" alt=\"\" width=\"1024\" height=\"767\" \/>\r\n<figcaption>halaman download git dari<a href=\"https:\/\/git-scm.com\/download\">&nbsp;git scm<\/a><\/figcaption>\r\n<\/figure>\r\n<p>jika sudah terdownload, klik file instalasi lalu ikuti instruksi instalasi (klik next saja sampai selesai).<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-4754\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-37.png\" sizes=\"(max-width: 524px) 100vw, 524px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-37.png 524w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-37-300x234.png 300w\" alt=\"\" width=\"524\" height=\"409\" \/>\r\n<figcaption>instalasi git, klik next sampai instalasi selesai<\/figcaption>\r\n<\/figure>\r\n<p>setelah instalasi selesai, kita dapat mengecek apakah Git sudah terinstall dengan cara membuka cmd atau command prompt lalu ketikkan perintah <code>git --version<\/code>.<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: center;\"><img class=\"wp-image-6305\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-25.png\" sizes=\"(max-width: 977px) 100vw, 977px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-25.png 977w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-25-300x157.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-25-768x401.png 768w\" alt=\"\" width=\"977\" height=\"510\" \/>\r\n<figcaption>memastikan git sudah terpasang dengan mengecek versi git yang sudah terinstall<\/figcaption>\r\n<\/figure>\r\n<h3 id=\"installasi-di-ubuntu\"><code>Installasi di Ubuntu<\/code><\/h3>\r\n<p>Untuk menginstall git ke dalam ubuntu dalam hal ini ubuntu versi 18.04 cukup masuk terminal lalu jalankan perintah<\/p>\r\n<pre class=\"wp-block-code\"><code>$ sudo apt update<\/code><\/pre>\r\n<p>lalu jalankan perintah<\/p>\r\n<pre class=\"wp-block-code\"><code>$ sudo apt install git<\/code><\/pre>\r\n<p>lalu anda bisa mengecek git sudah terinstall dengan mengetikkan perintah&nbsp;<code>git --version<\/code>&nbsp;di terminal<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: center;\"><img class=\"wp-image-6635\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-34.png\" sizes=\"(max-width: 951px) 100vw, 951px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-34.png 951w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-34-300x73.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-34-768x186.png 768w\" alt=\"\" width=\"951\" height=\"230\" \/>\r\n<figcaption>memastikan git sudah terpasang dengan mengecek versi git yang sudah terinstall<\/figcaption>\r\n<\/figure>\r\n<h2 id=\"setup-git\"><strong>Setup Git<\/strong><\/h2>\r\n<p>setelah menginstall git, hal yang di lakukan selanjutnya adalah setup git config email dan username seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>git config --global user.name \"username anda\"\r\ngit config --global user.email \"email anda\"<\/code><\/pre>\r\n<p>anda dapat melihat hasil config ini dengan perintah<\/p>\r\n<pre class=\"wp-block-code\"><code>git config -l<\/code><\/pre>\r\n<h2 id=\"perintah-dasar-git\"><strong>Perintah Dasar Git<\/strong><\/h2>\r\n<h3 id=\"git-init\"><code>git init<\/code><\/h3>\r\n<p><code>git init<\/code>&nbsp;adalah perintah untuk inisialisasi atau memasangkan git pada sebuah repository yang sedang terbuka di command prompt atau terminal.<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-6306\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-26.png\" sizes=\"(max-width: 662px) 100vw, 662px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-26.png 662w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-26-300x53.png 300w\" alt=\"\" width=\"662\" height=\"116\" \/><\/figure>\r\n<p>pada contoh di atas, setelah memberikan perintah git init akan muncul keterangan &ldquo;Initialized empty Git repository in . . . &rdquo; yang berarti folder git-demo yang sedang dibuka di cmd sudah dapat menggunakan Git di dalamnya.<\/p>\r\n<h3 id=\"git-add\"><code>git add&nbsp;<\/code><\/h3>\r\n<p><code>git add<\/code>&nbsp;yaitu perintah git untuk menambahkan perubahan-perubahan pada direktori project sebelum menyimpan perubahan tersebut. Misalkan di repository project kita terdapat file index.html yang ingin kita simpan perubahannya.<\/p>\r\n<pre class=\"wp-block-code\"><code>$ git add index.html<\/code><\/pre>\r\n<h3 id=\"git-commit\"><code>git commit<\/code>&nbsp;<\/h3>\r\n<p><code>git commit<\/code>yaitu perintah dari git untuk menyimpan perubahan yang ada di repository dan perintah ini biasanya disertakan dengan&nbsp;<code>-m \"[keterangan_perubahan_yang_dilakukan]\"&nbsp;<\/code>untuk menuliskan perubahan yang di lakukan<\/p>\r\n<pre class=\"wp-block-code\"><code>git commit -m \"menambahkan index.html\"<\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<h3 id=\"git-status\"><code>git status<\/code><\/h3>\r\n<p>git status adalah perintah dalam git untuk memeriksa status repository, apakah ada file baru, perubahan pada file atau file sudah di add, atau apakah perubahan sudah di commit atau belum.<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-6612\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-29.png\" sizes=\"(max-width: 760px) 100vw, 760px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-29.png 760w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-29-300x102.png 300w\" alt=\"\" width=\"760\" height=\"259\" \/>\r\n<figcaption>contoh tampilan ketika menggunakan git status<\/figcaption>\r\n<\/figure>\r\n<h3 id=\"git-push\"><code>git push<\/code><\/h3>\r\n<p>git push adalah perintah dalam git untuk mengirimkan perubahan perubahan file pada repository<\/p>\r\n<h3 id=\"git-pull\"><code>git pull<\/code><\/h3>\r\n<p>git pull adalah perintah dalam git untuk mengabil perubahan terakhir dari repository di git<\/p>\r\n<h2 id=\"tutorial-video\"><strong>Tutorial Video&nbsp;<\/strong><\/h2>\r\n<p>Untuk selanjutnya materi dapat dicoba melalui video kelas di link berikut:&nbsp;<a href=\"https:\/\/www.youtube.com\/watch?v=lTMZxWMjXQU&amp;list=PLFIM0718LjIVknj6sgsSceMqlq242-jNf\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"link video (opens in a new tab)\">link video<\/a>&nbsp;(Web Programming UNPAS &ndash; GIT &amp; GITHUB )<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/XbRWJZGw3FA\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/unJuCYVHaxM\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/YNy1FeChlZk\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/P1qwNP78eT8\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-07-12 09:00:00","status_publish":"publish","urutan":2,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 14:10:06","updated_at":"2021-07-11 05:29:11","waktu_publish_formatted":" Senin, 12 Juli 2021. 09:00:00 WIB."},{"id":597,"uuid":"fa0baffb-0161-409e-991a-434aad385f19","author_user_id":8089,"materi_section_id":172,"judul":"Hari 2 - Berkenalan dengan Nodejs","permalink":"hari-2-berkenalan-dengan-nodejs","konten":"<p><!-- wp:heading --><\/p>\r\n<h2 id=\"install-nodejs\">Install Nodejs<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pertama-tama tentu kita harus menginstall terlebih dahulu nodejs di komputer kita. Berikut ini link untuk download&nbsp;<a href=\"https:\/\/nodejs.org\/en\/download\/\" target=\"_blank\" rel=\"noreferrer noopener\">nodejs<\/a>&nbsp;(disarankan memilih versi LTS). Untuk OS Windows dan macOs tinggal diikuti saja instalasinya sampai selesai, sedangkan untuk Ubuntu 18.04 kamu bisa install mengikuti&nbsp;<a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-install-node-js-on-ubuntu-18-04\" target=\"_blank\" rel=\"noreferrer noopener\">tutorial dari digitalocean<\/a>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk mengecek apakah instalasi nodejs sudah berhasil kita bisa jalankan script di terminal kita:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":7178,\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-7178\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-42.png\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>dengan perintah tersebut, diketahui saat ini terinstall node dengan versi 12.16.2 dan npm versi 6.14.4 (untuk versi bisa menggunakan yang terbaru ini hanya contoh untuk mengecek version nya)<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2>Apa itu Nodejs ?<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Nodejs adalah sebuah tempat dimana kita dapat mengeksekusi kode dalam bahasa Javascript. Nodejs BUKAN merupakan bahasa pemrograman.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Nodejs ditemukan pada tahun 2009 oleh Ryan Dahl. Pada waktu itu Ryan Dahl terinspirasi oleh proses upload file di flickr dimana browser tidak mengetahui seberapa jauh progress upload dan harus melakukan query ke server berkali-kali.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Nodejs dan Javascript<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Javascript adalah bahasa pemrograman yang sangat erat kaitannya dengan browser yang merupakan tempat dimana kode javascript dapat dieksekusi untuk melakukan manipulasi DOM, eventListener, dan fungsi-fungsi lainnya untuk interaktivitas halaman web.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Pada tahun 2008, Google mengeluarkan <em>Javascript engine <\/em>bernama v8 yang ditanam pada browser chromium dan Google Chrome. Javascript engine ini lah yang digunakan oleh Ryan Dahl untuk pembuatan Nodejs. Nodejs menggunakan \"v8 engine\" yang sudah dipisahkan dari browser sehingga kode javascript dapat dijalankan di sistem operasi seperti Windows, Linux, atau MacOS layaknya menjalankan program-program yang <em>executable. <\/em><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:pullquote --><\/p>\r\n<figure class=\"wp-block-pullquote\">\r\n<blockquote>\r\n<p>Node.js&reg; is a JavaScript runtime built on&nbsp;<a href=\"https:\/\/v8.dev\/\">Chrome's V8 JavaScript engine<\/a>.<\/p>\r\n<p>As an asynchronous event-driven JavaScript runtime, Node.js is designed to build scalable network applications<\/p>\r\n<cite>https:\/\/nodejs.org\/<\/cite><\/blockquote>\r\n<\/figure>\r\n<p><!-- \/wp:pullquote --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Apa itu npm ?<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>npm adalah singkatan dari <em>node package manager<\/em> yaitu software untuk mengatur <em>package<\/em> atau <em>module<\/em> dari suatu project nodejs. npm otomatis terinstall bersama dengan instalasi nodejs. Selain itu, npm memiliki direktori berisikan library atau kumpulan kode buatan developer dari berbagai belahan dunia yang tersedia di website <a href=\"https:\/\/www.npmjs.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/www.npmjs.com\/<\/a>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2>Anatomi Aplikasi Nodejs<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Secara umum, aplikasi yang dibuat menggunakan nodejs akan memiliki bagian-bagian seperti File Entri, folder library\/modules, dan mekanisme export dan import module antar file.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"align\":\"center\",\"id\":15179,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/p>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter size-large\" style=\"text-align: center;\"><img class=\"wp-image-15179\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/image-5.png\" alt=\"\" \/>\r\n<figcaption>contoh aplikasi sederhana menggunakan nodejs<\/figcaption>\r\n<\/figure>\r\n<\/div>\r\n<p style=\"text-align: center;\"><!-- \/wp:image --> <!-- wp:group --><\/p>\r\n<div class=\"wp-block-group\">\r\n<div class=\"wp-block-group__inner-container\"><!-- wp:group -->\r\n<div class=\"wp-block-group\">\r\n<div class=\"wp-block-group__inner-container\"><!-- wp:list {\"ordered\":true} -->\r\n<ol>\r\n<li style=\"text-align: center;\">File entri <br \/><br \/>File entri adalah file utama yang akan dijalankan ketika kita mengeksekusi sebuah aplikasi nodejs. Di file ini kita import module-module yang dibutuhkan dari folder lain lalu kita jalankan aplikasi dengan atau tanpa parameter tambahan. Nama untuk file entri umumnya adalah <code>index.js<\/code> tapi kita bisa namai file entri kita dengan nama apa pun.<\/li>\r\n<li>Folder library &amp; Modules<br \/><br \/>Folder library adalah suatu direktori yang berisi file-file atau logic dari aplikasi yang dibuat. Penempatan file dan folder di dalam direktori ini dipisahkan berdasarkan kelompok logic tertentu. <br \/>Mirip dengan folder library, folder Modules juga berisi file-file dan logic yang dibutuhkan untuk menjalankan aplikasi, bedanya adalah folder modules kita peroleh dari pihak ke-3 yang tersedia di package manager seperti npm. <br \/>Adanya Folder library dan modules berguna untuk membuat aplikasi kita lebih modular atau tidak bertumpuk hanya di satu file\/folder saja.<\/li>\r\n<li>Export dan Import Module<br \/>File dan modul yang berada dalam folder library bisa membutuhkan variabel, object atau function yang berasal dari file lainnya. Untuk bisa mengirim dan memasukkan (Export dan Import) modul dari dan ke dalam suatu file bisa kita gunakan <code>module.exports<\/code> dan <code>require<\/code> . <br \/>Untuk melakukan export suatu variabel atau object dari suatu file kita bisa tuliskan sintaks <code>module.exports<\/code> seperti berikut<\/li>\r\n<\/ol>\r\n<!-- \/wp:list --><\/div>\r\n<\/div>\r\n<!-- \/wp:group --><\/div>\r\n<\/div>\r\n<p><!-- \/wp:group --> <!-- wp:group --><\/p>\r\n<div class=\"wp-block-group\">\r\n<div class=\"wp-block-group__inner-container\"><!-- wp:code -->\r\n<pre class=\"wp-block-code\"><code>module.exports = everythingToExport<\/code><\/pre>\r\n<!-- \/wp:code --> <!-- wp:paragraph -->\r\n<p>contohnya seperti di bawah ini kita ingin meng-eksport object <code>math<\/code> dari suatu file.<\/p>\r\n<!-- \/wp:paragraph --><\/div>\r\n<\/div>\r\n<p><!-- \/wp:group --> <!-- wp:image {\"align\":\"center\",\"id\":15183,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/p>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter size-large\" style=\"text-align: center;\"><img class=\"wp-image-15183\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/code-1-1024x470.png\" alt=\"\" \/>\r\n<figcaption>contoh meng-eksport sebuah object \"math\" dengan cara module.exports<\/figcaption>\r\n<\/figure>\r\n<\/div>\r\n<p style=\"text-align: center;\"><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p style=\"text-align: center;\">sedangkan untuk melakukan import ke dalam suatu file yang membutuhkan module tertentu kita bisa gunakan sintaks <code>require<\/code> dan menampungnya ke dalam variabel tertentu.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>var myModule = require('originOfModule')<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:image {\"align\":\"center\",\"id\":15181,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/p>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter size-large\" style=\"text-align: center;\"><img class=\"wp-image-15181\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/image-6.png\" alt=\"\" \/>\r\n<figcaption>cara import module dalam suatu file dengan cara require<\/figcaption>\r\n<\/figure>\r\n<\/div>\r\n<p style=\"text-align: center;\"><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p style=\"text-align: center;\">dari contoh di atas, kita ingin meng-import module math dengan menampungnya ke dalam suatu variabel bernama \"mathLib\". Penamaan variabel tersebut bebas sesuai yang kita tentukan tanpa harus sama dengan nama variabel dari file tempat berasal nya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>sintaks <code>require<\/code> menerima parameter yang ditulis di dalam kurung dan dalam tanda petik berisikan alamat atau file asal module yang kita ingin import.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Bahan Belajar Lainnya<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/youtu.be\/sSLJx5t4OJ4?list=PLFIM0718LjIW-XBdVOerYgKegBtD6rSfD\">Apa itu Nodejs ?<\/a> oleh : web programming unpas<\/li>\r\n<li><a href=\"https:\/\/youtu.be\/obfhz5jPLBk\" target=\"_blank\" rel=\"noopener\">Mengenal Nodejs<\/a> , oleh: Sanbercode<\/li>\r\n<li><a href=\"https:\/\/youtu.be\/ibRkasSaLak\" target=\"_blank\" rel=\"noopener\">Anatomi Aplikasi Nodejs: Entry File<\/a>, oleh: Sanbercode<\/li>\r\n<li><a href=\"https:\/\/youtu.be\/F_V53K3Kk1g\" target=\"_blank\" rel=\"noopener\">Anatomi Aplikasi Nodejs: Export &amp; Import Module<\/a>, oleh : Sanbercode<\/li>\r\n<li><a href=\"https:\/\/youtu.be\/TV60kwz9PeM\">Anatomi Aplikasi Nodejs: Export &amp; Import Module berupa Direktori<\/a>, oleh : Sanbercode<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --><\/p>","waktu_publish":"2021-07-12 09:00:00","status_publish":"publish","urutan":3,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:40:47","updated_at":"2021-07-11 08:41:36","waktu_publish_formatted":" Senin, 12 Juli 2021. 09:00:00 WIB."},{"id":638,"uuid":"b8957562-064e-476d-a98e-01a8954c3f77","author_user_id":8089,"materi_section_id":172,"judul":"Hari 2 - Javascript Dasar","permalink":"hari-2-javascript-dasar","konten":"<p><!-- wp:heading --><\/p>\r\n<h2>Menjalankan Javascript<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ada bermacam cara untuk menjalankan kode javascript yang kita buat, di antaranya:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li class=\"\">Menjalankan javascript di console browser<\/li>\r\n<li class=\"\">Menjalankan javascript di tools online seperti <a href=\"https:\/\/repl.it\/repls\" target=\"_blank\" rel=\"noreferrer noopener\">repl.it<\/a><\/li>\r\n<li class=\"\">Menjalankan javascript dengan nodejs<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Pada materi ini kita akan mencoba untuk menjalankan script dengan nodejs.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Nodejs adalah software berbasis pemrograman javascript yang dijalankan di sisi server. Jika biasanya javascript kita kenal erat kaitannya dengan client\/browser tapi dengan nodejs ini kita bisa membangun server menggunakan bahasa javascript.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"hello-world\">Hello world&nbsp;<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk menjalankan javascript dengan nodejs mari kita coba dengan menuliskan script di sebuah file index.js .<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah file dengan nama index.js kemudian tulis code di dalam file tersebut seperti berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var sayHello = \"Hello World!\" \r\nconsole.log(sayHello)<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>kemudian simpan file tersebut (save). Setelah itu kita bisa menjalankan script pada index.js tersebut dengan memberikan perintah seperti berikut pada terminal:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ node index.js<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>secara otomatis pada terminal kita akan muncul &ldquo;<code>Hello World!<\/code>&rdquo; . (Selamat Anda telah berhasil menjalankan program pertama Anda \ud83d\ude01)<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Demikian cara untuk menjalankan Javascript dengan nodejs.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"data-type\">Data Type<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Data Type atau dalam bahasa indonesia Tipe Data adalah sekumpulan informasi yang memiliki nilai dan karakteristik tertentu. Beberapa contoh tipe data pada javascript di antaranya:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li class=\"\"><strong>Number<\/strong> : tipe data angka<\/li>\r\n<li class=\"\"><strong>String<\/strong> : tipe data berupa text atau kumpulan karakter, biasanya string dibungkus dalam tanda petik ganda (double quote) atau tanda petik tunggal (single quote).<\/li>\r\n<li class=\"\"><strong>Boolean: <\/strong>tipe data dengan nilai <code>true<\/code> atau <code>false<\/code><\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:heading --><\/p>\r\n<h2 id=\"variable\">Variable<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Variable adalah suatu blok data untuk menampung sekumpulan data dengan berbagai tipe data apapun. Dengan variable kita bisa menyimpan suatu nilai untuk kemudian kita olah kembali pada program kita. Untuk deklarasi variable dalam javascript kita bisa gunakan sintaks <code>var<\/code> lalu diikuti nama variablenya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var name = \"John\" \/\/ Tipe\r\nvar angka = 12\r\nvar todayIsFriday = false \r\n\r\nconsole.log(name) \/\/ \"John\"\r\nconsole.log(angka) \/\/ 12\r\nconsole.log(todayIsFriday) \/\/ false<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Waspadai pendeklarasian variable yang tidak bernilai !<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var items\r\nconsole.log(items) \/\/ Undefined<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":1} --><\/p>\r\n<h1 id=\"operator\">Operator<\/h1>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Operator adalah karakter khusus yang merepresentasikan sebuah tindakan. Operator terbagi ke dalam beberapa jenis:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li>Operator Aritmatika <br \/>Operator yang melibatkan operasi matematika seperti tambah, kurang, kali, bagi.\r\n<ul>\r\n<li>Tambah <strong>(<code>+<\/code>)<\/strong><\/li>\r\n<li>Kurang (<strong><code>-<\/code><\/strong>)<\/li>\r\n<li>Kali (<strong><code>*<\/code><\/strong>)<\/li>\r\n<li>Bagi (<strong><code>\/<\/code><\/strong>)<\/li>\r\n<li>Modulus (<strong><code>%<\/code><\/strong>)<br \/>Modulus adalah sisa bagi. Contohnya <code>5%3<\/code> hasilnya adalah 2, <code>100%5<\/code> hasilnya 0.<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Operator Assignment (<code>=<\/code>) <br \/>Operator untuk mendaftarkan atau meng-assign suatu nilai ke dalam suatu variable <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var angka<\/code> <br \/><code>angka = 10 \/\/ Contoh assignment variable angka dengan nilai 10<\/code><\/pre>\r\n<\/li>\r\n<li>Operator Perbandingan <br \/>Operator yang membandingkan suatu nilai dengan nilai yang lain. Hasil dari perbandingan ini akan dikembalikan dalam tipe data boolean <code>true<\/code> atau <code>false<\/code>.\r\n<ul>\r\n<li>Equal Operator (<code>==<\/code>)<br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 100<\/code><br \/><code>console.log(angka == 100) \/\/ true<\/code><br \/><code>console.log(angka == 20) \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>Not Equal (<code> !=<\/code> ) <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var sifat = \"rajin\"<\/code><br \/><code>console.log(sifat != \"malas\") \/\/ true<\/code><br \/><code>console.log(sifat != \"bandel\") \/\/true <\/code><\/pre>\r\n<\/li>\r\n<li>Strict Equal ( <code>===<\/code> ) Selain membandingkan dua nilai nya, strict equal juga membandingkan tipe datanya apakah sama atau tidak <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 8<\/code><br \/><code>console.log(angka == \"8\") \/\/ true, padahal \"8\" adalah string.<\/code><br \/><code>console.log(angka === \"8\") \/\/ false, karena tipe data nya berbeda<\/code><br \/><code>console.log(angka === 8) \/\/ true <\/code><\/pre>\r\n<\/li>\r\n<li>Strict not Equal ( <code>!==<\/code> ) Kebalikan dari strict equal. <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 11<\/code><br \/><code>console.log(angka != \"11\") \/\/ false, padahal \"11\" adalah string<\/code><br \/><code>console.log(angka !== \"11\") \/\/ true, karena tipe datanya berbeda<\/code><br \/><code>console.log(angka !== 11) \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>Kurang dari &amp; Lebih Dari ( <code>&lt;<\/code>, <code>&gt;<\/code>, <code>&lt;=<\/code>, <code>&gt;=<\/code>)<br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var number = 17<\/code><br \/><code>console.log( number &lt; 20 ) \/\/ true<\/code><br \/><code>console.log( number &gt; 17 ) \/\/ false<\/code><br \/><code>console.log( number &gt;= 17 ) \/\/ true, karena terdapat sama dengan<\/code><br \/><code>console.log( number &lt;= 20 ) \/\/ true<\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Operator Kondisional, Operator yang mengkombinasikan dua nilai kebenaran . Terdapat operator AND (<code>&amp;&amp;<\/code>) dan OR (<code>||<\/code>)\r\n<ul>\r\n<li>OR ( <code>||<\/code> )<br \/>\r\n<pre class=\"wp-block-preformatted\"><code>console.log(true || true); \/\/ true<\/code><br \/><code>console.log(true || false); \/\/ true<\/code><br \/><code>console.log(true || false || false); \/\/ true<\/code><br \/><code>console.log(false || false); \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ol>\r\n<ul>\r\n<li>AND ( <code>&amp;&amp;<\/code> )<br \/><code>console.log(true &amp;&amp; true); \/\/ true<\/code><br \/><code>console.log(true &amp;&amp; false); \/\/ false<\/code><br \/><code>console.log(false &amp;&amp; false); \/\/ false<\/code><br \/><code>console.log(false &amp;&amp; true &amp;&amp; true); \/\/ false<\/code><br \/><code>console.log(true &amp;&amp; true &amp;&amp; true); \/\/ true <\/code><\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<h2>Tutorial:&nbsp;<\/h2>\r\n<h2><iframe src=\"https:\/\/www.youtube.com\/embed\/1sqhXw9p7Uc\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe>&nbsp;<code><\/code><\/h2>\r\n<p><!-- \/wp:list --><\/p>","waktu_publish":"2021-07-13 08:00:00","status_publish":"publish","urutan":4,"created_by":8089,"updated_by":8089,"created_at":"2021-03-11 23:57:51","updated_at":"2021-07-11 08:46:16","waktu_publish_formatted":" Selasa, 13 Juli 2021. 08:00:00 WIB."},{"id":639,"uuid":"926361c3-3baa-4233-ab2e-7f41e8526be6","author_user_id":8089,"materi_section_id":172,"judul":"Hari 2 - Tipe Data String","permalink":"hari-2-tipe-data-string","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>String adalah tipe data yang berisi karakter-karakter dibungkus dalam tanda petik (<code>\"\"<\/code> atau <code>''<\/code> ). Karakter-karakter pada suatu string dapat diakses dengan menggunakan indeks atau posisi karakter berada. Indeks pada string selalu mulai dari 0.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var sentences = \"Javascript\" \r\nconsole.log(sentences[0]) \/\/ \"J\"\r\nconsole.log(sentences[2]) \/\/ \"v\"<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>String pada javascript juga memiliki property dan methods tertentu. Property dan methods tersebut bisa kita gunakan dalam memanipulasi data agar sesuai dengan program yang kita inginkan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"string-properties\">String Properties<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.length<\/strong> <br \/>mengembalikan panjang atau jumlah karakter pada suatu string.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var word = \"Javascript is awesome\"\r\nconsole.log(word.length) \/\/ 21 <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2>String Methods<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.charAt([indeks])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengembalikan karakter pada indeks yang diinginkan<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">console.log('i am a string'.charAt(3)); \/\/ 'm'<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.concat([string])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Menggabungkan beberapa string dan mengembalikannya menjadi string baru.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var string1 = 'good';\r\nvar string2 = 'luck';\r\nconsole.log(string1.concat(string2)); \/\/ goodluck<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.indexOf([string\/karakter])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengembalikan indeks dari string\/karakter yang dicari, yang pertama kali ditemukan, atau -1 apabila tidak ditemukan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var text = 'dung dung ces!';\r\nconsole.log(text.indexOf('dung'));  \/\/ 0\r\nconsole.log(text.indexOf('u'));     \/\/ 1\r\nconsole.log(text.indexOf('jreng')); \/\/ -1<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.substring([indeks awal], [indeks akhir (optional)])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengembalikan potongan string mulai dari indeks pada parameter pertama (indeks awal) sampai dengan indeks pada parameter kedua (indeks akhir). Bila parameter kedua tidak ditentukan, maka secara otomatis berakhir pada karakter terakhir. Karakter pada indeks yang ditentukan pada parameter kedua tidak diikutkan sebagai output.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var car1 = 'Lykan Hypersport';\r\nvar car2 = car1.substr(6);\r\nconsole.log(car2); \/\/ Hypersport<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.substr([indeks awal], [jumlah karakter yang diambil (optional)])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mendapatkan potongan string mulai dari indeks pada parameter pertama (indeks awal) dengan jumlah indeks pada parameter kedua (jumlah karakter). Bila parameter kedua tidak ditentukan, maka secara otomatis berakhir pada karakter terakhir. Karakter pada indeks yang ditentukan pada parameter kedua tidak diikutkan sebagai output.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var motor1 = 'zelda motor';\r\nvar motor2 = motor1.substr(2, 2);\r\nconsole.log(motor2); \/\/ ld<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.toUpperCase()<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengembalikan string baru dengan semua karakter yang diubah menjadi huruf kapital.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var letter = 'This Letter Is For You';\r\nvar upper  = letter.toUpperCase();\r\nconsole.log(upper); \/\/ THIS LETTER IS FOR YOU<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.toLowerCase()<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengembalikan string baru dengan semua karakter yang diubah menjadi huruf kecil<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var letter = 'This Letter Is For You';\r\nvar lower  = letter.toLowerCase();\r\nconsole.log(lower); \/\/ this letter is for you<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.trim()<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengembalikan string baru yang sudah dihapus karakter <em>whitespace<\/em> (\" \") pada awal dan akhir string tersebut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var username    = ' administrator ';\r\nvar newUsername = username.trim(); \r\nconsole.log(newUsername) \/\/ 'administrator'<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2 id=\"mengubah-tipe-data-dari-dan-ke-string\">Mengubah tipe data dari dan ke String<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Di Javascript terkadang kita ingin mengubah sebuah data string menjadi tipe data lain atau sebaliknya. Contoh diperoleh data angka tapi dalam tipe data String maka kita dapat mengubah string tersebut menjadi tipe data angka.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>String([angka\/array])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Fungsi global <code>String()<\/code> dapat dipanggil kapan saja pada program JavaScript dan akan mengembalikan data dalam tipe data String dari parameter yang diberikan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var int  = 12;\r\nvar real = 3.45;\r\nvar arr  = [6, 7, 8];\r\n\r\nvar strInt  = String(int);\r\nvar strReal = String(real);\r\nvar strArr  = String(arr);\r\n\r\nconsole.log(strInt);  \/\/ '12'\r\nconsole.log(strReal); \/\/ '3.45'\r\nconsole.log(strArr);  \/\/ '6,7,8'<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.toString()<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengonversi tipe data lain menjadi string. Bila data tersebut adalah array, setiap nilai akan dituliskan dan dipisah dengan karakter koma.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var number = 21;\r\nconsole.log(number.toString()); \/\/ '21'\r\nvar array = [1,2];\r\nconsole.log(array.toString());  \/\/ '1,2'<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Number([String])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Fungsi global <code>Number()<\/code> mengonversi tipe data string menjadi angka. Data yang diberikan pada parameter harus berupa karakter angka saja, dengan titik (separator) bila angka adalah bilangan desimal. Bila parameter berisi karakter selain angka dan\/atau titik, <code>Number()<\/code> akan mengembalikan <strong>NaN<\/strong> <strong><em>(Not a Number)<\/em><\/strong>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var number1 = Number(\"90\");   \/\/ number1 = 90\r\nvar number2 = Number(\"1.23\"); \/\/ number2 = 1.23\r\nvar number3 = Number(\"4 5\");  \/\/ number3 = NaN<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>parseInt([String]) dan parseFloat([String])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Fungsi global <code>parseInt([String])<\/code> dan <code>parseFloat([String])<\/code> mengembalikan angka dari string. Bila angka adalah bilangan desimal maka gunakan <code>parseFloat()<\/code>, bila tidak bilangan dibelakang koma akan diabaikan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var int  = '89';\r\nvar real = '56.7';\r\nvar strInt_1 = parseInt(int);  \/\/ strInt_1 = 89\r\nvar strInt_2 = parseInt(real); \/\/ strInt_2 = 56\r\nvar strReal_1 = parseFloat(int); \/\/ strReal_1 = 89\r\nvar strReal_2 = parseFloat(int); \/\/ strReal_2 = 56.7<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2 id=\"referensi-tambahan\">Referensi Tambahan<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\"><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/String\" target=\"_blank\" rel=\"noreferrer noopener\">String by Mozilla Developer Network<\/a><\/li>\r\n<li class=\"\"><a href=\"http:\/\/www.w3schools.com\/jsref\/jsref_obj_string.asp\" target=\"_blank\" rel=\"noreferrer noopener\">JavaScript String Reference by W3School<\/a><\/li>\r\n<li class=\"\"><a href=\"http:\/\/www.w3schools.com\/js\/js_type_conversion.asp\" target=\"_blank\" rel=\"noreferrer noopener\">JavaScript Type Conversion<\/a><\/li>\r\n<\/ul>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/tx59A45vmG4\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><!-- \/wp:list --> <!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>sumber: <a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-string-reference.md#length\" target=\"_blank\" rel=\"noreferrer noopener\">github hacktiv8 phase 0 materials<\/a><\/p>\r\n<\/blockquote>\r\n<p><!-- \/wp:quote --><\/p>","waktu_publish":"2021-07-13 08:00:00","status_publish":"publish","urutan":5,"created_by":8089,"updated_by":8089,"created_at":"2021-03-12 00:01:45","updated_at":"2021-07-11 08:47:23","waktu_publish_formatted":" Selasa, 13 Juli 2021. 08:00:00 WIB."},{"id":640,"uuid":"d21c02a9-9c49-416b-a3e1-eb0c3be488a0","author_user_id":8089,"materi_section_id":172,"judul":"Hari 2 - Control Flow (Conditional)","permalink":"hari-2-control-flow-conditional-","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Control Flow atau biasa disebut juga percabangan atau Conditional adalah sebuah metode yang melakukan pengecekan terhadap suatu pernyataan atau premis apakah bernilai benar atau tidak, jika benar maka akan menjalankan sebuah block code tertentu.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"kondisional-dengan-if-else-if-else\">Kondisional dengan <code>if \/ else if \/ else<\/code><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Contoh 1 menjalankan kode jika premis bernilai <code>true<\/code><br \/>\r\n<pre class=\"wp-block-preformatted\"><code>if ( true ) {<\/code><br \/><code>    console.log(\"jalankan code\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<li>Contoh 2 kode tidak dijalankan jika premis bernilai <code>false<\/code> <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>if ( false ) {<\/code><br \/><code>    console.log(\"code tidak dijalankan\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<li>Contoh 3 Premis dengan perbandingan suatu nilai<br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var mood = \"happy\"<\/code><br \/><code>if ( mood == \"happy\" ) {<\/code><br \/><code>    console.log(\"hari ini aku bahagia!\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Di dalam kondisional dikenal juga dengan istilah branching atau percabangan. Dengan percabangan kita bisa mengecek nilai kebenaran dari berbagai premis yang kita sediakan. cara menambahkan kondisi atau premis lain dari premis pertamanya adalah dengan sintaks <code>else<\/code> . Contohnya ketika kita diminta untuk membeli telur dan buah ke minimarket oleh ibu kita maka akan banyak sekali kondisi atau kemungkinan yang terjadi dalam perjalanan kita membeli barang-barang tersebut di supermarket.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Contoh 4 Branching sederhana<br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"open\"<\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarketnya tutup\")<br \/>}<\/code><\/pre>\r\nKondisi else di atas adalah kondisi selain <code>minimarketStatus == \"open\"<\/code> .<\/li>\r\n<li>Contoh 5 Branching dengan kondisi <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"close\"<\/code><br \/><code>var minuteRemainingToOpen = 5<\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>} else if ( minuteRemainingToOpen &lt;= 5 ) {<\/code><br \/><code>    console.log(\"minimarket buka sebentar lagi, saya tungguin\")<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarket tutup, saya pulang lagi\")<br \/>}<\/code><\/pre>\r\ncontoh di atas kita memberikan kondisi tambahan yaitu jika minimarket akan buka kurang atau sama dengan 5 menit lagi maka saya akan menunggu.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Selain Branching atau percabangan, kondisional juga dapat memiliki sarang atau tumpukan yaitu terdapat kondisional di dalam sebuah kondisional.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Contoh 6 Kondisional bersarang <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"open\"<\/code><br \/><code>var telur = \"soldout\"<\/code><br \/><code>var buah = \"soldout\" <\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>    if(telur == \"soldout\" || buah == \"soldout\" ) {<\/code><br \/><code>        console.log(\"belanjaan saya tidak lengkap\")    <\/code><br \/><code>    } else if( telur == \"soldout\") {<\/code><br \/><code>        console.log(\"telur habis\")<\/code><br \/><code>    } else if ( buah == \"soldout\" ) {<\/code><br \/><code>        console.log(\"buah habis\")<\/code><br \/><code>    }<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarket tutup, saya pulang lagi\")<\/code><br \/><code>}<\/code><\/pre>\r\npada kondisi di atas minimarketnya sudah buka lalu cek kondisi selanjutnya cek apakah telur atau buah habis. Karena kondisinya adalah jika telur ATAU buah salah satunya ada yang soldout maka belanjaan saya lengkap. Demikian seterusnya akan mengecek kondisi-kondisi yang disediakan dalam logika program yang dibuat.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:heading --><\/p>\r\n<h2 id=\"kondisional-dengan-switch-case\">Kondisional dengan <code>Switch Case<\/code><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Cara lain untuk melakukan pengecekan kondisi atau conditional adalah dengan <code>switch case<\/code>. Penggunaan switch case mirip seperti kita menyalakan tombol switch pada remote. Jika kondisi tombol yang dipijit adalah tombol dengan nomer tertentu maka akan menjalankan prorgram tertentu.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Contoh 7 Kondisional dengan <code>switch case<\/code><br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var buttonPushed = 1;<\/code><br \/><code>switch(buttonPushed) {<\/code><br \/><code>  case 1:   { console.log('matikan TV!'); break; }<\/code><br \/><code>  case 2:   { console.log('turunkan volume TV!'); break; }<\/code><br \/><code>  case 3:   { console.log('tingkatkan volume TV!'); break; }<\/code><br \/><code>  case 4:   { console.log('matikan suara TV!'); break; }<\/code><br \/><code>  default:  { console.log('Tidak terjadi apa-apa'); }}<\/code><\/pre>\r\nPada kode di atas, switch akan mengevaluasi nilai <code>buttonPushed<\/code> jika <code>case<\/code> yang ditemui cocok dengan nilai yang diberikan maka kode pada <code>case<\/code> tersebut akan dijalankan sehingga pada console akan dimunculkan \"<code>matikan TV!<\/code>\". Pada setiap case terdapat <code>break<\/code> yang berfungsi untuk menghentikan proses switch agar tidak menjalankan case yang lain. Juga terdapat <code>default<\/code> yaitu kondisi dimana tidak ditemukan <code>case <\/code>yang sesuai.<\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<h2>Tutorial<\/h2>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/Y1DiLXvaVp0\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/Zv6HzuGoCOA\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><!-- \/wp:list --><\/p>","waktu_publish":"2021-07-13 08:00:00","status_publish":"publish","urutan":6,"created_by":8089,"updated_by":8089,"created_at":"2021-03-12 00:03:21","updated_at":"2021-07-11 09:03:33","waktu_publish_formatted":" Selasa, 13 Juli 2021. 08:00:00 WIB."},{"id":598,"uuid":"44bddd4e-808a-4cae-abdc-326e890d9fa7","author_user_id":8089,"materi_section_id":172,"judul":"Hari 3 - Functions dan Looping","permalink":"hari-3-functions-dan-looping","konten":"<p><!-- wp:paragraph --><\/p>\r\n<h1>1. Function<\/h1>\r\n<p><!-- wp:paragraph --><\/p>\r\n<p>Function adalah sebuah blok kode yang disusun sedemikian rupa untuk menjalankan sebuah tindakan. Blok kode ini dibuat untuk dapat bisa digunakan kembali. Cara atau bentuk penulisan function adalah sebagai berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">function nama_function(parameter 1, parameter 2, ...) {\r\n  [Isi dari function berupa tindakan]\r\n  return [expression];\r\n}<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Kode di atas tidak dapat kita copy-paste kan langsung, melainkan hanya sebuah bentuk penulisan <code>function<\/code>. Sebuah <code>function<\/code>, umumnya melakukan tindakan dan sebelum <code>function<\/code> berakhir, <code>function<\/code> bisa mengembalikan nilai dengan cara menambahkan sintaks return.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Kita juga dapat mengirimkan nilai ke dalam sebuah <code>function<\/code> dengan mencantumkannya ke dalam tanda kurung dalam penulisan <code>function<\/code>. Untuk mengirimkan nilai lebih dari satu, gunakan tanda <code>,<\/code> sebagai pemisah.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Function 1:<\/strong> Function sederhana tanpa return<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkan() {\r\n  console.log(\"halo!\");\r\n}\r\n \r\ntampilkan(); <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Function 2:<\/strong> Function sederhana dengan return<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">function munculkanAngkaDua() {\r\n  return 2\r\n}\r\n \r\nvar tampung = munculkanAngkaDua();\r\nconsole.log(tampung)<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Function 3:<\/strong> Function dengan parameter<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">function kalikanDua(angka) {\r\n  return angka * 2\r\n}\r\n \r\nvar tampung = kalikanDua(2);\r\nconsole.log(tampung) <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Function 4:<\/strong> Pengiriman parameter lebih dari satu<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkanAngka(angkaPertama, angkaKedua) {\r\n  return angkaPertama + angkaKedua\r\n}\r\n \r\nconsole.log(tampilkanAngka(5, 3))<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Function 5:<\/strong> Inisialisasi parameter dengan nilai default<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkanAngka(angka = 1) {\r\n  return angka\r\n}\r\n \r\nconsole.log(tampilkanAngka(5)) \/\/ 5, sesuai dengan nilai parameter yang dikirim\r\nconsole.log(tampilkanAngka()) \/\/ 1, karena default dari parameter adalah 1<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Waspadai pengiriman parameter yang <strong>UNDEFINED!<\/strong><\/p>\r\n<\/blockquote>\r\n<p><!-- \/wp:quote --> <!-- wp:paragraph --><\/p>\r\n<p>Kita juga dapat menampung function sebagai variable dengan sebuah bentuk function yang dinamakan Anonymous Function.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var fungsiPerkalian = function(angkaPertama, angkaKedua) {\r\n  return angkaPertama * angkaKedua\r\n}\r\n \r\nconsole.log(fungsiPerkalian(2, 4))<\/pre>\r\n<h1>2. Loop&nbsp;<\/h1>\r\n<p>Loop\/Iteration adalah tindakan mengulang \/ merepetisi sebuah proses, dengan tujuan untuk mendapatkan deret hasil, atau dengan tujuan mendapatkan hasil tertentu dengan repetisi. Setiap proses repetisi ini disebut sebagai Iteration atau Looping.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk melakukan looping\/iteration, JavaScript menyediakan beberapa jenis iteration, yaitu:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">while-loop<\/li>\r\n<li class=\"\">for-loop<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:heading --><\/p>\r\n<h2 id=\"while-loop\"><strong>While-loop<\/strong><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>While-loop adalah iterasi yang akan mengulang sebuah proses dengan sebuah kondisi tertentu.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Berikut adalah cara atau struktur penulisan while-loop:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">while([Kondisi]) { \/\/ Kondisi yang menentukan apakah program akan melakukan iterasi. \r\n\/\/ Berupa boolean atau true\/false.\r\n  [Proses] \/\/ Merupakan proses yang akan dijalankan dalam satu iterasi\r\n}<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Pada while-loop, statement <code>while<\/code> akan mengambil sebuah nilai <code>true<\/code> atau <code>false<\/code> dari hasil kondisi yang diberikan. Apabila statement <code>while<\/code> mendapatkan nilai <code>true<\/code>, maka proses yang berada didalam curly bracket (<code>{ }<\/code>) akan dijalankan. Looping akan terus dilakukan selama kondisi while-loop masih <code>true<\/code>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk mencegah looping berjalan terus-menerus, dilakukan sebuah proses yang akan mengubah kondisi yang sedemikian rupa yang bertujuan untuk menghentikan looping dengan menghasilkan kondisi yang <code>false<\/code>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Looping While-loop 1<\/strong> Looping Angka 1-9 Sederhana<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var flag = 1;\r\nwhile(flag &lt; 10) { \/\/ Loop akan terus berjalan selama nilai flag masih dibawah 10\r\n  console.log('Iterasi ke-' + flag); \/\/ Menampilkan nilai flag pada iterasi tertentu\r\n  flag++; \/\/ Mengubah nilai flag dengan menambahkan 1\r\n}<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu bisa mencoba kode di atas <a href=\"https:\/\/jsbin.com\/pahure\/1\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Looping While-loop 2<\/strong> Looping Mengembalikan Angka Total<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var deret = 5;\r\nvar jumlah = 0;\r\nwhile(deret &gt; 0) { \/\/ Loop akan terus berjalan selama nilai deret masih di atas 0\r\n  jumlah += deret; \/\/ Menambahkan nilai variable jumlah dengan angka deret\r\n  deret--; \/\/ Mengubah nilai deret dengan mengurangi 1\r\n  console.log('Jumlah saat ini: ' + jumlah)\r\n}\r\n \r\nconsole.log(jumlah);<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu bisa mencoba kode di atas <a href=\"https:\/\/jsbin.com\/nolocam\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"for-loop\">For-loop<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>For-loop adalah bentuk lain dari iterasi, dimana statement <code>for<\/code> menjadi kontrol atas loop yang dilakukan. Hal ini yang menjadi pembeda antara for-loop dengan while-loop.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Berikut adalah cara atau struktur penulisan for-loop:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">for([Inisialisasi], [Kondisi], [Incremental\/Decremental]) {\r\n  [Proses] \/\/ Merupakan proses yang akan dijalankan dalam satu iterasi\r\n} <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Pada for-loop, statement <code>for<\/code> akan menampung tiga parameter, yaitu sebut saja inisialisasi, kondisi, dan incremental\/decremental. Ketiga parameter ini akan menjadi kontrol kapan loop ini harus berhenti. Pada parameter pertama, yaitu inisialisasi, sebuah variable diberikan nilai awal atau default. Pada parameter kedua, yaitu kondisi, for-loop akan terus berjalan selama kondisi ini masih terpenuhi, dengan kata lain, mengandung nilai <code>true<\/code>. Pada parameter kedua, yaitu incremental\/decremental, variabel yang menjadi kontrol terhadap loop ini akan diubah nilainya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p><em>Best Practice:<\/em> Walaupun memang for-loop dapat mengubah kondisi di dalam proses, namun best practice dari penggunaan for-loop adalah seluruh kendali atau kontrol dari looping ditentukan oleh variable yang diinisialisasi, di increment\/decrement, dan juga kondisi for-loop pun menggunakan variable tersebut.<\/p>\r\n<\/blockquote>\r\n<p><!-- \/wp:quote --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk memudahkan kamu mendapatkan gambaran jelas tentang penggunaan for-loop, mari kita gunakan kedua contoh while-loop dan kita tulis ulang dalam bentuk for-loop.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Looping For-loop 1<\/strong> Looping Angka 1-9 Sederhana<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">for(var angka = 1; angka &lt; 10; angka++) {\r\n  console.log('Iterasi ke-' + angka);\r\n} <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu bisa mencoba kode di atas <a href=\"https:\/\/jsbin.com\/dijukel\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Looping For-loop 2<\/strong> Looping Mengembalikan Angka Total<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var jumlah = 0;\r\nfor(var deret = 5; deret &gt; 0; deret--) {\r\n  jumlah += deret;\r\n  console.log('Jumlah saat ini: ' + jumlah);\r\n}\r\n \r\nconsole.log('Jumlah terakhir: ' + jumlah);<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu bisa mencoba kode di atas <a href=\"https:\/\/jsbin.com\/xukega\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Looping For-loop 3<\/strong> Looping Dengan Increment dan Decrement Lebih dari 1<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">for(var deret = 0; deret &lt; 10; deret += 2) {\r\n  console.log('Iterasi dengan Increment counter 2: ' + deret);\r\n}\r\n \r\nconsole.log('-------------------------------');\r\n \r\nfor(var deret = 15; deret &gt; 0; deret -= 3) {\r\n  console.log('Iterasi dengan Decrement counter : ' + deret);\r\n} <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu bisa mencoba kode di atas di repl.it.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4><strong>Waspadai Infinite Looping!<\/strong><\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Dengan sengaja atau tidak sengaja, kode kamu mungkin dapat menghasilkan infinite looping, atau looping yang tidak akan pernah berhenti. Bila ini terjadi, segera periksa statement kondisi kamu.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var flag = 1;\r\nwhile(flag &lt; 10) { \/\/ Loop akan terus berjalan, karena nilai flag tidak pernah berubah\r\n  console.log('Iterasi ke-' + flag);\r\n} <\/pre>\r\n<h2>Tutorial Video<\/h2>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/umdsc4ju6Yg\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/hg-ADb_gaVE\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/_QOsjybWxdc\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/nlCkPO8eOVg\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<pre class=\"wp-block-preformatted\">&nbsp;<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Sumber:&nbsp;<\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-first-time.md#loopiteration\" target=\"_blank\" rel=\"noreferrer noopener\">loop: github hacktiv8 phase 0 materials<\/a><\/li>\r\n<li><a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-first-time.md#functionmethod\" target=\"_blank\" rel=\"noopener\">function: github hacktiv8 phase0 materials<\/a><\/li>\r\n<\/ul>\r\n<\/blockquote>\r\n<p><!-- \/wp:quote --><\/p>","waktu_publish":"2021-07-14 08:00:00","status_publish":"publish","urutan":7,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:41:25","updated_at":"2021-07-11 09:04:03","waktu_publish_formatted":" Rabu, 14 Juli 2021. 08:00:00 WIB."},{"id":599,"uuid":"9bfbd6e9-c1aa-4144-8de6-67aa1b93a57b","author_user_id":8089,"materi_section_id":172,"judul":"Hari 4 - Array","permalink":"hari-4-array","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Array adalah kumpulan atau tumpukan berbagai data. Cara menuliskan array yaitu dengan kurung siku (<code>[]<\/code>) dan elemen-elemen nya dipisah menggunakan tanda koma (<code>,<\/code>). Setiap elemen dari array memiliki indeks yang dimulai dari 0, 1, 2, dst. Kita dapat memanipulasi array dengan berbagai cara seperti menambahkan dan mengeluarkan elemen dalam array, menggabungkan array, atau bahkan menghapus seluruh elemen Array nya. Kita bisa memasukkan beberapa tipe data yang berbeda ke dalam Array bahkan memasukkan Array ke dalam Array.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Array juga memiliki property <code>.length<\/code> seperti pada string yang berarti panjang dari sebuah array.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var hobbies = [\"coding\", \"cycling\", \"climbing\", \"skateboarding\"] \r\nconsole.log(hobbies) \/\/ [ 'coding', 'cycling', 'climbing', 'skateboarding' ]\r\nconsole.log(hobbies.length) \/\/ 4 \r\n \r\nconsole.log(hobbies[0]) \/\/ coding\r\nconsole.log(hobbies[2]) \/\/ climbing\r\n\/\/ Mengakses elemen terakhir dari array\r\nconsole.log(hobbies[hobbies.length -1]) \/\/ skateboarding<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2>Metode Array<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Berikut ini adalah beberapa metode atau built-in functions yang dimiliki oleh tipe data array:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">push: menambah 1 nilai ke array ke index paling belakang<\/li>\r\n<li class=\"\">pop: menghapus 1 nilai dari array index paling belakang<\/li>\r\n<li class=\"\">unshift: menambah 1 nilai ke array index paling depan (index 0)<\/li>\r\n<li class=\"\">shift: menghapus 1 nilai dari array index paling depan (index 0)<\/li>\r\n<li class=\"\">join: menggabungkan seluruh element array menjadi sebuah string dan mengambil parameter sebagai simbol penyambung antar elemen<\/li>\r\n<li class=\"\">sort: mengurutkan elemen di dalam array sesuai alphabet<\/li>\r\n<li class=\"\">slice: mengambil beberapa lapis data<\/li>\r\n<li class=\"\">splice: mengubah nilai array dengan menghapus dan\/atau menambah nilai baru ke array<\/li>\r\n<li class=\"\">split: memecah string dan mengembalikan array sesuai dengan separator \/ pemisah yang didefinisikan<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Cara menggunakan metode array adalah dengan menggunakan tanda dot (<code>.<\/code>) contohnya sbb:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var feeling = [\"dag\", \"dig\"]\r\nfeeling.push(\"dug\") \/\/ menambahkan nilai \"dug\" ke index paling belakang\r\nfeeling.pop() \/\/ menghapus nilai pada elemen terakhir array<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Beberapa metode array ada yang mengembalikan nilai array lama yang sudah diperbarui (array lama di-update) dengan metode tersebut , dan ada pula metode array yang mengembalikan sebuah array baru dan tidak mengubah data pada array yang lama (array baru yang serupa dengan array lama). Sifat seperti ini disebut mutable atau immutable.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.push()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p><em>Push <\/em>adalah metode array untuk menambahkan nilai di belakang elemen terakhir di array. metode push menerima sebuah parameter yaitu nilai yang ingin kita tambahkan ke dalam array.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2]\r\nnumbers.push(3)\r\nconsole.log(numbers) \/\/ [0, 1, 2, 3]\r\n\/\/ Bisa juga memasukkan lebih dari satu nilai menggunakan metode push\r\nnumbers.push(4, 5)\r\nconsole.log(numbers) \/\/ [0, 1, 2, 3, 4, 5] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.pop()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pop adalah kebalikan dari push yaitu menghapus nilai elemen paling terakhir dari sebuah array. metode Pop tidak menerima parameter apapun sehingga metode pop hanya bisa mengeluarkan satu elemen saja yaitu yang paling terakhir dari sebuah array.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2, 3, 4, 5]\r\nnumbers.pop() \r\nconsole.log(numbers) \/\/ [0, 1, 2, 3, 4] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.unshift()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Unshift yaitu menambahkan nilai pada index ke-0 sehingga elemen-elemen sebelumnya bergeser.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2, 3]\r\nnumbers.unshift(-1) \r\nconsole.log(numbers) \/\/ [-1, 0, 1, 2, 3]<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.shift()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Shift kebalikan dari unshift yaitu menghapus nilai pada elemen terdepan dari sebuah array. metode Shift tidak menerima parameter apapun.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [ 0, 1, 2, 3]\r\nnumbers.shift()\r\nconsole.log(numbers) \/\/ [1, 2, 3] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.sort()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Sort adalah metode untuk mengurutkan nilai pada array. Secara otomatis, sort akan mengurutkan secara ascending (dari rendah ke tinggi) dan diurutkan berdasarkan unicode dari karakter. Urutan unicode artinya ada karakter yang secara nilai lebih besar dibandingkan dengan karakter yang lainnya. contohnya adalah karakter \"b\" akan lebih besar daripada \"a\", karakter \"c\" lebih besar daripada karakter \"b\", dst.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var animals = [\"kera\", \"gajah\", \"musang\"] \r\nanimals.sort()\r\nconsole.log(animals) \/\/ [\"gajah\", \"kera\", \"musang\"]<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Hal ini akan bermasalah jika kita ingin mengurutkan angka. Secara otomatis metode sort akan membandingkan karakter terdepan dari sebuah angka.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [12, 1, 3]\r\nnumbers.sort()\r\nconsole.log(numbers) \/\/ [1, 12, 3] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk mengatasi masalah tersebut, metode sort dapat menerima sebuah parameter berupa function untuk membandingkan value dari elemen yang akan diurutkan. contohnya sebagai berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [12, 1, 3]\r\n\/\/ Mengurutkan secara Ascending\r\nnumbers.sort(function (value1, value2) { return value1 - value2 } ) ; \r\nconsole.log(numbers) \/\/ [1, 3, 12]\r\n \r\n\/\/ Mengurutkan secara Descending\r\nnumbers.sort(function (value1, value2) { return value2 - value1 } ) ;\r\nconsole.log(numbers) \/\/ [12, 3, 1] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.slice()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>slice adalah metode untuk mengambil irisan dari sebuah array. Metode slice bisa menerima satu atau dua parameter. Parameter pertama adalah nomer index pertama yang akan kita ambil sebagai irisan, sedangkan parameter kedua adalah nomer index terakhir yang ingin kita ambil sebagai irisan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var angka = [0, 1, 2, 3]\r\nvar irisan1 = angka.slice(1,3) \r\nconsole.log(irisan1) \/\/[1, 2, 3]\r\nvar irisan2 = angka.slice(0,2)\r\nconsole.log(irisan2) \/\/[0, 1, 2] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Jika parameter kedua tidak diisi maka secara otomatis slice akan mengiris array dari indeks di paramer pertama sampai ke indeks terakhir array tersebut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var angka = [0, 1, 2, 3]\r\nvar irisan3 = angka.slice(2)\r\nconsole.log(irisan3) \/\/ [2, 3] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:html --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Jika diperhatikan, metode slice tidak mengubah Array yang awal dan hasil irisan array dapat kita tampung kembali ke variable yang baru. Oleh karena itu metode Slice juga berfungsi untuk membuat salinan atau \"shallow copy\" dari sebuah array. Cara membuat shallow copy dengan metode slice yaitu dengan tanpa memberikan parameter apapun pada metode slice. <br \/><br \/><\/p>\r\n<pre class=\"wp-block-preformatted\"><code>var angka = [0, 1, 2, 3]<\/code><br \/><code>var salinAngka = angka.slice()<\/code><br \/><code>console.log(salingAngka) \/\/ [0, 1, 2, 3]<\/code><\/pre>\r\n<\/blockquote>\r\n<p><!-- \/wp:html --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.splice()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Splice yaitu metode untuk menghapus dan\/atau menambahkan nilai elemen pada array. Metode splice bisa menerima parameter sebanyak dua atau lebih parameter. Jika ingin menggunakan splice untuk menghapus elemen pada index tertentu maka digunakan 2 paramater. Jika ingin menggunakan splice untuk menambahkan elemen pada index tertentu maka digunakan tiga parameter.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">array.splice([IndexMulai], [JumlahNilaiYangDihapus], [NilaiYangDitambahkan1], [NilaiYangDitambahkan2], ...);<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Berikut contoh penggunaan metode <code>splice()<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var fruits = [ \"banana\", \"orange\", \"grape\"]\r\nfruits.splice(1, 0, \"watermelon\") \r\nconsole.log(fruits) \/\/ [ \"banana\", \"watermelon\", \"orange\", \"grape\"]<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh di atas berarti kita mulai mengubah array fruits dari indeks no 1, dan melakukan penghapusan nilai sebanyak 0 (yang berarti tidak menghapus apapun), dan menambahkan nilai \"watermelon\" pada indeks tersebut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var fruits = [ \"banana\", \"orange\", \"grape\"]\r\nfruits.splice(0, 2)\r\nconsole.log(fruits) \/\/ [\"grape\"]<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh di atas berarti kita mulai mengubah array fruits dari indeks ke-0 dan melakukan penghapusan data sebanyak 2 elemen.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.split()<\/strong><\/code> dan <code><strong>.join()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Metode split yaitu memecah sebuah string sehingga menjadi sebuah array. Split menerima sebuah parameter berupa karakter yang menjadi separator untuk memecah string.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var biodata = \"name:john,doe\" \r\nvar name = biodata.split(\":\")\r\nconsole.log(name) \/\/ [ \"name\", \"john,doe\"] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Metode join yaitu kebalikan dari split yaitu mengubah sebuah array menjadi string dengan cara menggabungkan (join) seluruh elemen array menjadi satu dengan sebuah karakter pemisah yang dikirim melalui parameter. contohnya sebagai berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var title = [\"my\", \"first\", \"experience\", \"as\", \"programmer\"] \r\nvar slug = title.join(\"-\")\r\nconsole.log(slug) \/\/ \"my-first-experience-as-programmer\"<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2>Multidimensional Array<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Multidimensional array atau array multidimensi adalah array yang berisi array di dalamnya. Jumlah dimensi bergantung seberapa dalam array tersebut memiliki array di dalamnya. Cara akses nilai dari array multidimensi sama seperti array satu dimensi seperti biasa namun jumlah indeksnya terdapat sebanyak dimensi nya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\"> var arrayMulti = [ \r\n    [1, 2, 3],\r\n    [4, 5, 6],\r\n    [7, 8, 9]\r\n]\r\n\/\/ Maka sebagai gambaran, indeks dari array tersebut adalah \r\n\/*\r\n    [\r\n        [(0,0), (0,1), (0,2)],\r\n        [(1,0), (1,1), (1,2)],\r\n        [(2,0), (2,1), (2,2)]\r\n    ] \r\n*\/\r\nconsole.log(arrayMulti[0][0]) \/\/ 1 \r\nconsole.log(arrayMulti[1][0]) \/\/ 4\r\nconsole.log(arrayMulti[2][1]) \/\/ 8    <\/pre>\r\n<h2>Tutorial<\/h2>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/LjQ7VjtxddU\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/ayQ1teFycw8\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><!-- \/wp:preformatted --><\/p>","waktu_publish":"2021-07-15 09:00:00","status_publish":"publish","urutan":8,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:41:52","updated_at":"2021-07-11 09:04:35","waktu_publish_formatted":" Kamis, 15 Juli 2021. 09:00:00 WIB."},{"id":600,"uuid":"8dc6a8db-831c-491d-a4e7-9d8f56911a7f","author_user_id":8089,"materi_section_id":172,"judul":"Hari 5 - Object Literal","permalink":"hari-5-object-literal","konten":"<p><!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Mempelajari tipe data Object pada Javascript<\/p>\r\n<\/blockquote>\r\n<p><!-- \/wp:quote --> <!-- wp:paragraph --><\/p>\r\n<p>Object adalah kumpulan data tidak berurut yang berisikan pasangan property (key) dan value . Jika kita ingat pada tipe data Array yang merupakan kumpulan data yang berurut sesuai indeks, sedangkan Object mirip dengan Array tapi kini kita memberikan property atau key sendiri . Property atau key pada Object itu dapat kita umpamakan indeks pada Array. Bedanya indeks pada Array langsung diberikan secara otomatis mulai dari indeks 0 dst, sedangkan property pada Object dapat kita namai sesuka kita.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Bandingkan kedua variable berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var personArr = [\"John\", \"Doe\", \"male\", 27]\r\nvar personObj = {\r\n    firstName : \"John\",\r\n    lastName: \"Doe\",\r\n    gender: \"male\",\r\n    age: 27\r\n} <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>contoh di atas kita ingin mendeklarasikan variable person dalam Array dan Object. Jika pada Array kita mengakses nama depan dengan cara <code>personArr[0]<\/code> , sedangkan jika kita ingin mengakses nama depan pada Object kita dapat melakukannya dengan <code>personObj.firstName<\/code> . Keduanya memberikan value yang sama namun pemanggilan value dengan cara Object lebih kita senangi karena kita bisa mendefinisikan bahwa seseorang \"Person\" itu pasti memiliki nama depan (<code>firstName<\/code>), nama belakang (<code>lastName<\/code>), (<code>gender<\/code>), dan umur (<code>age<\/code>).<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var personArr = [\"John\", \"Doe\", \"male\", 27]\r\nvar personObj = {\r\n    firstName : \"John\",\r\n    lastName: \"Doe\",\r\n    gender: \"male\",\r\n    age: 27\r\n}\r\n \r\nconsole.log(personArr[0]) \/\/ John\r\nconsole.log(personObj.firstName) \/\/ John <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2>Deklarasi Object<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Cara untuk mendeklarasi sebuah object yaitu dengan memberikan curly brackets (<code>{}<\/code>) lalu buat pasangan <code>key: value<\/code> di dalamnya. Jika ingin menambahkan pasangan key dan value maka dipisah dengan tanda koma. contohnya:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var object = {\r\n    [key]: [value]\r\n}\r\n \r\nvar car = {\r\n    brand: \"Ferrari\",\r\n    type: \"Sports Car\",\r\n    price: 50000000\r\n    \"horse power\": 986\r\n}<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Jika diperhatikan pada contoh object <code>car<\/code> di atas terdapat key dengan nama \"<code>horse power<\/code>\" yang penulisannya berbeda dengan key yang lain. Hal ini karena jika nama key dari Object lebih dari satu kata atau dipisah dengan spasi kita bisa deklarasikan dengan memberikan tanda petik (<code>\"\"<\/code>).<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Cara lainnya untuk membuat object adalah dengan mendeklarasikan terlebih dahulu variable sebagai Object kosong lalu melakukan assign property dan valuenya ke varible tersebut. Contohnya sebagai berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var car2 = {}\r\n\/\/ meng-assign key:value dari object car2\r\ncar2.brand = \"Lamborghini\"\r\ncar2.brand = \"Sports Car\"\r\ncar2.price = 100000000 <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Jika ingin memberikan nama key yang lebih dari satu kata dan dipisah dengan spasi maka kita dapat menulis key nya dengan menggunakan tanda petik (<code>\"\"<\/code>) di dalam kurung siku (<code>[]<\/code>).<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">car2[\"horse power\"] = 730 <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Value yang kita assign pada object tidak terbatas hanya string atau number saja tapi bisa juga Array, boolean, bahkan Object lagi di dalamnya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"mengakses-nilai-pada-object\">Mengakses Nilai pada Object<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk mengakses nilai pada Object bisa dengan cara memanggil object nya lalu tanda titik (dot) dan nama property\/key nya. contohnya seperti berikut<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var motorcycle1 = {    \r\n    brand: \"Handa\",\r\n    type: \"CUB\",\r\n    price: 1000\r\n}\r\nconsole.log(motorcycle1.brand) \/\/ \"Handa\"\r\nconsole.log(motorcycle1.type) \/\/ \"CUB\"<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Cara lain untuk mengakses nilai, yaitu cara yang mirip dengan mengakses nilai suatu elemen pada Array, menggunakan tanda kurung siku, dan di dalam kurung siku tersebut kita sebutkan nama property nya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">console.log(motorcycle1[\"price\"])<br \/><br \/><\/pre>\r\n<h2>Tutorial<\/h2>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/jCWeGM815fk\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><!-- \/wp:preformatted --><\/p>","waktu_publish":"2021-07-16 09:00:00","status_publish":"publish","urutan":9,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:42:10","updated_at":"2021-07-11 09:04:53","waktu_publish_formatted":" Jumat, 16 Juli 2021. 09:00:00 WIB."}]},{"id":173,"uuid":"3e7ca311-8adf-4e04-ac8e-0a813e9f9570","materi_id":20,"nama":"Tugas Pekan 1","permalink":"tugas-pekan-1","urutan":3,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 09:27:51","updated_at":null,"posting":[{"id":601,"uuid":"4ff35795-f886-4fa0-a1e2-2bc43c913894","author_user_id":8089,"materi_section_id":173,"judul":"Hari 1 - Berlatih Git","permalink":"hari-1-berlatih-git","konten":"<p><!-- wp:heading --><\/p>\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"1-buat-repository-project-baru\"><strong>1. Buat repository project baru<\/strong><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah satu repository project baru dengan nama project &ldquo;<strong>IM Sanbercode Nodejs Adonis Backend<\/strong>&ldquo;, pastikan visibility level di set &ldquo;<strong>Private<\/strong>&ldquo;, dan centang pada bagian &ldquo;<strong>Initialize repository with a README<\/strong>&ldquo;.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":15064,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-15064\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/create-repo-tugas-1024x495.png\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:heading --><\/p>\r\n<h2 id=\"2-buat-branch-baru\"><strong>2. Invite <\/strong>T<strong>rainer<\/strong><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>invite trainer pada repository project yang telah di buat dengan menuju menu members<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":15065,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-15065\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/invite-trainer-sebagai-member-repo-1024x468.png\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>lalu pada tab invite member isi input &ldquo;<strong>GitLab member or Email address<\/strong>&rdquo; dengan&nbsp;<strong>@mabdvh<\/strong>&nbsp;lalu pada choose &ldquo;<strong>Choose a Role Permission<\/strong>&rdquo; pilih maintainer dan klik invite.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":15066,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-15066\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/invite-trainer--1024x385.png\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>bagi kamu yang menggunakan<strong> Github&nbsp;<\/strong>bisa disesuaikan dan invite&nbsp;<strong>muhamadabduh <\/strong>sebagai collaborator<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"2-buat-branch-baru\"><strong>3. Clone repository<\/strong><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Langkah selanjutnya yaitu melakukan clone terhadap repository project yang sudah dibuat di Gitlab. Berikut langkah-langkah untuk melakukan clone:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li>Buka halaman repositori project yang ingin kita clone:<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:image {\"id\":15067,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-15067\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/link-clone-https-1024x577.png\" alt=\"\" \/>\r\n<figcaption>link \"Clone with HTTPS\", untuk copy dapat dilakukan dengan mengeklik tombol berlambang clipboard <img class=\"wp-image-15068\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/iconfinder_icon-clipboard_211649.png\" alt=\"\" width=\"21\" height=\"21\" \/>.<\/figcaption>\r\n<\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>2. copy text yang ada di dalam Clone With HTTPS<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>3. Buka terminal\/CMD kalian, pastikan posisi terminal dibuka di folder atau direktori yang ingin kalian gunakan untuk menyimpan repositori project yang akan diclone. Misal di C:\/Users\/John\/Documents atau di drive D: atau dimanapun yang kalian inginkan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>4. jalankan perintah berikut di terminal, sesuaikan <strong><code>link_https<\/code><\/strong> dengan link yang kalian copy dari langkah ke 2.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>git clone <strong>link_https<\/strong><\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>5. Pindah ke folder hasil clone dengan cara<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>cd <strong>nama_folder_hasil_clone<\/strong><\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:heading --><\/p>\r\n<h2 id=\"3-menambahkan-file-baru\"><strong>4. Commit Pertama<\/strong><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buat folder baru dengan&nbsp; &ldquo;Tugas-1&rdquo; lalu tambahkan file &ldquo;data_peserta.txt&rdquo;. Kurang lebih struktur foldernya seperti ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>im-sanbercode-nodejs-adonis-backend\/\r\n    Tugas-1\/\r\n      data_peserta.txt<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Isi file &ldquo;data_peserta.txt&rdquo; tersebut dengan nama dan email Anda saat mendaftar, akun gitlab, serta akun telegram pada grup diskusi, contoh:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">Data Peserta Sanbercode Bootcamp Nodejs Adonis Backend\r\n1. Nama: \r\n2. Email: \r\n3. Sistem Operasi yang digunakan:\r\n4. Akun Gitlab: \r\n5. Akun Telegram: \r\n<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>setelah mengisi \"data_peserta.txt\", lakukanlah git add untuk menambahkan perubahan yang sudah kita buat ke dalam satu \"commit\".<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code><strong>g<\/strong>it add .<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>lalu berikan commit disertai dengan message seperti berikut<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>git commit -m \"commit pertama : Mengisi data peserta &lt;nama_kalian&gt;\"<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>sesuaikan bagian <code>&lt;nama_kalian&gt;<\/code> dengan nama masing-masing.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2>5. Commit Kedua<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Masih di dalam folder Tugas-1, buatlah file baru dengan nama motivasi.txt. Tulislah di dalam file tersebut satu paragraf tentang motivasi kalian mengikuti bootcamp Nodejs Adonis dan harapan kalian setelah mengikuti bootcamp ini.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Jika sudah selesai, lakukan kembali langkah-langkah untuk menambahkan perubahan dengan <code>git add <\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>git add .<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>lalu berikan commit disertai dengan message seperti berikut<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>git commit -m \"commit kedua: menambahkan motivasi &lt;nama_kalian&gt;<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>sesuaikanlah &lt;nama_kalian&gt; dengan nama masing-masing.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"5-kumpulkan-tugas\">6. Kumpulkan tugas<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit kedua yang telah dibuat dari halaman repository project gitlab ke akun Anda di&nbsp;<a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-nodejs-backend-development-with-adonis\/pendahuluan\/pengumpulan-tugas\/\" target=\"_blank\" rel=\"noopener\">teknis pengumpulan tugas<\/a><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3 id=\"tambahan\"><strong>Tambahan<\/strong><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>bagi yang ingin mengerjakan selain di&nbsp;<strong>gitlab<\/strong>, di persilahkan menggunakan&nbsp;<strong>github<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-07-12 09:00:00","status_publish":"publish","urutan":1,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:44:31","updated_at":"2021-07-11 09:05:11","waktu_publish_formatted":" Senin, 12 Juli 2021. 09:00:00 WIB."},{"id":602,"uuid":"69c1bc26-32d8-4b6a-9978-a956193f85c3","author_user_id":8089,"materi_section_id":173,"judul":"Hari 2 - Berlatih Variabel, String, dan Control Flow","permalink":"hari-2-berlatih-variabel-string-dan-control-flow","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Pada tugas kali ini buatlah folder baru (Tugas 2 - String Conditional) yang berisikan dua folder dengan nama <strong>string<\/strong>&nbsp;(untuk Tugas String) dan <strong>conditional <\/strong>(untuk Tugas Conditional). Simpan kedua folder tugas tersebut di dalam folder repository project yang dikerjakan pada batch ini.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"a-string-challenges\">A. Tugas String<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li><strong>Soal No. 1 (Membuat kalimat)<\/strong>, <br \/>Terdapat kumpulan variable dengan data string sebagai berikut\r\n<pre class=\"wp-block-preformatted\">var word = 'JavaScript'; <br \/>var second = 'is'; <br \/>var third = 'awesome'; <br \/>var fourth = 'and'; <br \/>var fifth = 'I'; <br \/>var sixth = 'love'; <br \/>var seventh = 'it!';<\/pre>\r\nBuatlah agar kata-kata di atas menjadi satu kalimat . Output:\r\n<pre class=\"wp-block-preformatted\">JavaScript is awesome and I love it! <\/pre>\r\n<\/li>\r\n<li><strong>Soal No.2 Mengurai kalimat (Akses karakter dalam string)<\/strong>, <br \/>Terdapat satu kalimat seperti berikut:\r\n<pre class=\"wp-block-preformatted\">var sentence = \"I am going to be React Native Developer\"; <br \/><br \/>var exampleFirstWord = sentence[0] ; <br \/>var exampleSecondWord = sentence[2] + sentence[3]  ; <br \/>var thirdWord; \/\/ lakukan sendiri <br \/>var fourthWord; \/\/ lakukan sendiri <br \/>var fifthWord; \/\/ lakukan sendiri <br \/>var sixthWord; \/\/ lakukan sendiri <br \/>var seventhWord; \/\/ lakukan sendiri <br \/>var eighthWord; \/\/ lakukan sendiri <br \/><br \/>console.log('First Word: ' + exampleFirstWord); <br \/>console.log('Second Word: ' + secondWord); <br \/>console.log('Third Word: ' + thirdWord); <br \/>console.log('Fourth Word: ' + fourthWord); <br \/>console.log('Fifth Word: ' + fifthWord); <br \/>console.log('Sixth Word: ' + sixthWord); <br \/>console.log('Seventh Word: ' + seventhWord); <br \/>console.log('Eighth Word: ' + eighthWord)<\/pre>\r\nBuat menjadi Output berikut:\r\n<pre class=\"wp-block-preformatted\">First word: I <br \/>Second word: am <br \/>Third word: going <br \/>Fourth word: to <br \/>Fifth word: be <br \/>Sixth word: React <br \/>Seventh word: Native <br \/>Eighth word: Developer<\/pre>\r\n<\/li>\r\n<li><strong>Soal No. 3 Mengurai Kalimat (Substring) <\/strong>\r\n<pre class=\"wp-block-preformatted\">var sentence2 = 'wow JavaScript is so cool'; <br \/><br \/>var exampleFirstWord2 = sentence2.substring(0, 3); <br \/>var secondWord2; \/\/ do your own! <br \/>var thirdWord2; \/\/ do your own! <br \/>var fourthWord2; \/\/ do your own! <br \/>var fifthWord2; \/\/ do your own! <br \/><br \/>console.log('First Word: ' + exampleFirstWord2); <br \/>console.log('Second Word: ' + secondWord2); <br \/>console.log('Third Word: ' + thirdWord2); <br \/>console.log('Fourth Word: ' + fourthWord2); <br \/>console.log('Fifth Word: ' + fifthWord2);<\/pre>\r\nUraikan lah kalimat <code>sentence2<\/code> di atas menjadi kata-kata penyusunnya. Output:\r\n<pre class=\"wp-block-preformatted\">First Word: wow <br \/>Second Word: JavaScript <br \/>Third Word: is <br \/>Fourth Word: so <br \/>Fifth Word: cool <\/pre>\r\n<\/li>\r\n<li><strong>Soal No. 4 Mengurai Kalimat dan Menentukan Panjang String<\/strong>\r\n<pre class=\"wp-block-preformatted\">var sentence3 = 'wow JavaScript is so cool'; <br \/><br \/>var exampleFirstWord3 = sentence3.substring(0, 3); <br \/>var secondWord3; \/\/ do your own! <br \/>var thirdWord3; \/\/ do your own! <br \/>var fourthWord3; \/\/ do your own! <br \/>var fifthWord3; \/\/ do your own! <br \/><br \/>var firstWordLength = exampleFirstWord3.length  <br \/>\/\/ lanjutkan buat variable lagi di bawah ini <br \/>console.log('First Word: ' + exampleFirstWord3 + ', with length: ' + firstWordLength); <br \/>console.log('Second Word: ' + secondWord3); <br \/>console.log('Third Word: ' + thirdWord3); <br \/>console.log('Fourth Word: ' + fourthWord3); <br \/>console.log('Fifth Word: ' + fifthWord3); <\/pre>\r\nOutput:\r\n<pre class=\"wp-block-preformatted\">First Word: wow, with length: 3 <br \/>Second Word: JavaScript, with length: 10 <br \/>Third Word: is, with length: 2 <br \/>Fourth Word: so, with length: 2 <br \/>Fifth Word: cool, with length: 4<\/pre>\r\n<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:heading --><\/p>\r\n<h2 id=\"b-conditional-challenges\">B. Tugas Conditional<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>If-else<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Petunjuk : Kita akan memasuki dunia game werewolf. Pada saat akan bermain kamu diminta memasukkan nama dan peran . Untuk memulai game pemain harus memasukkan variable <code>nama<\/code> dan <code>peran<\/code>. Jika pemain tidak memasukkan nama maka game akan mengeluarkan warning \"<code>Nama harus diisi!<\/code>\". Jika pemain memasukkan nama tapi tidak memasukkan peran maka game akan mengeluarkan warning \"<code>Pilih Peranmu untuk memulai game<\/code>\". Terdapat tiga peran yaitu penyihir, guard, dan werewolf. Tugas kamu adalah membuat program untuk mengecek input dari pemain dan hasil response dari game sesuai input yang dikirimkan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:html --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Petunjuk:<\/p>\r\n<ul>\r\n<li>Nama dan peran diisi manual dan bisa diisi apa saja<\/li>\r\n<li>Nama tidak perlu dicek persis sesuai dengan input\/output<\/li>\r\n<li>Buat kondisi if-else untuk masing-masing peran<\/li>\r\n<\/ul>\r\n<\/blockquote>\r\n<p><!-- \/wp:html --> <!-- wp:paragraph --><\/p>\r\n<p>Input:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var nama = \"John\"\r\nvar peran = \"\"<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Output:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Output untuk Input nama = '' dan peran = ''\r\n\"Nama harus diisi!\"\r\n \r\n\/\/Output untuk Input nama = 'John' dan peran = ''\r\n\"Halo John, Pilih peranmu untuk memulai game!\"\r\n \r\n\/\/Output untuk Input nama = 'Jane' dan peran 'Penyihir'\r\n\"Selamat datang di Dunia Werewolf, Jane\"\r\n\"Halo Penyihir Jane, kamu dapat melihat siapa yang menjadi werewolf!\"\r\n \r\n\/\/Output untuk Input nama = 'Jenita' dan peran 'Guard'\r\n\"Selamat datang di Dunia Werewolf, Jenita\"\r\n\"Halo Guard Jenita, kamu akan membantu melindungi temanmu dari serangan werewolf.\"\r\n \r\n\/\/Output untuk Input nama = 'Junaedi' dan peran 'Werewolf'\r\n\"Selamat datang di Dunia Werewolf, Junaedi\"\r\n\"Halo Werewolf Junaedi, Kamu akan memakan mangsa setiap malam!\" <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Switch Case<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu akan diberikan sebuah tanggal dalam tiga variabel, yaitu <code>hari<\/code>, <code>bulan<\/code>, dan <code>tahun<\/code>. Disini kamu diminta untuk membuat format tanggal. Misal tanggal yang diberikan adalah hari 1, bulan 5, dan tahun 1945. Maka, output yang harus kamu proses adalah menjadi 1 Mei 1945.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Gunakan <code>switch case<\/code> untuk kasus ini!<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var hari = 21; \r\nvar bulan = 1; \r\nvar tahun = 1945;\r\n\/\/  Maka hasil yang akan tampil di console adalah: '21 Januari 1945'; <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Skeleton Code \/ Code yang dicontohkan yang perlu diikuti dan dimodifikasi<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var tanggal; \/\/ assign nilai variabel tanggal disini! (dengan angka antara 1 - 31)\r\nvar bulan; \/\/ assign nilai variabel bulan disini! (dengan angka antara 1 - 12)\r\nvar tahun; \/\/ assign nilai variabel tahun disini! (dengan angka antara 1900 - 2200)<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Jika sudah selesai, silahkan push (<code>git add<\/code>, <code>git commit<\/code>, dan <code>git push<\/code>) hasil pekerjaan kalianke repository Gitlab masing-masing (gunakan repository project Tugas 1). Jangan lupa submit link commit kalian ke sanbercode.com.<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-07-13 09:00:00","status_publish":"publish","urutan":2,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:46:31","updated_at":"2021-07-11 09:05:25","waktu_publish_formatted":" Selasa, 13 Juli 2021. 09:00:00 WIB."},{"id":603,"uuid":"04e8285e-f497-4eb3-ba06-2cbe9c00d737","author_user_id":8089,"materi_section_id":173,"judul":"Hari 3 - Berlatih Looping dan Functions","permalink":"hari-3-berlatih-looping-dan-functions","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Pada tugas kali ini buatlah folder baru (Tugas 3 - Looping dan Functions) yang berisikan folder dengan nama <strong>looping <\/strong>dan <strong>functions<\/strong>. Simpan kedua folder tugas tersebut di dalam folder repository project tugas harian.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2>1. Soal Functions<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>No. 1<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Tulislah sebuah function dengan nama teriak() yang mengembalikan nilai \"Halo Sanbers!\" yang kemudian dapat ditampilkan di console.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\"><code>\/*\r\n    Contoh Perintah &amp; output<br \/>    $ node functions teriak\r\n*\/\r\n\r\nconsole.log(teriak()) \/\/ \"Halo Sanbers!\" <\/code><\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>No. 2<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Tulislah sebuah function dengan nama<code> kalikan()<\/code> yang mengembalikan hasil perkalian dua parameter yang di kirim melalui process.argv<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\"><code>\/*\r\n    Contoh Perintah &amp; Output<\/code><br \/><code>    $ node functions kalikan 4 12<\/code><br \/><code>    48 \/\/ Output nya 4 x 12 = 48\r\n*\/\r\n\r\nvar hasilKali = kalikan(num1, num2)\r\nconsole.log(hasilKali) \/\/ 48<\/code><\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>No. 3<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Tulislah sebuah function dengan nama introduce() yang memproses paramater yang dikirim menjadi sebuah kalimat perkenalan seperti berikut: \"Nama saya [name], umur saya [age] tahun, alamat saya di [address], dan saya punya hobby yaitu [hobby]!\"<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\"><code>\/* \r\n    Contoh Perintah &amp; Output <\/code><br \/><code>    $ node function kenalan Agus 30 Gaming\r\n*\/\r\n \r\n \r\nvar perkenalan = introduce(name, age, address, hobby)\r\nconsole.log(perkenalan) \/\/ Menampilkan \"Nama saya Agus, umur saya 30 tahun, dan saya punya hobby yaitu Gaming!\" <\/code><\/pre>\r\n<h2>2. Soal Looping<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>No. 1 Looping <code>While <\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pada tugas ini kamu diminta untuk melakukan looping dalam JavaScript dengan menggunakan syntax <code>while<\/code>. Untuk membuat tantangan ini lebih menarik, kamu juga diminta untuk membuat suatu looping yang menghitung maju dan menghitung mundur. Jangan lupa tampilkan di console juga judul 'LOOPING PERTAMA' dan 'LOOPING KEDUA'.\"<\/p>\r\n<p>Perintah :<code> $ node looping while&nbsp;<\/code><\/p>\r\n<p>Output:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">LOOPING PERTAMA\r\n2 - I love coding\r\n4 - I love coding\r\n6 - I love coding\r\n8 - I love coding\r\n10 - I love coding\r\n12 - I love coding\r\n14 - I love coding\r\n16 - I love coding\r\n18 - I love coding\r\n20 - I love coding\r\nLOOPING KEDUA\r\n20 - I will become a mobile developer\r\n18 - I will become a mobile developer                                                                              \r\n16 - I will become a mobile developer\r\n14 - I will become a mobile developer\r\n12 - I will become a mobile developer\r\n10 - I will become a mobile developer\r\n8 - I will become a mobile developer\r\n6 - I will become a mobile developer\r\n4 - I will become a mobile developer\r\n2 - I will become a mobile developer<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>No. 2 Looping menggunakan <code>for<\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pada tugas ini kamu diminta untuk melakukan looping dalam JavaScript dengan menggunakan syntax <code>for<\/code>. Untuk membuat tantangan ini lebih menarik, kamu juga diminta untuk memenuhi syarat tertentu yaitu:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>SYARAT: <br \/>A. Jika angka ganjil maka tampilkan Santai <br \/>B. Jika angka genap maka tampilkan Berkualitas <br \/>C. Jika angka yang sedang ditampilkan adalah kelipatan 3 DAN angka ganjil maka tampilkan I Love Coding.<\/p>\r\n<p>Perintah : <code>$ node looping for&nbsp;<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">OUTPUT \r\n1 - Santai\r\n2 - Berkualitas\r\n3 - I Love Coding \r\n4 - Berkualitas\r\n5 - Santai\r\n6 - Berkualitas\r\n7 - Santai\r\n8 - Berkualitas\r\n9 - I Love Coding\r\n10 - Berkualitas\r\n11 - Santai\r\n12 - Berkualitas\r\n13 - Santai\r\n14 - Berkualitas\r\n15 - I Love Coding\r\n16 - Berkualitas\r\n17 - Santai\r\n18 - Berkualitas\r\n19 - Santai\r\n20 - Berkualitas<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>No. 3 Membuat Persegi Panjang #<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu diminta untuk menampilkan persegi dengan dimensi panjang x lebar dengan tanda pagar (#) dengan perulangan atau looping. Looping boleh menggunakan syntax apa pun (<code>while<\/code>, <code>for<\/code>, <code>do while<\/code>).<\/p>\r\n<p>Perintah : <code>$ node looping persegiPanjang &lt;panjang&gt; &lt;lebar&gt;<\/code><\/p>\r\n<p>Contoh Perintah : <code>$ node looping persegiPanjang 8 4&nbsp;<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">########\r\n########\r\n########\r\n######## <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>No. 4 Membuat Tangga<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kali ini kamu diminta untuk menampilkan sebuah segitiga sama sisi dengan tanda pagar (#) dengan panjang sisi sesuai parameter yang diberikan . Looping boleh menggunakan syntax apa pun (<code>while<\/code>, <code>for<\/code>, <code>do while<\/code>).<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Perintah : <code>$ node looping tangga &lt;sisi&gt;<\/code><\/p>\r\n<p>Contoh Perintah :<code> $ node looping tangga 7<\/code><\/p>\r\n<p>Output:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">#\r\n##\r\n###\r\n####\r\n#####\r\n######\r\n#######<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>No. 5 Membuat Papan Catur<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah suatu looping untuk menghasilkan sebuah papan catur dengan ukuran&nbsp; sisi yang ditentukan oleh parameter. Papan berwarna hitam memakai tanda pagar (#) sedangkan papan putih menggunakan spasi. Looping boleh menggunakan syntax apa pun (<code>while<\/code>, <code>for<\/code>, <code>do while<\/code>).<\/p>\r\n<p>Perintah :<code> $ node looping catur &lt;sisi&gt;<\/code><\/p>\r\n<p>Contoh Perintah :<code> $ node looping catur 8<\/code><code><\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\"> # # # #\r\n# # # # \r\n # # # #\r\n# # # # \r\n # # # #\r\n# # # # \r\n # # # #\r\n# # # # <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Jika sudah selesai dikerjakan, silahkan <em>push <\/em>hasil pekerjaan Anda ke repository Gitlab masing-masing (gunakan repository project yang digunakan Sepert Tugas 1). Jangan lupa submit link commit Anda ke sanbercode.com.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<pre class=\"wp-block-preformatted\">&nbsp;<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Jika sudah selesai dikerjakan, silahkan <em>push <\/em>hasil pekerjaan Anda ke <em>repository <\/em>Gitlab\/Github&nbsp; masing-masing (gunakan <em>repository project<\/em> yang sama yang digunakan Seperti Tugas 1). Jangan lupa <em>submit link commit<\/em> Anda ke sanbercode.com.<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-07-14 09:00:00","status_publish":"publish","urutan":3,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:47:30","updated_at":"2021-07-11 09:05:38","waktu_publish_formatted":" Rabu, 14 Juli 2021. 09:00:00 WIB."},{"id":604,"uuid":"cb3075b5-d1b1-4e1e-a64c-80f59a3c0777","author_user_id":8089,"materi_section_id":173,"judul":"Hari 4 - Berlatih Array","permalink":"hari-4-berlatih-array","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Pada tugas kali ini buatlah folder baru (Tugas 4 - Array) yang berisikan folder dengan nama <strong>array<\/strong> . Simpan folder tugas tersebut di dalam folder repository project yang dikerjakan untuk batch 23 ini.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2>Soal No. 1 (Range)<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah sebuah function dengan nama range() yang menerima dua parameter berupa number. Function mengembalikan sebuah array yang berisi angka-angka mulai dari angka parameter pertama hingga angka pada parameter kedua. Jika parameter pertama lebih besar dibandingkan parameter kedua maka angka-angka tersusun secara menurun (descending).<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>struktur fungsinya seperti berikut <code>range(startNum, finishNum) {} <\/code><br \/>Jika parameter pertama dan atau kedua tidak diisi maka function akan menghasilkan sebuah array kosong <code>[]<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\"><code>Perintah: node array range &lt;startNum&gt; &lt;finishNum&gt; \r\nContoh Perintah: <\/code><br \/><br \/><code>node array range 1 10 <\/code><br \/><code>Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<\/code><br \/><br \/><code>node array range 54 50 <\/code><br \/><code>Output : [54, 53, 52, 51, 50]<\/code><br \/><br \/><code>node array range 1<\/code><br \/><code>Output : []<\/code><br \/><br \/><code>node array range<\/code><br \/><code>Output: []<\/code><br \/><br \/><\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2>Soal No. 2 (Range with Step)<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pada soal kali ini kamu diminta membuat function rangeWithStep yang mirip dengan function range di soal sebelumnya namun parameternya ditambah dengan parameter ketiga yaitu angka step yang menyatakan selisih atau beda dari setiap angka pada array. Jika parameter pertama lebih besar dibandingkan parameter kedua maka angka-angka tersusun secara menurun (descending) dengan step sebesar parameter ketiga.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>struktur fungsinya seperti berikut <code>rangeWithStep(startNum, finishNum, step) {}<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">Perintah: node array rangeWithStep &lt;startNum&gt; &lt;finishNum&gt; &lt;step&gt;<br \/><br \/>contoh perintah : <br \/>node array rangeWithStep 1 10 2 <br \/>Output: [1, 3, 5, 7, 9]<br \/><br \/>node array rangeWithStep 5 2 1 <br \/>Output : [5, 4, 3, 2]<br \/><br \/><\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2>Soal No. 3 (Sum of Range)<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kali ini kamu akan menjumlahkan sebuah range (Deret) yang diperoleh dari function range di soal-soal sebelumnya. Kamu boleh menggunakan function range dan rangeWithStep pada soal sebelumnya untuk menjalankan soal ini.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah sebuah function dengan nama <code>sum()<\/code> yang menerima tiga parameter yaitu angka awal deret, angka akhir deret, dan beda jarak (step). Function akan mengembalikan nilai jumlah (sum) dari deret angka. contohnya <code>sum(1,10,1) <\/code>akan menghasilkan nilai 55.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>ATURAN: Jika parameter ke-3 tidak diisi maka stepnya adalah 1.<\/p>\r\n<pre class=\"wp-block-preformatted\">Perintah: node array sum &lt;startNum&gt; &lt;finishNum&gt; &lt;step&gt;<br \/><br \/>Contoh:<br \/>node array sum 1 10<br \/>Output : 55 <br \/><br \/>node array sum 5 50 2<br \/>Output : 621<br \/><br \/>node array sum 1<br \/>Output: 1<br \/> <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2>Soal No. 4 (Array Multidimensi)<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Sering kali data yang diterima dari database adalah array yang multidimensi (array di dalam array). Sebagai developer, tugas kita adalah mengolah data tersebut agar dapat menampilkan informasi yang diinginkan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah sebuah fungsi dengan nama <code>dataHandling<\/code> dengan sebuah parameter untuk menerima argumen. Argumen yang akan diterima adalah sebuah array yang berisi beberapa array sejumlah <strong>n<\/strong>. Contoh input dapat dilihat dibawah:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/contoh input\r\nvar input = [\r\n                [\"0001\", \"Roman Alamsyah\", \"Bandar Lampung\", \"21\/05\/1989\", \"Membaca\"],\r\n                [\"0002\", \"Dika Sembiring\", \"Medan\", \"10\/10\/1992\", \"Bermain Gitar\"],\r\n                [\"0003\", \"Winona\", \"Ambon\", \"25\/12\/1965\", \"Memasak\"],\r\n                [\"0004\", \"Bintang Senjaya\", \"Martapura\", \"6\/4\/1970\", \"Berkebun\"]\r\n            ] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Tulis data input di atas di dalam file library yang kamu. data tersebut digunakan sebagai input.<\/p>\r\n<p>Tugas kamu adalah mengimplementasikan fungsi <code>dataHandling()<\/code> agar dapat menampilkan data-data pada dari argumen seperti di bawah ini:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">Perintah: node array dataHandling<br \/><br \/>Output: <br \/><br \/>Nomor ID:  0001\r\nNama Lengkap:  Roman Alamsyah\r\nTTL:  Bandar Lampung 21\/05\/1989\r\nHobi:  Membaca\r\n \r\nNomor ID:  0002\r\nNama Lengkap:  Dika Sembiring\r\nTTL:  Medan 10\/10\/1992\r\nHobi:  Bermain Gitar\r\n \r\nNomor ID:  0003\r\nNama Lengkap:  Winona\r\nTTL:  Ambon 25\/12\/1965\r\nHobi:  Memasak\r\n \r\nNomor ID:  0004\r\nNama Lengkap:  Bintang Senjaya\r\nTTL:  Martapura 6\/4\/1970\r\nHobi:  Berkebun <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2>Soal No. 5 (Balik Kata)<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu telah mempelajari beberapa method yang dimiliki oleh String dan Array. String sebetulnya bersifat mirip sebuah array karena kita dapat mengakses karakter-karakter pada sebuah string layaknya mengakses elemen pada array.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah sebuah function <code>balikKata()<\/code> yang menerima sebuah parameter berupa string dan mengembalikan kebalikan dari string tersebut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">Perintah node array balikKata &lt;kata&gt;<br \/><br \/>Contoh Perintah: <br \/>node array balikKata SanberCode <br \/>Output: edoCrebnaS<br \/><br \/>node array balikKata racecar <br \/>Output: racecar<br \/><br \/>node array balikKata kasur,rusak<br \/>Output: kasur rusak<br \/><br \/>node array balikKata haji,ijah <br \/>Output: haji ijah<br \/><br \/>node array balikKata I,am,Sanbers<br \/>Output: srebnaS ma I<br \/><br \/><\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Dilarang menggunakan sintaks <code>.split <\/code>,<code> .join <\/code>,<code> .reverse() <\/code>, hanya gunakan looping!<\/p>\r\n<\/blockquote>\r\n<p><!-- \/wp:quote --> <!-- wp:paragraph --><\/p>\r\n<p>Jika sudah selesai dikerjakan, silahkan <em>push <\/em>hasil pekerjaan kalian ke <em>repository <\/em>Gitlab masing-masing (gunakan <em>repository project<\/em> yang yang kemarin <strong>batch23<\/strong> digunakan folder Tugas 4). Jangan lupa <em>submit link commit<\/em> kalian ke sanbercode.com.<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-07-15 09:00:00","status_publish":"publish","urutan":4,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:47:57","updated_at":"2021-07-11 09:05:52","waktu_publish_formatted":" Kamis, 15 Juli 2021. 09:00:00 WIB."},{"id":605,"uuid":"3aa453f0-5d10-44c4-8105-aed56d11433b","author_user_id":8089,"materi_section_id":173,"judul":"Hari 5 - Berlatih Object Literal","permalink":"hari-5-berlatih-object-literal","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Pada tugas kali ini buatlah folder baru (Tugas 5 - Objek Literal) yang berisikan folder dengan nama <strong>object<\/strong> . Simpan folder tugas tersebut di dalam folder repository project yang dikerjakan pada folder kemarin <strong>batch23<\/strong>.<\/p>\r\n<p><strong>Catatan :&nbsp;<\/strong>Tugas ini boleh menggunakan satu file saja (misal index.js atau object.js), tanpa menggunakan cara export &amp; import lib.&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2>Soal No. 1 (Array to Object)<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah function dengan nama <code>arrayToObject()<\/code> yang menerima sebuah parameter berupa array multidimensi. Dalam array tersebut berisi value berupa First Name, Last Name, Gender, dan Birthyear. Data di dalam array dimensi tersebut ingin kita ubah ke dalam bentuk Object dengan key bernama : firstName, lastName, gender, dan age. Untuk key age ambillah selisih tahun yang ditulis di data dengan tahun sekarang. Jika tahun tidak terdefinisi atau tahunnya lebih besar dibandingkan dengan tahun sekarang maka kembalikan nilai : \"Invalid birth year\".<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh: jika input nya adalah <code>[[\"Abduh\", \"Muhamad\", \"male\", 1992], [\"Ahmad\", \"Taufik\", \"male\", 1985]] <\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>maka outputnya di console seperti berikut :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">1. Abduh Muhamad : { firstName: \"Abduh\", lastName: \"Muhamad\", gender: \"male\", age: 28}\r\n2. Ahmad Taufik : { firstName: \"Ahmad\", lastName: \"Taufik\", gender: \"male\", age: 35} <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk mendapatkan tahun sekarang secara otomatis bisa gunakan Class <code>Date<\/code> dari Javascript.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var now = new Date()\r\nvar thisYear = now.getFullYear() \/\/ 2020 (tahun sekarang)<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Code <\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">function arrayToObject(arr) {\r\n    \/\/ Code di sini \r\n}<br \/> \r\n\/\/ Driver Code\r\nvar people = [ [\"Bruce\", \"Banner\", \"male\", 1975], [\"Natasha\", \"Romanoff\", \"female\"] ]\r\narrayToObject(people) \r\n\/*\r\n    1. Bruce Banner: { \r\n        firstName: \"Bruce\",\r\n        lastName: \"Banner\",\r\n        gender: \"male\",\r\n        age: 45\r\n    }\r\n    2. Natasha Romanoff: { \r\n        firstName: \"Natasha\",\r\n        lastName: \"Romanoff\",\r\n        gender: \"female\".\r\n        age: \"Invalid Birth Year\"\r\n    }\r\n*\/\r\n \r\nvar people2 = [ [\"Tony\", \"Stark\", \"male\", 1980], [\"Pepper\", \"Pots\", \"female\", 2023] ]\r\narrayToObject(people2) \r\n\/*\r\n    1. Tony Stark: { \r\n        firstName: \"Tony\",\r\n        lastName: \"Stark\",\r\n        gender: \"male\",\r\n        age: 40\r\n    }\r\n    2. Pepper Pots: { \r\n        firstName: \"Pepper\",\r\n        lastName: \"Pots\",\r\n        gender: \"female\".\r\n        age: \"Invalid Birth Year\"\r\n    }\r\n*\/\r\n \r\n\/\/ Error case \r\narrayToObject([]) \/\/ \"\"<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":1} --><\/p>\r\n<h1 id=\"soal-no-2-shopping-time\">Soal No. 2 (Shopping Time)<\/h1>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Problem <\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Diberikan sebuah function <code>shoppingTime(memberId, money)<\/code> yang menerima dua parameter berupa string dan number. Parameter pertama merupakan <code>memberId<\/code>dan parameter ke-2 merupakan value uang (<code>money<\/code>) yang dibawa oleh member tersebut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Toko X sedang melakukan SALE untuk beberapa barang, yaitu:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">Sepatu brand Stacattu seharga 1500000<\/li>\r\n<li class=\"\">Baju brand Zoro seharga 500000<\/li>\r\n<li class=\"\">Baju brand H&amp;N seharga 250000<\/li>\r\n<li class=\"\">Sweater brand Uniklooh seharga 175000<\/li>\r\n<li class=\"\">Casing Handphone seharga 50000<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah function yang akan mengembalikan sebuah object dimana object tersebut berisikan informasi memberId, money, listPurchased dan changeMoney.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">Jika memberId kosong maka tampilkan \"Mohon maaf, toko X hanya berlaku untuk member saja\"<\/li>\r\n<li class=\"\">Jika uang yang dimiliki kurang dari 50000 maka tampilkan \"Mohon maaf, uang tidak cukup\"<\/li>\r\n<li class=\"\">Member yang berbelanja di toko X akan membeli barang yang paling mahal terlebih dahulu dan akan membeli barang-barang yang sedang SALE masing-masing 1 jika uang yang dimilikinya masih cukup.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh jika inputan memberId: '324193hDew2' dan money: 700000<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>maka output:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>{ memberId: '324193hDew2', money: 700000, listPurchased: [ 'Baju Zoro', 'Sweater Uniklooh' ], changeMoney: 25000 }<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Code<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">function shoppingTime(memberId, money) {\r\n  \/\/ you can only write your code here!\r\n}\r\n \r\n\/\/ TEST CASES\r\nconsole.log(shoppingTime('1820RzKrnWn08', 2475000));\r\n  \/\/{ memberId: '1820RzKrnWn08',\r\n  \/\/ money: 2475000,\r\n  \/\/ listPurchased:\r\n  \/\/  [ 'Sepatu Stacattu',\r\n  \/\/    'Baju Zoro',\r\n  \/\/    'Baju H&amp;N',\r\n  \/\/    'Sweater Uniklooh',\r\n  \/\/    'Casing Handphone' ],\r\n  \/\/ changeMoney: 0 }\r\nconsole.log(shoppingTime('82Ku8Ma742', 170000));\r\n\/\/{ memberId: '82Ku8Ma742',\r\n\/\/ money: 170000,\r\n\/\/ listPurchased:\r\n\/\/  [ 'Casing Handphone' ],\r\n\/\/ changeMoney: 120000 }\r\nconsole.log(shoppingTime('', 2475000)); \/\/Mohon maaf, toko X hanya berlaku untuk member saja\r\nconsole.log(shoppingTime('234JdhweRxa53', 15000)); \/\/Mohon maaf, uang tidak cukup\r\nconsole.log(shoppingTime()); \/\/\/\/Mohon maaf, toko X hanya berlaku untuk member saja<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":1} --><\/p>\r\n<h1 id=\"soal-no-3-naik-angkot\">Soal No. 3 (Naik Angkot)<\/h1>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Problem<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Diberikan function <code>naikAngkot(listPenumpang)<\/code> yang akan menerima satu parameter berupa array dua dimensi. Function akan me-return array of object.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Diberikan sebuah rute, dari A - F. Penumpang diwajibkan membayar Rp2000 setiap melewati satu rute.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh: input: [ ['Dimitri', 'B', 'F'] ] output: [{ penumpang: 'Dimitri', naikDari: 'B', tujuan: 'F', bayar: 8000 }]<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Code<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">function naikAngkot(arrPenumpang) {\r\n  rute = ['A', 'B', 'C', 'D', 'E', 'F'];\r\n  \/\/your code here\r\n}\r\n \r\n\/\/TEST CASE\r\nconsole.log(naikAngkot([['Dimitri', 'B', 'F'], ['Icha', 'A', 'B']]));\r\n\/\/ [ { penumpang: 'Dimitri', naikDari: 'B', tujuan: 'F', bayar: 8000 },\r\n\/\/   { penumpang: 'Icha', naikDari: 'A', tujuan: 'B', bayar: 2000 } ]\r\n \r\nconsole.log(naikAngkot([])); \/\/[]<br \/><br \/><\/pre>\r\n<h1>Soal No 4. Nilai Tertinggi<\/h1>\r\n<p><strong>Problem<\/strong><\/p>\r\n<p>Buatlah sebuah function nilaiTertinggi yang menerima input berupa array of object berisi data-data peserta sanbercode beserta nilai nya. function akan mengembalikan sebuah object seperti berikut:&nbsp;<\/p>\r\n<p>&nbsp; <code>&nbsp;{ <\/code><\/p>\r\n<p><code>&nbsp; &nbsp; &lt;nama-kelas&gt; : { name: &lt;nama-siswa&gt;, score: &lt;nilai-siswa&gt; },&nbsp;<\/code><\/p>\r\n<p><code>&nbsp; &nbsp; &lt;nama-kelas&gt; : { name: &lt;nama-siswa&gt;, score : &lt;nilai-siswa&gt; }<\/code><\/p>\r\n<p><code>&nbsp; &nbsp;}<br \/><\/code><\/p>\r\n<pre><span class=\"pl-k\">function<\/span> nilaiTertinggi<span class=\"pl-kos\">(<\/span><span class=\"pl-s1\">siswa<\/span><span class=\"pl-kos\">)<\/span> <span class=\"pl-kos\">{<\/span>\r\n  <span class=\"pl-c\">\/\/ Code disini<\/span>\r\n<span class=\"pl-kos\">}<\/span>\r\n\r\n<span class=\"pl-c\">\/\/ TEST CASE<\/span>\r\n<span class=\"pl-smi\">console<\/span><span class=\"pl-kos\">.<\/span><span class=\"pl-en\">log<\/span><span class=\"pl-kos\">(<\/span><span class=\"pl-en\">nilaiTertinggi<\/span><span class=\"pl-kos\">(<\/span><span class=\"pl-kos\">[<\/span>\r\n  <span class=\"pl-kos\">{<\/span>\r\n    <span class=\"pl-c1\">name<\/span>: <span class=\"pl-s\">'Asep'<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">score<\/span>: <span class=\"pl-c1\">90<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">class<\/span>: <span class=\"pl-s\">'adonis'<\/span>\r\n  <span class=\"pl-kos\">}<\/span><span class=\"pl-kos\">,<\/span>\r\n  <span class=\"pl-kos\">{<\/span>\r\n    <span class=\"pl-c1\">name<\/span>: <span class=\"pl-s\">'Ahmad'<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">score<\/span>: <span class=\"pl-c1\">85<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">class<\/span>: <span class=\"pl-s\">'vuejs'<\/span>\r\n  <span class=\"pl-kos\">}<\/span><span class=\"pl-kos\">,<\/span>\r\n  <span class=\"pl-kos\">{<\/span>\r\n    <span class=\"pl-c1\">name<\/span>: <span class=\"pl-s\">'Regi'<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">score<\/span>: <span class=\"pl-c1\">74<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">class<\/span>: <span class=\"pl-s\">'adonis'<\/span>\r\n  <span class=\"pl-kos\">}<\/span><span class=\"pl-kos\">,<\/span>\r\n  <span class=\"pl-kos\">{<\/span>\r\n    <span class=\"pl-c1\">name<\/span>: <span class=\"pl-s\">'Afrida'<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">score<\/span>: <span class=\"pl-c1\">78<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">class<\/span>: <span class=\"pl-s\">'reactjs'<\/span>\r\n  <span class=\"pl-kos\">}<\/span>\r\n<span class=\"pl-kos\">]<\/span><span class=\"pl-kos\">)<\/span><span class=\"pl-kos\">)<\/span><span class=\"pl-kos\">;<\/span>\r\n<br \/>\/\/ OUTPUT:<br \/>\r\n<span class=\"pl-c\">\/\/ {<\/span>\r\n<span class=\"pl-c\">\/\/   adonis: { name: 'Asep', score: 90 },<\/span>\r\n<span class=\"pl-c\">\/\/   vuejs: { name: 'Ahmad', score: 85 },<br \/><\/span>\/\/   reactjs: { name: 'Afrida', score: 78}\r\n<span class=\"pl-c\">\/\/ }<\/span>\r\n\r\n\r\n<span class=\"pl-smi\">console<\/span><span class=\"pl-kos\">.<\/span><span class=\"pl-en\">log<\/span><span class=\"pl-kos\">(<\/span><span class=\"pl-en\">nilaiTertinggi<\/span><span class=\"pl-kos\">(<\/span><span class=\"pl-kos\">[<\/span>\r\n  <span class=\"pl-kos\">{<\/span>\r\n    <span class=\"pl-c1\">name<\/span>: <span class=\"pl-s\">'Bondra'<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">score<\/span>: <span class=\"pl-c1\">100<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">class<\/span>: <span class=\"pl-s\">'adonis'<\/span>\r\n  <span class=\"pl-kos\">}<\/span><span class=\"pl-kos\">,<\/span>\r\n  <span class=\"pl-kos\">{<\/span>\r\n    <span class=\"pl-c1\">name<\/span>: <span class=\"pl-s\">'Putri'<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">score<\/span>: <span class=\"pl-c1\">76<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">class<\/span>: <span class=\"pl-s\">'laravel'<\/span>\r\n  <span class=\"pl-kos\">}<\/span><span class=\"pl-kos\">,<\/span>\r\n  <span class=\"pl-kos\">{<\/span>\r\n    <span class=\"pl-c1\">name<\/span>: <span class=\"pl-s\">'Iqbal'<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">score<\/span>: <span class=\"pl-c1\">92<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">class<\/span>: <span class=\"pl-s\">'adonis'<\/span>\r\n  <span class=\"pl-kos\">}<\/span><span class=\"pl-kos\">,<\/span>\r\n  <span class=\"pl-kos\">{<\/span>\r\n    <span class=\"pl-c1\">name<\/span>: <span class=\"pl-s\">'Tyar'<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">score<\/span>: <span class=\"pl-c1\">71<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">class<\/span>: <span class=\"pl-s\">'laravel'<\/span>\r\n  <span class=\"pl-kos\">}<\/span><span class=\"pl-kos\">,<\/span>\r\n  <span class=\"pl-kos\">{<\/span>\r\n    <span class=\"pl-c1\">name<\/span>: <span class=\"pl-s\">'Hilmy'<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">score<\/span>: <span class=\"pl-c1\">80<\/span><span class=\"pl-kos\">,<\/span>\r\n    <span class=\"pl-c1\">class<\/span>: <span class=\"pl-s\">'vuejs'<\/span>\r\n  <span class=\"pl-kos\">}<\/span>\r\n<span class=\"pl-kos\">]<\/span><span class=\"pl-kos\">)<\/span><span class=\"pl-kos\">)<\/span><span class=\"pl-kos\">;<\/span>\r\n\r\n<span class=\"pl-c\">\/\/ {<\/span>\r\n<span class=\"pl-c\">\/\/   adonis: { name: 'Bondra', score: 100 },<\/span>\r\n<span class=\"pl-c\">\/\/   laravel: { name: 'Putri', score: 76 },<\/span>\r\n<span class=\"pl-c\">\/\/   vuejs: { name: 'Hilmy', score: 80 }<\/span>\r\n<span class=\"pl-c\">\/\/ }<\/span><\/pre>\r\n<p>&nbsp;<\/p>\r\n<p><code><\/code><code><\/code><\/p>\r\n<p><!-- \/wp:preformatted --> <!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Sumber soal: <a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/README-WEEK-4.md\" target=\"_blank\" rel=\"noreferrer noopener\">github hacktiv8 phase 0 exercises<\/a><\/p>\r\n<\/blockquote>\r\n<p><!-- \/wp:quote --> <!-- wp:paragraph --><\/p>\r\n<p>Jika sudah selesai dikerjakan, silahkan <em>push <\/em>hasil pekerjaan kalianke <em>repository <\/em>Gitlab masing-masing (gunakan <em>repository project<\/em> yang sama <strong>batch23 <\/strong>yang digunakan folder Tugas 5). Jangan lupa <em>submit link commit<\/em> kalian ke sanbercode.com.<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-07-16 09:00:00","status_publish":"publish","urutan":5,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:48:42","updated_at":"2021-07-11 09:07:23","waktu_publish_formatted":" Jumat, 16 Juli 2021. 09:00:00 WIB."}]},{"id":174,"uuid":"ef513f0c-91f0-47cc-bfef-bcdb354b584e","materi_id":20,"nama":"Materi Pekan 2","permalink":"materi-pekan-2","urutan":4,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 09:28:02","updated_at":null,"posting":[{"id":606,"uuid":"60f78846-2d06-4f54-80b9-ef1ff4090427","author_user_id":8089,"materi_section_id":174,"judul":"Hari 6 - Javascript Modern ES6","permalink":"hari-6-javascript-modern-es6","konten":"<p>ES6 atau EcmaScript 6 atau EcmaScript 2015 merupakan fitur bahasa pada pemrograman Javascript modern atau biasa di sebut next gen javascript. lalu kenapa kita harus mempelajari ES6, itu karena di Adonis kita akan banyak menggunakan fitur ES6 dalam penulisan sintaks javascript nya.<\/p>\r\n<h2>Instalasi &amp; Setup Babel<\/h2>\r\n<p>Pada saat materi ini dibuat, nodejs masih belum sepenuhnya dapat membaca syntax ES6 walaupun sudah lebih dari 90% syntax nya sudah dapat dipahami oleh javascript runtime Nodejs. Oleh karena itu, kita bisa gunakan bantuan library Babel untuk membantu kita men-compile code ES6 kita menjadi code javascript yang bisa dieksekusi oleh Nodejs.&nbsp;<\/p>\r\n<p>&nbsp;Kita bisa install library Babel menggunakan npm. Kita akan buat terlebih dahulu project npm baru dengan perintah npm init di folder project kita.<\/p>\r\n<p><code>mkdir tugas-es6<\/code><\/p>\r\n<p><code>cd tugas-es6<\/code><\/p>\r\n<p><code>npm init -y&nbsp;&nbsp;<\/code><\/p>\r\n<p>setelah itu maka akan muncul sebuah file <code>package.json<\/code> yang berisi informasi mengenai project npm yang akan kita buat.&nbsp;<\/p>\r\n<p>Selanjutnya, install beberapa package berikut yaitu : @babel\/core, @babel\/cli, dan @babel\/preset-env dengan perintah berikut:&nbsp;<\/p>\r\n<p><code>npm install &nbsp;@babel\/core @babel\/cli @babel\/preset-env --save<\/code><\/p>\r\n<p>jika sudah terinstall tambahkan code berikut untuk membuat perintah script baru pada package.json<\/p>\r\n<p><code><span id=\"6739\" class=\"gk jc jd fo ip b dh je jf s jg\" data-selectable-paragraph=\"\">\"<em class=\"it\">scripts<\/em>\": {<br \/>&nbsp; ...<\/span><span id=\"afe1\" class=\"gk jc jd fo ip b dh jh ji jj jk jl jf s jg\" data-selectable-paragraph=\"\"> <br \/>&nbsp; \"<em class=\"it\">babel<\/em>\": \"<em class=\"it\">.\/node_modules\/.bin\/babel<\/em>\",<br \/>&nbsp; ...<br \/><\/span><\/code><span id=\"1d79\" class=\"gk jc jd fo ip b dh jh ji jj jk jl jf s jg\" data-selectable-paragraph=\"\"><code>}<\/code><\/span><\/p>\r\n<p><span id=\"1d79\" class=\"gk jc jd fo ip b dh jh ji jj jk jl jf s jg\" data-selectable-paragraph=\"\">juga kita buat file baru dengan nama \".babelrc\" untuk mengeset fitur terbaru Ecmascript pada code kita. Di dalam file .babelrc tersebut copy code berikut:&nbsp;<\/span><\/p>\r\n<p><code><span id=\"1d79\" class=\"gk jc jd fo ip b dh jh ji jj jk jl jf s jg\" data-selectable-paragraph=\"\">{<br \/>&nbsp; \"presets\" : [ \"@babel\/env\" ]<br \/>}&nbsp;<\/span><\/code><\/p>\r\n<p><span id=\"1d79\" class=\"gk jc jd fo ip b dh jh ji jj jk jl jf s jg\" data-selectable-paragraph=\"\">dengan begitu kita bisa mengeksekusi perintah babel menggunakan npm pada project kita yaitu dengan perintah \"npm run babel . . . \" .<\/span><\/p>\r\n<h3><span id=\"1d79\" class=\"gk jc jd fo ip b dh jh ji jj jk jl jf s jg\" data-selectable-paragraph=\"\">&nbsp;Test<\/span><\/h3>\r\n<p>Sebelum mencoba, pastikan struktur file kalian seperti berikut:&nbsp;<\/p>\r\n<p><code>|- node_modules<\/code><br \/><code>|- package.json<\/code><br \/><code>|- test.js<\/code><br \/><code>|- .babelrc<\/code><\/p>\r\n<p><code><\/code><\/p>\r\n<p><span class=\"gk jc jd fo ip b dh jh ji jj jk jl jf s jg\" data-selectable-paragraph=\"\">Mari kita coba terlebih dahulu membuat file test.js lalu kita isi di dalam file tersebut dengan code sederhana console.log(\"hello es6\").&nbsp;<\/span><\/p>\r\n<p><span class=\"gk jc jd fo ip b dh jh ji jj jk jl jf s jg\" data-selectable-paragraph=\"\">Untuk meng-compile test.js dengan Babel, berikan perintah berikut<\/span><\/p>\r\n<p><code><span class=\"gk jc jd fo ip b dh jh ji jj jk jl jf s jg\" data-selectable-paragraph=\"\">npm run babel test.js -- --out-file compiledTest.js&nbsp;<\/span><\/code><\/p>\r\n<p>&nbsp;Perintah di atas adalah untuk meng-compile code pada file test.js lalu menuliskan kembali hasil compile nya ke output file dengan nama compiledTest.js.&nbsp;<\/p>\r\n<p>Output compiledTest.js tersebut yang kemudian akan kita eksekusi menggunakan node ketika menjalankan aplikasi kita.<\/p>\r\n<h2 id=\"daftar-fitur-es6\"><strong>Daftar Fitur ES6<\/strong><\/h2>\r\n<ul>\r\n<li class=\"\">Arrows Function<\/li>\r\n<li class=\"\">Classes<\/li>\r\n<li class=\"\">Enchanced object literals<\/li>\r\n<li class=\"\">Template strings<\/li>\r\n<li class=\"\">Destructuring<\/li>\r\n<li class=\"\">Default + rest + spread<\/li>\r\n<li class=\"\">Let + const<\/li>\r\n<li class=\"\">Iterators + for..of<\/li>\r\n<li class=\"\">Generators<\/li>\r\n<li class=\"\">Unicode<\/li>\r\n<li class=\"\">Modules<\/li>\r\n<li class=\"\">Modules loaders<\/li>\r\n<li class=\"\">Map +set + weakmap + weakset<\/li>\r\n<li class=\"\">Proxies<\/li>\r\n<li class=\"\">Symbols<\/li>\r\n<li class=\"\">Subclassable built-ins<\/li>\r\n<li class=\"\">Promises<\/li>\r\n<li class=\"\">Math + number + string + array + object apis<\/li>\r\n<li class=\"\">Binary dan octal literals<\/li>\r\n<li class=\"\">Reflect API<\/li>\r\n<li class=\"\">Tail calls<\/li>\r\n<\/ul>\r\n<p>Tidak perlu menguasai seluruh fitur diatas, tetapi kita akan membagi fitur-fitur yang penting untuk di pelajari yaitu:<\/p>\r\n<ul>\r\n<li>let + const<\/li>\r\n<li>arrow function<\/li>\r\n<li>default paramater<\/li>\r\n<li>Template literal<\/li>\r\n<li>Enhanced object literals<\/li>\r\n<li>Destructuring<\/li>\r\n<li>Rest Parameters + Spread Operator<\/li>\r\n<li>promise (nanti ada materinya di asynchronous)<\/li>\r\n<li>class<\/li>\r\n<\/ul>\r\n<h2>&nbsp;<\/h2>\r\n<h2 id=\"let-const\"><strong>Let + Const<\/strong><\/h2>\r\n<p>let dan const merupakan statement untuk mendefinisikan variable sama seperti var hanya saja terdapat perbedaan diantara let + const dan var.<\/p>\r\n<p>var sendiri masih bisa digunakan untuk menjaga compability dengan versi sebelumnya<\/p>\r\n<p>berikut ini perbandingan var dengan let + const:<\/p>\r\n<p><strong>Normal Javascript:<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>var x = 1;\r\n \r\nif (x === 1) {\r\nvar x = 2;\r\n \r\nconsole.log(x);\r\n\/\/ expected output: 2\r\n}\r\n \r\nconsole.log(x); \/\/ 2 <\/code><\/pre>\r\n<p><strong>ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>let x = 1;\r\n \r\nif (x === 1) {\r\n  let x = 2;\r\n \r\n  console.log(x);\r\n  \/\/ expected output: 2\r\n}\r\n \r\nconsole.log(x); \/\/ 1 \r\n\r\nconst number = 42;\r\nnumber = 100; \/\/ Uncaught TypeError: Assignment to constant variable.<\/code><\/pre>\r\n<h2 id=\"arrow-functions\"><strong>Arrow Functions<\/strong><\/h2>\r\n<p>arrow functions merupakan fitur yang ada pada es6 bisa dibilang lebih singkat dari function biasa, function biasa sendiri masih bisa di gunakan.<\/p>\r\n<p>berikut ini perbandingan penggunaan function dan arrow function:<\/p>\r\n<p><strong>Normal Javascript:<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>function myFunction (){\r\n    \/\/ isi Function\r\n}\r\n\/\/ panggil Function\r\nmyFunction()<\/code><\/pre>\r\n<p><strong>ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>const myFuncton = () =&gt; {\r\n    \/\/function\r\n}\r\n\r\n\/\/ panggil Function\r\nmyFunction()<\/code><\/pre>\r\n<h2 id=\"default-parameters\"><strong>Default Parameters<\/strong><\/h2>\r\n<p>biasanya kita dalam membuat function pasti punya parameter tapi apakah parameter itu sendiri bisa di beri default, jawabannya adalah ya di ES6 kita dapat memasukkan default parameter seperti contoh di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>function multiply(a, b = 1) {\r\n  return a * b;\r\n}\r\n \r\nconsole.log(multiply(5, 2));\r\n\/\/ expected output: 10\r\n \r\nconsole.log(multiply(5));\r\n\/\/ expected output: 5 <\/code><\/pre>\r\n<h2 id=\"template-literals\"><strong>Template Literals<\/strong><\/h2>\r\n<p>berikut ini cara menggunakan template literal:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-13874\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-3.png\" sizes=\"(max-width: 805px) 100vw, 805px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-3.png 805w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-3-300x66.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-3-768x170.png 768w\" alt=\"\" width=\"805\" height=\"178\" \/><\/figure>\r\n<h2 id=\"enhanced-object-literals\"><strong>Enhanced object literals&nbsp;<\/strong><\/h2>\r\n<p>berikut ini contoh enhanced object literals dan perbandingan dengan javascript sebelum es6<\/p>\r\n<p><strong>Before ES6 Javascript:<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>const fullName = 'John Doe'\r\n \r\nconst john = {\r\n  fullName: fullName\r\n}<\/code><\/pre>\r\n<p><strong>After ES6 Javascript:<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>const fullName = 'John Doe'\r\n \r\nconst john = {fullName}<\/code><\/pre>\r\n<h2 id=\"destructuring\"><strong>Destructuring<\/strong><\/h2>\r\n<p>Destructuring merupakan ekspresi javascript yang memungkinkan untuk membagi atau memecah nilai dari sebuah array atau objek ke dalam variabel yang berbeda<\/p>\r\n<p>berikut ini contoh penggunaan destructuring dan perbandingannya dengan sebelum destructuring<\/p>\r\n<p><strong>tanpa destructuring<\/strong>:<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ array\r\nvar numbers = [1,2,3]\r\n\r\nvar numberOne = numbers[0]\r\nvar numberTwo = numbers[1]\r\nvar numberThree = numbers[2]\r\n\r\nconsole.log(numberOne)\r\n\r\n\/\/ object\r\nvar studentName = {\r\n    firstName: 'Peter',\r\n    lastName: 'Parker'\r\n};\r\n \r\nconst firstName = studentName.firstName;\r\nconst lastName = studentName.lastName;\r\n\r\nconsole.log(firstName)<\/code><\/pre>\r\n<p><strong>dengan destructuring:<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ array\r\nlet numbers = [1,2,3]\r\n\r\nconst [numberOne, numberTwo, numberThree] = numbers\r\n\r\nconsole.log(numberOne)\r\n\r\n\/\/ object\r\nvar studentName = {\r\n    firstName: 'Peter',\r\n    lastName: 'Parker'\r\n};\r\n \r\nconst {firstName, lastName} = studentName\r\n\r\nconsole.log(firstName)<\/code><\/pre>\r\n<h2 id=\"rest-parameters-spread-operator\">Rest Parameters + Spread Operator<\/h2>\r\n<p>Berikut ini contoh penggunaan rest parameters + spread operator:<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ Rest Parameters\r\n \r\n\/\/first example\r\nlet scores = ['98', '95', '93', '90', '87', '85']\r\nlet [first, second, third, ...restOfScores] = scores;\r\n \r\nconsole.log(first) \/\/ 98\r\nconsole.log(second) \/\/ 95\r\nconsole.log(third) \/\/ 93\r\nconsole.log(restOfScores) \/\/ [90, 87, 85] \r\n\r\n\/\/second example \r\nconst filter = (...rest) =&gt;{\r\n    return rest.filter(el =&gt; el.text !== undefined)\r\n}\r\n\r\nconsole.log(filter(1, {text: \"wonderful\"}, \"next\"))\r\n\r\n\/\/ spread operator<br \/>\r\nlet array1 = ['one', 'two']\r\nlet array2 = ['three', 'four']\r\nlet array3 = ['five', 'six']\r\n \r\n\/\/ ES5 Way \/ Normal Javascript\r\n \r\nvar combinedArray = array1.concat(array2).concat(array3)\r\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six']\r\n \r\n\/\/ ES6 Way \r\n \r\nlet combinedArray = [...array1, ...array2, ...array3]\r\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six']<\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<h2>Sumber&nbsp;<\/h2>\r\n<p>1. Setting Up Babel to transpile es6 in node : <a href=\"https:\/\/medium.com\/@Tunmise\/setting-up-babel-to-transpile-es6-in-node-18a32e4b9310\" target=\"_blank\" rel=\"noopener\">https:\/\/medium.com\/@Tunmise\/setting-up-babel-to-transpile-es6-in-node-18a32e4b9310<\/a><\/p>\r\n<h2>Video Tutorial&nbsp;<\/h2>\r\n<p>Berikut ini video tutorial untuk materi ES6 menggunakan Babel<br \/><iframe src=\"https:\/\/www.youtube.com\/embed\/NDNR73IklU0?list=PL8YCzrSDCR7irxR64-LxvzUWOzqqDDSjy&amp;index=1&amp;ab_channel=Sanbercode\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/zov0X2qQsFk?list=PL8YCzrSDCR7irxR64-LxvzUWOzqqDDSjy&amp;index=2&amp;ab_channel=Sanbercode\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/_vgh5OUmYfQ?list=PL8YCzrSDCR7irxR64-LxvzUWOzqqDDSjy&amp;index=3&amp;ab_channel=Sanbercode\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/_Fk54ongEbA\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/xy9jCDoV9b0\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-07-19 09:00:00","status_publish":"publish","urutan":1,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:50:41","updated_at":"2021-07-11 09:08:46","waktu_publish_formatted":" Senin, 19 Juli 2021. 09:00:00 WIB."},{"id":607,"uuid":"2acb68d4-d53b-4180-b876-bad603eb40c2","author_user_id":8089,"materi_section_id":174,"judul":"Hari 7 - Object Oriented Programming (OOP) in Javascript","permalink":"hari-7-object-oriented-programming-oop-in-javascript","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p><!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Pada materi sebelumnya, telah dipelajari tentang Object Literals di Javascript. Dengan Object kita dapat merepresentasikan segala hal termasuk program yang akan kita buat dengan Javascript. Materi kali ini akan mempelajari object dalam bentuk Class.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Di dalam dunia pemrograman dikenal sebuah konsep dengan nama OOP atau Object Oriented Programming. Secara sederhana, dengan konsep OOP maka segala sesuatu dapat kita anggap sebagai sebuah Object atau cetakan (Blueprint). Contohnya terdapat Object Class bernama \"Car\" yang berarti mobil. Suatu (cetakan) mobil biasanya memiliki nama dan dibuat oleh sebuah pabrikan otomotif (factory). Selain itu mobil dapat memiliki fungsi untuk berjalan, mengerem, membunyikan klakson, dll.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"mendefinisikan-sebuah-class\">Mendefinisikan Sebuah Class<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Class sebetulnya adalah sebuah functions yang spesial, dan seperti function yang kita ketahui sebelumnya bahwa functions dapat dideklarasikan dan dipanggil begitu pula dengan Class.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3 id=\"deklarasi-class\">Deklarasi Class<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Cara yang pertama untuk membuat sebuah class yaitu dengan mendeklarasikannya. Caranya adalah tuliskan \"Class\" diikuti dengan nama class-nya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">class Car {\r\n    constructor(brand,factory) {\r\n        this.brand = brand\r\n        this.factory = factory\r\n        this.sound = \"honk! honk!vroomvroom\"\r\n    }\r\n}<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Ekspresi Class<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Cara lain untuk membuat sebuah class yaitu dengan cara membuat sebuah variabel. Class tersebut boleh diberikan nama atau tidak diberi nama. contohnya sebagai berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Tidak diberi nama \r\nvar Car = class {\r\n    constructor(brand, factory) {\r\n        this.brand = brand\r\n        this.factory = factory\r\n    }\r\n}\r\n \r\nconsole.log(Car.name) \/\/ Car\r\n \r\n\/\/ Diberi nama\r\nvar Car = class Car2 {\r\n    constructor(brand, factory) {\r\n        this.brand = brand\r\n        this.factory = factory\r\n    }\r\n}\r\nconsole.log(Car.name) \/\/ Car2<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:html --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Nama sebuah Class biasanya menggunakan kapital pada huruf pertama nya. Jika terdapat dua kata atau lebih maka huruf pertama pada kata yang selanjutnya harus kapital.<\/p>\r\n<pre class=\"wp-block-preformatted\"><code>class Car{} \/\/ BENAR<\/code><br \/><code>class car{} \/\/ SALAH<\/code><br \/><code>class SportsCar {} \/\/ BENAR<\/code><br \/><code>class sportscar {} \/\/ SALAH <\/code><\/pre>\r\n<\/blockquote>\r\n<p><!-- \/wp:html --> <!-- wp:heading {\"level\":1} --><\/p>\r\n<h1 id=\"struktur-pada-class\">Struktur pada Class<\/h1>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Sebuah class memiliki bagian \"body\" yang merupakan isi dari class. Body dari class yaitu bagian yang dilingkupi oleh tanda kurung kurawal <code>{}<\/code> . Di dalam body tersebut kita mendefinisikan methods dan property pada class tersebut. &zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Property pada sebuah class artinya suatu variabel atau atribut yang melekat di dalam class tersebut, sedangkan Methods di class adalah fungsi yang dapat dilakukan oleh class. Contohnya pada suatu class Car akan memiliki property berupa nama merk (<code>brand<\/code>) dan pabrikan pembuat mobilnya (<code>factory<\/code>). Selain itu, class Car mempunyai methods di antaranya berjalan (<code>drive<\/code>), mengerem (<code>brake<\/code>), atau membunyikan klakson (<code>horn<\/code>).<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\"><code>class Car {    <\/code> <br \/><code>constructor(brand, factory) {<br \/><\/code><code>    this.brand = brand        <\/code> <br \/><code>this.factory = factory        <\/code> <br \/><code>this.sound = \"honk! honk!\"    <\/code> <code><br \/>   }     <br \/>   <\/code> <br \/><code>drive() {        <\/code> <br \/><code>console.log(\"enjoy your ride with \" + this.name)    <\/code> <br \/><code>}        <\/code> <br \/><code>brake() {        <\/code> <br \/>console.log(\"the \" + this.name + \" car is about to stop, hang on!\") <br \/><code>}        <\/code> <code><br \/>  horn() {        <\/code> <br \/><code>console.log(this.sound)    <\/code> <br \/><code>}<\/code> <br \/><code>}<\/code><\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3 id=\"this\"><strong><code>this<\/code><\/strong><\/h3>\r\n<p><code>\/\/<\/code><\/p>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Jika diperhatikan selalu terdapat sintaks <code>this<\/code> pada contoh class di atas. <code>this<\/code> tersebut adalah sintaks untuk menunjuk class atau seluruh body di class itu sendiri. Sintaks <code>this<\/code> hanya hidup di dalam deklarasi Class dan tidak bisa dipanggil di luar class. &zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Di dalam deklarasi sebuah class maka cara untuk memanggil property atau methods adalah dengan menambahkan <code>this<\/code> lalu diikuti dengan titik dan nama property atau methodsnya. &zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3 id=\"constructor\"><code>constructor()<\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Constructor adalah methods yang selalu dijalankan paling pertama ketika sebuah class dipanggil (<em>instance<\/em>). Constructor dapat menerima parameter yang mengirim nilai ke dalam class tersebut. &zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"instance-class-pemanggilan-class\">Instance Class (membuat Object dari Class)<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Seperti function pada umumnya yang terdapat deklarasi dan pemanggilan function atau <em>instance<\/em>. Deklarasi Class sudah dijelaskan pada point sebelumnya. Class juga memiliki cara untuk pemanggilannya contohnya sebagai berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Instance dari class Car \r\nvar innovam = new Car(\"Innovam\", \"Toyotwo\")\r\nconsole.log(innovam) \r\n\/\/ Output: Car { brand: 'Innovam', factory: 'Toyotwo', sound: 'honk! honk!' }<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>&zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Instance dari class Car dapat diartikan kita membuat sebuah mobil baru dengan menggunakan \"cetakan\" Car yang sudah didefinisikan. Contohnya membuat mobil baru ke dalam sebuah variable bernama \"innovam\". Pada contoh di atas mobil innova memiliki nama \"Innovam\" dan berasal dari pabrikan \"Toyotwo\". Ketika ditampilkan di console maka dihasilkan sebuah Object Class dengan nama class Car dan berisi sebuah object dengan property yang kita definisikan pada methods constructor. &zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Menyambung pada pembahasan constructor: ketika class Car dipanggil (di-instance) maka methods constructor akan dijalankan pertama kali. Jika diperhatikan, di dalam methods constructor yang dilakukan adalah mendefinisikan property atau atribut dan mengisinya dengan nilai yang dikirim melalui parameter ketika di-instance.&zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Karena class Car berupa blueprint atau cetakan, maka kita sebetulnya dapat membuat banyak mobil baru dengan melakukan instance seperti pada contoh di atas.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var expancer = new Car(\"Expancer\", \"Amitbishi\")\r\nvar erlima = new Car(\"Erlima\", \"Suzuka\") \r\nvar bujero = new Car(\"Bujero\", \"Amitbishi\")\r\n<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Seperti dijelaskan sebelumnya bahwa setiap mobil yang kita buat akan memiliki property dan methods yang sesuai dengan cetakan yang sudah didefinisikan di awal. Untuk memanggil methods yang dimiliki oleh sebuah class Car maka kita tinggal menuliskan nama object class nya diikuti nama methodsnya dipisah dengan tanda titik (<code>.<\/code>). Contohnya sebagai berikutexit:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>expancer.drive() \/\/ enjoy your ride with expancer\r\nerlima.brake() \/\/ the erlima car is about to stop, hang on!\r\nbujero.horn() \/\/ \"honk! honk!\"<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:heading --><\/p>\r\n<h2>Method<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Sintaks constructor pada class merupakan method khusus, dimana dilakukan inisialisasi properties, yang akan dieksekusi secara otomatis ketika class dibuat, dan ia harus memiliki nama \"constructor\". (Jika tidak dituliskan, maka Javascript akan menambahkan method constructor kosong secara otomatis).<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Kita juga dapat membuat method sendiri, dengan sintaks yang sudah biasa kita gunakan:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">class&nbsp;Car {\r\n&nbsp;&nbsp;constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= brand;\r\n&nbsp;&nbsp;}\r\n&nbsp; present() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"I have a \"&nbsp;+&nbsp;this.carname;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nconsole.log(mycar.present()) \/\/ I have a Ford<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Seperti yang terlihat pada contoh di atas, method dapat digunakan dengan cara memanggil nama class dan method nya ditambah dengan kurung buka dan kurung tutup. Parameter bisa dimasukan di dalam tanda kurung jika diperlukan, seperti pada contoh di bawah.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">class&nbsp;Car {\r\n&nbsp;&nbsp;constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= brand;\r\n&nbsp;&nbsp;}\r\n&nbsp; present(x) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x +&nbsp;\", I have a \"&nbsp;+&nbsp;this.carname;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nconsole.log(mycar.present(\"Hello\"));<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2>Static Method<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Static methods didefinisikan hanya untuk class itu sendiri. sehingga, jika melihat pada contoh sebelumnya static method hanya bisa diakses melalui Car, dan tidak bisa melalui mycar:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\"> class&nbsp;Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;=&nbsp;brand;\r\n&nbsp;&nbsp;}\r\n&nbsp;&nbsp;static&nbsp;hello() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"Hello!!\";\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\n\r\n\/\/ memanggil 'hello()' pada class Car:\r\nconsole.log(Car.hello());\r\n\r\n\/\/ dan tidak bisa pada 'mycar':\r\n\/\/ console.log(mycar.hello());\r\n\/\/ jika menggunakan sintaks tersebut akan memunculkan error.<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2>Inheritance<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk membuat inheritance dari suatu class, gunakan keyword <code>extends<\/code>. Class yang dibuat dengan metode inheritance, akan memiliki method yang sama dengan class asalnya. Contoh berikut adalah class Model yang merupakan inheritance dari class Car:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\"> class Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname = brand;\r\n&nbsp;&nbsp;}\r\n&nbsp; present() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return 'I have a ' + this.carname;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nclass SuperCar extends Car {\r\n&nbsp;&nbsp;constructor(brand, mod) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;super(brand);\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.model = mod;\r\n&nbsp;&nbsp;}\r\n&nbsp; show() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return this.present() + ', it is a ' + this.model;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar = new SuperCar(\"Ford\", \"Mustang\");\r\nconsole.log(mycar.show());<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Method <code>super()<\/code>&nbsp;mengacu pada class asalnya, dimana dengan menggunakan method <code>super()<\/code>&nbsp; di dalam method constructor, kita dapat memanggil constructor class asalnya dan mengakses property dan method nya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2>Getters dan Setters<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pada class juga kita dapat menggunakan getter dan setter. getter dan setter dapat digunakan untuk melakukan proses tertentu pada suatu property, sebelum property tersebut digunakan. Untuk menambahak getter dan setter pada class, gunakan keyword <code>get<\/code> dan <code>set<\/code>. (Meskipun getter merupakan sebuah method, namun dalam menggunakannya tidak digunakan \"( )\" setelah memanggil method tersebut, seperti pada contoh di bawah).<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\"> class Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname = brand;\r\n&nbsp; }\r\n&nbsp; get cnam() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return this.carname;\r\n&nbsp; }\r\n&nbsp; set cnam(x) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname = x;\r\n&nbsp; }\r\n}\r\n\r\nmycar = new Car(\"Ford\");\r\nconsole.log(mycar.cnam); \/\/ Ford\r\n\/\/ getter cnam digunakan tanpa \"()\"<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Biasanya untuk membedakan method dengan property, property ditulis dengan menggunakan \"_\" di depan namanya, sementara method (termasuk getter dan setter) tidak.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">class&nbsp;Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this._carname&nbsp;= brand;\r\n&nbsp; }\r\n&nbsp; get carname() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this._carname;\r\n&nbsp; }\r\n&nbsp; set carname(x) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this._carname&nbsp;= x;\r\n&nbsp; }\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nmycar.carname&nbsp;=&nbsp;\"Volvo\"; \/\/ memanggil setter, mengubah Ford menjadi Volvo\r\nconsole.log(mycar.carname); \/\/ Volvo\r\n\r\n<\/pre>\r\n<h2>Relasi Antar class<\/h2>\r\n<p>Di dalam konsep pemrograman OOP kita dapat membuat suatu program dengan mengimplementasikan relasi antar class yang terdapat pada program tersebut. OOP menganggap segala sesuatu dapat digambarkan sebagai object yang mempunyai atribut dan metode tertentu dan dapat berinteraksi dengan object lainnya.&nbsp;<\/p>\r\n<p>Contohnya: sebuah object dari class University dapat memiliki atribut nama, alamat, tahun berdiri, dst. class University tersebut memiliki relasi dengan class Department dan class Student. Contoh relasinya yaitu suatu object University memiliki banyak object Department di dalamnya, dan University dapat mendaftarkan Student baru sebagai peserta didik nya.&nbsp;<\/p>\r\n<p>Terdapat tiga relasi antar class yaitu : Association, Aggregation, dan Composition.<\/p>\r\n<h3>Association<\/h3>\r\n<p>Assosiasi adalah sebuah relasi dimana semua object memiliki lifecycle nya sendiri dan tidak ada yang bertindak sebagai parent\/owner atas class lainnya. Contohnya class Teacher dan class Student. Teacher dapat memiliki banyak Student. Begitu pun Student dapat memiliki banyak Teacher yang diikuti. Kedua class dapat membuat Object nya masing-masing tanpa tergantung oleh object lain. Ketika object Teacher dihapus maka object Student tetap ada.<\/p>\r\n<div>\r\n<pre>class&nbsp;Teacher&nbsp;{<br \/><br \/>&nbsp;&nbsp;constructor(name)&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._name&nbsp;=&nbsp;name<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._students&nbsp;=&nbsp;[]<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>&nbsp;&nbsp;addStudent(student)&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._students.push(student)<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>&nbsp;&nbsp;get&nbsp;students()&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this._students<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>}<br \/><br \/>class&nbsp;Student&nbsp;{<br \/><br \/>&nbsp;&nbsp;constructor(name)&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._name&nbsp;=&nbsp;name<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._teachers&nbsp;=&nbsp;[]<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>&nbsp;&nbsp;chooseTeachers(teacher)&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._teachers.push(teacher)<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>&nbsp;&nbsp;get&nbsp;teachers()&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this._teachers<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>}<br \/><br \/>\/\/&nbsp;Masing&nbsp;masing&nbsp;class&nbsp;dibuat&nbsp;object&nbsp;nya&nbsp;sendiri-sendiri<br \/><br \/>const&nbsp;abduh&nbsp;=&nbsp;new&nbsp;Teacher(\"abduh\")<br \/><br \/>const&nbsp;regi&nbsp;=&nbsp;new&nbsp;Student(\"Regi\")<br \/><br \/>\/\/&nbsp;suatu&nbsp;object&nbsp;dapat&nbsp;memiliki&nbsp;object&nbsp;class&nbsp;lainnya&nbsp;<br \/><br \/>abduh.addStudent(regi)<br \/><br \/>console.log(abduh.students)<br \/><br \/>regi.chooseTeachers(abduh)<br \/><br \/>console.log(regi.teachers)<\/pre>\r\n<\/div>\r\n<p>&nbsp;<\/p>\r\n<h3>Aggregation<\/h3>\r\n<p>Aggregation adalah relasi yang lebih khusus dari Association dimana suatu class dapat berdiri sendiri tapi terdapat class child dan class parent. class yang menjadi child&nbsp; tidak dapat memiliki class parent sedangkan class Parent dapat memiliki class child. Kedua class dapat membuat object nya masing-masing tanpa tergantung oleh object lain. Ketika object Parent dihapus maka object child tetap ada (tidak ikut terhapus).<\/p>\r\n<p>Contohnya adalah Teacher dan Department. Suatu Department dapat memiliki banyak Teacher. Tapi Teacher tidak dapat memiliki Department. Ketika object Department dihapus\/tidak ada maka object Teacher tetap ada.&nbsp;<\/p>\r\n<div>\r\n<pre>class&nbsp;Teacher&nbsp;{<br \/><br \/>&nbsp;&nbsp;constructor(name)&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._name&nbsp;=&nbsp;name<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._students&nbsp;=&nbsp;[]<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>&nbsp;&nbsp;addStudent(student)&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._students.push(student)<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>&nbsp;&nbsp;get&nbsp;students()&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this._students<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>}<br \/><br \/>class&nbsp;Department&nbsp;{<br \/><br \/>&nbsp;&nbsp;constructor(name)&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._name&nbsp;=&nbsp;name<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._teachers&nbsp;=&nbsp;[]<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>&nbsp;&nbsp;assignTeacher(teacher)&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._teachers.push(teacher)<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>&nbsp;&nbsp;get&nbsp;teachers()&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this._teachers<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>}<br \/><br \/>\/\/&nbsp;Object&nbsp;Creation<br \/>const&nbsp;abduh&nbsp;=&nbsp;new&nbsp;Teacher(\"abduh\")<br \/>const&nbsp;fmipa&nbsp;=&nbsp;new&nbsp;Department(\"FMIPA\")<br \/><br \/>fmipa.assignTeacher(abduh)<br \/><br \/>console.log(fmipa.teachers)<\/pre>\r\n<\/div>\r\n<p>&nbsp;<\/p>\r\n<h3>Composition<\/h3>\r\n<p>Composition adalah relasi antar dua object dimana lifecycle object child bergantung dengan object parent nya. Ciri dari relasi ini yaitu object child diinstance di dalam class parent nya. Berbeda dengan aggregation, di dalam composition ketika object parent nya tidak ada \/ dihapus maka object child akan ikut terhapus.&nbsp;<\/p>\r\n<p>Contohnya adalah University dan Department. suatu Department hanya akan eksis di suatu University tertentu. Ketika University nya dihapus\/tidak ada maka Department akan ikut terhapus.&nbsp;<\/p>\r\n<pre><code><br \/><br \/>class&nbsp;Department&nbsp;{<br \/><br \/>&nbsp;&nbsp;constructor(name)&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._name&nbsp;=&nbsp;name<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._teachers&nbsp;=&nbsp;[]<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>&nbsp;&nbsp;assignTeacher(teacher)&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;this._teachers.push(teacher)<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>&nbsp;&nbsp;get&nbsp;teachers()&nbsp;{<br \/><br \/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this._teachers<br \/><br \/>&nbsp;&nbsp;}<br \/><br \/>}<br \/><br \/><br \/>class&nbsp;University&nbsp;{<\/code><br \/><br \/><code>&nbsp;&nbsp;constructor(name)&nbsp;{<\/code><br \/><br \/><code>&nbsp;&nbsp;&nbsp;&nbsp;this._name&nbsp;=&nbsp;name<\/code><br \/><br \/><code>&nbsp;&nbsp;&nbsp;&nbsp;this._departments&nbsp;=&nbsp;[]<\/code><br \/><br \/><code>&nbsp;&nbsp;}<\/code><br \/><br \/><code> &nbsp;addDepartment(department_name) {<\/code><\/pre>\r\n<pre><code> &nbsp; &nbsp;var department = new Department(department_name)<br \/><\/code> <br \/><code> &nbsp;&nbsp; this._departments.push(department)<\/code><br \/><br \/><code>&nbsp;&nbsp;}<\/code><br \/><br \/><code>&nbsp;&nbsp;get&nbsp;departments()&nbsp;{<\/code><br \/><br \/><code>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this._departments<\/code><br \/><br \/><code>&nbsp;&nbsp;}<\/code><br \/><br \/><code>}<br \/><\/code><\/pre>\r\n<pre><code>const&nbsp;itebe&nbsp;=&nbsp;new&nbsp;University(\"itebeh\")<\/code><br \/><br \/><code>itebe.addDepartment(\"fmipa\")<\/code><br \/><br \/><code>console.log(itebe.departments)<\/code><\/pre>\r\n<pre>&nbsp;<\/pre>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<h3>Sumber<\/h3>\r\n<p>1. <a href=\"https:\/\/adnansetiawan.com\/2017\/01\/15\/perbedaan-asosiasi-agregasi-dan-komposisi-pada-object-oriented-programming\/\" target=\"_blank\" rel=\"noopener\">https:\/\/adnansetiawan.com\/2017\/01\/15\/perbedaan-asosiasi-agregasi-dan-komposisi-pada-object-oriented-programming\/<\/a><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-07-20 09:00:00","status_publish":"publish","urutan":2,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:51:30","updated_at":"2021-07-21 17:15:29","waktu_publish_formatted":" Selasa, 20 Juli 2021. 09:00:00 WIB."},{"id":608,"uuid":"6628a7ef-7ce0-45a9-ae59-43c22654c84a","author_user_id":8089,"materi_section_id":174,"judul":"Hari 8 - Asynchronous","permalink":"hari-8-asynchronous","konten":"<div class=\"entry-content\">\r\n<p>Di dalam dunia pemrograman terdapat dua cara dalam menjalankan program: Synchronous dan Asynchronous. Synchronous artinya program berjalan secara berurutan sedangkan Asynchronous artinya program berjalan bersama-sama.<\/p>\r\n<p>Terkadang di dalam program yang kita buat terdapat suatu sintaks yang mengharuskan code pada baris tersebut untuk dijalankan terlebih dahulu sebelum menjalankan sintaks pada baris selanjutnya. Hal ini dikenal dengan istilah&nbsp;<strong>blocking<\/strong>. Sebaliknya&nbsp;<strong>non-blocking<\/strong>&nbsp;artinya program berjalan dengan mengeksekusi sintaks dari baris ke baris secara paralel (bersama-sama) .<\/p>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter size-large\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LmaxxI-WCdSbno_EMIf%2F-Lmb1Y86xkSMjjQR9D_D%2Fcontrol-io.svg?alt=media&amp;token=28454ce2-c28b-4149-bd72-7fa57d83737c\" alt=\"\" \/><\/figure>\r\n<\/div>\r\n<p>Perhatikan contoh program di bawah ini:<\/p>\r\n<pre class=\"wp-block-preformatted\">setTimeout(function() {\r\n  console.log(\"saya dijalankan belakangan\")\r\n}, 3000)\r\n \r\nconsole.log(\"saya dijalankan pertama\") <\/pre>\r\n<p>Jika kita jalankan program di atas, maka yang akan tampil terlebih dahulu di console adalah &ldquo;saya dijalankan pertama&rdquo; walaupun sintaksnya ditulis belakangan setelah function setTimeout. Function setTimeout di atas merupakan salah satu contoh function asynchronous di Javascript.<\/p>\r\n<p>Cara untuk mengatasi Asynchronous seperti function setTimeout adalah dengan&nbsp;<strong>Callback<\/strong>&nbsp;atau dengan&nbsp;<strong>Promise<\/strong>.<\/p>\r\n<h2 id=\"callback\"><strong>Callback&nbsp;<\/strong><\/h2>\r\n<h3 id=\"membuat-callback\"><strong>Membuat Callback&nbsp;<\/strong><\/h3>\r\n<p>Callback adalah function yang dipanggil ketika function lain selesai menjalankan programnya. Contoh sederhana Callback adalah pada function setTimeout di atas. function setTimeout menerima dua parameter yaitu callback dan waktu tunggu (timeout). function tersebut menjalankan timeout terlebih dahulu lalu ketika waktu yang diset sudah dilewati maka function callback akan dipanggil.<\/p>\r\n<p>Contoh untuk membuat callback seperti berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Deklarasi function yang memilik callback sebagai parameter\r\nfunction periksaDokter(nomerAntri, callback) {\r\n    if(nomerAntri &gt; 50 ) {\r\n        callback(false)\r\n    } else if(nomerAntri &lt; 10) {\r\n        callback(true)\r\n    }    \r\n} <\/pre>\r\n<p>Misalkan kita ingin periksa ke dokter yang antriannya sering panjang dan memakai nomer antri melalui pemesanan online. Setelah registrasi online lalu kita melakukan pemesanan dan menunggu nomer antrian. Function di atas menerima parameter nomer antri dan sebuah callback. Dilakukan pengecekan kondisi jika nomor antriannya lebih dari 50 maka lebih baik jalan-jalan dulu daripada menunggu, tapi jika nomor antriannya kurang dari 10 tentunya kita harus standby lagi di klinik untuk dipanggil.<\/p>\r\n<h3 id=\"menjalankan-callback\"><strong>Menjalankan Callback<\/strong><\/h3>\r\n<p>Setelah dideklarasi function yang memiliki callback, kini kita jalankan function tersebut.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Menjalankan function periksaDokter yang sebelumnya sudah dideklarasi\r\nperiksaDokter(65, function(check) {\r\n    if(check) {\r\n        console.log(\"sebentar lagi giliran saya\")\r\n    } else {\r\n        console.log(\"saya jalan-jalan dulu\")\r\n    }\r\n}) <\/pre>\r\n<p>Karena kita tidak ingin menunggu maka kita gunakan callback untuk mengecek apakah nomer antriannya masih lama atau tidak. Jadi ketika dicek ternyata nomer antriannya masih lama maka hasil return (callback) dari function periksaDokter bernilai false (check = false), sebaliknya jika sudah sebentar lagi akan diberikan callback dengan nilai true (check = true) .<\/p>\r\n<p>Ketika menjalankan function periksaDokter, diberikan parameter pertama yaitu nomer antrian 65 dan parameter kedua adalah sebuah deklarasi function yang merupakan callback. Seperti sudah dideklarasikan di periksaDokter bahwa callback dipanggil dengan satu parameter bernilai boolean.<\/p>\r\n<h2 id=\"promise\"><strong>Promise&nbsp;<\/strong><\/h2>\r\n<p>Sesuai dengan namanya, Promise berarti janji. Seperti janji yang biasanya memakan waktu dan janji bisa ditepati (resolve) atau diingkari (reject). Misalkan pada contoh di bawah ini seorang anak dijanjikan mendapatkan sebuah handphone baru oleh Ibunya. Jika Ibunya sedang bahagia maka janji sebuah handphone baru ditepati, selain itu jika ibunya sedang marah maka janji diingkari.<\/p>\r\n<h3 id=\"membuat-promise\"><strong>Membuat Promise<\/strong><\/h3>\r\n<p>Cara membuat promise adalah dengan menginstance sebuah class Promise. class Promise tersebut sudah disediakan di Javascript. Parameter yang dikirim ketika melakukan instance class Promise yaitu sebuah function yang menerima dua parameter yaitu resolve dan reject.<\/p>\r\n<pre class=\"wp-block-preformatted\">var isMomHappy = false;\r\n \r\n\/\/ Promise\r\nvar willIGetNewPhone = new Promise(\r\n    function (resolve, reject) {\r\n        if (isMomHappy) {\r\n            var phone = {\r\n                brand: 'Samsung',\r\n                color: 'black'\r\n            };\r\n            resolve(phone); \/\/ fulfilled atau janji dipenuhi\r\n        } else {\r\n            var reason = new Error('mom is not happy');\r\n            reject(reason); \/\/ reject (ingkar)\r\n        }\r\n \r\n    }\r\n); <\/pre>\r\n<h3 id=\"menjalankan-promise\"><strong>Menjalankan Promise&nbsp;<\/strong><\/h3>\r\n<p>Menjalankan promise seperti kita menagih janji yang sudah dibuat.<\/p>\r\n<pre class=\"wp-block-preformatted\">function askMom() {\r\n    willIGetNewPhone\r\n        .then(function (fulfilled) {\r\n            \/\/ yay, you got a new phone\r\n            console.log(fulfilled);\r\n         \/\/ output: { brand: 'Samsung', color: 'black' }\r\n        })\r\n        .catch(function (error) {\r\n            \/\/ oops, mom don't buy it\r\n            console.log(error.message);\r\n         \/\/ output: 'mom is not happy'\r\n        });\r\n}\r\n \r\n\/\/ Tanya Mom untuk menagih janji\r\naskMom() <\/pre>\r\n<p>Untuk menagih janji dibuat sebuah function dengan nama askMom yang isinya adalah menagih janji willIGetNewPhone. Ketika anak menagih janji menggunakan function askMom() maka promise willIGetNewPhone dipanggil dan terdapat dua methods yaitu&nbsp;<code>then<\/code>&nbsp;dan&nbsp;<code>catch<\/code>&nbsp;. Method .then() dan .catch() keduanya menerima parameter function. Resolve yang dijalankan di pendeklarasian promise akan mengirim handphone baru dan ditangkap di method&nbsp;<code>.then()<\/code>. Sedangkan reject pada pendeklarasian promise akan mengirim pesan error atau alasan kenapa janji diingkari dan ditangkap di method&nbsp;<code>.catch()<\/code>.<\/p>\r\n<p>&nbsp;<\/p>\r\n<h2>Nodejs File System (fs)<\/h2>\r\n<p>Terdapat banyak contoh library atau module yang menggunakan callback atau promise sebagai cara yang digunakan untuk mengatasi asynchronous. Salah satu contoh function nya adalah node js file system (<code>fs<\/code>) . <code>fs <\/code>adalah library untuk melakukan pembacaan dan penulisan dari dan ke dalam suatu file yang tersedia di nodejs. Kita tidak usah install apa pun menggunakan npm untuk mendapatkan modul <code>fs<\/code> tersebut. cukup lakukan import module dengan nama 'fs' seperti berikut:&nbsp;<\/p>\r\n<p><code>const fs = require('fs')<\/code><\/p>\r\n<p>Pada pembahasan materi ini kita akan gunakan module fs untuk membaca data dari file (readFile), atau menulis data ke dalam file (writeFile) baik dengan cara callback maupun menggunakan promises.<\/p>\r\n<h3>fs callback<\/h3>\r\n<ul>\r\n<li><strong>read file<\/strong><br \/>metode fs untuk membaca data dari suatu file. Parameter pertama adalah path atau alamat dari file yang ingin dibaca dan parameter kedua adalah function callback yang menerima parameter error dan data. jika ditemukan error maka kita bisa meneruskan error tersebut ke tampilan. jika tidak error maka kita akan menerima data yang dibaca dalam bentuk buffer atau data dalam bentuk aliran (stream). <br \/><br \/>Contoh di bawah ini terdapat suatu file dengan nama \"data.json\"&nbsp; yang berisi data seperti berikut&nbsp;<br \/>\/\/ isi file data.json<br \/><code>[<\/code><br \/><code> &nbsp;{<\/code><br \/><code> &nbsp;&nbsp;&nbsp;\"name\":&nbsp;\"Abduh\",<\/code><br \/><code> &nbsp;&nbsp;&nbsp;\"kelas\":&nbsp;\"adonis\"<\/code><br \/><code> &nbsp;}<\/code><br \/><code>]<br \/><br \/><\/code>kemudian kita dapat mencoba untuk menampilkan data yang terbaca dari data.json tersebut seperti berikut ini:&nbsp;<br \/><br \/><code>const path = 'data.json'<\/code><br \/><code>const readData = () =&gt; {<\/code><br \/><code>&nbsp; &nbsp; fs.readFile(path, (err, data) =&gt; { <\/code><br \/><code>&nbsp; &nbsp; &nbsp; &nbsp; if (err) console.log(err)<\/code><br \/><code>&nbsp; &nbsp; &nbsp; &nbsp; console.log(JSON.parse(data))<\/code><br \/><code>&nbsp; &nbsp; })<\/code><br \/><code>}<br \/>\/\/ jalankan readData<br \/>readData()<\/code><br \/><br \/>untuk dapat membaca file stream atau buffer kita dapat gunakan sintaks<code> JSON.parse()&nbsp;<\/code>&nbsp;<\/li>\r\n<\/ul>\r\n<\/div>\r\n<div class=\"entry-content\">\r\n<ul>\r\n<li><strong>Write File<\/strong><\/li>\r\n<\/ul>\r\n<div>\r\n<div>&nbsp;<\/div>\r\n<\/div>\r\n<h3>fs promises<\/h3>\r\n<p>&nbsp;<\/p>\r\n<h2>Video Tutorial<\/h2>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/IgdGz_Tztvg\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/5nM_SHB_7a0\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/yurfImFg4sI\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/7fTNjrcLzUI\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/zOOQ9BKjnik\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<\/div>\r\n<div id=\"gtx-trans\" style=\"position: absolute; left: 95px; top: 1891.94px;\">\r\n<div class=\"gtx-trans-icon\">&nbsp;<\/div>\r\n<\/div>","waktu_publish":"2021-07-21 09:00:00","status_publish":"publish","urutan":3,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:51:58","updated_at":"2021-07-11 09:10:14","waktu_publish_formatted":" Rabu, 21 Juli 2021. 09:00:00 WIB."},{"id":609,"uuid":"51ce50d3-b7d7-4054-9046-701d4f8bd98f","author_user_id":8089,"materi_section_id":174,"judul":"Hari 9 - SQL Database","permalink":"hari-9-sql-database","konten":"<div class=\"entry-content\">\r\n<div class=\"entry-content\">\r\n<p class=\"has-large-font-size\"><strong>Apa Itu SQL?<\/strong><\/p>\r\n<p>SQL&nbsp;atau&nbsp;Structured Query Language) adalah sebuah&nbsp;bahasa&nbsp;yang digunakan untuk mengakses&nbsp;data&nbsp;dalam&nbsp;basis rasional. sumber wikipedia<\/p>\r\n<p class=\"has-large-font-size\"><strong>DATABASE<\/strong><\/p>\r\n<p><strong>Pangkalan data<\/strong>&nbsp;(disebut juga&nbsp;<strong>basis data<\/strong>;&nbsp;<a href=\"https:\/\/id.wikipedia.org\/wiki\/Bahasa_Inggris\">bahasa Inggris<\/a>:&nbsp;<em>database<\/em>) adalah kumpulan data yang terorganisir, yang umumnya disimpan dan diakses secara elektronik dari suatu sistem komputer. Pada saat pangkalan data menjadi semakin kompleks, maka pangkalan data dikembangkan menggunakan teknik perancangan dan pemodelan secara formal. sumber wikipedia<\/p>\r\n<p><strong>Cara Menjalankan Mysql xammp di command prompt<\/strong><\/p>\r\n<p>nyalakan dulu mysql dan apache di xammp<\/p>\r\n<p>setelah itu cd folder xampp\/mysql\/bin<\/p>\r\n<p>lalu setealah masuk di folder bin ketik di cmd\/terminal mysql -uroot<\/p>\r\n<p>&nbsp;<\/p>\r\n<p class=\"has-medium-font-size\"><strong>Membuat database di sql<\/strong><\/p>\r\n<p>create database nama_databasenya;<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-10281\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-17.png\" sizes=\"(max-width: 411px) 100vw, 411px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-17.png 411w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-17-300x50.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-17-404x69.png 404w\" alt=\"\" width=\"411\" height=\"69\" \/><\/figure>\r\n<p class=\"has-medium-font-size\"><strong>Menampilkan semua database<\/strong><\/p>\r\n<p>show databases;<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-10283\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-19.png\" sizes=\"(max-width: 348px) 100vw, 348px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-19.png 348w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-19-300x258.png 300w\" alt=\"\" width=\"348\" height=\"299\" \/><\/figure>\r\n<p class=\"has-medium-font-size\"><strong>Memanggil database<\/strong><\/p>\r\n<p>use nama_databasenya;<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-10282\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-18.png\" alt=\"\" width=\"280\" height=\"74\" \/><\/figure>\r\n<p class=\"has-medium-font-size\"><strong>Membuat table<\/strong><\/p>\r\n<p>CREATE&nbsp;TABLE&nbsp;<em>nama_tabel&nbsp;<\/em>(<br \/><em>&nbsp;&nbsp;&nbsp; kolom1 tipedata<\/em>,<br \/><em>&nbsp;&nbsp;&nbsp; kolom2 tipedata<\/em>,<br \/><em>&nbsp;&nbsp;&nbsp; kolom3 tipedata<\/em>,<br \/>&nbsp;&nbsp; &hellip;.<br \/>);<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-10287\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-20.png\" sizes=\"(max-width: 709px) 100vw, 709px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-20.png 709w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-20-300x18.png 300w\" alt=\"\" width=\"709\" height=\"43\" \/><\/figure>\r\n<p class=\"has-medium-font-size\"><strong>Melihat deskripsi tabel<\/strong><\/p>\r\n<p>DESCRIBE&nbsp;<em>nama_tabel<\/em>;<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-10292\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-21.png\" sizes=\"(max-width: 551px) 100vw, 551px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-21.png 551w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-21-300x99.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-21-548x182.png 548w\" alt=\"\" width=\"551\" height=\"182\" \/><\/figure>\r\n<p class=\"has-medium-font-size\"><strong>Insert data pada table<\/strong><\/p>\r\n<p>INSERT&nbsp;INTO&nbsp;<em>table_name<\/em>&nbsp;(<em>kolom<\/em>1, kolom2,<em>&nbsp;kolom3<\/em>, &hellip;)<br \/>VALUES&nbsp;(<em>value1<\/em>,<em>&nbsp;value2<\/em>,<em>&nbsp;value3<\/em>, &hellip;);<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-10293\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-22.png\" sizes=\"(max-width: 545px) 100vw, 545px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-22.png 545w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-22-300x39.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-22-535x71.png 535w\" alt=\"\" width=\"545\" height=\"71\" \/><\/figure>\r\n<p class=\"has-medium-font-size\"><strong>Menampilkan semua data pada table<\/strong><\/p>\r\n<p>SELECT&nbsp;*&nbsp;FROM&nbsp;nama_tabel;<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-10294\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-23.png\" sizes=\"(max-width: 396px) 100vw, 396px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-23.png 396w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-23-300x111.png 300w\" alt=\"\" width=\"396\" height=\"147\" \/><\/figure>\r\n<p class=\"has-medium-font-size\"><strong>Memanpilkan data pada table berdasarkan kolomnya<\/strong><\/p>\r\n<p>SELECT&nbsp;<em>kolom1<\/em>,<em>&nbsp;kolom2, &hellip;<\/em><br \/>FROM&nbsp;<em>table_name<\/em>;<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-10295\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-24.png\" sizes=\"(max-width: 472px) 100vw, 472px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-24.png 472w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-24-300x88.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-24-470x139.png 470w\" alt=\"\" width=\"472\" height=\"139\" \/><\/figure>\r\n<p class=\"has-medium-font-size\"><strong>Mempilkan data dengan kondisi<\/strong><\/p>\r\n<p>SELECT&nbsp;<em>*<\/em><br \/>FROM&nbsp;<em>nama_tabel<\/em><br \/>WHERE&nbsp;<em>condition<\/em>;<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-10307\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-28.png\" sizes=\"(max-width: 587px) 100vw, 587px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-28.png 587w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-28-300x81.png 300w\" alt=\"\" width=\"587\" height=\"158\" \/><\/figure>\r\n<p class=\"has-medium-font-size\"><strong>Update data pada table<\/strong><\/p>\r\n<p>UPDATE&nbsp;<em>nama_table<\/em><br \/>SET&nbsp;<em>kolom1&nbsp;<\/em>=<em>&nbsp;value1<\/em>,<em>&nbsp;kolom2&nbsp;<\/em>=<em>&nbsp;value2<\/em>, &hellip;<br \/>WHERE&nbsp;<em>condition<\/em>;<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-10298\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-25.png\" sizes=\"(max-width: 656px) 100vw, 656px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-25.png 656w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-25-300x48.png 300w\" alt=\"\" width=\"656\" height=\"105\" \/><\/figure>\r\n<p class=\"has-medium-font-size\"><strong>Hapus data pada table<\/strong><\/p>\r\n<p>DELETE&nbsp;FROM&nbsp;<em>nama_table&nbsp;<\/em>WHERE&nbsp;<em>condition<\/em>;<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-10301\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-27.png\" sizes=\"(max-width: 516px) 100vw, 516px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-27.png 516w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/image-27-300x39.png 300w\" alt=\"\" width=\"516\" height=\"67\" \/><\/figure>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>Review Sanbercode<\/strong><\/p>\r\n<ul>\r\n<li>\r\n<p><strong>Review Materi Sanbercode<\/strong> : <a href=\"https:\/\/www.youtube.com\/playlist?list=PL8YCzrSDCR7jYVpNduUk-2JSNbstVBQu9\">https:\/\/www.youtube.com\/playlist?list=PL8YCzrSDCR7jYVpNduUk-2JSNbstVBQu9<\/a><\/p>\r\n<\/li>\r\n<li>Referensi lain WPU : <a href=\"https:\/\/www.youtube.com\/watch?v=fxe6qev-bno\">https:\/\/www.youtube.com\/watch?v=fxe6qev-bno<\/a><\/li>\r\n<li>Referensi lain Sekolah koding : <a href=\"https:\/\/www.youtube.com\/playlist?list=PLCZlgfAG0GXBWjBVQYxtx33htv6PqbKMl\">https:\/\/www.youtube.com\/playlist?list=PLCZlgfAG0GXBWjBVQYxtx33htv6PqbKMl<\/a>&nbsp;&nbsp;\r\n<p>&nbsp;<\/p>\r\n<\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<\/div>\r\n<\/div>","waktu_publish":"2021-07-22 09:00:00","status_publish":"publish","urutan":4,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:52:28","updated_at":"2021-07-11 09:10:43","waktu_publish_formatted":" Kamis, 22 Juli 2021. 09:00:00 WIB."},{"id":610,"uuid":"81493d45-fd52-4549-a16b-b08b0960e0cb","author_user_id":8089,"materi_section_id":174,"judul":"Hari 10 - ERD Database","permalink":"hari-10-erd-database","konten":"<p><em>Database<\/em>&nbsp;atau basis data merupakan kumpulan berbagai informasi yang disimpan secara sistematis pada komputer agar informasi tersebut dapat diolah kembali dengan mudah. Dalam pengembangan sebuah website,&nbsp;<em>Database<\/em>&nbsp;berperan penting sebagai penyimpanan dan penyedia informasi yang ditampilkan ke pengguna.<\/p>\r\n<p>Semakin kompleks logika bisnis dan semakin banyak jumlah pengguna sebuah website maka akan membutuhkan&nbsp;<em>database&nbsp;<\/em>yang baik dalam menyimpan dan menyediakan data.<\/p>\r\n<p>Kriteria database yang baik ditinjau dari beberapa faktor yakni:<\/p>\r\n<ul>\r\n<li>kecepatan<\/li>\r\n<li>performa<\/li>\r\n<li>akurasi<\/li>\r\n<li>availability<\/li>\r\n<li>terhindar dari duplikasi dan inkonsistensi data<\/li>\r\n<li>keamanan<\/li>\r\n<\/ul>\r\n<p><em>Database<\/em>&nbsp;ditinjau dari sifat relasional nya terbagi menjadi dua yaitu:&nbsp;<em><strong>relational database<\/strong><\/em>&nbsp;dan&nbsp;<em><strong>non-relational database<\/strong><\/em>. Pada artikel ini akan dipelajari&nbsp;<em>relational database<\/em>&nbsp;SQL menggunakan mysql.<\/p>\r\n<p>Pada&nbsp;<em>relational database<\/em>, tabel-tabel berhubungan satu sama lain menggunakan&nbsp;<em>Primary Key<\/em>&nbsp;(<strong>PK<\/strong>).&nbsp;<em>Primary Key<\/em>&nbsp;adalah nilai yang dipakai untuk mengidentifikasi suatu baris data pada&nbsp;<em>database<\/em>.&nbsp;<strong>PK<\/strong>&nbsp;bersifat unik sehingga tidak dapat ditemukan dua data dengan&nbsp;<em><strong>PK<\/strong>&nbsp;<\/em>yang sama.<\/p>\r\n<p>PK juga digunakan sebagai patokan atau&nbsp;<em>reference<\/em>&nbsp;untuk menggabung data dari dua tabel menggunakan JOIN.<\/p>\r\n<h2 id=\"erd\">ERD<\/h2>\r\n<p>Entity Relationship Diagram (ERD), yaitu sebuah model untuk menyusun database agar dapat menggambarkan data yang mempunyai relasi dengan database yang akan didesain.(1)<\/p>\r\n<p>Tujuan pembuatan ERD adalah memvisualisasikan keterhubungan (relasi) antar tabel dan membuat cetak biru dari&nbsp;<em>database<\/em>&nbsp;yang akan dibuat.<\/p>\r\n<p>Sebelum membahas lebih jauh tentang ERD, ada beberapa istilah umum yang harus diketahui yaitu :<\/p>\r\n<h3 id=\"1-entitas-entity\">1. Entitas (Entity)<\/h3>\r\n<p>Entitas adalah sebuah objek yang merepresentasikan suatu baris data pada tabel. satu entitas akan memiliki karakteristik tersendiri berdasarkan atribut-atribut yang dimiliki. Contohnya pada sebuah database toko online terdapat entitas&nbsp;<em>pelanggan<\/em>,&nbsp;<em>profil<\/em>,&nbsp;<em>barang,<\/em>&nbsp;<em>transaksi<\/em>, dan&nbsp;<em>kategori<\/em><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8173\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-5.png\" sizes=\"(max-width: 564px) 100vw, 564px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-5.png 564w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-5-300x160.png 300w\" alt=\"\" width=\"564\" height=\"301\" \/>\r\n<figcaption>contoh entitas di dalam database toko online<\/figcaption>\r\n<\/figure>\r\n<h3 id=\"2-atribut\">2. Atribut<\/h3>\r\n<p>Atribut adalah kolom-kolom data yang terdapat pada sebuah entitas dan berfungsi untuk mendeskripsikan karakteristik entitas tersebut. Di dalam sebuah entitas biasanya terdapat atribut kunci (<em>primary key<\/em>) yang merupakan pembeda antara satu entitas dengan entitas lainnya.<\/p>\r\n<p>Contohnya pada entitas pelanggan terdapat atribut id_pelanggan, nama, dan email. Setiap atribut dapat kita definisikan tipe data nya.<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8176\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-6.png\" alt=\"\" width=\"145\" height=\"149\" \/><\/figure>\r\n<p>&nbsp;<\/p>\r\n<h3 id=\"3-relasi\">3. Relasi<\/h3>\r\n<p>Relasi yaitu representasi dari hubungan antar entitas. terdapat tiga jenis relasi yaitu :&nbsp;<em>one to one<\/em>,&nbsp;<em>one to many<\/em>,&nbsp;<em>many to many<\/em>. Pada ERD biasanya relasi digambarkan dengan garis. Setiap satu jenis relasi memiliki jenis garis yang berbeda dengan jenis relasi lainnya.<\/p>\r\n<h4><em>One to One<\/em><\/h4>\r\n<p>relasi&nbsp;<em>one to one<\/em>&nbsp;berarti satu entitas memiliki hubungan dengan satu entitas lainnya. Relasi ini digambarkan dengan garis seperti berikut<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8178\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-8.png\" alt=\"\" width=\"147\" height=\"19\" \/><\/figure>\r\n<p>Contohnya adalah seorang pelanggan akan memiliki satu profil saja. Begitu pula sebaliknya satu profile hanya dimiliki oleh seorang pelanggan saja.<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8179\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-9.png\" sizes=\"(max-width: 419px) 100vw, 419px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-9.png 419w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-9-300x143.png 300w\" alt=\"\" width=\"419\" height=\"200\" \/>\r\n<figcaption><\/figcaption>\r\n<\/figure>\r\n<p>Pada contoh di atas, terdapat&nbsp;<em>foreign key<\/em>&nbsp;yaitu suatu nilai pada suatu entitas yang berfungsi sebagai referensi dari entitas lain ketika data dari kedua entitas tersebut digabungkan (sql JOIN). Dalam hal ini entitas pelanggan mempunyai&nbsp;<em>foreign key<\/em>&nbsp;yaitu profil_id yang nilainya diperoleh dari&nbsp;<em>primary key<\/em>&nbsp;pada entitas profil.<\/p>\r\n<p>&nbsp;<\/p>\r\n<h4><em>One To Many<\/em><\/h4>\r\n<p>Relasi&nbsp;<em>One To&nbsp;<\/em>Many yaitu ketika satu entitas memiliki hubungan dengan banyak entitas lainnya. Contohnya dalam hal ini adalah di dalam satu kategori terdapat banyak barang yang terkait dengan kategori tersebut. Sebaliknya, untuk satu barang dapat kita klasifikasikan ke satu kategori saja.<\/p>\r\n<p>Relasi ini biasanya digambarkan dengan simbol garis seperti berikut<\/p>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter size-large\"><img class=\"wp-image-8182\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-12.png\" alt=\"\" width=\"90\" height=\"22\" \/>\r\n<figcaption>simbol garis one to many<\/figcaption>\r\n<\/figure>\r\n<\/div>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8181\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-11.png\" sizes=\"(max-width: 502px) 100vw, 502px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-11.png 502w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-11-300x161.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-11-500x270.png 500w\" alt=\"\" width=\"502\" height=\"270\" \/><\/figure>\r\n<p>pada contoh di atas, entitas barang akan memiliki&nbsp;<em>foreign key<\/em>&nbsp;yang mereferensi ke&nbsp;<em>primary key<\/em>&nbsp;pada entitas kategori.<\/p>\r\n<h4><em>Many To Many<\/em><\/h4>\r\n<p>Relasi&nbsp;<em>Many To Many<\/em>&nbsp;adalah ketika banyak entitas terhubung dengan banyak entitas lainnya. Contohnya adalah seorang pelanggan dapat membeli banyak barang yang berbeda jenis. Sebaliknya satu jenis barang dapat dibeli oleh banyak pelanggan yang berbeda.<\/p>\r\n<p>Untuk merepresentasikan hubungan antar dua entitas yang memiliki relasi ini maka dibutuhkan satu entitas tambahan yang biasa disebut dengan&nbsp;<strong>pivot<\/strong>. Dalam kaitannya dengan contoh antara entitas pelanggan dan barang maka entitas penghubungnya yaitu transaksi.<\/p>\r\n<p>&nbsp;<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8185\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-14.png\" sizes=\"(max-width: 718px) 100vw, 718px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-14.png 718w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-14-300x108.png 300w\" alt=\"\" width=\"718\" height=\"258\" \/><\/figure>\r\n<p>Pada entitas transaksi terdapat dua&nbsp;<em>foreign key<\/em>&nbsp;yaitu pelanggan_id dan barang_id yang terhubung masing-masing ke&nbsp;<em>primary key<\/em>&nbsp;pada entitas pelanggan dan entitas barang.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>Review Sanbercode :<\/strong><\/p>\r\n<ul>\r\n<li>\r\n<p>Pengenalan ERD : <a href=\"https:\/\/youtu.be\/OOAvDB3zGbo\">https:\/\/youtu.be\/OOAvDB3zGbo<\/a>&nbsp;<\/p>\r\n<\/li>\r\n<li>\r\n<p>Demo ERD : <a href=\"https:\/\/youtu.be\/KUItTk26sRc\">https:\/\/youtu.be\/KUItTk26sRc<\/a>&nbsp;<\/p>\r\n<\/li>\r\n<\/ul>\r\n<p><strong>Review Lainnya dari sanbercode:<\/strong><\/p>\r\n<ul>\r\n<li>ERD : <a href=\"https:\/\/www.youtube.com\/watch?v=y_q5x-YOxpM\">https:\/\/www.youtube.com\/watch?v=y_q5x-YOxpM<\/a>&nbsp;<\/li>\r\n<\/ul>","waktu_publish":"2021-07-23 09:00:00","status_publish":"publish","urutan":5,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:53:04","updated_at":"2021-07-11 09:11:00","waktu_publish_formatted":" Jumat, 23 Juli 2021. 09:00:00 WIB."}]},{"id":175,"uuid":"9431060f-b3b6-4bca-9f65-89329eb0a10d","materi_id":20,"nama":"Tugas Pekan 2","permalink":"tugas-pekan-2","urutan":5,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 09:28:12","updated_at":null,"posting":[{"id":611,"uuid":"c8996aa3-7595-425e-a76b-905206a89242","author_user_id":8089,"materi_section_id":175,"judul":"Hari 6 - Berlatih ES6","permalink":"hari-6-berlatih-es6","konten":"<p><!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li>Buatlah Folder baru dengan nama \"Tugas 6 - ES6\" di repositori tugas harian kalian.<\/li>\r\n<li>Buatlah satu folder di dalam folder tersebut dengan nama folder \"src\". Kerjakanlah tugas berikut ini pada folder src dengan menggunakan Sintaks ES6 yang telah kalian pelajari.<\/li>\r\n<li>Folder src tersebut dilakukan compile menggunakan Babel dengan output folder \"dist\". (Gunakan perintah git init untuk memulai project npm, lalu install library Babel js <code>npm install &nbsp;@babel\/core @babel\/cli @babel\/preset-env --save<\/code>)<\/li>\r\n<\/ol>\r\n<p>CATATAN: WAJIB menggunakan export &amp; import module. struktur folder tugas terdiri dari entry file <code>index.js<\/code> dan folder library <code>lib<\/code> . function dibuat di file yang ada di folder lib lalu diexport dan diimport ke index.js. Perintah menjalankan soal harus sesuai perintah.<\/p>\r\n<p><!-- \/wp:list --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Soal 1 Function Sapa<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>buatlah sebuah function yang menerima satu parameter berupa string nama. function tersebut me-return kalimat sapaan berdasarkan parameter nama yang diberikan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><em>Hint: gunakan arrow function, template literals<\/em><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Perintah :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>node dist sapa &lt;nama&gt;<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh Perintah:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>node dist sapa Abduh<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>\"halo selamat pagi, Abduh\"<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Soal 2 Konversi Object<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah sebuah function yang menerima tiga parameter yaitu nama, domisili, dan umur. function akan mengembalikan object berisi data dari parameter yang diberikan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><em>Hint: Enhanced Objects, Destructuring<\/em>, <em>arrow functions<\/em><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Perintah<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>node dist convert &lt;nama&gt; &lt;domisili&gt; &lt;umur&gt;<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh Perintah<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>node dist convert Bondra Medan 25<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>{ \"nama\" : \"Bondra\", \"domisili\": \"Medan\", \"umur\": 25 }<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Soal 3 Check Score<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah sebuah function yang menerima satu parameter berupa string. string tersebut berisi data-data yang dipisahkan dengan tanda koma(<code>,<\/code>) dan titik dua (<code>:<\/code>). Function tersebut mengolah data parameter menjadi sebuah object berdasarkan data yang dikirim dari parameter.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><em>Hint:<\/em> <em>Destructuring, Enhanced Objects<\/em>, <em>arrow function<\/em>s<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Perintah<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>node dist checkScore &lt;string-data&gt;<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh Perintah<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>node dist checkScore name:Ahmad,class:Adonis,score:89<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>{ \"name\": \"Ahmad\", \"class\": \"Adonis\", \"score\": 89 }<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Soal 4 Filter Data<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah sebuah function yang menerima dua paramater berupa array of object berisi data peserta bootcamp Indonesia Mengoding, dan parameter string nama kelas. Function tersebut akan mengembalikan array of object berisi data peserta yang sudah terfilter menggunakan parameter nama kelas yang diberikan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><em>Hint: Rest Operator, Enhance Object, arrow functions<\/em><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>CATATAN: data array tidak dikirimkan lewat perintah arguments node (process.argv) melainkan data nya ditulis langsung di library. Berikut ini data array nya:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>const data = [<br \/>&nbsp; { name: \"Ahmad\", class: \"adonis\"},<br \/>&nbsp; { name: \"Regi\", class: \"laravel\"},<br \/>&nbsp; { name: \"Bondra\", class: \"adonis\"},<br \/>&nbsp; { name: \"Iqbal\", class: \"vuejs\" },<br \/>&nbsp; { name: \"Putri\", class: \"Laravel\" }<br \/>]<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Perintah:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>node dist filterData &lt;nama-kelas&gt;<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh Perintah:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>node dist filterData adonis<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>[ <br \/>&nbsp; { name: \"Ahmad\", class: \"adonis\"} , <br \/>&nbsp; { name: \"Bondra\", class: \"adonis\"} <br \/>]<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-07-19 09:00:00","status_publish":"publish","urutan":1,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:53:49","updated_at":"2021-07-11 09:11:20","waktu_publish_formatted":" Senin, 19 Juli 2021. 09:00:00 WIB."},{"id":612,"uuid":"006b7b8e-8d29-460e-afff-411cf92d5914","author_user_id":8089,"materi_section_id":175,"judul":"Hari 7 - Berlatih Class Javascript & OOP","permalink":"hari-7-berlatih-class-javascript-oop","konten":"<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-dan-file-baru\"><strong>1. Menambahkan Folder Baru dan file baru<\/strong><\/h3>\r\n<p>Buat folder baru dengan nama &ldquo;Tugas 7 - Berlatih Class&rdquo;<\/p>\r\n<h3 id=\"1-membuat-file-html\"><strong>2. Kerjakan Soal di bawah ini<\/strong><\/h3>\r\n<p>kerjakan soal di bawah ini di dalam folder &ldquo;Tugas 7 - Berlatih Class&rdquo;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Kita akan membuat program untuk mensimulasikan sebuah <code>Bootcamp<\/code>. Di dalam sebuah <code>Bootcamp<\/code> terdapat banyak pilihan <code>Kelas<\/code> yang dapat diikuti oleh banyak <code>Student<\/code>.&nbsp;&nbsp;<\/p>\r\n<h2><strong>Release 0 Siapkan class Bootcamp dan class Kelas<\/strong><\/h2>\r\n<p>Buatlah class <code>Bootcamp<\/code> di file dengan nama <code>bootcamp.js<\/code> dan class Kelas di <code>kelas.js<\/code>.<\/p>\r\n<ol>\r\n<li>Tentukanlah property dan method apa saja yang terdapat di sebuah bootcamp. Misalkan properti nya<code> _name<\/code>, <code>_classes<\/code> dan method nya : <code>getter name<\/code> dan <code>getter classes <\/code>untuk mendapatkan data nama <code>Bootcamp&nbsp;<\/code> dan <code>Kelas<\/code> apa saja yang dimiliki. Selain itu ada method <code>createClass() <\/code>yaitu metode untuk membuat <code>Kelas<\/code> baru.<\/li>\r\n<li>Tentukanlah property dan method apa saja yang terdapat di sebuah Kelas. Misalkan properti nya <code>name<\/code> yaitu nama kelas, <code>level<\/code> yaitu tingkat kesulitan kelas (beginner, intermediate, advanced), <code>instructor <\/code>yaitu nama instruktur di kelas tersebut. buatlah getter dan setter untuk semua property tersebut.&nbsp;<\/li>\r\n<\/ol>\r\n<blockquote>\r\n<p>Hint: Kalian tentukan apakah Bootcamp dengan Kelas memiliki relasi Aggregation atau Composition lalu implementasikan pada class Bootcamp.<\/p>\r\n<\/blockquote>\r\n<p class=\"wp-block-preformatted\"><br \/>Contoh ketika kita membuat object Bootcamp baru dan membuat kelas Baru berdasarkan nama, level dan nama instrukturnya:<\/p>\r\n<div>\r\n<pre>const&nbsp;sanber&nbsp;=&nbsp;new&nbsp;Bootcamp(\"sanbercode\")<br \/><br \/>sanber.createClass(\"Laravel\", \"beginner\", \"abduh\")<br \/><br \/>sanber.createClass(\"React\", \"beginner\", \"abdul\")<br \/><br \/>console.log(sanber.classes)<\/pre>\r\n<div>&nbsp;<\/div>\r\n<div>Output console nya akan seperti berikut&nbsp;<br \/><br \/><\/div>\r\n<pre>[<br \/>&nbsp; Kelas {<br \/>&nbsp; &nbsp; _name: 'Laravel',<br \/>&nbsp; &nbsp; _students: [],<br \/>&nbsp; &nbsp; _level: 'beginner',<br \/>&nbsp; &nbsp; _instructor: 'abduh'<br \/>&nbsp; },<br \/>&nbsp; Kelas {<br \/>&nbsp; &nbsp; _name: 'React',<br \/>&nbsp; &nbsp; _students: [],<br \/>&nbsp; &nbsp; _level: 'beginner',<br \/>&nbsp; &nbsp; _instructor: 'abdul'<br \/>&nbsp; }<br \/>]<\/pre>\r\n<\/div>\r\n<h2><strong>Release 1 Register Student<\/strong><\/h2>\r\n<p>Suatu <code>Bootcamp<\/code> dapat membuka pendaftaran bagi setiap <code>Student<\/code> yang ingin mendaftar ke <code>Kelas <\/code>tertentu. Buatlah class <code>Student<\/code> di satu file dengan nama <code>student.js<\/code>. Tentukanlah property dan method yang ada pada object student.&nbsp;<\/p>\r\n<p>Property :&nbsp;<\/p>\r\n<ul>\r\n<li>_name : nama student<\/li>\r\n<li>_scores: <code>[] <\/code>&nbsp;nilai student sebuah array berisi 4 elemen dengan tipe data number. ke-empat elemen tersebut adalah nilai pada masing-masing quiz pekanan.<\/li>\r\n<\/ul>\r\n<blockquote>\r\n<p>Hint: Kalian tentukan apakah di antara Bootcamp, Kelas dengan Student memiliki relasi Aggregation atau Composition lalu implementasikan pada program kalian.<\/p>\r\n<\/blockquote>\r\n<p>&nbsp;Pada release ini daftarkanlah nama-nama student berikut ke dalam list array student pada masing-masing kelas \"Laravel\" dan \"React\" di Bootcamp. Cara menentukan kelas untuk masing-masing student adalah berdasarkan index array genap dan ganjil. Jika genap maka masuk ke kelas Laravel, jika ganjil maka masuk kelas React.&nbsp;<\/p>\r\n<div>\r\n<div><code>let&nbsp;names&nbsp;=&nbsp;[\"regi\",&nbsp;\"ahmad\",&nbsp;\"bondra\",&nbsp;\"iqbal\",&nbsp;\"putri\",&nbsp;\"rezky\"]<\/code><\/div>\r\n<div><code>names.map((nama,&nbsp;index)&nbsp;=&gt;&nbsp;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;let&nbsp;newStud&nbsp;=&nbsp;new&nbsp;Student(nama)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;let&nbsp;kelas&nbsp;=&nbsp;sanber.classes[index&nbsp;%&nbsp;2].name<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;sanber.register(kelas,&nbsp;newStud)<\/code><\/div>\r\n<div><code>})<\/code><\/div>\r\n<div>\r\n<div>\r\n<div><code>\/\/&nbsp;menampilkan&nbsp;data&nbsp;kelas&nbsp;dan&nbsp;student&nbsp;nya<\/code><\/div>\r\n<div><code>sanber.classes.forEach(kelas&nbsp;=&gt;&nbsp;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;console.log(kelas)<\/code><\/div>\r\n<div><code>});<\/code><\/div>\r\n<\/div>\r\n<code><\/code><\/div>\r\n<\/div>\r\n<div>Maka output console nya akan seperti berikut:&nbsp;<\/div>\r\n<pre>Kelas {<br \/>&nbsp; _name: 'Laravel',<br \/>&nbsp; _students: [<br \/>&nbsp; &nbsp; Student { _name: 'regi', _scores: [], _finalScore: 0 },<br \/>&nbsp; &nbsp; Student { _name: 'bondra', _scores: [], _finalScore: 0 },<br \/>&nbsp; &nbsp; Student { _name: 'putri', _scores: [], _finalScore: 0 }<br \/>&nbsp; ],<br \/>&nbsp; _level: 'beginner',<br \/>&nbsp; _instructor: 'abduh'<br \/>}<br \/>Kelas {<br \/>&nbsp; _name: 'React',<br \/>&nbsp; _students: [<br \/>&nbsp; &nbsp; Student { _name: 'ahmad', _scores: [], _finalScore: 0 },<br \/>&nbsp; &nbsp; Student { _name: 'iqbal', _scores: [], _finalScore: 0 },<br \/>&nbsp; &nbsp; Student { _name: 'rezky', _scores: [], _finalScore: 0 }<br \/>&nbsp; ],<br \/>&nbsp; _level: 'beginner',<br \/>&nbsp; _instructor: 'abdul'<br \/>}<\/pre>\r\n<h2>Release 2 Graduate<\/h2>\r\n<p>&nbsp;Buatlah Method pada class <code>Kelas<\/code> untuk menentukan predikat kelulusan dari seluruh <code>Student<\/code> yang terdaftar pada kelas tersebut. methode ini mengembalikan sebuah object berisi tiga kategori lulusan : participant, completed, mastered.&nbsp;<\/p>\r\n<p>kategori tersebut:&nbsp;<\/p>\r\n<ul>\r\n<li>participated : nilai akhir kurang dari 60<\/li>\r\n<li>completed: nilai akhir antara 60 dan 85<\/li>\r\n<li>mastered: nilai akhir lebih dari 85<\/li>\r\n<\/ul>\r\n<p>Contoh Output dari method graduate:<\/p>\r\n<p><code>{<\/code><br \/><code>&nbsp; participant: [],<\/code><br \/><code>&nbsp; completed: [<\/code><br \/><code>&nbsp; &nbsp; Student { _name: 'ahmad', _scores: [Array], _finalScore: 78 },<\/code><br \/><code>&nbsp; &nbsp; Student { _name: 'iqbal', _scores: [Array], _finalScore: 74 },<\/code><br \/><code>&nbsp; &nbsp; Student { _name: 'rezky', _scores: [Array], _finalScore: 70 }<\/code><br \/><code>&nbsp; ],<\/code><br \/><code>&nbsp; mastered: []<\/code><br \/><code>}<\/code><\/p>\r\n<p><code><\/code><\/p>\r\n<h2>Release 3&nbsp;Method runBatch<\/h2>\r\n<p>Pada kelas Bootcamp terdapat method <code>runBatch()<\/code> untuk menjalankan satu batch bootcamp hingga lulus(graduate) di semua kelas. Di dalam method tersebut akan dilakukan perulangan sebanyak 4 kali yang menandakan 4 pekan pelaksanaan bootcamp. Di setiap perulangan, setiap Student akan ter-generate nilai secara random antara 50 - 100.&nbsp;&nbsp;<\/p>\r\n<p>Di akhir method tersebut akan ditampilkan seluruh data kelas beserta data kelulusan pada kelas tersebut.&nbsp;<\/p>\r\n<p>Contoh Output console nya seperti berikut :&nbsp;<\/p>\r\n<p><code>graduated from Laravel: &nbsp;{<\/code><br \/><code>&nbsp; participant: [],<\/code><br \/><code>&nbsp; completed: [<\/code><br \/><code>&nbsp; &nbsp; Student { _name: 'regi', _scores: [Array], _finalScore: 77 },<\/code><br \/><code>&nbsp; &nbsp; Student { _name: 'bondra', _scores: [Array], _finalScore: 77 }<\/code><br \/><code>&nbsp; ],<\/code><br \/><code>&nbsp; mastered: []<\/code><br \/><code>}<\/code><br \/><code>graduated from React: &nbsp;{<\/code><br \/><code>&nbsp; participant: [],<\/code><br \/><code>&nbsp; completed: [<\/code><br \/><code>&nbsp; &nbsp; Student { _name: 'ahmad', _scores: [Array], _finalScore: 78 },<\/code><br \/><code>&nbsp; &nbsp; Student { _name: 'iqbal', _scores: [Array], _finalScore: 74 },<\/code><br \/><code>&nbsp; &nbsp; Student { _name: 'rezky', _scores: [Array], _finalScore: 70 }<\/code><br \/><code>&nbsp; ],<\/code><br \/><code>&nbsp; mastered: []<\/code><br \/><code>}<\/code><\/p>\r\n<div id=\"gtx-trans\" style=\"position: absolute; left: 32px; top: 1812.16px;\">\r\n<div class=\"gtx-trans-icon\">&nbsp;<\/div>\r\n<\/div>","waktu_publish":"2021-07-20 09:00:00","status_publish":"publish","urutan":2,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 21:54:33","updated_at":"2021-07-11 09:11:39","waktu_publish_formatted":" Selasa, 20 Juli 2021. 09:00:00 WIB."},{"id":613,"uuid":"30a8d786-32cc-4ae7-86ef-005b473265e9","author_user_id":8089,"materi_section_id":175,"judul":"Hari 8 - Berlatih Asynchronous","permalink":"hari-8-berlatih-asynchronous","konten":"<p><!-- wp:heading --><\/p>\r\n<h2>Petunjuk Pengerjaan<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li>Buatlah folder baru dengan nama \"Tugas 8 - Asynchronous\" pada repositori tugas kalian.<\/li>\r\n<li>Kerjakanlah soal berikut ini pada folder Tugas 8 tersebut.<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:heading --><\/p>\r\n<h2>Interface Bootcamp<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pada tugas ini kalian diminta membuat Command line interface untuk sebuah bootcamp. Program dibuat untuk mengolah data karyawan bootcamp dan peserta bootcamp. Terdapat tiga role yaitu : admin, trainer, dan student. Data dibaca dan ditulis ke dalam satu file dengan nama data.json. Kalian diminta menggunakan module fs dan fspromise untuk dapat membaca dan menulis data ke dalam file.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Setup<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Sebelum memulai kita persiapkan terlebih dahulu program kita dengan langkah-langkah seperti berikut :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Buat project npm baru dengan perintah <code>npm init<\/code><\/li>\r\n<li>Install module Babel seperti berikut : <code>npm install @babel\/core @babel\/cli @babel\/preset-env core-js --save<\/code><\/li>\r\n<li>Tambahkan script babel pada package.json. Jalankan babel pada folder <strong>src<\/strong> dengan output dir folder <strong>dist<\/strong><\/li>\r\n<li>Buat file <code>.babelrc<\/code> dan tuliskan preset babel\/env di dalamnya.<\/li>\r\n<li>Buat folder src yang didalamnya terdapat folder lib dan juga entry file index.js<\/li>\r\n<li>Buat file <code>data.json<\/code> yang berisi data array kosong <code>[]<\/code><\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Release 0 Register Karyawan (Callback)<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Perintah : <code>node dist register &lt;name&gt;,&lt;password&gt;,&lt;role&gt;<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh Perintah : <code>node dist register Bondra,123456,admin<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output: pada console akan muncul log <code>\"Berhasil register\"<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output pada file data.json akan muncul data baru sebuah object dengan data sesuai yang diberikan pada perintah register<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>[ { name: \"Bondra\", password: \"123456\", role: \"admin\", isLogin: false } ]<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Pada release ini kalian diminta untuk membuat proses register karyawan baru. Data karyawan baru dikirimkan melalui perintah node dan kemudian disimpan di sebuah file <code>data.json<\/code>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><em>Hint: Gunakan module fs readFile dan writeFile callback untuk membaca dan menulis data ke file.<\/em><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Release 1 Login (Promise)<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Perintah : <code>node dist login &lt;name&gt;,&lt;password&gt;<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh Perintah :<code> node dist login Bondra,123456<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output: pada console memberikan log <code>\"Berhasil Login\"<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output pada data.json: status <code>isLogin<\/code> karyawan yang melakukan login akan berubah menjadi true .<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>[ { name: \"Bondra\", password: \"123456\", role: \"admin\", isLogin: true} ]<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Pada release ini dibuat mekanisme login untuk karyawan dengan memasukan <code>name <\/code>dan <code>password<\/code> pada perintah node. Program akan membaca file data.json dan mencari karyawan berdasarkan data tersebut. Jika ditemukan dan cocok, maka status isLogin berubah menjadi true.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><em>Hint: Gunakan module <code>fs\/promises readFile<\/code> dan <code>writeFile<\/code> untuk mengolah data dari dan ke data.json<\/em><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Release 2 Add Siswa (Async Await)<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Perintah : <code>node dist addSiswa &lt;name&gt;,&lt;trainer-name&gt;<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh Perintah :<code> node dist addSiswa Regy,Iqbal<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output: pada console memberikan log <code>\"Berhasil add siswa \"<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output pada file data.json : data siswa yang didaftarkan akan ditambahkan pada data trainer yang bersangkutan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>[ \r\n  { \r\n    name: \"Bondra\", \r\n    password: \"123456\",\r\n    role: \"admin\",\r\n    isLogin: true\r\n  }, \r\n  {\r\n    name: \"Iqbal\",\r\n    password: \"123456\",\r\n    role: \"trainer\"\r\n    isLogin: false,\r\n    students: [ {name: \"Regy\"} ]\r\n   }\r\n]<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Pada release ini dibuat mekanisme untuk mendaftarkan siswa pada trainer tertentu. Hanya admin yang boleh mendaftarkan siswa kepada trainer (admin harus login).<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><em>Hints: Gunakan module fs\/promises readFile dan writeFile dengan bantuan async await.<\/em><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Pengumpulan Tugas<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kumpulkan tugas dengan meng-copy link commit terakhir dan paste di kelola tugas kelas.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Semangat Belajar Sanbers!<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-07-21 09:00:00","status_publish":"publish","urutan":3,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 22:09:06","updated_at":"2021-07-11 09:11:58","waktu_publish_formatted":" Rabu, 21 Juli 2021. 09:00:00 WIB."},{"id":614,"uuid":"8a55b16a-c900-487c-8d1a-5a850453b6be","author_user_id":8089,"materi_section_id":175,"judul":"Hari 9 - Berlatih SQL","permalink":"hari-9-berlatih-sql","konten":"<div class=\"entry-content\">\r\n<p>Tugas kali ini kamu diminta untuk menuliskan SQL Queries untuk membuat database, membuat table, mengisi data ke table, mengambil dan mengubah data ke table. Tulislah jawaban jawaban ke dalam sebuah file dengan nama jawaban.txt.&nbsp;<\/p>\r\n<p>File tersebut ditempatkan di folder baru \"Tugas 9 - SQL\" di repositori Tugas kalian.&nbsp;<\/p>\r\n<h2 id=\"soal-1-membuat-database\">Soal 1 Membuat Database<\/h2>\r\n<p>Buatlah database dengan nama &ldquo;myshop&rdquo;. Tulislah di text jawaban pada nomor 1.<\/p>\r\n<h2 id=\"soal-2-membuat-table-di-dalam-database\">Soal 2 Membuat Table di Dalam Database<\/h2>\r\n<p>Buatlah tabel &ndash; tabel baru di dalam database myshop sesuai data-data berikut.<\/p>\r\n<h4 id=\"users\">users<\/h4>\r\n<figure class=\"wp-block-table\">\r\n<table border=\"1\">\r\n<tbody>\r\n<tr>\r\n<td style=\"width: 64px;\"><strong>field<\/strong><\/td>\r\n<td style=\"width: 296px;\"><strong>type<\/strong><\/td>\r\n<\/tr>\r\n<tr>\r\n<td style=\"width: 64px;\">id<\/td>\r\n<td style=\"width: 296px;\">INTEGER AUTO INCREMENT PRIMARY KEY<\/td>\r\n<\/tr>\r\n<tr>\r\n<td style=\"width: 64px;\">name<\/td>\r\n<td style=\"width: 296px;\">varchar(255)<\/td>\r\n<\/tr>\r\n<tr>\r\n<td style=\"width: 64px;\">email<\/td>\r\n<td style=\"width: 296px;\">varchar(255)<\/td>\r\n<\/tr>\r\n<tr>\r\n<td style=\"width: 64px;\">password<\/td>\r\n<td style=\"width: 296px;\">varchar(255)<\/td>\r\n<\/tr>\r\n<\/tbody>\r\n<\/table>\r\n<\/figure>\r\n<h4 id=\"items\">items<\/h4>\r\n<figure class=\"wp-block-table\">\r\n<table border=\"1\">\r\n<tbody>\r\n<tr>\r\n<td><strong>field<\/strong><\/td>\r\n<td><strong>type<\/strong><\/td>\r\n<\/tr>\r\n<tr>\r\n<td>id<\/td>\r\n<td>INTEGER AUTO INCREMENT PRIMARY KEY<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>name<\/td>\r\n<td>varchar(255)<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>description<\/td>\r\n<td>varchar(255)<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>price<\/td>\r\n<td>integer<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>stock<\/td>\r\n<td>integer<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>category_id<\/td>\r\n<td>integer (foreign key references id on categories)<\/td>\r\n<\/tr>\r\n<\/tbody>\r\n<\/table>\r\n<\/figure>\r\n<h4 id=\"categories\">categories<\/h4>\r\n<figure class=\"wp-block-table\">\r\n<table border=\"1\">\r\n<tbody>\r\n<tr>\r\n<td><strong>field<\/strong><\/td>\r\n<td><strong>type<\/strong><\/td>\r\n<\/tr>\r\n<tr>\r\n<td>id<\/td>\r\n<td>INTEGER AUTO INCREMENT PRIMARY KEY<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>name<\/td>\r\n<td>varchar(255)<\/td>\r\n<\/tr>\r\n<\/tbody>\r\n<\/table>\r\n<\/figure>\r\n<p>tuliskan jawaban pada file text jawaban dengan nomor 2.<\/p>\r\n<h2 id=\"soal-3-memasukkan-data-pada-table\">Soal 3 Memasukkan Data pada Table<\/h2>\r\n<p>Masukkanlah data data berikut dengan perintah SQL &ldquo;INSERT INTO . . &rdquo; ke dalam table yang sudah dibuat pada soal sebelumnya.<\/p>\r\n<h4 id=\"users-1\">users<\/h4>\r\n<figure class=\"wp-block-table\">\r\n<table border=\"1\">\r\n<tbody>\r\n<tr>\r\n<td><strong>name<\/strong><\/td>\r\n<td><strong>email<\/strong><\/td>\r\n<td><strong>password<\/strong><\/td>\r\n<\/tr>\r\n<tr>\r\n<td>John Doe<\/td>\r\n<td>john@doe.com<\/td>\r\n<td>john123<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>Jane Doe<\/td>\r\n<td>jane@doe.com<\/td>\r\n<td>jenita123<\/td>\r\n<\/tr>\r\n<\/tbody>\r\n<\/table>\r\n<\/figure>\r\n<h4 id=\"categories-1\">categories<\/h4>\r\n<figure class=\"wp-block-table\">\r\n<table border=\"1\">\r\n<tbody>\r\n<tr>\r\n<td><strong>name<\/strong><\/td>\r\n<\/tr>\r\n<tr>\r\n<td>gadget<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>cloth<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>men<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>women<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>branded<\/td>\r\n<\/tr>\r\n<\/tbody>\r\n<\/table>\r\n<\/figure>\r\n<h4 id=\"items-1\">items<\/h4>\r\n<figure class=\"wp-block-table\">\r\n<table border=\"1\">\r\n<tbody>\r\n<tr>\r\n<td><strong>name<\/strong><\/td>\r\n<td><strong>description<\/strong><\/td>\r\n<td><strong>price<\/strong><\/td>\r\n<td><strong>stock<\/strong><\/td>\r\n<td><strong>category_id<\/strong><\/td>\r\n<\/tr>\r\n<tr>\r\n<td>Sumsang b50<\/td>\r\n<td>hape keren dari merek sumsang<\/td>\r\n<td>4000000<\/td>\r\n<td>100<\/td>\r\n<td>1<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>Uniklooh<\/td>\r\n<td>baju keren dari brand ternama<\/td>\r\n<td>500000<\/td>\r\n<td>50<\/td>\r\n<td>2<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>IMHO Watch<\/td>\r\n<td>jam tangan anak yang jujur banget<\/td>\r\n<td>2000000<\/td>\r\n<td>10<\/td>\r\n<td>1<\/td>\r\n<\/tr>\r\n<\/tbody>\r\n<\/table>\r\n<\/figure>\r\n<h2 id=\"soal-4-mengambil-data-dari-database\">Soal 4 Mengambil Data dari Database<\/h2>\r\n<h3 id=\"a-mengambil-data-users\">a. Mengambil data users<\/h3>\r\n<p>Buatlah sebuah query untuk mendapatkan data seluruh user pada table users. Sajikan semua field pada table users KECUALI password nya.<\/p>\r\n<h3 id=\"b-mengambil-data-items\">b. Mengambil data items<\/h3>\r\n<ul>\r\n<li>Buatlah sebuah query untuk mendapatkan data item pada table items yang memiliki harga di atas 1000000 (satu juta).<\/li>\r\n<li>Buat sebuah query untuk mengambil data item pada table items yang memiliki name serupa atau mirip (like) dengan kata kunci &ldquo;uniklo&rdquo;, &ldquo;watch&rdquo;, atau &ldquo;sang&rdquo; (pilih salah satu saja).<\/li>\r\n<\/ul>\r\n<h3 id=\"c-menampilkan-data-items-join-dengan-kategori\">c. Menampilkan data items join dengan kategori<\/h3>\r\n<p>Buatlah sebuah query untuk menampilkan data items yang dilengkapi dengan data nama kategori di masing-masing items. Berikut contoh tampilan data yang ingin didapatkan<\/p>\r\n<figure class=\"wp-block-table\">\r\n<table border=\"1\">\r\n<tbody>\r\n<tr>\r\n<td>name<\/td>\r\n<td>description<\/td>\r\n<td>price<\/td>\r\n<td>stock<\/td>\r\n<td>category_id<\/td>\r\n<td>kategori<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>Sumsang b50<\/td>\r\n<td>hape keren dari merek sumsang<\/td>\r\n<td>4000000<\/td>\r\n<td>100<\/td>\r\n<td>1<\/td>\r\n<td>gadget<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>Uniklooh<\/td>\r\n<td>baju keren dari brand ternama<\/td>\r\n<td>500000<\/td>\r\n<td>50<\/td>\r\n<td>2<\/td>\r\n<td>cloth<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>IMHO Watch<\/td>\r\n<td>jam tangan anak yang jujur banget<\/td>\r\n<td>2000000<\/td>\r\n<td>10<\/td>\r\n<td>1<\/td>\r\n<td>gadget<\/td>\r\n<\/tr>\r\n<\/tbody>\r\n<\/table>\r\n<\/figure>\r\n<h2 id=\"soal-5-mengubah-data-dari-database\">Soal 5 Mengubah Data dari Database<\/h2>\r\n<p>Ubahlah data pada table items untuk item dengan nama sumsang harganya (price) menjadi 2500000. Masukkan query pada text jawaban di nomor ke 5.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>nb: Format tugas<\/strong><\/p>\r\n<p>pengumpulan tugas di gitlab<\/p>\r\n<p>buat file jawaban.txt nanti sintaxnya di copy di jawaban.txt<\/p>\r\n<p>contoh:<\/p>\r\n<p>1.buat Database<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>create Database nama_database<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>2.<\/p>\r\n<p>......<\/p>\r\n<p>3.<\/p>\r\n<p>.....<\/p>\r\n<p>4.<\/p>\r\n<p>.....<\/p>\r\n<p>5.<\/p>\r\n<p>.....<\/p>\r\n<\/div>","waktu_publish":"2021-07-22 09:00:00","status_publish":"publish","urutan":4,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 22:09:29","updated_at":"2021-07-11 09:13:30","waktu_publish_formatted":" Kamis, 22 Juli 2021. 09:00:00 WIB."},{"id":615,"uuid":"f0a06e25-bd35-4da4-9eea-4fed323d4575","author_user_id":8089,"materi_section_id":175,"judul":"Hari 10 - Berlatih ERD","permalink":"hari-10-berlatih-erd","konten":"<h2>Tugas Desain ERD<\/h2>\r\n<p>Buatlah folder baru di repositori tugas harian kalian dengan nama \"Tugas 10 -&nbsp; ERD\". Kerjakanlah tugas berikut dengan mengumpulkan gambar output (PNG\/JPEG) dari desain ERD yang kalian sudah buat.&nbsp;<\/p>\r\n<p>Seorang klien ingin dibuatkan sebuah aplikasi untuk penyewaan tempat olahraga secara kolektif. Aplikasi tersebut dinamakan \"Main Bersama\". Buatlah Desain ERD berdasarkan deskripsi mengenai aplikasi tersebut berikut ini<\/p>\r\n<h2>Aplikasi Main Bersama<\/h2>\r\n<h3>Description:&nbsp;<\/h3>\r\n<p>Sebuah aplikasi web &amp; mobile yang diperuntukkan bagi para penggemar olahraga tim seperti Futsal, Mini Soccer, atau Basket untuk dapat melakukan sewa bersama sebuah venue olahraga pada waktu tertentu. Aplikasi ini dibuat karena keluhan penggemar olahraga yang selalu sulit melakukan olahraga tim karena kekurangan pemain untuk penyewaan lapang.&nbsp;<\/p>\r\n<p>Di dalam aplikasi tersebut, seorang user dapat melakukan booking terhadap satu tempat olahraga dan mendaftarkan user lain (pemain lain) di satu jadwal tertentu. User dapat mencari jadwal booking yang masih kekurangan pemain untuk dapat \"join\" ke jadwal tersebut.<\/p>\r\n<p>Terdapat data : Venues (Tempat Penyewaan), Profile Venue, Lapangan, Users, dan Booking<\/p>\r\n<p>Berikut beberapa ketentuan Main Bersama:&nbsp;<\/p>\r\n<ol>\r\n<li>Setiap Venue dapat memiliki satu atau lebih Lapangan. Setiap lapangan adalah kepunyaan satu Venue.<\/li>\r\n<li>Setiap Venue memiliki satu profile venue. 1 profile venue kepunyaan 1 venue.&nbsp;<\/li>\r\n<li>Setiap 1 Lapangan dapat dibook oleh banyak users (dengan jadwal berbeda). 1 users dapat memiliki banyak booking ke satu Lapangan. Tidak boleh ada dua booking dengan jadwal yang sama.<\/li>\r\n<li>Setiap 1 jadwal main (1 booking) dapat diikuti (join) oleh banyak users. setiap 1 users dapat join ke banyak jadwal main (booking).&nbsp;<\/li>\r\n<\/ol>\r\n<h3>Langkah Pengerjaan<\/h3>\r\n<ol>\r\n<li>Buatlah terlebih dahulu entity-entity (tabel) yang diperlukan berdasarkan deskripsi di atas<\/li>\r\n<li>Lengkapi entity\/tabel dengan atribut-atribut yang diperlukan. Misalkan Venue memiliki atribut kolom : id, nama. Profile&nbsp; Venue berisi atribut: alamat, telepon, dst.&nbsp;<\/li>\r\n<li>Buat relasi antar entity\/tabel berdasarkan deskripsi di atas.<\/li>\r\n<li>Jika sudah selesai, Export desain ERD kalian ke dalam format gambar seperti JPEG atau PNG.&nbsp;<\/li>\r\n<li>Simpan gambar tersebut di folder tugas hari ini.<\/li>\r\n<\/ol>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-07-23 09:00:00","status_publish":"publish","urutan":5,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 22:09:47","updated_at":"2021-07-11 09:13:41","waktu_publish_formatted":" Jumat, 23 Juli 2021. 09:00:00 WIB."}]},{"id":176,"uuid":"d3e6e5b5-0532-4014-9115-71f072e26c7a","materi_id":20,"nama":"Materi Pekan 3","permalink":"materi-pekan-3","urutan":6,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 09:28:24","updated_at":null,"posting":[{"id":616,"uuid":"8463637c-8e8c-4d2c-a685-20094fd8a8aa","author_user_id":8089,"materi_section_id":176,"judul":"Hari 11 - RESTful API with ExpressJS","permalink":"hari-11-restful-api-with-expressjs","konten":"<h2><!-- wp:heading --><\/h2>\r\n<h2>Apa itu REST API ?<\/h2>\r\n<h2><!-- \/wp:heading --> <!-- wp:paragraph --><\/h2>\r\n<p>API atau Application Programming Interface adalah antar muka yang menghubungkan suatu aplikasi dengan aplikasi lainnya.<\/p>\r\n<h2><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/h2>\r\n<p>Contoh nya seperti gambar di bawah, terdapat sebuah server website yang melayani berbagai macam aplikasi seperti web based, desktop, mobile, atau pun website lain yang menggunakan layanan autentikasinya. Ketika kita membuka aplikasi web maka segala aktivitas dan data selalu sinkron dengan aplikasi lain walaupun di dua device yang berbeda.<\/p>\r\n<h2><!-- \/wp:paragraph --> <!-- wp:image {\"id\":15879,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/h2>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-15879\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/REST-API.png\" alt=\"\" \/>\r\n<figcaption>contoh API<\/figcaption>\r\n<\/figure>\r\n<h2><!-- \/wp:image --> <!-- wp:paragraph --><\/h2>\r\n<p>REST (REpresentational State Transfer) adalah salah satu arsitektur dalam pengembangan aplikasi API. Di dalam REST, kita merepresentasikan database sewaktu dengan format JSON atau XML. Di dalam REST segala sesuatunya kita anggap sebagai resource atau kumpulan data. Resource tersebut diakses dengan mengikuti protokol dan metode HTTP seperti GET, POST, PUT, PATCH, atau DELETE.<\/p>\r\n<h2><!-- \/wp:paragraph --> <!-- wp:heading --><\/h2>\r\n<h2>Cara Kerja API<\/h2>\r\n<h2><!-- \/wp:heading --> <!-- wp:image {\"id\":15880,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/h2>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-15880\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/REST-API-cara-kerja.png\" alt=\"\" \/>\r\n<figcaption>cara kerja API<\/figcaption>\r\n<\/figure>\r\n<h2><!-- \/wp:image --> <!-- wp:paragraph --><\/h2>\r\n<p>Di dalam arsitektur REST API kita dapat bagi ke dalam dua bagian yaitu : <em>Client side<\/em> dan <em>Server side<\/em>. Server berisi database dan aplikasi yang melayani berbagai aplikasi client. Sedangkan Client adalah aplikasi yang mengkonsumsi API .<\/p>\r\n<h2><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/h2>\r\n<p>Cara kerja API bisa digambarkan secara sederhana sebagai berikut:<\/p>\r\n<h2><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/h2>\r\n<ol>\r\n<li>Aplikasi Client mengakses API<br \/>Client akan mengakses API dengan menembak pada suatu endpoint tertentu. Di dalam suatu endpoint terdapat : metode HTTP yang digunakan, url endpoint, dan body(data)yang ingin dikirim.<\/li>\r\n<li>API melakukan request ke server<br \/>Ketika suatu endpoint diakses, maka API akan meneruskannya sebagai request ke server.<\/li>\r\n<li>Server mengolah request<br \/>aplikasi server kemudian akan mengolah request sesuai dengan maksud dan tujuan yang diminta pada request tersebut.<\/li>\r\n<li>Server mengembalikan response terhadap Client<br \/>Ketika request berhasil diolah maka server akan mengembalikan response kepada Client. Response berisi data-data yang diminta\/diperlukan sesuai request yang diberikan.<\/li>\r\n<\/ol>\r\n<h2><!-- \/wp:list --> <!-- wp:heading --><\/h2>\r\n<h2>Tutorial &amp; Referensi<\/h2>\r\n<h2><!-- \/wp:heading --> <!-- wp:embed {\"url\":\"https:\/\/youtu.be\/1VVy8h_tp1M\",\"type\":\"video\",\"providerNameSlug\":\"youtube\",\"responsive\":true,\"className\":\"wp-embed-aspect-16-9 wp-has-aspect-ratio\"} --><\/h2>\r\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><\/figure>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/1VVy8h_tp1M\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<h2><!-- \/wp:paragraph --><\/h2>","waktu_publish":"2021-07-26 09:00:00","status_publish":"publish","urutan":1,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 22:10:36","updated_at":"2021-07-11 09:14:16","waktu_publish_formatted":" Senin, 26 Juli 2021. 09:00:00 WIB."},{"id":617,"uuid":"8ce237d2-a538-49fe-ace5-86b923007b33","author_user_id":8089,"materi_section_id":176,"judul":"Hari 12 - MVC with Sequelize","permalink":"hari-12-mvc-with-sequelize","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Materi hari ini kita akan mempelajari tentang konsep MVC dan penggunaan Model ORM menggunakan Sequelize.&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2>Apa itu MVC ?<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>MVC (Model View Controller) yaitu sebuah pola di dalam pengembangan&nbsp; software yang memisahkan logika program menjadi tiga bagian yang saling berhubungan.&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Berikut ini struktur MVC<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":15955,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-15955\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/MVC-struktur.png\" alt=\"\" \/>\r\n<figcaption>struktur MVC<\/figcaption>\r\n<\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>Bagian-bagian dari MVC di antaranya<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li>Model<br \/>Model adalah bagian MVC yang berurusan dengan database. Segala logika yang melibatkan penyimpanan dan pengambilan data dari database diurusi oleh Model.<\/li>\r\n<li>View<br \/>View adalah bagian MVC yang mengurusi tampilan. Logika yang digunakan untuk menampilkan halaman dan data diurusi oleh view.<\/li>\r\n<li>Controller<br \/>Controller adalah bagian MVC yang mengatur lalu lintas dari input atau request, memanggil Model untuk berhubungan dengan database dan memberikan tampilan View kembali kepada client. <\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:heading --><\/p>\r\n<h2>ORM Sequelize<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>ORM Object Relational Mapping yaitu program untuk memetakan data dari database menjadi object atau pun sebaliknya. ORM digunakan untuk mempermudah aplikasi kita untuk berhubungan dengan database.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>ORM hanya bisa digunakan untuk database yang relasional (RDBMS) seperti mysql, postgres, sql server, dll.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image --><\/p>\r\n<figure class=\"wp-block-image\"><img src=\"https:\/\/miro.medium.com\/max\/700\/0*X4u4FSka7FxSct-_.png\" alt=\"Sudah kenal sama ORM?. Ketika kalian hendak mendalami backend&hellip; | by Deby  Silvia Agnes | wripolinema | Medium\" \/>\r\n<figcaption>cara kerja ORM<\/figcaption>\r\n<\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>Di Nodejs, module yang biasa digunakan sebagai ORM adalah Sequelize.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Sequelize menggunakan promise dalam menjalankan query nya sehingga bisa kita gunakan juga Async Await.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Dokumentasi lengkap Sequelize dapat dibaca di halaman <a href=\"https:\/\/sequelize.org\/master\/index.html\" target=\"_blank\" rel=\"noopener\">dokumentasi resmi Sequelize.<\/a><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>\r\n<h2>Tutorial &amp; Materi Video<\/h2>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/21RXavGGtxc\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/u6e_gZjUI4Y\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-07-27 09:00:00","status_publish":"publish","urutan":2,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 22:11:44","updated_at":"2021-07-11 09:14:39","waktu_publish_formatted":" Selasa, 27 Juli 2021. 09:00:00 WIB."},{"id":618,"uuid":"e83c9a03-8a7b-4698-86d5-9a41c04b0111","author_user_id":8089,"materi_section_id":176,"judul":"Hari 13 - Typescript","permalink":"hari-13-typescript","konten":"<p class=\"line\"><code><!-- wp:heading --><\/code><\/p>\r\n<h2>Apa itu Typescript ?<\/h2>\r\n<p>Typescript adalah \"cara baru\" dalam penulisan Javascript. Posisi Typescript satu lapisan di atas Javascript yaitu dengan adanya penambahan <em>static type checking <\/em>. Di Typescript, kita masih bisa mendapatkan semua fitur Javascript termasuk javascript modern seperti ES6 atau ES yang terbaru.&nbsp;<\/p>\r\n<p>Apa itu static type checking ? Mungkin dengan contoh di bawah ini kita dapat memberikan gambaran<\/p>\r\n<pre class=\"wp-block-code\"><code>const obj = { width: 10, height: 15 };\r\n\/\/ Why is this NaN? Spelling is hard!\r\nconst area = obj.width * obj.heigth;\r\nconsole.log(area) \/\/ NaN<\/code><code><!-- \/wp:code --> <!-- wp:paragraph --><\/code><\/pre>\r\n<p>Pada contoh di atas, secara sekilas apakah kalian memperhatikan ada kesalahan penulisan code ? &nbsp;<\/p>\r\n<p>Ya, pada baris code pendeklarasian variabel \"area\" terdapat kesalahan penulisan \"heigth\" yang seharusnya \"height\". Kode Javascript biasa tidak akan secara cepat menemukan kesalahan pada code yang kita tulis. Bahkan kode tersebut tetap bisa dijalankan tanpa pesan error walaupun memberikan hasil yang bukan diinginkan (diperoleh output NaN, seharusnya 150)<\/p>\r\n<p>Dengan menggunakan Typescript, ketika penulisan pada text editor kode kita akan ditandai sebagai error dengan garis tanda merah seperti berikut : &nbsp;<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-15982\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/image-36.png\" alt=\"\" \/><\/figure>\r\n<p class=\"line\">Kode dengan tanda error seperti kode di atas tidak akan bisa dieksekusi dan akan menghasilkan error di console.<\/p>\r\n<h2 class=\"line\">Fitur Typescript<\/h2>\r\n<p>Terdapat banyak fitur typescript yang dapat kita pelajari&nbsp; di antaranya :&nbsp;<\/p>\r\n<ol>\r\n<li>Functions\r\n<ul>\r\n<li>Parameter type Annotations<\/li>\r\n<li>Optional Parameters<\/li>\r\n<li>Default Parameters<\/li>\r\n<li>Inferring Return Types<\/li>\r\n<li>Documenting Functions<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Complex Types<br \/>\r\n<ol>\r\n<li>Arrays&nbsp;\r\n<ul>\r\n<li>Array Type Annotations<\/li>\r\n<li>Multi Dimensional arrays<\/li>\r\n<li>Tuples<\/li>\r\n<li>Array Type Inference<\/li>\r\n<li>Rest Parameters<\/li>\r\n<li>Spread Syntax<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Custom Types\r\n<ul>\r\n<li>enums<\/li>\r\n<li>string enums vs numericc enums<\/li>\r\n<li>Object Types<\/li>\r\n<li>Type Aliases<\/li>\r\n<li>Generic Types<\/li>\r\n<li>Generic Functions<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ol>\r\n<\/li>\r\n<li>Advanced Object Types\r\n<ul>\r\n<li>Interfaces and Types<\/li>\r\n<li>Interfaces and Types<\/li>\r\n<li>Deep Types<\/li>\r\n<li>Composed Types<\/li>\r\n<li>Extending Interfaces<\/li>\r\n<li>Index Signature<\/li>\r\n<li>Optional Type Members<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ol>\r\n<p><br \/>Ke semua fitur di atas dapat kita pelajari dan sekaligus menjadi Tugas Harian hari ini di <a href=\"https:\/\/www.codecademy.com\/learn\/learn-typescript\" target=\"_blank\" rel=\"noopener\">Codeacademy : Learn Typescript<\/a><\/p>\r\n<p class=\"line\"><code><!-- \/wp:paragraph --><\/code><\/p>","waktu_publish":"2021-07-28 09:00:00","status_publish":"publish","urutan":3,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 22:12:17","updated_at":"2021-07-11 09:15:44","waktu_publish_formatted":" Rabu, 28 Juli 2021. 09:00:00 WIB."},{"id":619,"uuid":"bf60db33-d53a-4aae-80c1-d95fd93001ae","author_user_id":8089,"materi_section_id":176,"judul":"Hari 14 - Introduction to Adonis","permalink":"hari-14-introduction-to-adonis","konten":"<p>Materi hari ini kita akan pelajari melalui playlist Video Tutorial berikut ini:&nbsp;<\/p>\r\n<h2>Part 1 : Intro AdonisJS<\/h2>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/EbFP6eUtiyY\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<h2>Part 2 : Instalasi REST API dengan AdonisJS<\/h2>\r\n<p><img src=\"https:\/\/youtu.be\/ggbaECklnmE\" alt=\"\" \/><iframe src=\"https:\/\/www.youtube.com\/embed\/ggbaECklnmE\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<h2>Part 3: Routes, Request, HttpContext<\/h2>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/A97-vPg-_xw\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<h2>Part 4 : Controllers<\/h2>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/wVqYoTNSnKk\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<h2>Part 5 : Request Validator<\/h2>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/N0uAD05nvIk\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>","waktu_publish":"2021-07-29 09:00:00","status_publish":"publish","urutan":4,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 22:13:06","updated_at":"2021-07-11 09:16:03","waktu_publish_formatted":" Kamis, 29 Juli 2021. 09:00:00 WIB."},{"id":620,"uuid":"a1af42bd-5727-444b-afaa-9dd1b00bbb7b","author_user_id":8089,"materi_section_id":176,"judul":"Hari 15 - Adonis Migration & CRUD with Lucid Query Builder","permalink":"hari-15-adonis-migration-crud-with-lucid-query-builder","konten":"<p>Materi hari ini akan dipelajari melalui video tutorial berikut&nbsp;<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/TNV5qdQkc78\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/dkqXvCiHP64\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/nkHbBuBwMlY\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/y2WQwt6qIN8\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/LicdO1rXA_Y\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/iOgNjNE28wg\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/6a6NiVufBhI\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>","waktu_publish":"2021-07-30 09:00:00","status_publish":"publish","urutan":5,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 22:14:02","updated_at":"2021-07-11 09:16:28","waktu_publish_formatted":" Jumat, 30 Juli 2021. 09:00:00 WIB."}]},{"id":177,"uuid":"729ff953-b69c-4c9e-8502-addfc89e8fde","materi_id":20,"nama":"Tugas Pekan 3","permalink":"tugas-pekan-3","urutan":7,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 09:28:32","updated_at":null,"posting":[{"id":838,"uuid":"4e8afdc2-b613-49f4-9baf-534537eb8ea3","author_user_id":8089,"materi_section_id":177,"judul":"Hari 11 - Membuat REST API dengan ExpressJS","permalink":"hari-11-membuat-rest-api-dengan-expressjs","konten":"<h2>Langkah Pengerjaan<\/h2>\r\n<ol>\r\n<li>Buatlah folder baru \"Tugas 11 - REST API Express\" di repositori tugas harian kalian<\/li>\r\n<li>Kerjakan tugas berikut di dalam folder Tugas 11&nbsp;<\/li>\r\n<\/ol>\r\n<p>Pada tugas kali ini kalian diminta untuk membuat REST API untuk sebuah aplikasi manajemen bootcamp. Gunakan&nbsp;<\/p>\r\n<h2>REST API Aplikasi Bootcamp<\/h2>\r\n<h3>Release 0 Register Karyawan (Callback)<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Endpoint : <span style=\"font-family: monospace;\"><span style=\"background-color: #b4d7ff;\">POST \/register&nbsp;<\/span><\/span><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Request Body : <code>{ \"name\" : \"Bondra\", \"password\": \"123456\", \"role \": \"admin\" }<\/code><\/p>\r\n<p>Response Success :<code> { \"message\": \"Berhasil register\" }<\/code><\/p>\r\n<p>Output pada file data.json akan muncul data baru sebuah object dengan data sesuai yang diberikan pada perintah register<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>[ { name: \"Bondra\", password: \"123456\", role: \"admin\", isLogin: false } ]<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Pada release ini kalian diminta untuk membuat proses register karyawan baru. Data karyawan baru dikirimkan melalui postman dan kemudian disimpan di sebuah file <code>data.json<\/code>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<h3>Release 1 Show All Karyawan&nbsp;<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Endpoint : <code>GET \/karyawan<\/code><\/p>\r\n<p>Response Success :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<pre><br \/><br \/><code>{ <br \/>   message: \"Berhasil get karyawan\",<br \/>   data : [ \r\n    { \r\n      name: \"Bondra\", \r\n      password: \"123456\",\r\n      role: \"admin\",\r\n      isLogin: true\r\n    }, \r\n    {\r\n      name: \"Iqbal\",\r\n      password: \"123456\",\r\n      role: \"trainer\"\r\n      isLogin: false,\r\n     }\r\n  ]<br \/>}<\/code><\/pre>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output pada file data.json : data siswa yang didaftarkan akan ditambahkan pada data trainer yang bersangkutan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Release 2 Login&nbsp;<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Endpoint : <span style=\"font-family: monospace;\"><span style=\"background-color: #b4d7ff;\">POST \/login&nbsp;<\/span><\/span><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Request Body : <code>{ \"name\" : \"Bondra\", \"password\": \"123456\" }<\/code><\/p>\r\n<p>Response Success : <code>{ \"message\": \"Berhasil login\" }<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output pada data.json: status <code>isLogin<\/code> karyawan yang melakukan login akan berubah menjadi true .<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code>[ { name: \"Bondra\", password: \"123456\", role: \"admin\", isLogin: true} ]<\/code><\/p>\r\n<p><code><\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Release 3 Add Siswa&nbsp;<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Endpoint : <code>POST \/karyawan\/:name\/siswa<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Request Body :&nbsp; { name: \"Regy\", class : \"Adonis\")<!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><code><\/code><\/p>\r\n<p>Response body :&nbsp; <code>{ message : \"Berhasil add siswa\" }<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output pada file data.json : data siswa yang didaftarkan akan ditambahkan pada data trainer yang bersangkutan (berdasarkan parameter<code> :name<\/code> yang dikirim lewat request url)<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>[\r\n    { \r\n      name: \"Bondra\", \r\n      password: \"123456\",\r\n      role: \"admin\",\r\n      isLogin: true\r\n    }, \r\n    {\r\n      name: \"Iqbal\",\r\n      password: \"123456\",\r\n      role: \"trainer\"\r\n      isLogin: false,<br \/> &nbsp; &nbsp; &nbsp;students: [ {name: \"Regy\", class: \"adonis\"} ] &nbsp; &nbsp; <br \/>    &nbsp;}<br \/>]<br \/><br \/><br \/><\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Pada release ini dibuat mekanisme untuk mendaftarkan siswa pada trainer tertentu. Hanya admin yang boleh mendaftarkan siswa kepada trainer (admin harus login).<\/p>\r\n<p>CATATAN : Pada database data.json hanya terdapat satu orang admin dan maksimum hanya satu orang yang memiliki status isLogin bernilai true.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Pengumpulan Tugas<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kumpulkan tugas dengan meng-copy link commit terakhir dan paste di kelola tugas kelas.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Semangat Belajar Sanbers!<\/p>","waktu_publish":"2021-07-26 09:00:00","status_publish":"publish","urutan":1,"created_by":8089,"updated_by":8089,"created_at":"2021-04-05 08:23:38","updated_at":"2021-07-11 09:23:07","waktu_publish_formatted":" Senin, 26 Juli 2021. 09:00:00 WIB."},{"id":839,"uuid":"e9a86be5-eb5d-4c96-8af6-c7205b1f5b07","author_user_id":8089,"materi_section_id":177,"judul":"Hari 12 - CRUD dengan ExpressJS dan Sequelize","permalink":"hari-12-crud-dengan-expressjs-dan-sequelize","konten":"<p><!-- wp:image {\"id\":15957,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/p>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>Tugas hari ini kalian diminta untuk membuat fitur CRUD (Cread Read Update Delete) untuk data Venues. Buatlah folder baru untuk tugas hari ini dengan nama \"Tugas 12 - CRUD Express Sequelize\". Kerjakanlah tugas berikut di dalam folder tersebut.&nbsp;<\/p>\r\n<p>CATATAN: Wajib gunakan MVC (tanpa View)&nbsp;<\/p>\r\n<h2>Release 0 Setup Model &amp; Migration<\/h2>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-15957\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/image-34.png\" alt=\"\" \/><\/figure>\r\n<p>Pertama-tama gunakanlah perintah <code>sequelize-cli init<\/code> untuk mulai memasangkan Sequelize di project REST API Express. Edit konfigurasi database di config\/config.json sesuaikan dengan database kalian.<\/p>\r\n<p>Buatlah Model sekaligus Migration untuk data Venue. Gunakan perintah <code>sequelize-cli<\/code>&nbsp; untuk generate Model dengan nama Venue dan lengkapi atribut untuk tabel Venues seperti : name, address, dan phone.&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<h2>Release 1 Create and Read<\/h2>\r\n<p>Buatlah endpoint\/route untuk membuat data Venue baru dan endpoint untuk mendapatkan seluruh data Venue dan data venue dengan id tertentu.<\/p>\r\n<p>Endpoint 1 : <code>POST \/venues<\/code> Menyimpan data venue baru yang menangkap data dari request body.<\/p>\r\n<p>Endpoint 2 : <code>GET \/venues<\/code> Menampilkan seluruh data venue<\/p>\r\n<p>Endpoint 3 : <code>GET \/venues\/:id<\/code>&nbsp; Menampilkan data venue dengan id tertentu.<\/p>\r\n<p>&nbsp;<\/p>\r\n<h2>Release 2 Update dan Delete<\/h2>\r\n<p>Buatlah endpoint untuk edit(update) data venue dan hapus data venue berdasarkan id yang diberikan di route parameter.<\/p>\r\n<p>Endpoint 4&nbsp; : <code>PUT \/venues\/:id<\/code> mengubah data venue dengan id sesuai parameter<\/p>\r\n<p>Endpoint 5 : <code>DELETE \/venues\/:id<\/code> menghapus data venue dengan id sesuai parameter<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Kumpulkan tugas dengan memberikan link commit terakhir ke dasbor kelola tugas masing-masing.<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-07-27 09:00:00","status_publish":"publish","urutan":2,"created_by":8089,"updated_by":8089,"created_at":"2021-04-05 08:24:34","updated_at":"2021-07-11 09:23:21","waktu_publish_formatted":" Selasa, 27 Juli 2021. 09:00:00 WIB."},{"id":840,"uuid":"3e2d3d68-f716-4b41-a267-642564e20c06","author_user_id":8089,"materi_section_id":177,"judul":"Hari 13 - Berlatih Typescript","permalink":"hari-13-berlatih-typescript","konten":"<p><!-- wp:heading --><\/p>\r\n<h2>Berlatih Typescript Codeacademy<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Tugas kali ini kalian akan mengerjakan latihan Typescript di platform codecademy.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li>Buka kelas berikut : <a href=\"https:\/\/www.codecademy.com\/learn\/learn-typescript\" target=\"_blank\" rel=\"noreferrer noopener\">Codeacademy - Learn Typescript<\/a><\/li>\r\n<li>Kerjakan semua semua bagian Mulai dari Types, Functions, Complex Types, Union Types (Opsional), Type Narrowing (Opsional), dan Advanced Object Types<\/li>\r\n<li>Jika sudah selesai lakukan screenshot di halaman syllabus learn typescript untuk menunjukkan progress pembelajaran kalian seperti gambar berikut<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:image {\"id\":15996,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-15996\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/image-37-1024x526.png\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>4. Simpan Gambar tersebut di folder tugas hari ini di repositori tugas harian kalian<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>5. Kirimkan link commit terakhir ke dasbor kelas =&gt; kelola Tugas =&gt; Tugas 13 Belajar Typescript.<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-07-28 09:00:00","status_publish":"publish","urutan":3,"created_by":8089,"updated_by":8089,"created_at":"2021-04-05 08:24:51","updated_at":"2021-07-11 09:23:35","waktu_publish_formatted":" Rabu, 28 Juli 2021. 09:00:00 WIB."},{"id":841,"uuid":"95828063-0dec-4593-957d-2982df8fb17f","author_user_id":8089,"materi_section_id":177,"judul":"Hari 14 Membuat REST API dengan Adonis","permalink":"hari-14-membuat-rest-api-dengan-adonis","konten":"<p><!-- wp:heading --><\/p>\r\n<h2>Langkah Pengerjaan<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li>Buat folder baru di repositori tugas kalian dengan nama \"Tugas 14 - REST API Adonis\"<\/li>\r\n<li>Kerjakanlah tugas berikut di dalam folder tersebut<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:heading --><\/p>\r\n<h2>API Main Bersama<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Tugas kali ini kalian diminta membuat REST API menggunakan Adonis v5.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Release 0 Form Venue (Validasi)<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah sebuah endpoint untuk membuat data venue baru. Buatlah validasi untuk data yang diberikan di form venue baru di antaranya :<\/p>\r\n<p>endpoint : <code><strong>POST \/venues<\/strong><\/code><\/p>\r\n<ul>\r\n<li>nama (required, string),<\/li>\r\n<li>alamat (required, string),<\/li>\r\n<li>phone (required, string, mobile phone)<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><em>Hint : Validasi untuk mobile phone dapat dibaca di dokumentasi adonis berikut : <a href=\"https:\/\/docs.adonisjs.com\/reference\/validator\/rules\/mobile\" target=\"_blank\" rel=\"noopener\">https:\/\/docs.adonisjs.com\/reference\/validator\/rules\/mobile<\/a><\/em><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Release 1 Form Booking<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah sebuah endpoint untuk melakukan booking suatu venue atau lapangan.<\/p>\r\n<p>endpoint : <code><strong>POST \/bookings<\/strong><\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Terdapat data yang harus diisi :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>nama pem-booking (required,string)<\/li>\r\n<li>nama venue yang dibook (required, string)<\/li>\r\n<li>tanggal dan waktu main (required, date, minimal booking 1 hari sebelum)<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --><\/p>","waktu_publish":"2021-07-29 09:00:00","status_publish":"publish","urutan":4,"created_by":8089,"updated_by":8089,"created_at":"2021-04-05 08:26:33","updated_at":"2021-07-11 09:23:46","waktu_publish_formatted":" Kamis, 29 Juli 2021. 09:00:00 WIB."},{"id":842,"uuid":"849ee8d2-2d12-4125-9030-cd585b9e0a2a","author_user_id":8089,"materi_section_id":177,"judul":"Hari 15 - Membuat CRUD API dengan Adonis Lucid Query Builder","permalink":"hari-15-membuat-crud-api-dengan-adonis-lucid-query-builder","konten":"<h2>Langkah Pengerjaan<\/h2>\r\n<p>Tugas kali ini kalian diminta melanjutkan project Adonis di tugas sebelumnya (Tugas 14).&nbsp;&nbsp;<\/p>\r\n<ul>\r\n<li>Kerjakan Tugas berikut di folder \"Tugas 14\" tersebut<\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<h2>CRUD Main Bersama<\/h2>\r\n<h3>Release 0 Setup &amp; Migrations<\/h3>\r\n<p>Masih melanjutkan project untuk aplikasi Main Bersama.&nbsp;<\/p>\r\n<p>Buatlah Migration untuk aplikasi Main Bersama berdasarkan Desain ERD yang kalian buat di Tugas 10. Cukup buat migration untuk dua table : venues dan Fields (Venue dan Lapangan).&nbsp;<\/p>\r\n<p>venues berisi data : id, name, address, phone<\/p>\r\n<p>fields berisi data: id, name, type (string) , venue_id.&nbsp;<\/p>\r\n<p><em>keterangan : venue_id adalah foreign key referensi nya id di table Venue. type adalah enum yang berisi nilai <code>['futsal', 'mini soccer', 'basketball' ]<\/code><\/em><\/p>\r\n<p>Jika sudah berhasil membuat file migration, jalankan migration nya sehingga database kalian berubah.<\/p>\r\n<h3>&nbsp;<\/h3>\r\n<h3>Release 1 CRUD Venue<\/h3>\r\n<p>Buatlah endpoint resource untuk CRUD data venues. di dalam satu CRUD terdapat 5 endpoint yang terdiri dari index, store, show, update, dan delete.&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<h3>Release 2 CRUD Fields<\/h3>\r\n<p>Buatlah endpoint resource untuk CRUD data fields. CRUD fields ini adalah nested resource dari Venue.&nbsp;<\/p>\r\n<p><em>NB: referensi nested resource https:\/\/docs.adonisjs.com\/guides\/controllers#nested-resources<\/em><\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-07-30 09:00:00","status_publish":"publish","urutan":5,"created_by":8089,"updated_by":8089,"created_at":"2021-04-05 08:27:37","updated_at":"2021-07-11 09:24:31","waktu_publish_formatted":" Jumat, 30 Juli 2021. 09:00:00 WIB."}]},{"id":178,"uuid":"89e8853e-3663-4cd8-bb7b-944286fb4ed0","materi_id":20,"nama":"Materi Pekan 4","permalink":"materi-pekan-4","urutan":8,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 09:28:43","updated_at":null,"posting":[{"id":621,"uuid":"0fedb336-a34d-4d9d-997c-a59cdca595cc","author_user_id":8089,"materi_section_id":178,"judul":"Hari 16 - Adonis CRUD with Lucid ORM","permalink":"hari-16-adonis-crud-with-lucid-orm","konten":"<p>Materi hari ini dipelajari melalui video tutorial berikut&nbsp;<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/Y5s3GyqbApE\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/unJ5-vIWxIY\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/6rWeftFAhNU\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/yeNK4PNKmuA\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/vFatTgeYcAg\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-08-02 09:00:00","status_publish":"publish","urutan":1,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 22:15:26","updated_at":"2021-07-11 09:24:49","waktu_publish_formatted":" Senin, 02 Agustus 2021. 09:00:00 WIB."},{"id":622,"uuid":"fecde1a9-c349-416b-be2c-de0e892962b0","author_user_id":8089,"materi_section_id":178,"judul":"Hari 17 - Adonis Authentication & Lucid Relationships","permalink":"hari-17-adonis-authentication-lucid-relationships","konten":"<p>Materi hari ini terdiri dari dua bagian yaitu :&nbsp;<\/p>\r\n<ol>\r\n<li>Adonis Authentication<\/li>\r\n<li>Lucid Relationships<\/li>\r\n<\/ol>\r\n<p>Pembelajarannya dapat diikuti dari tutorial berikut ini<\/p>\r\n<h2>1. Adonis Authentication<\/h2>\r\n<p><strong>1.1 : Install dan Konfigutasi Modul Auth&nbsp;<\/strong><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/ra7kdGkHb0o\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><strong>1.2 : Membuat Route Register<\/strong><\/p>\r\n<p><strong><iframe src=\"https:\/\/www.youtube.com\/embed\/sDi1khU6tPU\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/strong><\/p>\r\n<p><strong>1.3 : Membuat Route Login dan Generate Token API<\/strong><\/p>\r\n<p><strong><iframe src=\"https:\/\/www.youtube.com\/embed\/n2mtpgqCaik\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/strong><\/p>\r\n<p><strong>1.4 : Memperoleh Data User yang Sedang Login<\/strong><\/p>\r\n<p><strong><iframe src=\"https:\/\/www.youtube.com\/embed\/hKJJqjQDSkc\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/strong><\/p>\r\n<p>&nbsp;<\/p>\r\n<h2>2. Lucid Relationships<\/h2>\r\n<p><strong>2.1 Review ERD Blog API<\/strong><\/p>\r\n<p><strong><iframe src=\"https:\/\/www.youtube.com\/embed\/f4MHSkVbhwE\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/strong><\/p>\r\n<p><strong>2.2 Relasi One To One (HasOne)<\/strong><\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/cjy4GOIBkBs\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p><strong>2.3 Relasi One To Many (HasMany) : Menyiapkan Table dan Foreign Key<\/strong><\/p>\r\n<p><strong><iframe src=\"https:\/\/www.youtube.com\/embed\/WsPyxeQMcZs\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/strong><\/p>\r\n<p><strong>2.4 Relasi One To Many (HasMany) dan One To Many Inverse (BelongsTo)<\/strong><\/p>\r\n<p><strong><iframe src=\"https:\/\/www.youtube.com\/embed\/WHT6ouCMEJI\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/strong><\/p>\r\n<p><strong>2.5 Relasi Many To Many : Menyiapkan Table Pivot&nbsp;<\/strong><\/p>\r\n<p><strong><iframe src=\"https:\/\/www.youtube.com\/embed\/Anq4zFyEN24\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/strong><\/p>\r\n<p><strong>2.6 Relasi Many To Many : Method Sync dan Preload Data Relasi<\/strong><\/p>\r\n<p><strong><iframe src=\"https:\/\/www.youtube.com\/embed\/YYS5i7PS0V4\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/strong><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-08-03 09:00:00","status_publish":"publish","urutan":2,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 22:16:03","updated_at":"2021-07-11 09:25:01","waktu_publish_formatted":" Selasa, 03 Agustus 2021. 09:00:00 WIB."},{"id":623,"uuid":"cdae5038-994c-4576-a367-848403493755","author_user_id":8089,"materi_section_id":178,"judul":"Hari 18 - Adonis Mail & Middleware","permalink":"hari-18-adonis-mail-middleware","konten":"<p>Materi Hari ini terdapat dua bagian : <br \/>1. Adonis Mailer untuk Verifikasi OTP<br \/>2. Membuat Custom Middleware<br \/><br \/>Pembelajaran materi melalui Video Tutorial berikut ini.<\/p>\r\n<h2>1. Adonis Mailer untuk Mekanisme Verifikasi OTP melalui email<br \/><iframe src=\"https:\/\/www.youtube.com\/embed\/Zhb4GeGHi4o\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe>&nbsp;<\/h2>\r\n<h2>2. Membuat Custom Middleware<\/h2>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/R_dfyKIhlrk\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>","waktu_publish":"2021-08-04 09:00:00","status_publish":"publish","urutan":3,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 22:18:34","updated_at":"2021-07-11 09:25:14","waktu_publish_formatted":" Rabu, 04 Agustus 2021. 09:00:00 WIB."},{"id":902,"uuid":"7fcf969d-92bb-4877-b008-baa79f1b362f","author_user_id":8089,"materi_section_id":178,"judul":"Hari 19 - Deploy Aplikasi Adonis ke Heroku","permalink":"hari-19-deploy-aplikasi-adonis-ke-heroku","konten":"<h1><!-- wp:heading {\"level\":1} --><\/h1>\r\n<h1><!-- wp:heading {\"level\":1} --><\/h1>\r\n<h1>Deploy Aplikasi Adonis ke Heroku<\/h1>\r\n<h1><!-- \/wp:heading --> <!-- wp:heading --><\/h1>\r\n<h2>Prerequisites (Syarat)<\/h2>\r\n<h1><!-- \/wp:heading --> <!-- wp:list {\"ordered\":true} --><\/h1>\r\n<ol>\r\n<li>Akun Heroku<br \/>Jika belum memiliki akun heroku silakan mendaftar terlebih dahulu di link berikut <a href=\"https:\/\/signup.heroku.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/signup.heroku.com\/<\/a><\/li>\r\n<li>Git<br \/>Pastikan di pc\/laptop kalian sudah terinstall Git.&nbsp;&nbsp;<\/li>\r\n<li>Heroku CLI<br \/>Heroku CLI digunakan untuk mengakses app yang kita miliki di heroku melalui terminal\/cmd. Link instalasi di halaman berikut <a href=\"https:\/\/devcenter.heroku.com\/articles\/heroku-cli\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/devcenter.heroku.com\/articles\/heroku-cli<\/a><\/li>\r\n<li>Nodejs<\/li>\r\n<li>Aplikasi Adonis<\/li>\r\n<\/ol>\r\n<h1><!-- \/wp:list --> <!-- wp:heading --><\/h1>\r\n<h2>Langkah 0 : Login &amp; Setup Heroku<\/h2>\r\n<h1><!-- \/wp:heading --> <!-- wp:paragraph --><\/h1>\r\n<p>Jika sudah terinstall heroku CLI maka kalian bisa melakukan login melalui terminal dengan memberikan perintah&nbsp;<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/h1>\r\n<pre class=\"wp-block-preformatted\">heroku login<\/pre>\r\n<h1><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/h1>\r\n<p>Buatlah app baru di dashboard heroku pada browser kalian. Klik tombol New lalu pilih \"Create new App\". Nama App harus akan divalidasi dan harus unik terhadap semua App heroku lainnya.<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:image {\"id\":16142,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/h1>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-16142\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/image-58-1024x159.png\" alt=\"\" \/><\/figure>\r\n<h1><!-- \/wp:image --> <!-- wp:paragraph --><\/h1>\r\n<p>Setelah itu kembali ke Terminal, arahkan ke project Adonis kalian dan pastikan project tersebut sudah terhubung terpasang Git. Lalu set project Adonis kalian agar memiliki alamat remote repository di cloud Heroku dengan perintah berikut<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:code --><\/h1>\r\n<pre class=\"wp-block-code\"><code>heroku git:remote -a {HEROKU-APPLICATION-NAME}<\/code><\/pre>\r\n<h1><!-- \/wp:code --> <!-- wp:paragraph --><\/h1>\r\n<p>Catatan: Jika project kalian menggunakan Github, maka pada menu settings untuk App di Heroku akan tersedia menu untuk deploy otomatis menggunakan Github. Maka langkah di atas tidak usah dilakukan.<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:heading --><\/h1>\r\n<h2>Langkah 1 : Mengubah package.json<\/h2>\r\n<h1><!-- \/wp:heading --> <!-- wp:paragraph --><\/h1>\r\n<p>Tambahkanlah variabel \"engines\" berikut ke dalam file package.json di project Adonis kalian. Untuk Adonis v5, pastikan versi node minimum yang digunakan sudah support untuk Typescript. Pada saat tutorial ini dibuat, dipilih versi node yang LTS yaitu<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:code --><\/h1>\r\n<pre class=\"wp-block-code\"><code>\"engines\": {\r\n    \"node\": \"14.16.1\"\r\n}<\/code><\/pre>\r\n<h1><!-- \/wp:code --> <!-- wp:heading {\"level\":3} --><\/h1>\r\n<h3>scripts<\/h3>\r\n<h1><!-- \/wp:heading --> <!-- wp:paragraph --><\/h1>\r\n<p>masih di file package.json, ubahlah property scripts yang sudah ada menjadi seperti di bawah ini (Copy paste).<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:code --><\/h1>\r\n<pre class=\"wp-block-code\"><code> \"scripts\": {\r\n    \"build\": \"node ace build --prod\",\r\n    \"start\": \"node ace serve --watch\",\r\n    \"start:prod\": \"node .\/build\/server.js\"\r\n  }<\/code><\/pre>\r\n<h1><!-- \/wp:code --> <!-- wp:paragraph --><\/h1>\r\n<p>&nbsp;<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:heading --><\/h1>\r\n<h2>Langkah 2 : Membuat Procfile<\/h2>\r\n<h1><!-- \/wp:heading --> <!-- wp:paragraph --><\/h1>\r\n<p>Procfile adalah file yang menjelaskan bagaimana heroku menjalankan aplikasi Adonis kita. Buatlah file baru dengan nama \"Procfile\" tanpa file extension apa pun. Lalu copy paste code di bawah ini<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:code --><\/h1>\r\n<pre class=\"wp-block-code\"><code>release: ENV_SILENT=true node build\/ace migration:run --force &amp;&amp; node build\/ace db:seed \r\nweb: npm run start:prod<\/code><\/pre>\r\n<h1><!-- \/wp:code --> <!-- wp:paragraph --><\/h1>\r\n<p>terdapat dua perintah yaitu release dan web. Perintah release yaitu perintah untuk menjalankan migration dan seeding database. Hal ini diperlukan untuk membuat database production kita dan mengisi nya dengan seeding (jika ada). Sedangkan perintah web akan menjalankan scripts yang sebelumnya kita definisikan di package.json yaitu \"start:prod\". Perintah tersebut selanjutnya akan menjalankan file server kita yang berada di <code>build\/server.js<\/code> .<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:heading --><\/h1>\r\n<h2>Langkah 3 : Setting Database<\/h2>\r\n<h1><!-- \/wp:heading --> <!-- wp:heading {\"level\":3} --><\/h1>\r\n<h3>Install add-on Heroku Postgres<\/h3>\r\n<h1><!-- \/wp:heading --> <!-- wp:paragraph --><\/h1>\r\n<p>Untuk pemilihan database , kita bisa menambahkan <em>add-ons<\/em> pada aplikasi Heroku. Kita akan memilih <em>add-ons<\/em> \"Heroku Postgres\" karena terdapat fitur database yang <em>free <\/em>yaitu (Hobby Dev - Free) tanpa kita harus memasukkan credit card ke Heroku.<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:image {\"id\":16143,\"width\":580,\"height\":117,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/h1>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-16143\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/image-59-1024x207.png\" alt=\"\" width=\"580\" height=\"117\" \/><\/figure>\r\n<h1><!-- \/wp:image --> <!-- wp:image {\"id\":16144,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/h1>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-16144\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/image-60.png\" alt=\"\" \/><\/figure>\r\n<h1><!-- \/wp:image --> <!-- wp:paragraph --><\/h1>\r\n<p><strong>Catatan<\/strong>: Konfigurasi kembali project Adonis kalian dengan menginstall modul yang diperlukan untuk database postgres. Cek di dokumentasi Adonis berikut ini : <a href=\"https:\/\/preview.adonisjs.com\/guides\/database\/setup#configure-postgresql\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/preview.adonisjs.com\/guides\/database\/setup#configure-postgresql <\/a><\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/h1>\r\n<p>Pada tab \"overview\" di dashboard app Heroku akan tersedia link untuk database Heroku Postgres. klik menu tersebut lalu kalian akan diarahkan ke halaman database.<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:image {\"id\":16145,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/h1>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-16145\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/image-61.png\" alt=\"\" \/><\/figure>\r\n<h1><!-- \/wp:image --> <!-- wp:paragraph --><\/h1>\r\n<p>Pada halaman database, buka tab \"settings\" lalu klik tombol \"View Credentials\" maka kita akan mendapat data Host, nama Database, User, Password, Port dll.<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:image {\"id\":16146,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/h1>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-16146\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/image-62-1024x365.png\" alt=\"\" \/><\/figure>\r\n<h1><!-- \/wp:image --> <!-- wp:paragraph --><\/h1>\r\n<p>Jika sudah berhasil menginstall module postgres pada project Adonis kita, maka akan terdapat variabel-variabel baru untuk database postgres di file <code>.env <\/code>. Isilah variabel-variabel .env tersebut sesuai dengan database credentials seperti gambar di atas. Sesuaikan semua data contohnya Host untuk PG_HOST, nama database untuk PG_DB_NAME, dst.<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/h1>\r\n<p>&nbsp;<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/h1>\r\n<h3>Konfigurasi ulang config\/database.ts<\/h3>\r\n<h1><!-- \/wp:heading --> <!-- wp:paragraph --><\/h1>\r\n<p>Pada file database.ts yang ada di folder config. Import terlebih dahulu module Application seperti berikut<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:code --><\/h1>\r\n<pre class=\"wp-block-code\"><code>import Application from '@ioc:Adonis\/Core\/Application'<\/code><\/pre>\r\n<h1><!-- \/wp:code --> <!-- wp:paragraph --><\/h1>\r\n<p>lalu di bagian property \"connection\" ubahlah default menjadi kode berikut<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:code --><\/h1>\r\n<pre class=\"wp-block-code\"><code>connection: Application.inDev ? 'mysql' : 'pg' <\/code><\/pre>\r\n<h1><!-- \/wp:code --> <!-- wp:paragraph --><\/h1>\r\n<p>Konfigurasi di atas berarti kita akan menggunakan koneksi <code>mysql <\/code>jika Aplikasi berada di tahap development (Dev), jika tidak di development (production) maka akan memilih <code>pg<\/code> .<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/h1>\r\n<p>&nbsp;<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:heading --><\/h1>\r\n<h2>Langkah 4 Perintah Deploy<\/h2>\r\n<h1><!-- \/wp:heading --> <!-- wp:paragraph --><\/h1>\r\n<p>Sebelum Deploy, kita harus mengisi terlebih dahulu Config Vars pada dashboard app Heroku dengan data sesuai dengan variabel yang ada di file .env kita. Menu Config Vars dapat kalian temukan di dasbord App -&gt; Settings -&gt; Tombol Reveal Config Vars.<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:image {\"id\":16147,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} --><\/h1>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-16147\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/image-63-1024x622.png\" alt=\"\" \/><\/figure>\r\n<h1><!-- \/wp:image --> <!-- wp:paragraph --><\/h1>\r\n<p>Masukkan Variabel PORT, HOST, dll yang ada di file .env kalian ke dalam config vars tersebut (untuk port pilih 80).<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/h1>\r\n<h3>Let's Deploy<\/h3>\r\n<h1><!-- \/wp:heading --> <!-- wp:paragraph --><\/h1>\r\n<p>Berikut ini salah satu contoh untuk men-deploy aplikasi Adonis kita. Perintah add, commit dan push adalah perintah Git biasa untuk meng-upload perubahan ke remote repository kita di Gitlab atau Github atau lainnya. Terdapat perintah tambahan yaitu \"<code>git push<\/code> <code>heroku<\/code>\" yang akan mengupload code kita, lalu membuat folder build untuk production, dan kemudian di-hosting di domain heroku.<\/p>\r\n<h1><!-- \/wp:paragraph --> <!-- wp:code --><\/h1>\r\n<pre class=\"wp-block-code\"><code>git add . \r\ngit commit -m \"ready to deploy\"\r\ngit push origin master\r\ngit push heroku master<\/code><\/pre>\r\n<h1><!-- \/wp:code --><\/h1>","waktu_publish":"2021-08-05 09:00:00","status_publish":"publish","urutan":4,"created_by":8089,"updated_by":8089,"created_at":"2021-04-17 21:38:31","updated_at":"2021-07-11 09:25:27","waktu_publish_formatted":" Kamis, 05 Agustus 2021. 09:00:00 WIB."}]},{"id":179,"uuid":"5b31541a-bfb5-441d-b548-3aa0c5abb03e","materi_id":20,"nama":"Tugas Pekan 4","permalink":"tugas-pekan-4","urutan":9,"created_by":8089,"updated_by":8089,"created_at":"2021-03-01 09:28:51","updated_at":null,"posting":[{"id":896,"uuid":"c5779cfb-4957-4734-b1a5-a93cdcf9d8d7","author_user_id":8089,"materi_section_id":179,"judul":"Hari 16 - Berlatih CRUD dengan Adonis Lucid ORM","permalink":"hari-16-berlatih-crud-dengan-adonis-lucid-orm","konten":"<h2>Petunjuk Pengerjaan&nbsp;<\/h2>\r\n<ol>\r\n<li>Tugas CRUD kali ini&nbsp;<strong>MELANJUTKAN&nbsp;<\/strong>project adonis sebelumnya yang kalian kerjakan di Tugas 14 &amp; 15 . Tidak usah membuat folder baru atau mengubah nama project.<\/li>\r\n<li>Kerjakan tugas berikut ini di dalam folder tugas tersebut<\/li>\r\n<\/ol>\r\n<p>&nbsp;<\/p>\r\n<h2>API Main Bersama (Refactor CRUD with Lucid ORM)<\/h2>\r\n<p>Pada tugas terakhir kalian di Tugas 15, proses CRUD menggunakan DB Builder atau query builder. Ubahlah CRUD yang sebelumnya menggunakan query builder menjadi CRUD dengan Model atau ORM.&nbsp;<\/p>\r\n<h3>1. Model Venue&nbsp;<\/h3>\r\n<ul>\r\n<li>Buatlah terlebih dahulu model Venue dengan perintah \"<code>node ace make:model Venue<\/code>\". Definisikan model Venue tersebut sesuai dengan atribut yang dimiliki di tabel venues.<\/li>\r\n<li>Refactor metode yang ada di VenuesController<code>index, store, update, show, dan delete<\/code>&nbsp; yang awalnya menggunakan query builder DB.table('venues') menjadi menggunakan Model Venue yang sudah kalian buat.&nbsp;<\/li>\r\n<\/ul>\r\n<h3>2. Model Field<\/h3>\r\n<ul>\r\n<li>Buat terlebih dahulu model Field dengan perintah \"<code>node ace make:model Field<\/code>\". Definisikan model Field tersebut sesuai dengan atribut yang dimiliki di tabel fields.<\/li>\r\n<li>Refactor metode yang ada di FieldsController&nbsp;<code>index, store, update, show, dan delete<\/code>&nbsp; yang awalnya menggunakan query builder DB.table('fields') menjadi menggunakan Model Field yang sudah kalian buat.&nbsp;<\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<p><strong>CATATAN : Tugas ini merupakan persiapan menuju Final Project. Tidak usah dikumpulkan di menu tugas harian dasbor sanbercode.&nbsp;&nbsp;<\/strong><\/p>","waktu_publish":"2021-08-02 09:00:00","status_publish":"publish","urutan":1,"created_by":8089,"updated_by":8089,"created_at":"2021-04-12 10:28:05","updated_at":"2021-07-11 09:25:47","waktu_publish_formatted":" Senin, 02 Agustus 2021. 09:00:00 WIB."},{"id":898,"uuid":"4b8a922b-5b0e-4371-8d6b-a5a462083589","author_user_id":8089,"materi_section_id":179,"judul":"Hari 17 - Menambahkan Lucid Relationships","permalink":"hari-17-menambahkan-lucid-relationships","konten":"<h2>Petunjuk Pengerjaan&nbsp;<\/h2>\r\n<ol>\r\n<li>Tugas CRUD kali ini&nbsp;<strong>MELANJUTKAN&nbsp;<\/strong>project adonis sebelumnya (API Main Bersama) . Tidak usah membuat folder baru atau mengubah nama project.<\/li>\r\n<li>Kerjakan tugas berikut ini di dalam folder tugas tersebut<\/li>\r\n<\/ol>\r\n<h2>Release 0 Menambahkan Authentication API<\/h2>\r\n<ol>\r\n<li>Tambahkanlah sistem autentikasi menggunakan token di Adonis API.&nbsp;<br \/><br \/><\/li>\r\n<li>Pasangkan middleware auth di endpoint <code>\/venues<\/code> ,&nbsp;<code>\/fields<\/code>, dan <code>'\/bookings'<\/code>&nbsp;<\/li>\r\n<\/ol>\r\n<p>&nbsp;<\/p>\r\n<h2>Release 1 Relasi Venue dan Field (Has Many)<\/h2>\r\n<p>Satu Venue dapat memiliki banyak Field. Contohnya Venue Gelora Bung Karno terdapat banyak field (fasilitas olahraga) seperti stadion utama, lapangan panahan, istora, dll.&nbsp;<\/p>\r\n<p>Hubungkanlah model Venue dengan Field menggunakan Lucid Relationships : Has Many.&nbsp;<\/p>\r\n<p>Refactor\/perbaharui kembali endpoint-endpoint berikut :&nbsp;<\/p>\r\n<table style=\"border-collapse: collapse; width: 99.8717%; height: 63px;\" border=\"1\">\r\n<tbody>\r\n<tr style=\"height: 21px;\">\r\n<td style=\"width: 24.0988%; height: 21px; text-align: center;\"><strong>endpoint<\/strong><\/td>\r\n<td style=\"width: 24.0988%; height: 21px; text-align: center;\"><strong>contoh request (JSON)<\/strong><\/td>\r\n<td style=\"width: 24.0988%; height: 21px; text-align: center;\"><strong>contoh response body (JSON)<\/strong><\/td>\r\n<td style=\"width: 24.0988%; height: 21px; text-align: center;\"><strong>keterangan<\/strong><\/td>\r\n<\/tr>\r\n<tr style=\"height: 21px;\">\r\n<td style=\"width: 24.0988%; height: 21px;\"><code>POST '\/venues\/:id\/fields'&nbsp;<\/code><\/td>\r\n<td style=\"width: 24.0988%; height: 21px;\">\r\n<pre>headers: { \"Authorization\": \"Bearer &lt;your_token&gt;\"<br \/><br \/><br \/>{ <br \/>  \"name\": \"lapangan utama\", <br \/>  \"type\": \"soccer\" <br \/>} <\/pre>\r\n<\/td>\r\n<td style=\"width: 24.0988%; height: 21px;\">\r\n<pre>{ \"message\": \"berhasil menambahkan data field baru\" }<\/pre>\r\n<\/td>\r\n<td style=\"width: 24.0988%; height: 21px;\">menambahkan data fields baru untuk Venue dengan id tertentu.&nbsp;<\/td>\r\n<\/tr>\r\n<tr style=\"height: 21px;\">\r\n<td style=\"width: 24.0988%; height: 21px;\"><code>GET \/venues\/:id<\/code><\/td>\r\n<td style=\"width: 24.0988%; height: 21px;\">\r\n<pre>headers: { \"Authorization\": \"Bearer &lt;your_token&gt;\"<\/pre>\r\n<\/td>\r\n<td style=\"width: 24.0988%; height: 21px;\">\r\n<pre>{ <br \/>  \"message\": \"berhasil get data venue by id\", <br \/>  \"data\": {<br \/>      \"id\": 1,<br \/>      \"name\": \"SARAGA ITB\",<br \/>      \"address\": \"Jl.Siliwangi Dalam No 3, Bandung\",<br \/>      \"phone\": \"0222517788\"<br \/>      \"fields\": [<br \/>          {<br \/>            \"id\": 1<br \/>            \"name\": \"lapangan utama\",<br \/>            \"type\": \"soccer\"<br \/>          }<br \/>       ]<br \/>   }<br \/>}<br \/>     <br \/>     <\/pre>\r\n<\/td>\r\n<td style=\"width: 24.0988%; height: 21px;\">menampilkan detail data venue dengan id tertentu. response json memberikan data venue beserta data array fields yang ber-relasi dengan venue tersebut.&nbsp;<\/td>\r\n<\/tr>\r\n<\/tbody>\r\n<\/table>\r\n<p>&nbsp;<\/p>\r\n<h2>Release 2 Booking Lapangan<\/h2>\r\n<p>User yang sudah terautentikasi dapat melakukan booking lapangan untuk waktu tertentu. User yang melakukan booking dicatat sebagai pem-booking .<\/p>\r\n<table style=\"border-collapse: collapse; width: 99.8717%; height: 63px;\" border=\"1\">\r\n<tbody>\r\n<tr style=\"height: 21px;\">\r\n<td style=\"width: 24.1631%; text-align: center; height: 21px;\"><strong>endpoint<\/strong><\/td>\r\n<td style=\"width: 24.0345%; text-align: center; height: 21px;\"><strong>contoh request (JSON)<\/strong><\/td>\r\n<td style=\"width: 24.0988%; text-align: center; height: 21px;\"><strong>contoh response&nbsp; (JSON)<\/strong><\/td>\r\n<td style=\"width: 24.0988%; text-align: center; height: 21px;\"><strong>Keterangan<\/strong><\/td>\r\n<\/tr>\r\n<tr style=\"height: 21px;\">\r\n<td style=\"width: 24.1631%; height: 21px;\"><code>POST 'fields\/:id\/bookings'<\/code><\/td>\r\n<td style=\"width: 24.0345%; height: 21px;\">\r\n<pre>headers: { \"Authorization\": \"Bearer &lt;your_token&gt;\" }<br \/><br \/>{ <br \/>  \"play_date_start\": \"2021-05-17 09:00:00\",<br \/>  \"play_date_end\" : \"2021-05-17 11:00:00\"<br \/>}<\/pre>\r\n<\/td>\r\n<td style=\"width: 24.0988%; height: 21px;\">\r\n<pre>{ \"message\" : \"berhasil booking\" }<\/pre>\r\n<\/td>\r\n<td style=\"width: 24.0988%; height: 21px;\">membuat booking di field (lapangan) dengan id tertentu. request headers berisi token dan request body berisi jam waktu mulai main (play_date_start) dan jam waktu akhir main (play_date_end) .&nbsp;<\/td>\r\n<\/tr>\r\n<tr style=\"height: 21px;\">\r\n<td style=\"width: 24.1631%; height: 21px;\"><code>GET 'fields\/:id'<\/code><\/td>\r\n<td style=\"width: 24.0345%; height: 21px;\">\r\n<pre>headers: { \"Authorization\": \"Bearer &lt;your_token&gt;\" }<br \/><br \/><\/pre>\r\n<\/td>\r\n<td style=\"width: 24.0988%; height: 21px;\">\r\n<pre>{ <br \/>  \"message\": \"berhasil get data booking\",<br \/>  \"data\" : {<br \/>      \"name\": \"Lapangan Utama\",<br \/>      \"type\": \"soccer\",<br \/>      \"venue\": {<br \/>          \"name\": \"Saraga ITB\"<br \/>          \"address\": \"Jl.Siliwangi Dalam No 3, Bandung\",<br \/>          \"phone\": \"0222517788\"<br \/>      }<br \/>      \"bookings\": [<br \/>           {<br \/>             \"id\": 1,<br \/>             \"field_id\": 1,<br \/>             \"play_date_start\": \"2021-05-17 09:00:00\"<br \/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"play_date_end\" : \"2021-05-17 11:00:00\",<br \/>             \"booking_user_id\": 1<br \/>            }<br \/>       ]<br \/>   } <br \/>}<\/pre>\r\n<\/td>\r\n<td style=\"width: 24.0988%; height: 21px;\">mendapatkan data field dengan id tertentu. response berisi detail data field(lapangan), detail venue, dan list bookings yang ada di field tersebut.&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td style=\"width: 24.1631%;\"><code>GET 'bookings\/id'<\/code><\/td>\r\n<td style=\"width: 24.0345%;\">\r\n<pre>headers: { \"Authorization\": \"Bearer &lt;your_token&gt;\" }<\/pre>\r\n<\/td>\r\n<td style=\"width: 24.0988%;\">\r\n<pre>{ <br \/>\"message\": \"berhasil get data booking by id\",<br \/>\"data\": {<br \/>   \"id\": 1,<br \/>   \"field_id\": 1,<br \/>   \"play_date_start\": \"2021-05-17 09:00:00\"<br \/>  &nbsp;\"play_date_end\" : \"2021-05-17 11:00:00\",<br \/>   \"booking_user_id\": 1,<br \/>   \"players_count\": 12,<br \/>   \"players\": [<br \/>      {<br \/>        \"id\": 1,<br \/>        \"name\": \"John Doe\",<br \/>        \"email\": \"john@doe.com\"<br \/>      },<br \/>      {<br \/>        \"id\": 2,<br \/>        \"name\": \"Brad Pitt\",<br \/>        \"email\": \"brad@pit.com\"<br \/>      }<br \/>    ]<br \/>  }<br \/>}<\/pre>\r\n<\/td>\r\n<td style=\"width: 24.0988%;\">mendapatkan data detail dari suatu jadwal booking. response berisi detail jadwal booking, jumlah pemain(players_count) dan list pemain yang mengikuti jadwal main tersebut.&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td style=\"width: 24.1631%;\"><code>POST 'bookings\/:id'<\/code><\/td>\r\n<td style=\"width: 24.0345%;\">\r\n<pre>headers: { \"Authorization\": \"Bearer &lt;your_token&gt;\" }<\/pre>\r\n<\/td>\r\n<td style=\"width: 24.0988%;\">\r\n<pre>{ \"message\" : \"berhasil join booking\" }<\/pre>\r\n<\/td>\r\n<td style=\"width: 24.0988%;\">melakukan join sebagai list player tambahan untuk jadwal booking dengan id tertentu.&nbsp;<\/td>\r\n<\/tr>\r\n<\/tbody>\r\n<\/table>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-08-03 09:00:00","status_publish":"publish","urutan":2,"created_by":8089,"updated_by":8089,"created_at":"2021-04-13 17:53:20","updated_at":"2021-07-11 09:25:58","waktu_publish_formatted":" Selasa, 03 Agustus 2021. 09:00:00 WIB."},{"id":901,"uuid":"2ae1e1fd-cd47-4ab5-9d82-ca14cbd77b44","author_user_id":8089,"materi_section_id":179,"judul":"Hari 18 - Menambahkan Mail dan Middleware","permalink":"hari-18-menambahkan-mail-dan-middleware","konten":"<h2>Petunjuk Pengerjaan<\/h2>\r\n<ol>\r\n<li>Tugas kali ini <strong>MELANJUTKAN&nbsp;<\/strong>project adonis sebelumnya (API Main Bersama) . Tidak usah membuat folder baru atau mengubah nama project.<\/li>\r\n<li>Kerjakan tugas berikut ini di dalam folder tugas tersebut<\/li>\r\n<\/ol>\r\n<p>&nbsp;<\/p>\r\n<h2>Release 0 Menambahkan Verifikasi OTP<\/h2>\r\n<p>Tambahkanlah mekanisme verifikasi OTP untuk setiap user yang baru mendaftar (register). Verifikasi kode OTP dikirimkan melalui email dan kode tersebut digunakan kembali oleh user untuk mengkonfirmasi kembali ke API.&nbsp;<\/p>\r\n<p><em>Catatan: gunakan mailtrap.io untuk settingan mail SMTP&nbsp;<\/em><\/p>\r\n<p>&nbsp;<\/p>\r\n<h2>Release 1 Menambahkan Route Custom Middleware&nbsp;<\/h2>\r\n<p>Pada aplikasi main bersama terdapat 3 jenis role di table users: \"user\", \"venue_owner\", dan \"admin\".<\/p>\r\n<p>user adalah yang melakukan booking dan atau yang dapat melakukan join ke jadwal main tertentu.&nbsp;<\/p>\r\n<p>venue_owner adalah user yang dapat melakukan CRUD untuk api Venue (create, read, update, delete)<\/p>\r\n<p>admin adalah \"super user\" yang dapat melihat dan mengubah-ubah semua data venue, user, dll.&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<ol>\r\n<li>Buatlah middleware untuk melakukan pengecekan role berdasarkan 3 role di atas.<\/li>\r\n<li>Pasangkan middleware tersebut di route\/endpoint yant tepat.&nbsp;<\/li>\r\n<\/ol>","waktu_publish":"2021-08-04 09:00:00","status_publish":"publish","urutan":3,"created_by":8089,"updated_by":8089,"created_at":"2021-04-14 14:52:20","updated_at":"2021-07-11 09:26:07","waktu_publish_formatted":" Rabu, 04 Agustus 2021. 09:00:00 WIB."}]}],"list_kelas":[{"id":20,"uuid":"098b6379-f342-4291-8209-ec312b8e9c4f","kategori_kelas_id":18,"versi":"1.0.0","created_by":8089,"updated_by":8089,"created_at":"2021-03-01 09:26:44","updated_at":null}],"is_done":1}