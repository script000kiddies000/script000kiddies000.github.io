{"response_code":"00","response_msg":"Berhasil mendapatkan materi kelas","materi_kelas":{"id":22,"uuid":"734ca162-c2ed-4878-8a60-a2e04b4cacdb","kategori_kelas_id":19,"versi":"1.0.0","created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:31:15","updated_at":null},"section":[{"id":185,"uuid":"3bd62c6a-79e3-465e-adab-9acb577f77db","materi_id":22,"nama":"Pekan 1 - Materi","permalink":"pekan-1-materi","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:31:44","updated_at":"2021-10-05 14:27:30","posting":[{"id":647,"uuid":"502abf5f-4c31-407b-971d-82f8149088ad","author_user_id":9664,"materi_section_id":185,"judul":"Hari ke-1 | Command Line Interface & Git","permalink":"hari-ke-1-command-line-interface-git","konten":"<p><!-- wp:heading --><\/p>\r\n<p>Pada kesempatan kali ini kita akan belajar mengenai command line interface dan git.<\/p>\r\n<h2>&nbsp;<\/h2>\r\n<h1>1. Command Line Interface<\/h1>\r\n<h3>Apa itu command line interface?<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p><em>Command line interface<\/em> atau yang biasa kita kenal cmd atau <em>command prompt<\/em> atau <em>terminal <\/em>adalah <em>software <\/em>atau antar muka untuk memberikan perintah-perintah dasar pada komputer kita. Biasanya kita mengoperasikan komputer seperti <em>browsing media<\/em>, mencari <em>file<\/em>, membuat <em>file <\/em>atau <em>folder<\/em>, dan lain-lain dengan GUI (<em>Graphical User Interface<\/em>) yang sudah disediakan pengembang Sistem Operasi seperti <em>Windows<\/em>, <em>Linux<\/em>, atau OSX. Namun pada dasarnya kita juga bisa melakukan operasi-operasi tersebut dalam suatu perintah yang kita kirimkan melalui cmd\/<em>terminal<\/em>. Berikut ini beberapa contohnya:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Menuju <em>folder<\/em>\/direktori tertentu<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk menuju <em>folder <\/em>atau direktori tertentu bisa gunakan perintah <code>cd<\/code> atau kepanjangan dari <em>change directory<\/em><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Menuju Desktop\r\n$ cd Desktop\r\n\/\/ Menuju ke direktori <em>parent <\/em>(sebelumnya)\r\n$ cd ..<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Mengetahui alamat dari direktori yang sedang dibuka<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Terkadang kita butuh tahu sedang dimana posisi terminal kita berjalan. Perintah untuk fungsi ini yaitu <code>pwd<\/code> atau kependekan dari path of working directory<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ pwd\r\n\/home\/users\r\n\/\/ sedang berada di folder home\/users<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Mengetahui daftar isi dari sebuah direktori\/<em>folder <\/em><\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu bisa gunakan perintah <code>ls<\/code> atau <code>dir<\/code> . contohnya sebagai berikut<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ ls \r\nDocument Desktop Image index.html\r\n$ dir\r\nDocument Desktop Image index.html <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Membuat <em>folder<\/em> baru<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Perintahnya adalah <code>mkdir<\/code> atau singkatan dari <em>make directory<\/em>. contohnya sebagai berikut<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ membuat folder baru bernama new-folder\r\n$ mkdir new-folder\r\n\/\/ mengecek apakah sudah berhasil buat folder baru\r\n$ ls\r\nnew-folder ... ...  <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Membuat <em>file <\/em>baru<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Gunakan perintah <code>touch<\/code> untuk membuat file baru<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ membuat <em>file <\/em>index.html\r\n$ touch index.html\r\n\/\/ mengecek apakah sudah berhasil buat <em>file <\/em>baru\r\n$ ls \r\nindex.html ... ... <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h3><em>Software terminal <\/em>\/ <em>command line<\/em> yang direkomendasikan<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk OS Windows, <em>terminal <\/em>bawaannya adalah <em>command prompt<\/em> atau cmd yang relatif kurang nyaman untuk dipakai dalam tahap <em>development<\/em>. Oleh karena itu direkomendasikan untuk <em>install terminal<\/em> di bawah ini agar lebih optimal dalam mengerjakan <em>project<\/em>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Cmder, <em>link download<\/em>: <a href=\"https:\/\/cmder.net\/\" target=\"_blank\" rel=\"noreferrer noopener\">cmder<\/a><\/li>\r\n<li>Windows Terminal<\/li>\r\n<li>Git bash, Git bash biasanya ter-<em>install<\/em> jika kita meng-<em>install<\/em> git di pc\/laptop kita.<\/li>\r\n<\/ul>\r\n<p>Bagi yang senang belajar melalui video, sila akses playlist dari mas Agung Setiawan berikut : <a href=\"https:\/\/www.youtube.com\/watch?v=wiycI5V3PB8&amp;list=PLbQ1u0HDV6EQh5CHmRom-ofIHrIc7tMjx\">https:\/\/www.youtube.com\/watch?v=wiycI5V3PB8&amp;list=PLbQ1u0HDV6EQh5CHmRom-ofIHrIc7tMjx<\/a><\/p>\r\n<p><!-- wp:paragraph --><\/p>\r\n<h1>2. Git<\/h1>\r\n<p><!-- \/wp:paragraph --> <!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Mengenal version control Git dan version control platform Gitlab<\/p>\r\n<\/blockquote>\r\n<p><!-- \/wp:quote --> <!-- wp:heading --><\/p>\r\n<h3>Membuat project Git dan mengelolanya<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pastikan sudah install git di komputer anda. Jika belum terinstall silakan ikuti langkah-langkahnya di sini: <a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-contribute-to-open-source-getting-started-with-git\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-contribute-to-open-source-getting-started-with-git<\/a><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Membuat Repository Baru<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Repository atau repo di Gitlab biasa disebut dengan project. Berikut langkah-langkah untuk membuat repository baru:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">Setelah login anda akan menuju halaman Projects yang berisi semua repository yang anda miliki. Jika Anda user baru maka belum ada repository yang tersedia. Di halaman tersebut anda akan melihat tombol New Project di sebelah kanan atas. Klik tombol tersebut.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:image {\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LlbproPcbeCtKgKYGvN%2F-Llbq3l7Zcukr3daq0H_%2FScreenshot%20from%202019-07-04%2015-07-43.png?alt=media&amp;token=fa940493-e855-4331-92ad-8139dff079c6\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">Pada halaman membuat project baru, isi kolom project-name dengan nama yang Anda inginkan, misalkan: my first repo.<\/li>\r\n<li class=\"\">Pada kolom visibility level Anda akan melihat tiga pilihan yaitu Private, Internal, dan Public. Private artinya repo yang akan kita buat bersifat rahasia, hanya Anda dan orang yang Anda beri akses saja yang bisa membukanya. Sedangkan pilihan Internal berarti repo Anda akan dapat dilihat oleh semua user Gitlab. Pilihan \"Public\" berarti repo Anda akan terlihat oleh orang dari mana saja walaupun dia tidak memiliki akun gitlab. Pilih yang sesuai kebutuhan misalkan : Public.<\/li>\r\n<li class=\"\">Di bagian bawahnya terdapat pilihan checkbox \"Initialize repository with a README\". Centang saja jika anda ingin langsung clone repository nya setelah dibuat.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:image {\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LlbproPcbeCtKgKYGvN%2F-LlbqFzdUNMEHljLQNHA%2FScreenshot%20from%202019-07-04%2015-24-41.png?alt=media&amp;token=187ff3fe-30b6-4e97-8ec8-713145d30615\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Jika berhasil maka Anda akan diarahkan menuju halaman project atau repo yang telah dibuat. Jika sebelumnya kita centang \"Initialize repository with a README\" maka repository kita akan berisi file README.md.<\/li>\r\n<li>Pada Bagian kanan atas terdapat tombol clone. Ketika diklik maka akan keluar dua pilihan \"Clone with SSH\" dan \"Clone with HTTPS\". Pilih saja clone dengan HTTPS. Klik tombol salin\/copy supaya langsung otomatis tercopy pada clipboard. Jika ingin clone dengan SSH maka anda harus setting dulu akun anda agar terhubung dengan komputer Anda.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:image {\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LlbslGZ-w-tHwbKNuXb%2F-LlbsvawiXHthWqDmYZO%2FScreenshot%20from%202019-07-04%2016-10-48.png?alt=media&amp;token=89280629-8db4-4abd-aa2a-2f55671e08e0\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Setelah itu menuju ke terminal atau cmd. Arahkan menuju folder dimana anda ingin menyimpan repository yang sudah Anda buat. Berikan perintah git clone &lt;link_anda_yang_barusan_dicopy&gt; (tanda &lt;&gt; hanyalah sebagai penanda template tidak usah ditulis di perintah cmd)<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ git clone &lt;your_repository_link_url&gt;<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">Jika sudah berhasil diclone maka akan ditemukan folder dengan nama repository di Gitlab. Cara mengeceknya dengan perintah \"ls\" atau \"dir\".<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ ls\r\nmy-first-repo   <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Mengupload perubahan project dengan git push<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ketika kita sudah berhasil clone repository kita di Gitlab maka tentu kita ingin melakukan update atau penambahan code pada project kita. Agar perbaruan yang kita simpan di local (komputer) kita dapat kita perbaharui juga di repository Gitlab maka kita bisa lakukan dengan git push. Berikut langkah-langkahnya:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">Ketika kita sudah memberikan perubahan terhadap suatu file atau membuat folder-folder baru pada folder project kita maka cara mengecek status perbaruan adalah dengan git status<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ git status\r\nOn branch master\r\nYour branch is up to date with 'origin\/master'.\r\n \r\nChanges not staged for commit:\r\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\r\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\r\n \r\n modified:   README.md\r\n \r\nno changes added to commit (use \"git add\" and\/or \"git commit -a\") <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">Setelah git status maka akan ditampilkan list file yang \"modified\" atau \"untracked\". \"modified\" artinya adalah kita mengubah file yang sebelumnya ada sedangkan \"untracked\" artinya file tersebut sama sekali baru di repository. Dalam contoh di atas terdapat perubahan pada file \"README.md\".<\/li>\r\n<li class=\"\">Untuk menaikkan perubahan (stage) yang kita buat maka berikan perintah git add<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ git add README.md\r\n\r\n\/\/ Jika ada terdapat banyak file dan kita ingin naikkan semuanya maka perintahnya: \r\n$ git add .  <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">Sekarang perubahan tadi sudah pada tahap \"staged\". jika kita cek status nya lagi maka akan didapati berbeda:<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ git status \r\nOn branch master\r\nYour branch is up to date with 'origin\/master'.\r\n \r\nChanges to be committed:\r\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\r\n \r\n modified:   README.md <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">Selanjutnya adalah memberikan laporan atau commit terhadap perubahan yang kita buat dengan git commit.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\"> $ git commit -m \"Pesan saya: Mengubah README.md\"<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">tanda \"-m\" pada perintah commit artinya kita ingin memberikan pesan atau laporan terhadap perubahan yang sudah dibuat. Dalam hal ini laporannya adalah \"Pesan saya: mengubah README.md\"<\/li>\r\n<li class=\"\">Selanjutnya adalah push untuk mengirim \/upload perubahan yang ada di local computer kita menuju repository yang ada di Gitlab. Jika kita berada di branch bernama master maka perintahnya adalah:<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ git push origin master <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Jika branch yang sedang kita miliki di local adalah branch lain selain master maka cara push nya adalah<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ git push origin &lt;nama_branch&gt;<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Jika langkah tersebut sudah maka kita sudah berhasil mengupload perubahan yang kita buat di repository kita. \ud83e\udd42<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2>Git branch dan merge request (optional)<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Membuat branch baru dan melakukan merge request<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Clone repository<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Terlebih dahulu lakukan clone terhadap repository project.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ git clone https:\/\/gitlab.com\/some-project \r\n$ cd some-project<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Catatan: Link https di atas hanyalah contoh link dari sebuah repository. Link https tersebut bisa diperoleh di halaman gitlab pada bagian clone.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Buat branch baru<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Setelah di-clone dan masuk ke folder project nya, buatlah branch baru . (myname hanyalah contoh nama branch, kita bisa mengubah sesuai nama yang diinginkan)<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ git branch myname\r\n$ git checkout myname <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>maka sekarang kita sudah berada di branch baru dan dapat mulai melakukan pekerjaan kita.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Catatan:<\/p>\r\n<p><code>myname<\/code> hanya contoh , silakan sesuaikan sendiri nama branch masing-masing.<\/p>\r\n<\/blockquote>\r\n<p><!-- \/wp:quote --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3 id=\"push-ke-branch\">Push ke branch<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Setelah pekerjaan selesai, kita akan melakukan upload atau push ke branch kita sendiri.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ git add . \r\n$ git commit -m \"some message\"\/\/ push ke branch \r\n$ git push origin myname<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Catatan: <br \/><code>\"some message\"<\/code> hanyalah contoh pesan atau komentar pada sebuah commit. Silahkan isi dengan jenis update yang dikerjakan.<\/p>\r\n<\/blockquote>\r\n<p><!-- \/wp:quote --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3 id=\"membuat-merge-request\">Membuat merge request<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Setelah melakukan push ke branch sendiri maka selanjutnya melakukan merge request.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Secara default pada halaman project akan tersedia tombol \"create merge request\".<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LldepAZorMgXgsf4exP%2F-Lldo6E7VUbbizSnzZRM%2Fmerge-request.jpeg?alt=media&amp;token=672f6a87-a9ad-4b11-a72c-d03bc6a820c2\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>Jika tombol tersebut tersedia, klik tombol tersebut untuk menuju halaman merge request.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Pada halaman merge request isilah kolom title dengan pesan commit atau laporan progress pekerjaan misalkan : done, work in progress atau WIP, dsb.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LldepAZorMgXgsf4exP%2F-LldpcFElD1xcptGIuSF%2Ftitle%20merge-request.jpeg?alt=media&amp;token=e97935be-d331-420a-9fb5-ec74fb539608\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>Setelah itu, klik submit merge request maka pekerjaan kita sudah disubmit ke merge request dan akan direview oleh pengelola project.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Selengkapnya kamu bisa ikuti juga video tutorial berikut ini: <a href=\"https:\/\/www.youtube.com\/watch?v=HGCTmMSU-Ac&amp;feature=youtu.be\" target=\"_blank\" rel=\"noreferrer noopener\">tutorial merge request<\/a>.<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:list --><\/p>","waktu_publish":"2021-10-25 08:00:00","status_publish":"publish","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:43:53","updated_at":"2021-10-25 06:37:34","waktu_publish_formatted":" Senin, 25 Oktober 2021. 08:00:00 WIB."},{"id":648,"uuid":"0463e0ae-9c60-4a03-83b4-3ab91e23cf88","author_user_id":9664,"materi_section_id":185,"judul":"Hari ke-2 | HTML & CSS","permalink":"hari-ke-2-html-css","konten":"<p><!-- wp:heading {\"level\":3} --><\/p>\r\n<h1>1. HTML<\/h1>\r\n<h3>Apa itu HTML ?<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>HTML merupakan singkatan dari Hyper Text Markup Language. HTML adalah sebuah bahasa standar untuk pembuatan halaman web. Dengan adanya HTML, kita dapat membedakan struktur yang tersusun dari sebuah halaman melalui tag atau elemen-elemen penyusunnya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Elemen atau tag pada HTML dikenali oleh browser seperti google chrome, firefox atau Ms Edge, dll. Browser tersebut mengidentifikasi setiap elemen penyusun HTML dan ditampilkan sesuai karakteristik elemen tersebut. Contohnya sebuah elemen paragraph akan ditampilkan sebagai tulisan panjang, atau sebuah elemen pranala\/link akan dicetak dengan warna biru dan ketika mouse mendekat kursornya berubah menjadi telunjuk, dsb.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh sebuah halaman HTML sederhana:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;Page Title&lt;\/title&gt;\r\n&lt;\/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Heading&lt;\/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;\/p&gt;\r\n\r\n&lt;\/body&gt;\r\n&lt;\/html&gt;<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Dari contoh di atas kita dapat mengidentifikasi elemen-elemen nya seperti berikut<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>element <code>&lt;!DOCTYPE html<\/code>&gt; mengartikan bahwa dokumen ditulis dengan versi HTML5<\/li>\r\n<li>elemen <code>&lt;html&gt;<\/code> adalah elemen induk atau elemen utama yang sering disebut juga root element dari sebuah halaman HTML.<\/li>\r\n<li>elemen <code>&lt;head&gt;<\/code> berisi informasi tentang halaman HTML yang sedang dibuat<\/li>\r\n<li>elemen <code>&lt;title<\/code>&gt; adalah judul dari halaman HTML yang akan tampil di tab browser.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Elemen pada HTML<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Elemen atau sering disebut dengan tag pada HTML adalah penyusun dari sebuah halaman web yang dapat dikenali oleh browser dan ditampilkan oleh browser sesuai karakteristik masing-masing.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Sebuah elemen HTML terdiri dari tag pembuka(start\/open tag), atribut (attribute), isi (content), dan tag penutup(close tag).<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAa4AAAB1CAMAAAAhpfXwAAABTVBMVEX\/\/\/8AAAD5+fnY2NhbW1upqan8\/Pzq6upRUVGZmZmysrI7OzvrAIf1dMDyUq\/29vbe3t7w8PDp6enP797KysrsAItqamrrAILj4+O4uLj\/+fz8z+qTk5PrAIahoaEApUxmZmZ5eXnExMSGhoYqKirzfrbR0NAeHh5YWFj94PL+7fg\/Pz9+fn7+9frc8ub1\/Pn3nM41NTXtAJNmyJNKsm\/0arwAoT\/14d4UFBTtJpG\/59IjIyMtLS382u3o9+\/57uzxWan6weJevYL0fsDwRaiV1a8ArVrszsq35s33stLhs63EWkrvHp+VzqbxZ631j8bVkol\/x5fLcmT6st71ocgtsWe1JQC6Rzmo1ra8QSzuEJ3vR57mv7qE0qfQgnf1nMTbn5bGZ1rycrL0jL63Mhs4unX2iMlFsWtRxYnPe27WjYGO2bHxPKx20KCvCQC9eFS9AAAW\/UlEQVR4nO1d\/VvaSNeeBBICKkkgxAQiJMFGvkGsKFhQEClVKrVItbX2tbZYt1uf\/\/\/H90wCCtZWu4VVu7mvS5zMx5nJ3HPOnJkJASEbNmzYuBk0y2Mgkr\/vlti4A1xRVdREEemp+26JjTuAY5xhiqJQOPnTbLTD1r6HAI5xm\/\/DDHDCswjxJOmCTwgh0kVCCLHAFMt47redNkxwjKYbgoTp4qmUwiEqHNZkOQohV1hz+1DYo0QFFF4QdVu\/7h9cLAlzl4zpopyelMKKU2GRSFGLUdotymIYORkqtojcC6ps03X\/AO0SDANrFx9LKs4kJ0aRTriQqklTMTfjdKkKkgnELlL33VIbyJy7aPwf6HJGdd2gxTAtEIhUNW5KwdfOMIJr3qbrQYBjUobD4QC6aAV8eY4U3X26eNAzUkJ9uubDiLzvttoAuoi1+flV5F5EnDg1leKdikmXU0UCMzUVZcFz1MEYOgnRcd9ttQHOuwvgM7113ufjsQtP+iDMQ9LgGnv2Pt7WLhs2bPzHIHP33QIbd4eLIOj7boONO4LkFhiG4f5swsg\/AYhmfVyYSEpScoHifCxL33eLxoHrA08yBJn6EyBTikgQKoe3EolVUQl77rtF44BHEAzfJVk+j7hK\/DlgFHMr16cw992SMWJN9LAWWwKMx6RTdP4BiDk1N2UMhqEBqha77yaNATExpU4RRFQy2UoSUVlwcI4\/Ady1MxLpvhs0FnA+TpBThAp88VNJ+9juMcClLzhplFqU7rshNu4GbiGKPPY29aOB4bHPgB4TbLJs2LDxXwEpapp49UikYjuCDxosYQj61fHPqnCPbbFxK9h5RNOI5H0+ErE+ft6m60GDJTyUhxOSyXmKdCfFBZuuBw2WoMIUJ6gOSjTW2IkaQ58hcPbS4PfAPsOfgubwaPoUjSaoXZwYS6q28v4eWEL2UIIsOjyixFAyMbn+VFVBpwQk6exwrEt39UOUvZV8O2g3QHboLodO6lGK8t1e5B+CCOPqkC5iWnwDbozYYIAQ+CSKvKzfJu9WsLdn+edQpxRQLI6ZVw0+LKpuWOS5o1FxIeYxmYkSTgUJouiWEKdoUSU6ybbYuBU+jZjXfKzCeFw+2dBXHYhYUBzUotvyPwwibCCHLjs9SNGEKe2hHgUIYcXzn9B8ntMXokhXsb2TBEJGCyKJBObSGOIAqTtTpOZBzoeqXMozUVyU769+Wvr3Hmml3TEkA12GyKSArjUFP1yg9xOBLtbNiEmNV6Y04oEql0IIPO+6NmmE3aPXbHhyXxajZQ\/4ZwLWbwMJE5y9UmDzkiKSnRxSGJ+02qdrSu+f0xA6khZ1KabxqWj4gW5dckl3f+Vo9pjE09g\/EkX4YA1oM8fSAo1IcXK2QV5dVTiNYRysU13TJtdNvkVigVjkkLBARD2LxBrhQQTQ5UgSmuUNrhLzPvwwmchG4ZOZqNvzT+EhrA6iPcTqmo6U5AJBIBWaS0kx+EBacpV4hpwEsTope0lS2MFGUYHSUHKiRtmlC\/iBU5ev\/54EC\/zAdSfB\/tHYMAvQDMeqNsmm\/FMM6OLWDETFJOUZ7wKjDtpFKikkqJK2iCRCoCeoXSTlRpI2TwhGMkxMrJZfAeeMeqip8H034yYI1hY47VZh6mAERXUh0CNRRZKTWFiY4jRwngiBVSf3ihySUllPVFIFWdSMh2GBuKjqvEfn62cQGYlGLC8zPJKThuJ0IcKky6eZ7oamspguZwpN7BsTBqMYmipyMqMyzKQq+VNgMIzHocg8kxK0KKvETLpSSYdDiFEGxVt0kVrMmLi7rSic69+3hqZD9YjARUWwQsihiYqEPG4e4QtR02lZFBWeCpNI5HDExPeyeSWl\/esvlwAXS31cfP2XQXuSqioaf\/ZX4yYAXnbdnmnc8MnKM1Uykoz7UT+H\/+9vwNAUEf2xVyjJ4XDYPWaEFUVcIGBdThtOYlFTFGXcNbjD4X9jGPCMcXumsYKlkmoy+oNb48POZ8Ta2L+RN4+3LmRzjSxRi+OW3sfU5dfUJgZenWf+Vf0iZW1Nk8Jravgm79OIEcQCo8aYMcOpuR1Sf9IiOSGsJsddQ0xlVolJ7qthyE5Cmkp6Jv4MCudR3GCBlGhKfUZEXYj1rBKMGI3iuDB1OfsbkGj4XBMAPzLuWX78lfAun+4kmCGrQY8TLCe4nWuEgbjFVaeiO\/ixih8hy9CS88Q8WLhnYDKS5uMTNKf1Tcjq2tpUf1uBXVh83E8vscKiat6AriWTyakxIpl8Bh3IYHPug55bezZe8QyTFPvrKpJaw6wwcAOgUJenJqzkVpNT+K5wqop9RXHtYexL\/Qa4ebhrNjaRuTGpW2OZFMYu33QWknh64qPEmttHk9+r3aUq8p4ksQBWxP1Ajwl\/BboHOeDWVUX2jBejU73kocYpXNYpbRUfypBhQrmDzsir8xPqv38dBjH\/QLeMb4GRJCiOuNtek29hgocY5RBC1cRERCeqaRQKDUXwxOPdulbnPe7bc5kQJvjLBvV3KDSbm4jos7kyyreGIijmEe9yiQ\/h5yXixTN0FpiMdu22gomRkcA\/5i0u9P1imFxZ\/02ZwXi5XE7fPX8nH0ffNn6z0mEkyvE++YmjHMqNjIRspo9KJVO5UrRK5SfyMtkxNu7ugKb+rFUWnu+8\/3mG9dvoTGzW6\/VfsG2by0E0Xb17\/lvRqXv71VfrceT1QoBc71OTqZ33zs97T5e2LnrHl71RuTj+cc\/4zw\/H2Li7o9k737o5ZX1wN2j95K+V4RR6fdRxJN9\/eH5LNekX\/7c\/vXznVgW9VVTN3zn7HRD6lJ+xQu2ZNMpjT2P967Z1W\/7I3mGvcbjXOC497WUGJSoXF5mbJJkoPW2Os3V3hv9lYenGhJVXJwOVeb6zPZK0fnKyMpJz59Xgmg5+Jyge7xvBYr+\/EgOzBCYyEUz049LD5ikxk0C5thlMW6XT8fhwulU6Hry6TgzSrQLx+JU8MyLY2rSSNqso7TVvY3vnr\/d4GZtp+NHSU5Q5b6KX3Qw90KlLY5gFA3Td9l0aw0rmelrmJkOZteKyleEhYMbRmcqlLFPccIFh22flKlwMZA1hffvj6\/f9zmBPPvbZCFr6tv7+4+tt8irnx\/eY2OevXm2ffPiwPWoXq082Nk4tr9miK7F\/urHbNvs292Rj90kuiIf+7sbpbhkF2zmM9osEEBFPdJ58yrVPT1+kLTFPwDjG258+VTufTs+CKHS6sbFp2kso\/iS3u9uB\/P\/XyZ2eVoPp3MbGbi6O4rlP7dyT0ydQXbrlzZ3ugg8PU2i6bDaIfP7BHGjZUhbTlfVX0MvG3l7tGLoju7f3csvsusrWUq22N2L7tiDR0q7mHqTtDRvN7MtabWlrmJQmSIISzWw\/O5Ss7O3tlUp7S1CTH0eVcD7\/y9oe1NVs7u1tNaGAH2W3arUayKps7WEJxyCVLpxvQf4RV5aG+7hSoJWdkwEZXy01o1deHXy10lf+OjhZMQuvfHjz+eDV688nI2wVW+2ZwJP0FV3lVvFsM78BYz+XX25vBjagU3frm+36bAdGvYWcpRnVeiBf36znXwTRxmw7561XUXymHii2vK25NPLObrY3IAqVN1pn9UC9NVP1momBzXRoutXezG8mEu1i4N3yTMCbALry9bON+vB6yxqV2+aoBLowXkYaS0sRmB6yS+fdrtmLYCO39kZNUPP8PLKHA6Xe+fFWo+AfSvMXelsXjeMhBSj1Co3zi14XaKoVjrew2MpFL\/Kle94rVNB54fi4h2vK1HrHvch59+9mrxvpds8jW9lSpLt13NjLVra6uF2Np1mgq9E7fvp0uMb1k52\/nl9ataCpXM9ff\/68c7IzIAMU7OMJZukyBuzgwcF6cP3VzvA81qqX04nqiHa9CKXLM3kY316YQdK5dhBVW5sJVF6GXAkLAxey\/G4jni7v1sso1AnGO\/ldFEwDh7l4HIrjqFwLRkIuX00nAvUEGNYXsxuhBJjNdK6MqptFMHufAp1EojMNhvDdUSj9onXdfXm+82ZlmK5CM5tt9BA2hYcWXXg6y16MTPB0xd8w6dpqHGZRqTaiXYcZ1FzqDvVnNlOoVbL+2tMMKpWylWZjCSt0L3IIjiiNSk3Mxkssq5TNNM4rlWzmuFDzV7AFxrIuoBnZl1BRpQnjiC58yWSbjaGZk95+M+xarB9gQujnOzsrwfXXB4OUlY9vnpu3e7A90MyDDzj+zdBEF5\/GE1Cf+f7cFZo5KhZhpYrKgeLRDFak9Gb+aGOmA4GNZRO5gc8N8w1C+0Br\/GzjqBjYwMXrG9YsFZzBUbtx1AanH+W\/mbID+1bJzjJUUuxYhaHqFmgXVF\/Nv7jG1scDy6wP6GqAwel2zXDJouuw0X26dHhtuqhYdFVq3S9Lx\/6RpGbtS7fRHfZEsjDfYDl+VPm71u1GsKb6ezXLYGaPIX\/EpAsiGuc4CkZBX9YSlgUXh6YL1O0BXUu4ZcPi11+9\/XDJF32yY85GKzt\/Qbe\/H5AB2ma5Iusnbz729engK75+c3IlqTw95LxbdIXyreXcZsCcPXLeb4FT3PnltjcfAGNosbXc6atXonWGuz4fSm8EvLlOfgOXr29aZH4LeNu5b0BXte49W7bWvaG+9uSK7zY7ufwlXfUBXaPatf7182Bg\/pguVDlc6lq27wp9uiDT8Xmjn8\/CVqN7DNo1StcxMumq1BrnW6Z2AV19RnoQZWpXs3v+d62ARWW3+hK3Go2L5kXjkq4vjZvowqr0dqAz629fmf+BLvZSd9ZPPn9cGSjVys4bi7mDz\/Cx\/XZojRacNXvY0haTrnS7GMIMmMYQp73LAQO4E73D+0IWEu92cd+\/K3eAS9AgU1j9zCSzOguKG6\/vJlCnFZgNWMMiVLTsrvcdvjDpCoTwHsk30zMcpYt+\/\/bt+8FN3EiXqTa1i6vwJSoDY4jtoKkSA\/QaJjWjdNVM0f5mBNNg0pXp01UqgJmt9ICuw26kUDBt7iVdNSzLtHyHuGSmcWF6hpd0XS4MQWd2rHH3vm\/+Vj5+BKvx9bNlAd9sDx9Kblsk7rx5vbL9v7+GffncXL2Ta4EKhDrVordaBV0ILFc79blcFdXnvKHOZqsD6tHKhTqWORtBogWZZwLtdPyoFaouzx2F4qF2caNTxYRNf+tUZ6aPOun9AQfxTjvfrpah\/pm5s2oun98so\/25Vq7TmgY38503lGi\/O7t0\/tHK26+XXmzzvFuCuSJTa2xl\/Y0GzBbN0hbM+tAfTwt\/+5u9L8O+XqZ52KiV\/Fm0FemVSluR46G0pcLfJdCK46H82QJWEqAi86VbKp0Xzv0Z\/1YXXENsYSPdZmkpUitlDwdKWmkuNcyaEZQpHYKGZdBhodtsdgswbUFpMJbHMOtBVY3LOlY+mkaQfPt1cP2\/r89P\/vcamYp24y7Gwc7B58+vR5POioEAuGOho0AAQoFllNiEf+DCtYLebxCTBx2penFS6\/sdwkSrBSnY+HXgf9FbzNdbWMwsNqCdvBkVeFEtTk9Pz70LpWemIXF6Fyd6QWC9DuF9nB\/U7GyuGKjPwIX3cv1GXy32S4VGI\/I3WKhII3LRhbC\/VIhAuADjt9aNRCKj1gdiIA+M+q0eThxWLpQ9h8TzbqR2xVe20IXc2N0HDYqAz9e9AE8vEingLM2GGdVolrCoQsOfXcI1R3D2bK0vqwITKIjwowtIeroFH0sVrNu9oYpN\/dl+uzKg6+AtkGHe5w+O+2Huer5yPTIYwsMdxUMmEmYQXDf4AxfQikgn0uVQ6DtxmK42ClndG8cZ4uWEKceUCFFgUROh+K63Ggp1ludgUGBY814IygXhD+auuBmFiyXKVoXfww+AsV6BfyiDP2i\/vx9nRox6GhUzDVbD2QoEr+99+GH9hvxD3iK4Gtl+LshurqMzfQFmVAZH+WvnJb+\/uRTJZE3plb4sSIS\/wx5oJBaFi9GZfrIfXcdAuUClPqyvfEfGCA6+\/jT512G5GrfAmvlQeu7GLUnL1bhfWK7GLSj1TFtYKdy4u3XY+\/GG2DBeXTnuf\/38VGh95e3r56N6F\/x+S+pnuJ49Xs3vlm89REk\/qe+HymBQyzeklZ\/k9ydzDHN3ZEqF2u0b+JW9XtPvL\/W+3LCvnM3sdQ9v34kfwvr7g48\/38d9v7Oz83Z04irv\/0oVaD8+ep3L14sbtytH\/NPRt1b+tHNT0nKxnu\/82qAZO2CK6S7d3tn+42631619b+CA8KVut3F96fdTmGT89BG19eeAUQWMB37lDORF\/hpdiWq1GrpDXwdD1RfVGw\/T0iEQcd\/aVSmVSjeRcB1Zf9NyFr9PyYCIX9Ou78m4A2ClGr89lwnw4dq\/Kt7GeBHczO\/uV289Rk7HQ\/u70+1fOG22MREk9t8F6hunTyy0n7Srl8at2n4ywOnuUSC\/\/x1b5Zumo99tUOe+beODRjC0mZ+dnZ6bxcjPBo5OremsunkUmL3EXH7zBpei3Bo7X8Gc9wYH0sYVYGW7n+uj7c3P1nOgRvvF2dbyZrsfvR+K32QIg+18brxeXaJ9737iI0BwgHQ6gc+r0vuBeiiRTl\/G\/6BcYjmwMUbjlWjXx83\/n4\/0\/jtvK3c3EhJnc4Fise79Ia7OxgDls+Wf5KwXi9M2W\/8Audm7O4Gh+hxg+mbMBfJz04EZi7ByHbL9KOf09Le5ucDyXVcVNoaQ+KWVayJ3NvNjeFuBOXNb8GxuuvjN++OMZ2cde6HwAJDIHQFf7bm6Tcd4cO2bmei772r+JhK7+ba9JTIusNaL766uBU4a73ssE8vTNlvjgsMp4h+OdiFkvbGN9Tj01NULxsfxMqvQ5hiE2DAhiykZ8ari8817eNaQJJ7UNd0gkQPREkuJEskLxqP+PvqfBJciUwrriImC\/izKSVNunTJ0VRE9iEF81KEwMke5o8Ij\/kbcHwWH06PEHLQW5tkpneaShhTVdc0hM4hAvNMha6zOpJypR\/8GgT8DpEf1UDEZgUFESQfiRFApXY\/yjiTQxcY4IYp0jdLtt6o9DPg0mWXdKT6VotCiInAqcgFdTkqLIkJwT3FCTBaiYVm3J68HAV4GM8fJvBCVkSfq4GVw5CX8jjYfCiuyzLvCHpdEuW3tehgwH0qED5onEcnT+OlF84VJLH7PEwkkmSHWZsuGDRs2bDw8kCRL4lkKpjEI0iSLv1Rg+4MPFWIsmWT5pFPzyUxsXlPnOZRajP0Bb2z7MyEq6JmBJC7l0UWfW6WjKWNVVpQ7lmavvYOV9yHfbarJPuqXB90zRBklDUmJMpSssG6NDUflRUXRby9owvMM+KJ5y+\/H1xpSrzTTd+M6QHioP6H3GKDKaErwqLpIyVFWEVl3yuV0GHc1hqoKfc9TCBnWz1FwAhp6gbSGORzVJRa\/r3XowsavweNAYcmnuMMG\/k1fmRRkJLvdd9QuzmmsItrjNBxK1PAZsu7SEaipzEocMnhpEYTLbut97YaEHA7eQwlIT7EG79N51yDJxq\/i+nMAdyymhNGijsJJ3UiJghHTZGERJZWwKnjcSBMci2GH7IyKXD+rKPOUzPB6iksZOuNwa9HYmG\/Dxs9AO6NUUkSSihBFIYkxkJEEY0i6w3IYpQSUZBGToqKmnRRSguriZU\/SIaSkqCE4dadCOe\/5Bv5b0DVdEBZYk64w4lTJpEsno9QlXVrKx5neI5kSFVoJ61NAFxd16DHDSXET\/\/0lG0PQPPCRpPhYCrpf0TFdi2hRFTVJZpQpARwR2SemFMv3oNYMFGVSi4au8SlRS3K6Fn0Ib0D970DCrp3koyWOZzmJl0jEcojjHD7EcxzHIp\/DhSQHZzmAPEci3gHRLKzNOIkjachzv+23YcOGDRsPB\/8Pvi+3ovNbCc8AAAAASUVORK5CYII=\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>pada ilustrasi di atas merupakan sebuah elemen paragraph dibuka dengan tag pembuka <code>&lt;p&gt;<\/code> . Di dalam tag pembuka tersebut terdapat atribut <code>class<\/code> yang disematkan ke dalam tag. Isi atau content dari sebuah tag <em>paragraph <code>&lt;p&gt;<\/code> <\/em>akan ditampilkan sebagai paragraf. lalu terakhir sebuah tag ditutup dengan sebuah tag penutup.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>catatan<\/p>\r\n<cite>Tidak semua elemen HTML memiliki tag penutup seperti <code>&lt;input&gt; &lt;img&gt; &lt;meta&gt;<\/code> .<br \/><\/cite><\/blockquote>\r\n<p><!-- \/wp:quote --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Elemen di dalam elemen (nested element)<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>sebuah elemen HTML dapat terisi dengan elemen-elemen lain di dalamnya. Semua dokumen HTML yang kita lihat di halaman web terdiri dari kumpulan elemen bersarang atau elemen yang mengandung elemen lain di dalamnya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Contohnya halaman berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Heading&lt;\/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;\/p&gt;\r\n\r\n&lt;\/body&gt;\r\n&lt;\/html&gt;<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Pada contoh di atas elemen <code>&lt;html&gt;<\/code> adalah root element dan merupakan elemen utama di dokument HTML. elemen tersebut dibuka dengan tag pembuka <code>&lt;html&gt; <\/code>dan ditutup dengan <code>&lt;\/html&gt;<\/code>. Lalu di dalam elemen <code>&lt;html&gt;<\/code> terdapat elemen<code> &lt;body&gt;<\/code> . elemen <code>&lt;body&gt; <\/code>merupakan elemen yang akan ditampilkan ke halaman web yang diawali dengan tag pembuka <code>&lt;body&gt;<\/code> dan ditutup dengan sebuah tag penutup <code>&lt;\/body&gt;<\/code> , dan seterusnya sehingga terciptalah sebuah halaman web yang utuh.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk mulai berkenalan dengan elemen-elemen pada HTML terdapat video tutorial yang dapat diikuti seperti berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Belajar HTML dari Dasar oleh Sekolah Koding: <a href=\"https:\/\/www.youtube.com\/playlist?list=PLCZlgfAG0GXC9ojTmU95BRefbJoi4clY-\">https:\/\/www.youtube.com\/playlist?list=PLCZlgfAG0GXC9ojTmU95BRefbJoi4clY-<\/a><\/li>\r\n<li>Tutorial HTML Arkademy : <a href=\"https:\/\/www.youtube.com\/playlist?list=PLf61QUuMoXcPC1Yc2km8B5qwWJgQ_7NZr\">https:\/\/www.youtube.com\/playlist?list=PLf61QUuMoXcPC1Yc2km8B5qwWJgQ_7NZr<\/a><\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>sumber<\/p>\r\n<cite>tulisan ini disarikan dari halaman dokumentasi W3schools : <a href=\"https:\/\/www.w3schools.com\/html\/default.asp\">https:\/\/www.w3schools.com\/html\/default.asp<\/a> <\/cite><cite><\/cite><\/blockquote>\r\n<p class=\"wp-block-quote\">&nbsp;<\/p>\r\n<h1 class=\"wp-block-quote\">2. CSS<\/h1>\r\n<h3>Apa itu CSS ?<\/h3>\r\n<p><!-- wp:paragraph {\"align\":\"left\"} --><\/p>\r\n<p class=\"has-text-align-left\">Cascading Style Sheet atau dikenal dengan CSS merupakan bahasa style sheet yang berguna untuk membantu menyajikan dokumen yang ditulis dengan HTML. CSS dipakai untuk mendesain halaman depan atau tampilan website (<em>front end<\/em>). Menggunakan CSS kita bisa mengatur warna , ukuran , posisi , <em>background<\/em>, dan lain lain. Sehingga ada nilai estetika yang ditambahkan dalam tampilan suatu website.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Selektor , Properti dan Value<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pada CSS ada beberapa istilah biasa kita temukan diantara : selector , properti, dan value . Kita mempelajari terlabih dahulu pengertian dari ketiga istilah tersebut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Selektor<\/strong> adalah metode pengelompokan syntax didalam CSS. Selector juga dapat diartikan sebagai aturan yang digunakan untuk memisahkan beberapa syntax dengan target yang berbeda.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Properti<\/strong> adalah suatu jenis style CSS yang berfungsi memberikan style pada selector yang telah ditentukan. Property pada CSS sangat banyak sekali. Banyak contoh properti css seperti :<code>&nbsp;background-color<\/code>, <code>color<\/code>, <code>font-family<\/code>, <code>font-size<\/code>,<code> margin<\/code>, <code>padding<\/code> dan lain lain.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Value<\/strong> adalah nilai dari property . Dan value harus bersesuaian dengan properti, misalnya properti <code>\"font-family\"<\/code> tidak bisa diisi<code> \"red\"<\/code> karena <code>\"red\"<\/code> adalah value untuk property <code>\"color\"<\/code>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Ada bentuk baku penulisan selektor , properti dan value :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":3832,\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-3832\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-13.png\" alt=\"\" \/>\r\n<figcaption>Gambar 1 bentuk baku penulisan selektor , properti , dan value pada css<\/figcaption>\r\n<\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/contoh css\r\nh2 { \r\n      font-family: sans;\r\n      color: rgb(10, 8, 8);\r\n    }\r\n<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li><em><strong>selektor<\/strong><\/em> pada contoh diatas adalah <code>h2<\/code><\/li>\r\n<li><strong><em>properti<\/em><\/strong> pada contoh diatas adalah <code>font-family<\/code> dan <code>color<\/code><\/li>\r\n<li><strong><em>value<\/em><\/strong> pada contoh diatas adalah <code>sans<\/code> dan<code> rgb(10, 8, 8)<\/code>;<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3 id=\"membuat-repository-baru\">Cara Penulisan Kode CSS dalam HTML<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p><strong>&zwnj;Internal CSS <\/strong><br \/>Penulisan CSS didalam tag <code>&lt;head&gt;<\/code> atau <code>&lt;body&gt;<\/code> HTML. Penulisannya ditulis dalam tag<code> &lt;style&gt;<\/code> .<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;   \r\n  &lt;style type=\"text\/css\"&gt;\r\n    p{\r\n      font-family: Helvetica;\r\n      line-height: 2.00 em;\r\n      font-size: 20px;\r\n      color: orange;\r\n     }\r\n    &lt;\/style&gt;\r\n&lt;\/head&gt;\r\n\r\n&lt;body&gt;\r\n  \r\n  &lt;style type=\"text\/css\"&gt;\r\n    h2 { \r\n      font-family: sans;\r\n      color: rgb(10, 8, 8);\r\n    }\r\n  &lt;\/style&gt;\r\n\r\n  &lt;h2&gt;Hello CSS&lt;\/h2&gt;\r\n  &lt;p&gt;Hello aku bisa CSS&lt;\/p&gt;\r\n&lt;\/body&gt;\r\n&lt;\/html&gt;<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:image {\"id\":3808,\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-3808\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-8.png\" alt=\"\" \/>\r\n<figcaption>Gambar 2 Contoh Internal CSS dalam HTML dan tampilannya<\/figcaption>\r\n<\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p><br \/><strong>Eksternal CSS<\/strong><br \/>Penulisan CSS terpisah dengan file HTML. File CSS ditulis dan disimpan dengan file berekstensi .css .Untuk memasukkan ekstensi CSS ke HTML menggunakan tag <code>&lt;link href=\"dirfolder\/namefile.css\"&gt;<\/code>. <code>href<\/code> diisi direktori folder dan nama file CSS untuk mengarahkan halaman html menemukan file CSS tersebut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":3820,\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-3820\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-10.png\" alt=\"\" \/>\r\n<figcaption>Gambar 3 &lt;kiri&gt; file HTML dan &lt;kanan&gt; style.css<\/figcaption>\r\n<\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Inline CSS<\/strong><br \/>Penulisan CSS langsung di atribut HTML tersebut. Contoh cara pemakaian inline CSS:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":3831,\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-3831\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-12.png\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk lebih mengenal CSS terdapat video tutorial yang dapat diikuti seperti berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Tutorial CSS dari Sekolah Koding: <a href=\"https:\/\/www.youtube.com\/playlist?list=PLCZlgfAG0GXAvVZ1Wb1D7HVAPNJGk4f-G\">https:\/\/www.youtube.com\/playlist?list=PLCZlgfAG0GXAvVZ1Wb1D7HVAPNJGk4f-G<\/a><\/li>\r\n<li>CSS Dasar dari Web Programming Unpas :<a href=\"https:\/\/www.youtube.com\/playlist?list=PLFIM0718LjIUBrbm6Gdh6k7ZUvPIAZm7p\">https:\/\/www.youtube.com\/playlist?list=PLFIM0718LjIUBrbm6Gdh6k7ZUvPIAZm7p<\/a><\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Sumber: <a href=\"https:\/\/www.w3schools.com\/cssref\/\">https:\/\/www.w3schools.com\/cssref\/<\/a><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>\r\n<p><!-- \/wp:quote --><\/p>","waktu_publish":"2021-10-26 08:00:00","status_publish":"publish","urutan":2,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:45:00","updated_at":"2021-10-25 06:38:00","waktu_publish_formatted":" Selasa, 26 Oktober 2021. 08:00:00 WIB."},{"id":649,"uuid":"00ff6712-7a02-4530-9ce7-c9b150245fc9","author_user_id":9664,"materi_section_id":185,"judul":"Hari ke-3 | Pengenalan Javascript","permalink":"hari-ke-3-pengenalan-javascript","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Javascript merupakan salah satu bahasa pemrograman yang terpopuler di dunia. Javascript membuat aplikasi web menjadi interaktif tanpa reload halaman. Hampir semua browser modern yang kita ketahui dapat menjalankan javascript agar website yang ditampilkan lebih menarik.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"menjalankan-javascript\">Menjalankan Javascript&nbsp;<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ada bermacam cara untuk menjalankan kode javascript yang kita buat, di antaranya:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li>Menjalankan javascript di console browser<\/li>\r\n<li>Menjalankan javascript di tools online seperti&nbsp;<a href=\"https:\/\/jsbin.com\/?js,console\" target=\"_blank\" rel=\"noreferrer noopener\" data-type=\"URL\" data-id=\"https:\/\/jsbin.com\/?js,console\">jsbin<\/a><a href=\"https:\/\/jsbin.com\/?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">.com<\/a><\/li>\r\n<li>Menjalankan javascript dengan nodejs<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Pada materi ini kita akan mencoba untuk menjalankan script dengan nodejs.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Nodejs adalah software berbasis pemrograman javascript yang dijalankan di sisi server. Jika biasanya javascript kita kenal erat kaitannya dengan client\/browser tapi dengan nodejs ini kita bisa membangun server menggunakan bahasa javascript.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"install-nodejs\">Install Nodejs<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pertama-tama tentu kita harus menginstall terlebih dahulu nodejs di komputer kita. Berikut ini link untuk download&nbsp;<a href=\"https:\/\/nodejs.org\/en\/download\/\" target=\"_blank\" rel=\"noreferrer noopener\">nodejs<\/a>&nbsp;(disarankan memilih versi LTS). Untuk OS Windows dan macOs tinggal diikuti saja instalasinya sampai selesai, sedangkan untuk Ubuntu 18.04 kamu bisa install mengikuti&nbsp;<a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-install-node-js-on-ubuntu-18-04\" target=\"_blank\" rel=\"noreferrer noopener\">tutorial dari digitalocean<\/a>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk mengecek apakah instalasi nodejs sudah berhasil kita bisa jalankan script di terminal kita:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":7178,\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-7178\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-42.png\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>dengan perintah tersebut, diketahui saat ini terinstall node dengan versi 12.16.2 dan npm versi 6.14.4 (untuk versi bisa menggunakan yang terbaru ini hanya contoh untuk mengecek version nya)<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"hello-world\">Hello world&nbsp;<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk menjalankan javascript dengan nodejs mari kita coba dengan menuliskan script di sebuah file index.js .<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah file dengan nama index.js kemudian tulis code di dalam file tersebut seperti berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var sayHello = \"Hello World!\" \r\nconsole.log(sayHello)<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>kemudian simpan file tersebut (save). Setelah itu kita bisa menjalankan script pada index.js tersebut dengan memberikan perintah seperti berikut pada terminal:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">$ node index.js<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>secara otomatis pada terminal kita akan muncul &ldquo;<code>Hello World!<\/code>&rdquo; . (Selamat Anda telah berhasil menjalankan program pertama Anda \ud83d\ude01)<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Demikian cara untuk menjalankan Javascript dengan nodejs.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"variable\">Variable<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Variable adalah suatu blok data atau wadah untuk menampung sekumpulan data dengan berbagai tipe data apapun. Dengan variable kita bisa menyimpan suatu nilai untuk kemudian kita olah kembali pada program kita. Untuk deklarasi variable dalam javascript kita bisa gunakan sintaks&nbsp;<code>var<\/code>&nbsp;lalu diikuti nama variablenya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var name = \"John\" \/\/ Tipe\r\nvar angka = 12\r\nvar todayIsFriday = false \r\n\r\nconsole.log(name) \/\/ \"John\"\r\nconsole.log(angka) \/\/ 12\r\nconsole.log(todayIsFriday) \/\/ false<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Waspadai pendeklarasian variable yang tidak bernilai !<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var items\r\nconsole.log(items) \/\/ Undefined<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2 id=\"data-type\">Data Type&nbsp;<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Data Type atau dalam bahasa indonesia Tipe Data adalah sekumpulan informasi yang memiliki nilai dan karakteristik tertentu. Beberapa contoh tipe data pada javascript di antaranya:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li><strong>Integer<\/strong>: tipe data yang berupa angka<\/li>\r\n<li><strong>String<\/strong>&nbsp;: tipe data berupa text atau kumpulan karakter, biasanya string dibungkus dalam tanda petik ganda (double quote) atau tanda petik tunggal (single quote).<\/li>\r\n<li><strong>Boolean:&nbsp;<\/strong>tipe data dengan nilai&nbsp;<code>true<\/code>&nbsp;atau&nbsp;<code>false<\/code><\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:heading --><\/p>\r\n<h2>String<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>String adalah tipe data yang berisi karakter-karakter dibungkus dalam tanda petik (<code>\"\"<\/code> atau <code>''<\/code> ). Karakter-karakter pada suatu string dapat diakses dengan menggunakan indeks atau posisi karakter berada. Indeks pada string selalu mulai dari 0.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var sentences = \"Javascript\" \r\nconsole.log(sentences[0]) \/\/ \"J\"\r\nconsole.log(sentences[2]) \/\/ \"v\"<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>String pada javascript juga memiliki property dan methods tertentu. Property dan methods tersebut bisa kita gunakan dalam memanipulasi data agar sesuai dengan program yang kita inginkan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3,\"textColor\":\"vivid-red\"} --><\/p>\r\n<h3 id=\"string-properties\" class=\"has-vivid-red-color has-text-color\">String Properties<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.length<\/strong> <br \/>mengembalikan panjang atau jumlah karakter pada suatu string.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var word = \"Javascript is awesome\"\r\nconsole.log(word.length) \/\/ 21 <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3,\"textColor\":\"vivid-red\"} --><\/p>\r\n<h3 class=\"has-vivid-red-color has-text-color\">String Methods<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.charAt([indeks])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengembalikan karakter pada indeks yang diinginkan<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">console.log('i am a string'.charAt(3)); \/\/ 'm'<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.concat([string])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Menggabungkan beberapa string dan mengembalikannya menjadi string baru.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var string1 = 'good';\r\nvar string2 = 'luck';\r\nconsole.log(string1.concat(string2)); \/\/ goodluck<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.indexOf([string\/karakter])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengembalikan indeks dari string\/karakter yang dicari, yang pertama kali ditemukan, atau -1 apabila tidak ditemukan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var text = 'dung dung ces!';\r\nconsole.log(text.indexOf('dung'));  \/\/ 0\r\nconsole.log(text.indexOf('u'));     \/\/ 1\r\nconsole.log(text.indexOf('jreng')); \/\/ -1<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.substring([indeks awal], [indeks akhir (optional)])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengembalikan potongan string mulai dari indeks pada parameter pertama (indeks awal) sampai dengan indeks pada parameter kedua (indeks akhir). Bila parameter kedua tidak ditentukan, maka secara otomatis berakhir pada karakter terakhir. Karakter pada indeks yang ditentukan pada parameter kedua tidak diikutkan sebagai output.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var car1 = 'Lykan Hypersport';\r\nvar car2 = car1.substring(6);\r\nconsole.log(car2); \/\/ Hypersport<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.substr([indeks awal], [jumlah karakter yang diambil (optional)])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mendapatkan potongan string mulai dari indeks pada parameter pertama (indeks awal) dengan jumlah indeks pada parameter kedua (jumlah karakter). Bila parameter kedua tidak ditentukan, maka secara otomatis berakhir pada karakter terakhir. Karakter pada indeks yang ditentukan pada parameter kedua tidak diikutkan sebagai output.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var motor1 = 'zelda motor';\r\nvar motor2 = motor1.substr(2, 2);\r\nconsole.log(motor2); \/\/ ld<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.toUpperCase()<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengembalikan string baru dengan semua karakter yang diubah menjadi huruf kapital.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var letter = 'This Letter Is For You';\r\nvar upper  = letter.toUpperCase();\r\nconsole.log(upper); \/\/ THIS LETTER IS FOR YOU<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.toLowerCase()<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengembalikan string baru dengan semua karakter yang diubah menjadi huruf kecil<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var letter = 'This Letter Is For You';\r\nvar lower  = letter.toLowerCase();\r\nconsole.log(lower); \/\/ this letter is for you<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.trim()<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengembalikan string baru yang sudah dihapus karakter <em>whitespace<\/em> (\" \") pada awal dan akhir string tersebut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var username    = ' administrator ';\r\nvar newUsername = username.trim(); \r\nconsole.log(newUsername) \/\/ 'administrator'<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3,\"textColor\":\"vivid-red\"} --><\/p>\r\n<h3 id=\"mengubah-tipe-data-dari-dan-ke-string\" class=\"has-vivid-red-color has-text-color\">Mengubah tipe data dari dan ke String<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Di Javascript terkadang kita ingin mengubah sebuah data string menjadi tipe data lain atau sebaliknya. Contoh diperoleh data angka tapi dalam tipe data String maka kita dapat mengubah string tersebut menjadi tipe data angka.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>String([angka\/array])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Fungsi global <code>String()<\/code> dapat dipanggil kapan saja pada program JavaScript dan akan mengembalikan data dalam tipe data String dari parameter yang diberikan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var int  = 12;\r\nvar real = 3.45;\r\nvar arr  = [6, 7, 8];\r\n\r\nvar strInt  = String(int);\r\nvar strReal = String(real);\r\nvar strArr  = String(arr);\r\n\r\nconsole.log(strInt);  \/\/ '12'\r\nconsole.log(strReal); \/\/ '3.45'\r\nconsole.log(strArr);  \/\/ '6,7,8'<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>.toString()<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mengonversi tipe data lain menjadi string. Bila data tersebut adalah array, setiap nilai akan dituliskan dan dipisah dengan karakter koma.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var number = 21;\r\nconsole.log(number.toString()); \/\/ '21'\r\nvar array = [1,2];\r\nconsole.log(array.toString());  \/\/ '1,2'<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Number([String])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Fungsi global <code>Number()<\/code> mengonversi tipe data string menjadi angka. Data yang diberikan pada parameter harus berupa karakter angka saja, dengan titik (separator) bila angka adalah bilangan desimal. Bila parameter berisi karakter selain angka dan\/atau titik, <code>Number()<\/code> akan mengembalikan <strong>NaN<\/strong> <strong><em>(Not a Number)<\/em><\/strong>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var number1 = Number(\"90\");   \/\/ number1 = 90\r\nvar number2 = Number(\"1.23\"); \/\/ number2 = 1.23\r\nvar number3 = Number(\"4 5\");  \/\/ number3 = NaN<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>parseInt([String]) dan parseFloat([String])<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Fungsi global <code>parseInt([String])<\/code> dan <code>parseFloat([String])<\/code> mengembalikan angka dari string. Bila angka adalah bilangan desimal maka gunakan <code>parseFloat()<\/code>, bila tidak bilangan dibelakang koma akan diabaikan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var int  = '89';\r\nvar real = '56.7';\r\nvar strInt_1 = parseInt(int);  \/\/ strInt_1 = 89\r\nvar strInt_2 = parseInt(real); \/\/ strInt_2 = 56\r\nvar strReal_1 = parseFloat(int); \/\/ strReal_1 = 89\r\nvar strReal_2 = parseFloat(int); \/\/ strReal_2 = 56.7<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":1} --><\/p>\r\n<h1 id=\"operator\">Operator<\/h1>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Operator adalah karakter khusus yang merepresentasikan sebuah tindakan. Operator terbagi ke dalam beberapa jenis:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:html --><\/p>\r\n<ol>\r\n<li>Operator Aritmatika Operator yang melibatkan operasi matematika seperti tambah, kurang, kali, bagi.\r\n<ul>\r\n<li>Tambah <strong>(+)<\/strong><\/li>\r\n<li>Kurang (<strong>-<\/strong>)<\/li>\r\n<li>Kali (<strong>*<\/strong>)<\/li>\r\n<li>Bagi (<strong>\/<\/strong>)<\/li>\r\n<li>Modulus (<strong>%<\/strong>)<br \/>Modulus adalah sisa bagi. Contohnya 5%3 hasilnya adalah 2, 100%5 hasilnya 0.<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Operator Assignment (<code>=<\/code>), Operator untuk mendaftarkan atau meng-assign suatu nilai ke dalam suatu variable <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var angka<\/code> <br \/><code>angka = 10 \/\/ Contoh assignment variable angka dengan nilai 10<\/code><\/pre>\r\n<\/li>\r\n<li>Operator Perbandingan, Operator yang membandingkan suatu nilai dengan nilai yang lain. Hasil dari perbandingan ini akan dikembalikan dalam tipe data boolean <code>true<\/code> atau <code>false<\/code>.\r\n<ul>\r\n<li>Equal Operator (<code>==<\/code>)<br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 100<\/code><br \/><code>console.log(angka == 100) \/\/ true<\/code><br \/><code>console.log(angka == 20) \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>Not Equal (<code> !=<\/code> ) <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var sifat = \"rajin\"<\/code><br \/><code>console.log(sifat != \"malas\") \/\/ true<\/code><br \/><code>console.log(sifat != \"bandel\") \/\/true <\/code><\/pre>\r\n<\/li>\r\n<li>Strict Equal ( <code>===<\/code> ) Selain membandingkan dua nilai nya, strict equal juga membandingkan tipe datanya apakah sama atau tidak <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 8<\/code><br \/><code>console.log(angka == \"8\") \/\/ true, padahal \"8\" adalah string.<\/code><br \/><code>console.log(angka === \"8\") \/\/ false, karena tipe data nya berbeda<\/code><br \/><code>console.log(angka === 8) \/\/ true <\/code><\/pre>\r\n<\/li>\r\n<li>Strict not Equal ( <code>!==<\/code> ) Kebalikan dari strict equal. <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 11<\/code><br \/><code>console.log(angka != \"11\") \/\/ false, padahal \"11\" adalah string<\/code><br \/><code>console.log(angka !== \"11\") \/\/ true, karena tipe datanya berbeda<\/code><br \/><code>console.log(angka !== 11) \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>Kurang dari &amp; Lebih Dari ( <code>&lt;<\/code>, <code>&gt;<\/code>, <code>&lt;=<\/code>, <code>&gt;=<\/code>)<br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var number = 17<\/code><br \/><code>console.log( number &lt; 20 ) \/\/ true<\/code><br \/><code>console.log( number &gt; 17 ) \/\/ false<\/code><br \/><code>console.log( number &gt;= 17 ) \/\/ true, karena terdapat sama dengan<\/code><br \/><code>console.log( number &lt;= 20 ) \/\/ true<\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Operator Kondisional, Operator yang mengkombinasikan dua nilai kebenaran . Terdapat operator AND (<code>&amp;&amp;<\/code>) dan OR (<code>||<\/code>)\r\n<ul>\r\n<li>OR ( <code>||<\/code> )<br \/>\r\n<pre class=\"wp-block-preformatted\"><code>console.log(true || true); \/\/ true<\/code><br \/><code>console.log(true || false); \/\/ true<\/code><br \/><code>console.log(true || false || false); \/\/ true<\/code><br \/><code>console.log(false || false); \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>AND ( <code>&amp;&amp;<\/code> )<br \/>\r\n<pre class=\"wp-block-preformatted\"><code>console.log(true &amp;&amp; true); \/\/ true<\/code><br \/><code>console.log(true &amp;&amp; false); \/\/ false<\/code><br \/><code>console.log(false &amp;&amp; false); \/\/ false<\/code><br \/><code>console.log(false &amp;&amp; true &amp;&amp; true); \/\/ false<\/code><br \/><code>console.log(true &amp;&amp; true &amp;&amp; true); \/\/ true <\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:html --><\/p>","waktu_publish":"2021-10-27 08:00:00","status_publish":"publish","urutan":3,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:46:03","updated_at":"2021-10-25 06:38:14","waktu_publish_formatted":" Rabu, 27 Oktober 2021. 08:00:00 WIB."},{"id":799,"uuid":"bce4c820-c812-4290-b045-40583f0332c4","author_user_id":9664,"materi_section_id":185,"judul":"Hari ke-4 | Javascript - Conditional & Loop","permalink":"hari-ke-4-javascript-conditional-loop","konten":"<p><!-- wp:paragraph --><\/p>\r\n<h1>Conditional<\/h1>\r\n<p>Conditional merupakan cara yang digunakan dalam program komputer untuk mengambil keputusan dari kemungkinan benar(true) atau salah(false) terhadap beberapa kondisi.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"kondisional-dengan-if-else-if-else\"><code>if \/ else if \/ else<\/code><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Contoh 1 menjalankan kode jika premis bernilai <code>true<\/code><br \/>\r\n<pre class=\"wp-block-preformatted\"><code>if ( true ) {<\/code><br \/><code>    console.log(\"jalankan code\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<li>Contoh 2 kode tidak dijalankan jika premis bernilai <code>false<\/code> <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>if ( false ) {<\/code><br \/><code>    console.log(\"code tidak dijalankan\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<li>Contoh 3 Premis dengan perbandingan suatu nilai<br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var mood = \"happy\"<\/code><br \/><code>if ( mood == \"happy\" ) {<\/code><br \/><code>    console.log(\"hari ini aku bahagia!\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Di dalam conditional dikenal juga dengan istilah branching atau percabangan. Dengan percabangan kita bisa mengecek nilai kebenaran dari berbagai premis yang kita sediakan. cara menambahkan kondisi atau premis lain dari premis pertamanya adalah dengan sintaks <code>else<\/code> . Contohnya ketika kita diminta untuk membeli telur dan buah ke minimarket oleh ibu kita maka akan banyak sekali kondisi atau kemungkinan yang terjadi dalam perjalanan kita membeli barang-barang tersebut di supermarket.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Contoh 4 Branching sederhana<br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"open\"<\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarketnya tutup\")<br \/>}<\/code><\/pre>\r\nKondisi else di atas adalah kondisi selain <code>minimarketStatus == \"open\"<\/code> .<\/li>\r\n<li>Contoh 5 Branching dengan kondisi <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"close\"<\/code><br \/><code>var minuteRemainingToOpen = 5<\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>} else if ( minuteRemainingToOpen &lt;= 5 ) {<\/code><br \/><code>    console.log(\"minimarket buka sebentar lagi, saya tungguin\")<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarket tutup, saya pulang lagi\")<br \/>}<\/code><\/pre>\r\ncontoh di atas kita memberikan kondisi tambahan yaitu jika minimarket akan buka kurang atau sama dengan 5 menit lagi maka saya akan menunggu.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Selain Branching atau percabangan, conditional juga dapat memiliki sarang atau tumpukan yaitu terdapat conditional di dalam sebuah kondisional.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Contoh 6 conditional bersarang <br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"open\"<\/code><br \/><code>var telur = \"soldout\"<\/code><br \/><code>var buah = \"soldout\" <\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>    if(telur == \"soldout\" || buah == \"soldout\" ) {<\/code><br \/><code>        console.log(\"belanjaan saya tidak lengkap\")    <\/code><br \/><code>    } else if( telur == \"soldout\") {<\/code><br \/><code>        console.log(\"telur habis\")<\/code><br \/><code>    } else if ( buah == \"soldout\" ) {<\/code><br \/><code>        console.log(\"buah habis\")<\/code><br \/><code>    }<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarket tutup, saya pulang lagi\")<\/code><br \/><code>}<\/code><\/pre>\r\npada kondisi di atas minimarketnya sudah buka lalu cek kondisi selanjutnya cek apakah telur atau buah habis. Karena kondisinya adalah jika telur ATAU buah salah satunya ada yang soldout maka belanjaan saya lengkap. Demikian seterusnya akan mengecek kondisi-kondisi yang disediakan dalam logika program yang dibuat.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:heading --><\/p>\r\n<h2 id=\"kondisional-dengan-switch-case\"><code>Switch Case<\/code><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Cara lain untuk melakukan pengondisian atau conditional adalah dengan <code>switch case<\/code>. Penggunaan switch case mirip seperti kita menyalakan tombol switch pada remote. Jika kondisi tombol yang dipijit adalah tombol dengan nomer tertentu maka akan menjalankan prorgram tertentu.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Contoh 7 Kondisional dengan <code>switch case<\/code><br \/>\r\n<pre class=\"wp-block-preformatted\"><code>var buttonPushed = 1;<\/code><br \/><code>switch(buttonPushed) {<\/code><br \/><code>  case 1:   { console.log('matikan TV!'); break; }<\/code><br \/><code>  case 2:   { console.log('turunkan volume TV!'); break; }<\/code><br \/><code>  case 3:   { console.log('tingkatkan volume TV!'); break; }<\/code><br \/><code>  case 4:   { console.log('matikan suara TV!'); break; }<\/code><br \/><code>  default:  { console.log('Tidak terjadi apa-apa'); }}<\/code><\/pre>\r\nPada kode di atas, switch akan mengevaluasi nilai <code>buttonPushed<\/code> jika <code>case<\/code> yang ditemui cocok dengan nilai yang diberikan maka kode pada <code>case<\/code> tersebut akan dijalankan sehingga pada console akan dimunculkan \"<code>matikan TV!<\/code>\". Pada setiap case terdapat <code>break<\/code> yang berfungsi untuk menghentikan proses switch agar tidak menjalankan case yang lain. Juga terdapat <code>default<\/code> yaitu kondisi dimana tidak ditemukan <code>case <\/code>yang sesuai.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --><\/p>\r\n<p><!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<h1>Looping<\/h1>\r\n<p>Loop\/Iteration adalah tindakan mengulang \/ merepetisi sebuah proses, dengan tujuan untuk mendapatkan deret hasil, atau dengan tujuan mendapatkan hasil tertentu dengan repetisi. Setiap proses repetisi ini disebut sebagai Iteration atau Looping.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk melakukan looping\/iteration, JavaScript menyediakan beberapa jenis iteration, yaitu:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">while-loop<\/li>\r\n<li class=\"\">for-loop<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:heading --><\/p>\r\n<h2 id=\"while-loop\"><strong>While-loop<\/strong><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>While-loop adalah iterasi yang akan mengulang sebuah proses dengan sebuah kondisi tertentu.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Berikut adalah cara atau struktur penulisan while-loop:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">while([Kondisi]) { \/\/ Kondisi yang menentukan apakah program akan melakukan iterasi. \r\n\/\/ Berupa boolean atau true\/false.\r\n  [Proses] \/\/ Merupakan proses yang akan dijalankan dalam satu iterasi\r\n}<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Pada while-loop, statement <code>while<\/code> akan mengambil sebuah nilai <code>true<\/code> atau <code>false<\/code> dari hasil kondisi yang diberikan. Apabila statement <code>while<\/code> mendapatkan nilai <code>true<\/code>, maka proses yang berada didalam curly bracket (<code>{ }<\/code>) akan dijalankan. Looping akan terus dilakukan selama kondisi while-loop masih <code>true<\/code>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk mencegah looping berjalan terus-menerus, dilakukan sebuah proses yang akan mengubah kondisi yang sedemikian rupa yang bertujuan untuk menghentikan looping dengan menghasilkan kondisi yang <code>false<\/code>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Looping While-loop 1<\/strong> Looping Angka 1-9 Sederhana<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var flag = 1;\r\nwhile(flag &lt; 10) { \/\/ Loop akan terus berjalan selama nilai flag masih dibawah 10\r\n  console.log('Iterasi ke-' + flag); \/\/ Menampilkan nilai flag pada iterasi tertentu\r\n  flag++; \/\/ Mengubah nilai flag dengan menambahkan 1\r\n}<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu bisa mencoba kode di atas <a href=\"https:\/\/jsbin.com\/pahure\/1\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Looping While-loop 2<\/strong> Looping Mengembalikan Angka Total<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var deret = 5;\r\nvar jumlah = 0;\r\nwhile(deret &gt; 0) { \/\/ Loop akan terus berjalan selama nilai deret masih di atas 0\r\n  jumlah += deret; \/\/ Menambahkan nilai variable jumlah dengan angka deret\r\n  deret--; \/\/ Mengubah nilai deret dengan mengurangi 1\r\n  console.log('Jumlah saat ini: ' + jumlah)\r\n}\r\n \r\nconsole.log(jumlah);<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu bisa mencoba kode di atas <a href=\"https:\/\/jsbin.com\/nolocam\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"for-loop\">For-loop<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>For-loop adalah bentuk lain dari iterasi, dimana statement <code>for<\/code> menjadi kontrol atas loop yang dilakukan. Hal ini yang menjadi pembeda antara for-loop dengan while-loop.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Berikut adalah cara atau struktur penulisan for-loop:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">for([Inisialisasi], [Kondisi], [Incremental\/Decremental]) {\r\n  [Proses] \/\/ Merupakan proses yang akan dijalankan dalam satu iterasi\r\n} <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Pada for-loop, statement <code>for<\/code> akan menampung tiga parameter, yaitu sebut saja inisialisasi, kondisi, dan incremental\/decremental. Ketiga parameter ini akan menjadi kontrol kapan loop ini harus berhenti. Pada parameter pertama, yaitu inisialisasi, sebuah variable diberikan nilai awal atau default. Pada parameter kedua, yaitu kondisi, for-loop akan terus berjalan selama kondisi ini masih terpenuhi, dengan kata lain, mengandung nilai <code>true<\/code>. Pada parameter kedua, yaitu incremental\/decremental, variabel yang menjadi kontrol terhadap loop ini akan diubah nilainya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p><em>Best Practice:<\/em> Walaupun memang for-loop dapat mengubah kondisi di dalam proses, namun best practice dari penggunaan for-loop adalah seluruh kendali atau kontrol dari looping ditentukan oleh variable yang diinisialisasi, di increment\/decrement, dan juga kondisi for-loop pun menggunakan variable tersebut.<\/p>\r\n<\/blockquote>\r\n<p><!-- \/wp:quote --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk memudahkan kamu mendapatkan gambaran jelas tentang penggunaan for-loop, mari kita gunakan kedua contoh while-loop dan kita tulis ulang dalam bentuk for-loop.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Looping For-loop 1<\/strong> Looping Angka 1-9 Sederhana<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">for(var angka = 1; angka &lt; 10; angka++) {\r\n  console.log('Iterasi ke-' + angka);\r\n} <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu bisa mencoba kode di atas <a href=\"https:\/\/jsbin.com\/dijukel\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Looping For-loop 2<\/strong> Looping Mengembalikan Angka Total<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var jumlah = 0;\r\nfor(var deret = 5; deret &gt; 0; deret--) {\r\n  jumlah += deret;\r\n  console.log('Jumlah saat ini: ' + jumlah);\r\n}\r\n \r\nconsole.log('Jumlah terakhir: ' + jumlah);<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu bisa mencoba kode di atas <a href=\"https:\/\/jsbin.com\/xukega\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Contoh Looping For-loop 3<\/strong> Looping Dengan Increment dan Decrement Lebih dari 1<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">for(var deret = 0; deret &lt; 10; deret += 2) {\r\n  console.log('Iterasi dengan Increment counter 2: ' + deret);\r\n}\r\n \r\nconsole.log('-------------------------------');\r\n \r\nfor(var deret = 15; deret &gt; 0; deret -= 3) {\r\n  console.log('Iterasi dengan Decrement counter : ' + deret);\r\n} <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Kamu bisa mencoba kode di atas di repl.it.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4><strong>Waspadai Infinite Looping!<\/strong><\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Dengan sengaja atau tidak sengaja, kode kamu mungkin dapat menghasilkan infinite looping, atau looping yang tidak akan pernah berhenti. Bila ini terjadi, segera periksa statement kondisi kamu.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var flag = 1;\r\nwhile(flag &lt; 10) { \/\/ Loop akan terus berjalan, karena nilai flag tidak pernah berubah\r\n  console.log('Iterasi ke-' + flag);\r\n} <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Sumber: <a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-first-time.md#loopiteration\" target=\"_blank\" rel=\"noreferrer noopener\">github hacktiv8 phase 0 materials<\/a><\/p>\r\n<\/blockquote>\r\n<p><!-- \/wp:quote --><\/p>","waktu_publish":"2021-10-28 08:00:00","status_publish":"publish","urutan":4,"created_by":9664,"updated_by":9664,"created_at":"2021-03-19 12:48:36","updated_at":"2021-10-25 06:39:00","waktu_publish_formatted":" Kamis, 28 Oktober 2021. 08:00:00 WIB."},{"id":651,"uuid":"f271fc86-0125-41da-bf0d-5583f2060cd7","author_user_id":9664,"materi_section_id":185,"judul":"Hari ke-5 | Javascript Array , Function & Object","permalink":"hari-ke-5-javascript-array-function-object","konten":"<h1><strong>Array<\/strong><\/h1>\r\n<p><!-- wp:paragraph --><\/p>\r\n<p>Array adalah kumpulan atau tumpukan berbagai data. Cara menuliskan array yaitu dengan kurung siku (<code>[]<\/code>) dan elemen-elemen nya dipisah menggunakan tanda koma (<code>,<\/code>). Setiap elemen dari array memiliki indeks yang dimulai dari 0, 1, 2, dst. Kita dapat memanipulasi array dengan berbagai cara seperti menambahkan dan mengeluarkan elemen dalam array, menggabungkan array, atau bahkan menghapus seluruh elemen Array nya. Kita bisa memasukkan beberapa tipe data yang berbeda ke dalam Array bahkan memasukkan Array ke dalam Array.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Array juga memiliki property <code>.length<\/code> seperti pada string yang berarti panjang dari sebuah array.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var hobbies = [\"coding\", \"cycling\", \"climbing\", \"skateboarding\"] \r\nconsole.log(hobbies) \/\/ [ 'coding', 'cycling', 'climbing', 'skateboarding' ]\r\nconsole.log(hobbies.length) \/\/ 4 \r\n \r\nconsole.log(hobbies[0]) \/\/ coding\r\nconsole.log(hobbies[2]) \/\/ climbing\r\n\/\/ Mengakses elemen terakhir dari array\r\nconsole.log(hobbies[hobbies.length -1] \/\/ skateboarding<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2>Metode Array<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Berikut ini adalah beberapa metode atau built-in functions yang dimiliki oleh tipe data array:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">push: menambah 1 nilai ke array ke index paling belakang<\/li>\r\n<li class=\"\">pop: menghapus 1 nilai dari array index paling belakang<\/li>\r\n<li class=\"\">unshift: menambah 1 nilai ke array index paling depan (index 0)<\/li>\r\n<li class=\"\">shift: menghapus 1 nilai dari array index paling depan (index 0)<\/li>\r\n<li class=\"\">join: menggabungkan seluruh element array menjadi sebuah string dan mengambil parameter sebagai simbol penyambung antar elemen<\/li>\r\n<li class=\"\">sort: mengurutkan elemen di dalam array sesuai alphabet<\/li>\r\n<li class=\"\">slice: mengambil beberapa lapis data<\/li>\r\n<li class=\"\">splice: mengubah nilai array dengan menghapus dan\/atau menambah nilai baru ke array<\/li>\r\n<li class=\"\">split: memecah string dan mengembalikan array sesuai dengan separator \/ pemisah yang didefinisikan<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Cara menggunakan metode array adalah dengan menggunakan tanda dot (<code>.<\/code>) contohnya sbb:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var feeling = [\"dag\", \"dig\"]\r\nfeeling.push(\"dug\") \/\/ menambahkan nilai \"dug\" ke index paling belakang\r\nfeelling.pop() \/\/ menghapus nilai pada elemen terakhir array<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Beberapa metode array ada yang mengembalikan nilai array lama yang sudah diperbarui (array lama di-update) dengan metode tersebut , dan ada pula metode array yang mengembalikan sebuah array baru dan tidak mengubah data pada array yang lama (array baru yang serupa dengan array lama). Sifat seperti ini disebut mutable atau immutable.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.push()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p><em>Push <\/em>adalah metode array untuk menambahkan nilai di belakang elemen terakhir di array. metode push menerima sebuah parameter yaitu nilai yang ingin kita tambahkan ke dalam array.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2]\r\nnumbers.push(3)\r\nconsole.log(numbers) \/\/ [0, 1, 2, 3]\r\n\/\/ Bisa juga memasukkan lebih dari satu nilai menggunakan metode push\r\nnumbers.push(4, 5)\r\nconsole.log(numbers) \/\/ [0, 1, 2, 3, 4, 5] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.pop()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pop adalah kebalikan dari push yaitu menghapus nilai elemen paling terakhir dari sebuah array. metode Pop tidak menerima parameter apapun sehingga metode pop hanya bisa mengeluarkan satu elemen saja yaitu yang paling terakhir dari sebuah array.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2, 3, 4, 5]\r\nnumbers.pop() \r\nconsole.log(numbers) \/\/ [0, 1, 2, 3, 4] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.unshift()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Unshift yaitu menambahkan nilai pada index ke-0 sehingga elemen-elemen sebelumnya bergeser.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2, 3]\r\nnumbers.unshift(-1) \r\nconsole.log(numbers) \/\/ [-1, 0, 1, 2, 3]<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.shift()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Shift kebalikan dari unshift yaitu menghapus nilai pada elemen terdepan dari sebuah array. metode Shift tidak menerima parameter apapun.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [ 0, 1, 2, 3]\r\nnumbers.shift()\r\nconsole.log(numbers) \/\/ [1, 2, 3] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.sort()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Sort adalah metode untuk mengurutkan nilai pada array. Secara otomatis, sort akan mengurutkan secara ascending (dari rendah ke tinggi) dan diurutkan berdasarkan unicode dari karakter. Urutan unicode artinya ada karakter yang secara nilai lebih besar dibandingkan dengan karakter yang lainnya. contohnya adalah karakter \"b\" akan lebih besar daripada \"a\", karakter \"c\" lebih besar daripada karakter \"b\", dst.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var animals = [\"kera\", \"gajah\", \"musang\"] \r\nanimals.sort()\r\nconsole.log(animals) \/\/ [\"gajah\", \"kera\", \"musang\"]<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.slice()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>slice adalah metode untuk mengambil irisan dari sebuah array. Metode slice bisa menerima satu atau dua parameter. Parameter pertama adalah nomer index pertama yang akan kita ambil sebagai irisan, sedangkan parameter kedua adalah nomer index terakhir yang ingin kita ambil sebagai irisan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var angka = [0, 1, 2, 3]\r\nvar irisan1 = angka.slice(1,3) \r\nconsole.log(irisan1) \/\/[1, 2]\r\nvar irisan2 = angka.slice(0,2)\r\nconsole.log(irisan2) \/\/[0, 1] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Jika parameter kedua tidak diisi maka secara otomatis slice akan mengiris array dari indeks di paramer pertama sampai ke indeks terakhir array tersebut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var angka = [0, 1, 2, 3]\r\nvar irisan3 = angka.slice(2)\r\nconsole.log(irisan3) \/\/ [2, 3] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:html --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Jika diperhatikan, metode slice tidak mengubah Array yang awal dan hasil irisan array dapat kita tampung kembali ke variable yang baru. Oleh karena itu metode Slice juga berfungsi untuk membuat salinan atau \"shallow copy\" dari sebuah array. Cara membuat shallow copy dengan metode slice yaitu dengan tanpa memberikan parameter apapun pada metode slice. <br \/><br \/><\/p>\r\n<pre class=\"wp-block-preformatted\"><code>var angka = [0, 1, 2, 3]<\/code><br \/><code>var salinAngka = angka.slice()<\/code><br \/><code>console.log(salingAngka) \/\/ [0, 1, 2, 3]<\/code><\/pre>\r\n<\/blockquote>\r\n<p><!-- \/wp:html --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.splice()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Splice yaitu metode untuk menghapus dan\/atau menambahkan nilai elemen pada array. Metode splice bisa menerima parameter sebanyak dua atau lebih parameter. Jika ingin menggunakan splice untuk menghapus elemen pada index tertentu maka digunakan 2 paramater. Jika ingin menggunakan splice untuk menambahkan elemen pada index tertentu maka digunakan tiga parameter.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">array.splice([IndexMulai], [JumlahNilaiYangDihapus], [NilaiYangDitambahkan1], [NilaiYangDitambahkan2], ...);<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Berikut contoh penggunaan metode <code>splice()<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var fruits = [ \"banana\", \"orange\", \"grape\"]\r\nfruits.splice(1, 0, \"watermelon\") \r\nconsole.log(fruits) \/\/ [ \"banana\", \"watermelon\", \"orange\", \"grape\"]<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh di atas berarti kita mulai mengubah array fruits dari indeks no 1, dan melakukan penghapusan nilai sebanyak 0 (yang berarti tidak menghapus apapun), dan menambahkan nilai \"watermelon\" pada indeks tersebut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var fruits = [ \"banana\", \"orange\", \"grape\"]\r\nfruits.splice(0, 2)\r\nconsole.log(fruits) \/\/ [\"grape\"]<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Contoh di atas berarti kita mulai mengubah array fruits dari indeks ke-0 dan melakukan penghapusan data sebanyak 2 elemen.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3><code><strong>.split()<\/strong><\/code> dan <code><strong>.join()<\/strong><\/code><\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Metode split yaitu memecah sebuah string sehingga menjadi sebuah array. Split menerima sebuah parameter berupa karakter yang menjadi separator untuk memecah string.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var biodata = \"name:john,doe\" \r\nvar name = biodata.split(\":\")\r\nconsole.log(name) \/\/ [ \"name\", \"john,doe\"] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Metode join yaitu kebalikan dari split yaitu mengubah sebuah array menjadi string dengan cara menggabungkan (join) seluruh elemen array menjadi satu dengan sebuah karakter pemisah yang dikirim melalui parameter. contohnya sebagai berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var title = [\"my\", \"first\", \"experience\", \"as\", \"programmer\"] \r\nvar slug = title.join(\"-\")\r\nconsole.log(slug) \/\/ \"my-first-experience-as-programmer\"<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<h1><strong>Function<\/strong><\/h1>\r\n<p><strong><!-- wp:paragraph --><\/strong><\/p>\r\n<p>Function adalah sebuah blok kode yang disusun sedemikian rupa untuk menjalankan sebuah tindakan. Blok kode ini dibuat untuk dapat bisa digunakan kembali. Cara atau bentuk penulisan function adalah sebagai berikut:<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">function nama_function(parameter 1, parameter 2, ...) {\r\n  [Isi dari function berupa tindakan]\r\n  return [expression];\r\n}<\/pre>\r\n<p><strong><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>Kode di atas tidak dapat kita copy-paste kan langsung, melainkan hanya sebuah bentuk penulisan <code>function<\/code>. Sebuah <code>function<\/code>, umumnya melakukan tindakan dan sebelum <code>function<\/code> berakhir, <code>function<\/code> bisa mengembalikan nilai dengan cara menambahkan sintaks return.<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>Kita juga dapat mengirimkan nilai ke dalam sebuah <code>function<\/code> dengan mencantumkannya ke dalam tanda kurung dalam penulisan <code>function<\/code>. Untuk mengirimkan nilai lebih dari satu, gunakan tanda <code>,<\/code> sebagai pemisah.<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p><strong>Contoh Function 1:<\/strong> Function sederhana tanpa return<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkan() {\r\n  console.log(\"halo!\");\r\n}\r\n \r\ntampilkan(); <\/pre>\r\n<p><strong><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p><strong>Contoh Function 2:<\/strong> Function sederhana dengan return<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">function munculkanAngkaDua() {\r\n  return 2\r\n}\r\n \r\nvar tampung = munculkanAngkaDua();\r\nconsole.log(tampung)<\/pre>\r\n<p><strong><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p><strong>Contoh Function 3:<\/strong> Function dengan parameter<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">function kalikanDua(angka) {\r\n  return angka * 2\r\n}\r\n \r\nvar tampung = kalikanDua(2);\r\nconsole.log(tampung) <\/pre>\r\n<p><strong><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p><strong>Contoh Function 4:<\/strong> Pengiriman parameter lebih dari satu<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkanAngka(angkaPertama, angkaKedua) {\r\n  return angkaPertama + angkaKedua\r\n}\r\n \r\nconsole.log(tampilkanAngka(5, 3))<\/pre>\r\n<p><strong><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p><strong>Contoh Function 5:<\/strong> Inisialisasi parameter dengan nilai default<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkanAngka(angka = 1) {\r\n  return angka\r\n}\r\n \r\nconsole.log(tampilkanAngka(5)) \/\/ 5, sesuai dengan nilai parameter yang dikirim\r\nconsole.log(tampilkanAngka()) \/\/ 1, karena default dari parameter adalah 1<\/pre>\r\n<p><strong><!-- \/wp:preformatted --> <!-- wp:quote --><\/strong><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Waspadai pengiriman parameter yang <strong>UNDEFINED!<\/strong><\/p>\r\n<\/blockquote>\r\n<p><strong><!-- \/wp:quote --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>Kita juga dapat menampung function sebagai variable dengan sebuah bentuk function yang dinamakan Anonymous Function.<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">var fungsiPerkalian = function(angkaPertama, angkaKedua) {   \r\n   return angkaPertama * angkaKedua \r\n}\r\nconsole.log(fungsiPerkalian(2, 4))<br \/><br \/><br \/><\/pre>\r\n<p><strong><!-- \/wp:quote --><\/strong><\/p>\r\n<h1><strong>Object<\/strong><\/h1>\r\n<p><strong><!-- wp:paragraph --><\/strong><\/p>\r\n<p>Object adalah kumpulan data tidak berurut yang berisikan pasangan property (key) dan value . Jika kita ingat pada tipe data Array yang merupakan kumpulan data yang berurut sesuai indeks, sedangkan Object mirip dengan Array tapi kini kita memberikan property atau key sendiri . Property atau key pada Object itu dapat kita umpamakan indeks pada Array. Bedanya indeks pada Array langsung diberikan secara otomatis mulai dari indeks 0 dst, sedangkan property pada Object dapat kita namai sesuka kita.<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>Bandingkan kedua variable berikut:<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">var personArr = [\"John\", \"Doe\", \"male\", 27]\r\nvar personObj = {\r\n    firstName : \"John\",\r\n    lastName: \"Doe\",\r\n    gender: \"male\",\r\n    age: 27\r\n} <\/pre>\r\n<p><strong><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>contoh di atas kita ingin mendeklarasikan variable person dalam Array dan Object. Jika pada Array kita mengakses nama depan dengan cara <code>personArr[0]<\/code> , sedangkan jika kita ingin mengakses nama depan pada Object kita dapat melakukannya dengan <code>personObj.firstName<\/code> . Keduanya memberikan value yang sama namun pemanggilan value dengan cara Object lebih kita senangi karena kita bisa mendefinisikan bahwa seseorang \"Person\" itu pasti memiliki nama depan (<code>firstName<\/code>), nama belakang (<code>lastName<\/code>), (<code>gender<\/code>), dan umur (<code>age<\/code>).<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">var personArr = [\"John\", \"Doe\", \"male\", 27]\r\nvar personObj = {\r\n    firstName : \"John\",\r\n    lastName: \"Doe\",\r\n    gender: \"male\",\r\n    age: 27\r\n}\r\n \r\nconsole.log(personArr[0]) \/\/ John\r\nconsole.log(personObj.firstName) \/\/ John <\/pre>\r\n<p><strong><!-- \/wp:preformatted --> <!-- wp:heading --><\/strong><\/p>\r\n<h2>Deklarasi Object<\/h2>\r\n<p><strong><!-- \/wp:heading --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>Cara untuk mendeklarasi sebuah object yaitu dengan memberikan curly brackets (<code>{}<\/code>) lalu buat pasangan <code>key: value<\/code> di dalamnya. Jika ingin menambahkan pasangan key dan value maka dipisah dengan tanda koma. contohnya:<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">var object = {\r\n    [key]: [value]\r\n}\r\n \r\nvar car = {\r\n    brand: \"Ferrari\",\r\n    type: \"Sports Car\",\r\n    price: 50000000\r\n    \"horse power\": 986\r\n}<\/pre>\r\n<p><strong><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>Jika diperhatikan pada contoh object <code>car<\/code> di atas terdapat key dengan nama \"<code>horse power<\/code>\" yang penulisannya berbeda dengan key yang lain. Hal ini karena jika nama key dari Object lebih dari satu kata atau dipisah dengan spasi kita bisa deklarasikan dengan memberikan tanda petik (<code>\"\"<\/code>).<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>Cara lainnya untuk membuat object adalah dengan mendeklarasikan terlebih dahulu variable sebagai Object kosong lalu melakukan assign property dan valuenya ke varible tersebut. Contohnya sebagai berikut:<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">var car2 = {}\r\n\/\/ meng-assign key:value dari object car2\r\ncar2.brand = \"Lamborghini\"\r\ncar2.brand = \"Sports Car\"\r\ncar2.price = 100000000 <\/pre>\r\n<p><strong><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>Jika ingin memberikan nama key yang lebih dari satu kata dan dipisah dengan spasi maka kita dapat menulis key nya dengan menggunakan tanda petik (<code>\"\"<\/code>) di dalam kurung siku (<code>[]<\/code>).<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">car2[\"horse power\"] = 730 <\/pre>\r\n<p><strong><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>Value yang kita assign pada object tidak terbatas hanya string atau number saja tapi bisa juga Array, boolean, bahkan Object lagi di dalamnya.<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:heading --><\/strong><\/p>\r\n<h2 id=\"mengakses-nilai-pada-object\">Mengakses Nilai pada Object<\/h2>\r\n<p><strong><!-- \/wp:heading --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>Untuk mengakses nilai pada Object bisa dengan cara memanggil object nya lalu tanda titik (dot) dan nama property\/key nya. contohnya seperti berikut<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">var motorcycle1 = {    \r\n    brand: \"Handa\",\r\n    type: \"CUB\",\r\n    price: 1000\r\n}\r\nconsole.log(motorcycle1.brand) \/\/ \"Handa\"\r\nconsole.log(motorcycle1.type) \/\/ \"CUB\"<\/pre>\r\n<p><strong><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>Cara lain untuk mengakses nilai, yaitu cara yang mirip dengan mengakses nilai suatu elemen pada Array, menggunakan tanda kurung siku, dan di dalam kurung siku tersebut kita sebutkan nama property nya.<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">console.log(motorcycle1[\"price\"])<\/pre>\r\n<p><strong><!-- \/wp:preformatted --> <!-- wp:html --><\/strong><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Tipe data Array technically adalah sebuah Object tetapi Array memiliki sifat khusus. Array secara otomatis memberikan indeks yang analogi dengan key pada Object. Coba kamu cek di console menggunakan <code>typeof<\/code><\/p>\r\n<pre class=\"wp-block-preformatted\"><code>var array = [ 1, 2, 3 ] <br \/>console.log(typeof array) \/\/ object<\/code><\/pre>\r\n<\/blockquote>\r\n<p><strong><!-- \/wp:html --> <!-- wp:heading --><\/strong><\/p>\r\n<h2><strong>Array of Object<\/strong><\/h2>\r\n<p><strong><!-- \/wp:heading --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>object bisa termasuk dalam tipe data yang berarti dapat di masukkan ke dalam array, seperti contoh di bawah ini<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:code --><\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>var mobil = [{merk: \"BMW\", warna: \"merah\", tipe: \"sedan\"}, {merk: \"toyota\", warna: \"hitam\", tipe: \"box\"}, {merk: \"audi\", warna: \"biru\", tipe: \"sedan\"}]<\/code><\/pre>\r\n<p><strong><!-- \/wp:code --> <!-- wp:heading --><\/strong><\/p>\r\n<h2>Array Iteration<\/h2>\r\n<p><strong><!-- \/wp:heading --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>array iteration merupakan method dalam array untuk melakukan perulangan data dari array, method array iteration ada banyak tapi untuk basic kita hanya perlu menggunakan 3 method ini yaitu forEach(), map() dan filter()<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/strong><\/p>\r\n<h4>.foreach()<\/h4>\r\n<p><strong><!-- \/wp:heading --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>foreach method untuk array berfungsi untuk perulangan data dari array, misal kita punya array seperti di bawah ini:<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:code --><\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>var mobil = [{merk: \"BMW\", warna: \"merah\", tipe: \"sedan\"}, {merk: \"toyota\", warna: \"hitam\", tipe: \"box\"}, {merk: \"audi\", warna: \"biru\", tipe: \"sedan\"}]<\/code><\/pre>\r\n<p><strong><!-- \/wp:code --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>lalu kita gunakan foreach seperti di bawah ini<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:code --><\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>mobil.forEach(function(item){\r\n   console.log(\"warna : \" + item.warna)\r\n})<\/code><\/pre>\r\n<p><strong><!-- \/wp:code --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>maka akan muncul tampilan seperti di bawah ini<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:image {\"id\":9872,\"sizeSlug\":\"large\"} --><\/strong><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-9872\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-59.png\" alt=\"\" \/><\/figure>\r\n<p><strong><!-- \/wp:image --> <!-- wp:heading {\"level\":4} --><\/strong><\/p>\r\n<h4>.map()<\/h4>\r\n<p><strong><!-- \/wp:heading --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>map method untuk array berfungsi untuk membuat array baru. misal dengan var mobil diatas kita buat kode seperti di bawah ini<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:code --><\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>var arrayWarna = mobil.map(function(item){\r\n   return item.warna\r\n})\r\n\r\nconsole.log(arrayWarna)<\/code><\/pre>\r\n<p><strong><!-- \/wp:code --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>maka akan muncul tampilan seperti di bawah ini:<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:image {\"id\":9873,\"sizeSlug\":\"large\"} --><\/strong><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-9873\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-60.png\" alt=\"\" \/><\/figure>\r\n<p><strong><!-- \/wp:image --> <!-- wp:heading {\"level\":4} --><\/strong><\/p>\r\n<h4>.filter()<\/h4>\r\n<p><strong><!-- \/wp:heading --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>filter method untuk array berfungsi untuk memnyaring data yang diinginkan. misal dengan var mobil diatas kita buat kode seperti di bawah ini<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:code --><\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>var arrayMobilFilter = mobil.filter(function(item){\r\n   return item.tipe != \"sedan\";\r\n})\r\n\r\nconsole.log(arrayMobilFilter)<\/code><\/pre>\r\n<p><strong><!-- \/wp:code --> <!-- wp:paragraph --><\/strong><\/p>\r\n<p>maka akan muncul tampilan seperti di bawah ini:<\/p>\r\n<p><strong><!-- \/wp:paragraph --> <!-- wp:image {\"id\":9874,\"sizeSlug\":\"large\"} --><\/strong><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-9874\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-61.png\" alt=\"\" \/><\/figure>\r\n<p><strong><!-- \/wp:image --><\/strong><\/p>\r\n<p><strong>Referensi<\/strong>:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_arrays.asp\">https:\/\/www.w3schools.com\/js\/js_arrays.asp<\/a><\/li>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_array_methods.asp\">https:\/\/www.w3schools.com\/js\/js_array_methods.asp<\/a><\/li>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_array_sort.asp\">https:\/\/www.w3schools.com\/js\/js_array_sort.asp<\/a><\/li>\r\n<li><a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-first-time.md#loopiteration\" target=\"_blank\" rel=\"noreferrer noopener\">github hacktiv8 phase 0 materials<\/a><\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --><\/p>","waktu_publish":"2021-10-29 08:00:00","status_publish":"publish","urutan":5,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:50:21","updated_at":"2021-10-25 06:39:14","waktu_publish_formatted":" Jumat, 29 Oktober 2021. 08:00:00 WIB."}]},{"id":186,"uuid":"16bd47d9-7d40-4db3-8270-3ef21adeb423","materi_id":22,"nama":"Pekan 1 - Tugas","permalink":"pekan-1-tugas","urutan":2,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:31:58","updated_at":"2021-10-05 14:27:30","posting":[{"id":652,"uuid":"dbff6bfa-0b4d-415e-a9ef-d9e3dbf41086","author_user_id":9664,"materi_section_id":186,"judul":"Hari ke-1 | Command Line Interface & Git","permalink":"hari-ke-1-command-line-interface-git","konten":"<p><!-- wp:heading --><\/p>\r\n<h2>1. Buat repository project baru<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah satu repository project baru dengan nama project \"<strong>VueJS Batch 29<\/strong>\", pastikan visibility level di set \"<strong>public<\/strong>\", dan centang pada bagian \"<strong>Initialize repository with a README<\/strong>\".<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":11341,\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-11341\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/imrn0920-1024x493.png\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:heading --><\/p>\r\n<h2 id=\"2-buat-branch-baru\">2. Clone repository<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Lakukanlah clone dari project yang telah dibuat. Kemudian masuk ke folder project yang telah di clone<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">&nbsp;<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:image {\"id\":11345,\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-11345\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/09\/CLONE.png\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>lalu copy text yang ada di dalam Clone With HTTPS lalu jalankan perintah ini di terminal\/cmd<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">git clone [hasil copy dari clone with https]<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>lalu pindahkan ke folder project yang sudah di clone<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"3-menambahkan-file-baru\">3. Menambahkan folder dan file baru<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\r\n  Tugas-1-Git\/\r\n    data_peserta.txt<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Buat folder baru dengan nama \"Tugas-1 - Git\" dan di dalamnya tambahkan file \"data_peserta.txt\". Isi file \"data_peserta.txt\" tersebut dengan nama dan email teman-teman , akun gitlab, serta akun telegram pada grup diskusi, contoh:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">Data Peserta Sanbercode Bootcamp Vue JS \r\n1. Nama: sanbercode\r\n2. Email: sanbercode@gmail.com\r\n3. Akun Gitlab: @sanbercode\r\n4. Akun Telegram: @sanbercode<br \/><br \/><\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<p>Kemudian buatlah commit \"menambahkan data peserta\" dan jalankan perintah git push<\/p>\r\n<h2>4. Commit kedua<\/h2>\r\n<p><code><br \/><\/code><code>&nbsp; Tugas-1-Git\/\r\n<br \/>&nbsp; &nbsp; data_peserta.txt<br \/>&nbsp; &nbsp; pengalaman_programming.txt<\/code><\/p>\r\n<p>tambahkan file \"pengalaman_programming.txt\" ke dalam folder Tugas-1-Git. Isi file \"pengalaman_programming.txt\" tersebut dengan pengalaman programming teman teman, baik ketika sekolah, kuliah, ataupun bekerja. Kemudian buatlah commit \"menambahkan pengalaman programming\" dan jalankan perintah git push.<\/p>\r\n<h2>5. Kumpulkan tugas<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Selanjutnya kumpulkan tugas teman-teman dengan melakukan copy link commit terakhir yang telah dibuat dari halaman repository project gitlab ke akun teman-teman di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a> .<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Pastikan <\/strong>repository statusnya <strong>public <\/strong>agar bisa diakses trainer , dan pastikan hanya terdapat 3 commit dalam repository teman -teman.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>TAMBAHAN<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>bagi yang ingin mengerjakan selain di gitlab (github, bitbucket dll) di persilahkan dengan catatan masih menggunakan git<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-10-25 08:00:00","status_publish":"publish","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:51:04","updated_at":"2021-10-25 07:23:17","waktu_publish_formatted":" Senin, 25 Oktober 2021. 08:00:00 WIB."},{"id":653,"uuid":"d3c54a5e-3fbe-4560-aaf6-f90af7fb63cc","author_user_id":9664,"materi_section_id":186,"judul":"Hari ke-2 | HTML & CSS","permalink":"hari-ke-2-html-css","konten":"<h2 id=\"3-menambahkan-file-baru\">1. Menambahkan folder dan file baru<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\r\n  Tugas-2-HTML-CSS\/\r\n    biodata.html<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Buat folder baru dengan nama \"Tugas-2- HTML-CSS\" dan di dalamnya tambahkan file \"biodata.html\". Isi file \"biodata.html\" tersebut dengan biodata teman teman, sertakan juga dengan foto.<\/p>\r\n<p>Hiaslah halaman tersebut dengan CSS , buatlah seindah mungkin.<\/p>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<p>Kemudian buatlah commit \"menambahkan halaman biodata\" dan jalankan perintah git push<\/p>\r\n<p>&nbsp;<\/p>\r\n<h2>2. Kumpulkan tugas<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Selanjutnya kumpulkan tugas teman-teman dengan melakukan copy link commit terakhir yang telah dibuat dari halaman repository project gitlab ke akun teman-teman di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a> .<\/p>","waktu_publish":"2021-10-26 08:00:00","status_publish":"publish","urutan":2,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:51:49","updated_at":"2021-10-25 06:39:52","waktu_publish_formatted":" Selasa, 26 Oktober 2021. 08:00:00 WIB."},{"id":654,"uuid":"6c6f97bb-c897-4939-a273-30649b19c313","author_user_id":9664,"materi_section_id":186,"judul":"Hari ke-3 | Pengenalan Javascript","permalink":"hari-ke-3-pengenalan-javascript","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>1. Menambahkan Folder Baru dan file baru<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah folder baru dengan nama \"Tugas-3-Pengenalan-Javascript\", lalu buat file baru di dalam folder tersebut dengan nama \"index.js\".<\/p>\r\n<p><!-- wp:heading {\"level\":3} --><\/p>\r\n<h3 id=\"1-membuat-file-html\">2. Kerjakan Soal di bawah ini<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>kerjakan soal di bawah ini dan masukkan semua kode jawabannya ke dalam file \"index.js\"<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>kerjakan soal ini <strong>tanpa <\/strong>menggunakan kode-kode <strong>ES6<\/strong> (bagi yang sudah paham ES6), jadi kerjakan dengan kode-kode sesuai materi<\/p>\r\n<p><!-- wp:paragraph --><\/p>\r\n<p><strong>soal 1<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>buatlah variabel-variabel seperti di bawah ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>var pertama = \"saya sangat senang hari ini\";\r\nvar kedua = \"belajar javascript itu keren\";\r\n<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>gabungkan variabel-variabel tersebut agar menghasilkan output<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>saya senang belajar JAVASCRIPT<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p><strong>soal 2<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>buatlah variabel-variabel seperti di bawah ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>var kataPertama = \"10\";\r\nvar kataKedua = \"2\";\r\nvar kataKetiga = \"4\";\r\nvar kataKeempat = \"6\";<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>ubahlah variabel diatas ke dalam integer dan lakukan operasi matematika semua variabel agar menghasilkan output 24 (integer).<br \/>*catatan :<br \/>1. gunakan 3 operasi, tidak boleh&nbsp; lebih atau kurang. contoh : 10 + <em>2 * 4 + 6<br \/>2. Boleh menggunakan tanda kurung . contoh : (10 + 2 ) * (4 + 6)<\/em><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>soal 3<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>buatlah variabel-variabel seperti di bawah ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>var kalimat = 'wah javascript itu keren sekali'; \r\n\r\nvar kataPertama = kalimat.substring(0, 3); \r\nvar kataKedua; \/\/ do your own! \r\nvar kataKetiga; \/\/ do your own! \r\nvar kataKeempat; \/\/ do your own! \r\nvar kataKelima; \/\/ do your own! \r\n\r\nconsole.log('Kata Pertama: ' + kataPertama); \r\nconsole.log('Kata Kedua: ' + kataKedua); \r\nconsole.log('Kata Ketiga: ' + kataKetiga); \r\nconsole.log('Kata Keempat: ' + kataKeempat); \r\nconsole.log('Kata Kelima: ' + kataKelima);<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>selesaikan variabel yang belum diisi dan hasilkan output seperti berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>Kata Pertama: wah\r\nKata Kedua: javascript\r\nKata Ketiga: itu\r\nKata Keempat: keren\r\nKata Kelima: sekali<\/code><\/pre>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>3. Tips<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<p class=\"wp-block-code\"><code>\/\/ soal 1\r\n<\/code><\/p>\r\n<p class=\"wp-block-code\"><code>.... jawaban soal 1\r\n<\/code><\/p>\r\n<p class=\"wp-block-code\"><code>\/\/ soal 2\r\n<\/code><\/p>\r\n<p class=\"wp-block-code\"><code>.... jawaban soal 2\r\n<\/code><\/p>\r\n<p class=\"wp-block-code\"><code>dan seterusnya<br \/><br \/><\/code><\/p>\r\n<p class=\"wp-block-code\">Selanjutnya kumpulkan tugas teman-teman dengan melakukan copy link commit terakhir yang telah dibuat dari halaman repository project gitlab ke akun teman-teman di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a> .<\/p>\r\n<p><!-- \/wp:code --><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-10-27 08:00:00","status_publish":"publish","urutan":3,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:52:13","updated_at":"2021-10-25 06:40:06","waktu_publish_formatted":" Rabu, 27 Oktober 2021. 08:00:00 WIB."},{"id":655,"uuid":"74ab3999-4f2a-41c9-9904-37aa0788d30b","author_user_id":9664,"materi_section_id":186,"judul":"Hari ke-4 | Javascript - Conditional & Loop","permalink":"hari-ke-4-javascript-conditional-loop","konten":"<p><!-- wp:heading --><\/p>\r\n<h2 id=\"petunjuk-pengerjaan\">Petunjuk Pengerjaan<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>1. Menambahkan Folder Baru dan file baru<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah folder baru dengan nama \"Tugas-4-Javascript-Conditional-Dan-Loop\", lalu buat file baru di dalam folder tersebut dengan nama \"index.js\".<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3 id=\"1-membuat-file-html\">2. Kerjakan Soal di bawah ini<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>kerjakan soal di bawah ini dan masukkan semua kode jawabannya ke dalam file \"index.js\"<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>kerjakan soal ini <strong>tanpa <\/strong>menggunakan kode-kode <strong>ES6<\/strong> (bagi yang sudah paham ES6), jadi kerjakan dengan kode-kode sesuai materi<\/p>\r\n<p><!-- wp:paragraph --><\/p>\r\n<p><strong>soal 1<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>buatlah variabel seperti di bawah ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>var nilai;<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>pilih angka dari 0 sampai 100, misal 75. lalu isi variabel tersebut dengan angka tersebut. lalu buat lah pengkondisian dengan if-elseif dengan kondisi<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>nilai &gt;= 85 indeksnya A\r\nnilai &gt;= 75 dan nilai &lt; 85 indeksnya B\r\nnilai &gt;= 65 dan nilai &lt; 75 indeksnya c\r\nnilai &gt;= 55 dan nilai &lt; 65 indeksnya D\r\nnilai &lt; 55 indeksnya E<br \/><br \/><!-- wp:paragraph --><\/code><\/pre>\r\n<p><strong>soal 2<\/strong><\/p>\r\n<p>buatlah variabel seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var tanggal = 22;\r\nvar bulan = 7;\r\nvar tahun = 2020;<\/code><\/pre>\r\n<p>ganti tanggal ,bulan, dan tahun sesuai dengan tanggal lahir anda dan buatlah switch case pada bulan, lalu muncul kan string nya dengan output seperti ini 22 Juli 2020 (isi di sesuaikan dengan tanggal lahir masing-masing)<\/p>\r\n<pre class=\"wp-block-code\"><code><!-- \/wp:paragraph --><\/code><\/pre>\r\n<p><!-- \/wp:code --><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>soal 3<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kali ini kamu diminta untuk menampilkan sebuah segitiga dengan tanda pagar (#) dengan dimensi tinggi n dan alas n. Looping boleh menggunakan syntax apa pun (<code>while<\/code>, <code>for<\/code>, <code>do while<\/code>).<\/p>\r\n<p>Output untuk n=3 :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>#\r\n##\r\n###\r\n<\/code><\/pre>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Output untuk n=7 :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>#\r\n##\r\n###\r\n####\r\n#####\r\n######\r\n#######<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4><strong>soal 4<\/strong><\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>berilah suatu nilai m dengan tipe integer, dan buatlah pengulangan dari 1 sampai dengan m, dan berikan output sebagai berikut.<br \/>contoh :<\/p>\r\n<p>Output untuk m = 3<\/p>\r\n<p><code>1 - I love programming<\/code><br \/><code>2 - I love Javascript<\/code><br \/><code>3 - I love VueJS<br \/>===<\/code><code><\/code><\/p>\r\n<p>Output untuk m = 5<\/p>\r\n<p><code>1 - I love programming<\/code><br \/><code>2 - I love Javascript<\/code><br \/><code>3 - I love VueJS<\/code><br \/><code>===<\/code><br \/><code>4 - I love programming<\/code><br \/><code>5 - I love Javascript<\/code><\/p>\r\n<p>Output untuk m = 7<\/p>\r\n<p><code>1 - I love programming<\/code><br \/><code>2 - I love Javascript<\/code><br \/><code>3 - I love VueJS<\/code><br \/><code>===<\/code><br \/><code>4 - I love programming<\/code><br \/><code>5 - I love Javascript<\/code><br \/><code>6 - I love VueJS<\/code><br \/><code>======<\/code><br \/><code>7 - I love programming<\/code><br \/><br \/><\/p>\r\n<p>Output untuk m = 10<\/p>\r\n<p><code>1 - I love programming<\/code><br \/><code>2 - I love Javascript<\/code><br \/><code>3 - I love VueJS<\/code><br \/><code>===<\/code><br \/><code>4 - I love programming<\/code><br \/><code>5 - I love Javascript<\/code><br \/><code>6 - I love VueJS<\/code><br \/><code>======<\/code><br \/><code>7 - I love programming<\/code><br \/><code>8 - I love Javascript<\/code><br \/><code>9 - I love VueJS<\/code><br \/><code>=========<\/code><br \/><code>10 - I love programming<\/code><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:code --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>3. Tips<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ soal 1\r\n.... jawaban soal 1\r\n\r\n\/\/ soal 2\r\n.... jawaban soal 2\r\n\r\ndan seterusnya<\/code><\/pre>\r\n<p><!-- \/wp:code --><\/p>","waktu_publish":"2021-10-28 08:00:00","status_publish":"publish","urutan":4,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:52:52","updated_at":"2021-10-25 06:42:03","waktu_publish_formatted":" Kamis, 28 Oktober 2021. 08:00:00 WIB."},{"id":656,"uuid":"3ce8c986-eb33-4c7c-9df1-bad762e53941","author_user_id":9664,"materi_section_id":186,"judul":"Hari ke-5 | Javascript Array , Function & Object","permalink":"hari-ke-5-javascript-array-function-object","konten":"<p><!-- wp:heading --><\/p>\r\n<h2 id=\"petunjuk-pengerjaan\">Petunjuk Pengerjaan<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>1. Menambahkan Folder Baru dan file baru<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buat folder baru dengan nama \"Tugas-5-Javascript-Array-Function-Object\", lalu buat file baru di dalam folder tersebut dengan nama \"index.js\".<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3 id=\"1-membuat-file-html\">2. Kerjakan Soal di bawah ini<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>kerjakan soal di bawah ini dan masukkan semua kode jawabannya ke dalam file \"index.js\"<\/p>\r\n<p><!-- wp:heading {\"level\":4} --><\/p>\r\n<h4><strong>soal 1<\/strong><\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>buatlah variabel seperti di bawah ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>var daftarHewan = [\"2. Komodo\", \"5. Buaya\", \"3. Cicak\", \"4. Ular\", \"1. Tokek\"];<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>urutkan array di atas dan tampilkan data seperti output di bawah ini (dengan menggunakan loop):<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>1. Tokek\r\n2. Komodo\r\n3. Cicak\r\n4. Ular\r\n5. Buaya<br \/><br \/><\/code><\/pre>\r\n<p><!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>soal 2<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Tulislah sebuah function dengan nama introduce() yang memproses paramater yang dikirim menjadi sebuah kalimat perkenalan seperti berikut: \"Nama saya [name], umur saya [age] tahun, alamat saya di [address], dan saya punya hobby yaitu [hobby]!\"<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/* \r\n    Tulis kode function di sini\r\n*\/\r\n \r\n<code>var data = {name : \"John\" , age : 30 , address : \"Jalan Pelesiran\" , hobby : \"Gaming\" }\r\n \r\nvar perkenalan = introduce(data)\r\nconsole.log(perkenalan) \/\/ Menampilkan \"Nama saya John, umur saya 30 tahun, alamat saya di Jalan Pelesiran, dan saya punya hobby yaitu Gaming\" <\/code><br \/><br \/><br \/><br \/><!-- wp:heading {\"level\":3} --><\/pre>\r\n<h3>soal 3<\/h3>\r\n<p class=\"wp-block-preformatted\">Tulislah sebuah function dengan nama hitung_huruf_vokal() yang menerima parameter sebuah string, kemudian memproses tersebut sehingga menghasilkan total jumlah huruf vokal dalam string tersebut.<\/p>\r\n<p class=\"wp-block-preformatted\"><code>var hitung_1 = hitung_huruf_vokal(\"Muhammad\")<\/code><\/p>\r\n<p class=\"wp-block-preformatted\"><code>var hitung_2 = hitung_huruf_vokal(\"Iqbal\")<\/code><code><\/code><\/p>\r\n<p class=\"wp-block-preformatted\"><code>console.log(hitung_1 , hitung_2) \/\/ 3 2<\/code><\/p>\r\n<p class=\"wp-block-preformatted\"><code><\/code><\/p>\r\n<h3>soal 4<\/h3>\r\n<p class=\"wp-block-preformatted\"><code><\/code><\/p>\r\n<p class=\"wp-block-preformatted\">Buatlah sebuah function dengan nama hitung() yang menerima parameter sebuah integer dan mengembalikan nilai sebuah integer, dengan contoh input dan otput sebagai berikut.<\/p>\r\n<p class=\"wp-block-preformatted\"><code>console.log( hitung(0) ) \/\/ -2<\/code><br \/><code>console.log( hitung(1) ) \/\/ 0<\/code><br \/><code>console.log( hitung(2) ) \/\/ 2<\/code><br \/><code>console.log( hitung(3) ) \/\/ 4<\/code><br \/><code>console.log( hitung(5) ) \/\/ 8<\/code><\/p>\r\n<p class=\"wp-block-preformatted\"><!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>3. Tips<\/h3>\r\n<p class=\"wp-block-preformatted\"><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<p class=\"wp-block-preformatted\"><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ soal 1\r\n.... jawaban soal 1\r\n\r\n\/\/ soal 2\r\n.... jawaban soal 2\r\n\r\ndan seterusnya<\/code><\/pre>\r\n<p class=\"wp-block-preformatted\"><!-- \/wp:code --><code><\/code><\/p>\r\n<p class=\"wp-block-preformatted\"><code><\/code><\/p>\r\n<pre class=\"wp-block-preformatted\"><!-- \/wp:paragraph --><!-- \/wp:preformatted --><\/pre>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p><!-- \/wp:code --><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-10-29 08:00:00","status_publish":"publish","urutan":5,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:53:36","updated_at":"2021-10-25 06:40:38","waktu_publish_formatted":" Jumat, 29 Oktober 2021. 08:00:00 WIB."}]},{"id":187,"uuid":"eab98a9a-6ad6-43ce-9463-9f15084b9295","materi_id":22,"nama":"Pekan 2 - Materi","permalink":"pekan-2-materi","urutan":3,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:32:17","updated_at":"2021-07-16 11:29:24","posting":[{"id":657,"uuid":"8b6e9d5e-b3f4-4a96-b69f-f9b35d6c297d","author_user_id":9664,"materi_section_id":187,"judul":"Hari ke-1 | Javascript : ES6","permalink":"hari-ke-1-javascript-es6","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>ES6 atau EcmaScript 6 atau EcmaScript 2015 merupakan fitur bahasa pada pemrograman Javascript modern atau biasa di sebut next gen javascript. lalu kenapa kita harus mempelajari ES6, itu karena di VueJS kita akan banyak menggunakan sintaks-sintaks ES6.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2 id=\"daftar-fitur-es6\">Daftar Fitur ES6<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">Arrows Function<\/li>\r\n<li class=\"\">Classes<\/li>\r\n<li class=\"\">Enchanced object literals<\/li>\r\n<li class=\"\">Template strings<\/li>\r\n<li class=\"\">Destructuring<\/li>\r\n<li class=\"\">Default + rest + spread<\/li>\r\n<li class=\"\">Let + const<\/li>\r\n<li class=\"\">Iterators + for..of<\/li>\r\n<li class=\"\">Generators<\/li>\r\n<li class=\"\">Unicode<\/li>\r\n<li class=\"\">Modules<\/li>\r\n<li class=\"\">Modules loaders<\/li>\r\n<li class=\"\">Map +set + weakmap + weakset<\/li>\r\n<li class=\"\">Proxies<\/li>\r\n<li class=\"\">Symbols<\/li>\r\n<li class=\"\">Subclassable built-ins<\/li>\r\n<li class=\"\">Promises<\/li>\r\n<li class=\"\">Math + number + string + array + object apis<\/li>\r\n<li class=\"\">Binary dan octal literals<\/li>\r\n<li class=\"\">Reflect API<\/li>\r\n<li class=\"\">Tail calls<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Tidak perlu menguasai seluruh fitur diatas, tetapi kita akan membagi fitur-fitur yang penting untuk di pelajari yaitu:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>let + const<\/li>\r\n<li>arrow function<\/li>\r\n<li>default paramater<\/li>\r\n<li>Template literal<\/li>\r\n<li>Enhanced object literals<\/li>\r\n<li>Destructuring<\/li>\r\n<li>Rest Parameters + Spread Operator<\/li>\r\n<li>promise (nanti ada materinya di asynchronous)<\/li>\r\n<li>class<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:heading --><\/p>\r\n<h2 id=\"let-const\">Let + Const<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>let dan const merupakan statement untuk mendefinisikan variable sama seperti var hanya saja terdapat perbedaan diantara let + const dan var.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>var sendiri masih bisa digunakan untuk menjaga compability dengan versi sebelumnya<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>berikut ini perbandingan var dengan let + const:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Normal Javascript:<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>var x = 1;\r\n \r\nif (x === 1) {\r\nvar x = 2;\r\n \r\nconsole.log(x);\r\n\/\/ expected output: 2\r\n}\r\n \r\nconsole.log(x); \/\/ 2 <\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p><strong>ES6 :<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>let x = 1;\r\n \r\nif (x === 1) {\r\n  let x = 2;\r\n \r\n  console.log(x);\r\n  \/\/ expected output: 2\r\n}\r\n \r\nconsole.log(x); \/\/ 1 \r\n\r\nconst number = 42;\r\nnumber = 100; \/\/ Uncaught TypeError: Assignment to constant variable.<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:heading --><\/p>\r\n<h2>Arrow Functions<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>arrow functions merupakan fitur yang ada pada es6 bisa dibilang lebih singkat dari function biasa, function biasa sendiri masih bisa di gunakan.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>berikut ini perbandingan penggunaan function dan arrow function:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Normal Javascript:<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>function myFunction (){\r\n    \/\/ isi Function\r\n}\r\n\/\/ panggil Function\r\nmyFunction()<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p><strong>ES6 :<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>const myFuncton = () =&gt; {\r\n    \/\/function\r\n}\r\n\r\n\/\/ panggil Function\r\nmyFunction()<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:heading --><\/p>\r\n<h2 id=\"default-parameters\">Default Parameters<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>biasanya kita dalam membuat function pasti punya parameter tapi apakah parameter itu sendiri bisa di beri default, jawabannya adalah ya di ES6 kita dapat memasukkan default parameter seperti contoh di bawah ini:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>function multiply(a, b = 1) {\r\n  return a * b;\r\n}\r\n \r\nconsole.log(multiply(5, 2));\r\n\/\/ expected output: 10\r\n \r\nconsole.log(multiply(5));\r\n\/\/ expected output: 5 <\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:heading --><\/p>\r\n<h2 id=\"template-literals\">Template Literals<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>berikut ini cara menggunakan template literal:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":13874,\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-13874\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-3.png\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:heading --><\/p>\r\n<h2>Enhanced object literals<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>berikut ini contoh enhanced object literals dan perbandingan dengan javascript sebelum es6<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Before ES6 Javascript:<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>const fullName = 'John Doe'\r\n \r\nconst john = {\r\n  fullName: fullName\r\n}<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p><strong>After ES6 Javascript:<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>const fullName = 'John Doe'\r\n \r\nconst john = {fullName}<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:heading --><\/p>\r\n<h2>Destructuring<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Destructuring merupakan ekspresi javascript yang memungkinkan untuk membagi atau memecah nilai dari sebuah array atau objek ke dalam variabel yang berbeda<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>berikut ini contoh penggunaan destructuring dan perbandingannya dengan sebelum destructuring<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>tanpa destructuring<\/strong>:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ array\r\nvar numbers = [1,2,3]\r\n\r\nvar numberOne = numbers[0]\r\nvar numberTwo = numbers[1]\r\nvar numberThree = numbers[2]\r\n\r\nconsole.log(numberOne)\r\n\r\n\/\/ object\r\nvar studentName = {\r\n    firstName: 'Peter',\r\n    lastName: 'Parker'\r\n};\r\n \r\nconst firstName = studentName.firstName;\r\nconst lastName = studentName.lastName;\r\n\r\nconsole.log(firstName)<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p><strong>dengan destructuring: <\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ array\r\nlet numbers = [1,2,3]\r\n\r\nconst [numberOne, numberTwo, numberThree] = numbers\r\n\r\nconsole.log(numberOne)\r\n\r\n\/\/ object\r\nvar studentName = {\r\n    firstName: 'Peter',\r\n    lastName: 'Parker'\r\n};\r\n \r\nconst {firstName, lastName} = studentName\r\n\r\nconsole.log(firstName)<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:heading --><\/p>\r\n<h2><strong>Rest Parameters + Spread Operator<\/strong><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>berikut ini contoh penggunaan rest parameters + spread operator:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ Rest Parameters\r\n \r\n\/\/first example\r\nlet scores = ['98', '95', '93', '90', '87', '85']\r\nlet [first, second, third, ...restOfScores] = scores;\r\n \r\nconsole.log(first) \/\/ 98\r\nconsole.log(second) \/\/ 95\r\nconsole.log(third) \/\/ 93\r\nconsole.log(restOfScores) \/\/ [90, 87, 85] \r\n\r\n\/\/second example \r\nconst filter = (...rest) =&gt;{\r\n    return rest.filter(el =&gt; el.text !== undefined)\r\n}\r\n\r\nconsole.log(filter(1, {text: \"wonderful\"}, \"next\"))\r\n\r\n\/\/ spread operator\r\nlet array1 = ['one', 'two']\r\nlet array2 = ['three', 'four']\r\nlet array3 = ['five', 'six']\r\n \r\n\/\/ ES5 Way \/ Normal Javascript\r\n \r\nvar combinedArray = array1.concat(array2).concat(array3)\r\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six']\r\n \r\n\/\/ ES6 Way \r\n \r\nlet combinedArray = [...array1, ...array2, ...array3]\r\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six']<\/code><\/pre>\r\n<p><!-- \/wp:code --><\/p>","waktu_publish":"2021-11-01 08:00:00","status_publish":"publish","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:55:28","updated_at":"2021-10-25 06:43:21","waktu_publish_formatted":" Senin, 01 November 2021. 08:00:00 WIB."},{"id":659,"uuid":"d90dfe6d-6159-4cb1-abbb-f1707e12a4d8","author_user_id":9664,"materi_section_id":187,"judul":"Hari ke-2 | Javascript : Asynchronous","permalink":"hari-ke-2-javascript-asynchronous","konten":"<p><!-- wp:quote --><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Berkenalan dengan callback dan promise untuk mengatasi asynchronous di Javascript.<\/p>\r\n<\/blockquote>\r\n<p><!-- \/wp:quote --> <!-- wp:paragraph --><\/p>\r\n<p>Di dalam dunia pemrograman terdapat dua cara dalam menjalankan program: Synchronous dan Asynchronous. Synchronous artinya program berjalan secara berurutan sedangkan Asynchronous artinya program berjalan bersama-sama.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Terkadang di dalam program yang kita buat terdapat suatu sintaks yang mengharuskan code pada baris tersebut untuk dijalankan terlebih dahulu sebelum menjalankan sintaks pada baris selanjutnya. Hal ini dikenal dengan istilah <strong>blocking<\/strong>. Sebaliknya <strong>non-blocking<\/strong> artinya program berjalan dengan mengeksekusi sintaks dari baris ke baris secara paralel (bersama-sama) .<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"align\":\"center\",\"sizeSlug\":\"large\"} --><\/p>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter size-large\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LmaxxI-WCdSbno_EMIf%2F-Lmb1Y86xkSMjjQR9D_D%2Fcontrol-io.svg?alt=media&amp;token=28454ce2-c28b-4149-bd72-7fa57d83737c\" alt=\"\" \/><\/figure>\r\n<\/div>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>Perhatikan contoh program di bawah ini:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">setTimeout(function() {\r\n  console.log(\"saya dijalankan belakangan\")\r\n}, 3000)\r\n \r\nconsole.log(\"saya dijalankan pertama\") <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Jika kita jalankan program di atas, maka yang akan tampil terlebih dahulu di console adalah \"saya dijalankan pertama\" walaupun sintaksnya ditulis belakangan setelah function setTimeout. Function setTimeout di atas merupakan salah satu contoh function asynchronous di Javascript.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Cara untuk mengatasi Asynchronous seperti function setTimeout adalah dengan <strong>Callback<\/strong> , <strong>Promise , Async-Await<\/strong>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<p>Untuk memahami apa itu callback, promise, async-await, mari kita pelajari melalui artikel dari Kodekademia : <a href=\"https:\/\/medium.com\/codeacademia\/belajar-callback-promise-dan-async-await-dalam-5-menit-fa1564956ab0\">https:\/\/medium.com\/codeacademia\/belajar-callback-promise-dan-async-await-dalam-5-menit-fa1564956ab0<\/a><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-11-02 08:00:00","status_publish":"publish","urutan":2,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 07:00:31","updated_at":"2021-10-25 06:44:10","waktu_publish_formatted":" Selasa, 02 November 2021. 08:00:00 WIB."},{"id":661,"uuid":"deeba326-239e-4ca9-953d-79aca6279c12","author_user_id":9664,"materi_section_id":187,"judul":"Hari ke-3 | Pengenalan VueJS","permalink":"hari-ke-3-pengenalan-vuejs","konten":"<h2>Apa itu Vue?<\/h2>\r\n<p>Vue merupakan salah satu dari sekian banyak framework dan pustaka (library) pada Javascript yang digunakan untuk membangun tampilan antarmuka (user interface) dari suatu aplikasi berbasis web khususnya untuk aplikasi berbasis halaman tunggal atau <em>single page application<\/em> (SPA). Situs resmi Vue bisa kita jumpai pada alamat&nbsp;<a href=\"http:\/\/vuejs.org\/\">http:\/\/vuejs.org<\/a>, adapun link githubnya pada alamat&nbsp;<a href=\"https:\/\/github.com\/vuejs\">https:\/\/github.com\/vuejs<\/a>. Vue sebagaimana Javascript (JS) memang awalnya didesain untuk kebutuhan web, namun seiring perkembangan teknologi yang mendukung JS, maka saat ini Vue juga mulai dapat digunakan untuk mengembangkan aplikasi berbasis desktop dan mobile.&nbsp;<\/p>\r\n<p id=\"ad43\" class=\"ic id gl ie b if jy ig ih ii jz ij ik il ka im in io kb ip iq ir kc is it iv cr ep\" data-selectable-paragraph=\"\">Vue.js ini pertama kali di temukan oleh Evan You. Di dua perusahaan terakhir sebelumnya dia pernah bekerja di Google sebagai Creative Technology (2012&ndash;2014) dan Meteor Development Group (2014&ndash;2016) sebagai Core Dev. Dan di pertengahan tahun 2016 dia akhirnya memutuskan untuk fokus membangun Vue.js hingga saat ini.<\/p>\r\n<p id=\"e9ee\" class=\"ic id gl ie b if jy ig ih ii jz ij ik il ka im in io kb ip iq ir kc is it iv cr ep\" data-selectable-paragraph=\"\"><a class=\"cx jx\" href=\"https:\/\/www.linkedin.com\/in\/evanyou\" rel=\"noopener nofollow\">https:\/\/www.linkedin.com\/in\/evanyou<\/a><\/p>\r\n<p id=\"d328\" class=\"ic id gl ie b if jy ig ih ii jz ij ik il ka im in io kb ip iq ir kc is it iv cr ep\" data-selectable-paragraph=\"\">Untuk pertama kalinya Vue.js ini release pada Februari 2014 dan di minggu pertama release mendapatkan perhatian yang baik di dunia maya khusus nya para developer dan media.<\/p>\r\n<p id=\"6f0a\" class=\"ic id gl ie b if jy ig ih ii jz ij ik il ka im in io kb ip iq ir kc is it iv cr ep\" data-selectable-paragraph=\"\">Dilanjutkan&nbsp;<span id=\"rmm\">d<\/span>ari tahun 2014 hingga tahun 2016 Vue.js ini perkembangannya cukup konsisten, diantaranya dengan memperoleh NPM download hampir 2 juta dan Core GitHub Stars mencapai 37 ribu lebih.<\/p>\r\n<p id=\"e4ba\" class=\"ic id gl ie b if jy ig ih ii jz ij ik il ka im in io kb ip iq ir kc is it iv cr ep\" data-selectable-paragraph=\"\">Beberapa perusahaan besar seperti :&nbsp;<em class=\"kf\">Nintendo, GitLab, Alibaba, Xiaomi, Laravel<\/em> saat ini sudah berkolaborasi menggunakan Vue.js, selengkapnya di&nbsp;<a href=\"https:\/\/madewithvuejs.com\/\">https:\/\/madewithvuejs.com<\/a>.<\/p>\r\n<h2 class=\"kd ke fx at do kf kg ji kh ki kj jm kk kl km kn ko kp kq kr ks kt ku kv kw kx by\">Mengapa harus memilih Vue ?<\/h2>\r\n<h4 id=\"4ace\" class=\"kd ke fx at do kf kg ji kh ki kj jm kk kl km kn ko kp kq kr ks kt ku kv kw kx by\">1. Sederhana<\/h4>\r\n<p id=\"9042\" class=\"jd je fx jf b jg ky ji jj jk kz jm jn jo la jq jr js lb ju jv jw lc jy jz ka fq by\" data-selectable-paragraph=\"\">Alasan pertama mengapa harus memakai Vue.js dibandingkan&nbsp;<em class=\"kb\">front-end framework<\/em>&nbsp;lainnya adalah Vue.js itu simpel dan tidak&nbsp;<em class=\"kb\">ribet<\/em>. Mulai dari sintaks yang pendek,&nbsp;<em class=\"kb\">data binding<\/em>&nbsp;yang mudah,&nbsp;<em class=\"kb\">two-way data binding<\/em>&nbsp;yang&nbsp;<em class=\"kb\">powerful<\/em>, Vue Component, sampai integrasi dengan&nbsp;<em class=\"kb\">back-end framework<\/em>&nbsp;yang sangat mudah.<\/p>\r\n<p id=\"63c8\" class=\"jd je fx jf b jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw jx jy jz ka fq by\" data-selectable-paragraph=\"\">Menambahkan Vue.js dalam proyek yang sudah ada juga relatif mudah. Kita bisa mulai meng-<em class=\"kb\">coding<\/em>&nbsp;Vue.js tanpa harus tahu JSX, ES2015, ataupun Webpack. Selama kita familiar dengan HTML dan JavaScript, kita bisa membaca dokumentasinya dan mulai membuat sesuatu yang mendasar dalam waktu satu hari, yang mana ini menjadi keuntungan besar bagi pengembangan web yang notabene membutuhkan penyelesaian cepat.<\/p>\r\n<h4 id=\"288f\" class=\"kd ke fx at do kf kg ji kh ki kj jm kk kl km kn ko kp kq kr ks kt ku kv kw kx by\">2. Fleksibel<\/h4>\r\n<p id=\"b907\" class=\"jd je fx jf b jg ky ji jj jk kz jm jn jo la jq jr js lb ju jv jw lc jy jz ka fq by\" data-selectable-paragraph=\"\">Dengan Vue, kita bisa membuat aplikasi mulai dari yang berskala kecil sampai yang berskala besar. Kita bisa membuat aplikasi kecil dengan sangat cepat dan langsung menjalankannya di browser, atau bila ingin kita juga bisa membuat aplikasi yang sangat kompleks menggunakan ES6, Vuex, components, dan routing.<\/p>\r\n<p id=\"0ec7\" class=\"jd je fx jf b jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw jx jy jz ka fq by\" data-selectable-paragraph=\"\">Vue sangat fleksibel untuk kita tulis. Misalnya, kita bisa menggunakan HTML, JavaScript, atau bahkan JSX sebagai template. Untuk penulisan skripnya juga sangat fleksibel. Kita bisa memakai ES5, ES6, atau bahkan TypeScript.<\/p>\r\n<p id=\"2c97\" class=\"jd je fx jf b jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw jx jy jz ka fq by\" data-selectable-paragraph=\"\">Vue juga memberi kebebasan kepada developer tentang bagaimana kita menstruktur aplikasi kita. Walaupun untuk beberapa hal seperti struktur folder, hasil generate Vue CLI sudah diatur sedemikian rupa untuk memudahkan developer dalam mengembangkan aplikasi. Namun, Vue tidak membatasi kreativitas para developer dalam mengembangkan aplikasinya.<\/p>\r\n<h4 id=\"6bcf\" class=\"kd ke fx at do kf kg ji kh ki kj jm kk kl km kn ko kp kq kr ks kt ku kv kw kx by\">3. Dokumentasi yang Komprehensif<\/h4>\r\n<p id=\"45b2\" class=\"jd je fx jf b jg ky ji jj jk kz jm jn jo la jq jr js lb ju jv jw lc jy jz ka fq by\" data-selectable-paragraph=\"\">Dokumentasi Vue.js sangat lengkap, sangat detail, mudah dimengerti dan disertai beberapa contoh kode dan hasilnya. Vue juga memiliki komunitas developer yang bagus dan berkembang. Komunitas ini bisa menawarkan bantuan kepada kita saat dibutuhkan.<\/p>\r\n<h4 id=\"43df\" class=\"kd ke fx at do kf kg ji kh ki kj jm kk kl km kn ko kp kq kr ks kt ku kv kw kx by\">4. Modern<\/h4>\r\n<p id=\"e48b\" class=\"jd je fx jf b jg ky ji jj jk kz jm jn jo la jq jr js lb ju jv jw lc jy jz ka fq by\" data-selectable-paragraph=\"\">Vue boleh dibilang merupakan pendatang baru dalam dunia Front-end. Namun, itu menjadi sebuah keunggulan tersendiri karena mereka menggunakan teknologi, library, dan tools yang baru, kekinian dan modern seperti ES6; Webpack; Vuex; dan lain-lain.<\/p>\r\n<h4 id=\"3e81\" class=\"kd ke fx at do kf kg ji kh ki kj jm kk kl km kn ko kp kq kr ks kt ku kv kw kx by\">5. Ada Komunitas<\/h4>\r\n<p id=\"5ee0\" class=\"jd je fx jf b jg ky ji jj jk kz jm jn jo la jq jr js lb ju jv jw lc jy jz ka fq by\" data-selectable-paragraph=\"\">Vue.js telah berkembang pesat dari tahun ke tahun. Komunitasnya pun sudah terbentuk. Semakin banyak juga acara baik dalam maupun luar negeri yang membahas Vue. Salah satu acara Vue yang paling menonjol adalah&nbsp;<strong class=\"jf kc\">VueConf<\/strong>, yaitu sebuah&nbsp;<em class=\"kb\">event&nbsp;<\/em>besar bagi pengguna Vue.js. Biasanya, event ini diisi oleh para tim inti dan kreator Vue.js yang akan memberikan info terbaru tentang status dan perkembangan bagaimana Vue.js selanjutnya.<\/p>\r\n<h4 id=\"ab85\" class=\"kd ke fx at do kf kg ji kh ki kj jm kk kl km kn ko kp kq kr ks kt ku kv kw kx by\">6. Ekosistem yang Kuat<\/h4>\r\n<p id=\"3a96\" class=\"jd je fx jf b jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw jx jy jz ka fq by\" data-selectable-paragraph=\"\">Vue kini sudah masuk usia 7 tahun sejak pertama kali diluncurkan. Seiring dengan itu, ekosistem Vue sudah terbentuk secara kuat. Mulai dari mudahnya mencari referensi, tutorial, libraries, maupun pekerjaan untuk developer Vue.js.<\/p>\r\n<p id=\"f6b5\" class=\"jd je fx jf b jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw jx jy jz ka fq by\" data-selectable-paragraph=\"\">Ekosistem yang kuat juga ditunjukkan dengan makin banyaknya tools (Core Libraries) yang mempermudah developer dalam mengembangkan web. Tools ini di antaranya adalah&nbsp;<strong class=\"jf kc\">Vue Router<\/strong>&nbsp;untuk membuat Single Page Application,&nbsp;<strong class=\"jf kc\">Vuex&nbsp;<\/strong>untuk menangani masalah State Management,&nbsp;<strong class=\"jf kc\">Vue Server Renderer<\/strong>&nbsp;untuk menangani Server-side Rendering (SSR) di Vue.js,&nbsp;<strong class=\"jf kc\">vue-rx<\/strong>&nbsp;untuk integrasi&nbsp;<strong class=\"jf kc\">RxJS<\/strong>&nbsp;dengan Vue.js dan&nbsp;<strong class=\"jf kc\">vue-devtools&nbsp;<\/strong>untuk mempermudah proses&nbsp;<em class=\"kb\">debugging&nbsp;<\/em>aplikasi Vue.js.<\/p>\r\n<p id=\"d6c6\" class=\"jd je fx jf b jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw jx jy jz ka fq by\" data-selectable-paragraph=\"\">Tak kalah penting juga, semua ekosistem library tersebut merupakan library official yang sudah terintegrasi dengan core Vue.js dan terus dikembangkan oleh Core Team Vue.js.<\/p>\r\n<p class=\"jd je fx jf b jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw jx jy jz ka fq by\" data-selectable-paragraph=\"\">&nbsp;<\/p>\r\n<p class=\"jd je fx jf b jg jh ji jj jk jl jm jn jo jp jq jr js jt ju jv jw jx jy jz ka fq by\" data-selectable-paragraph=\"\">Langsung saja kita mengenal lebih dalam dengan Vue JS melalui playlist berikut : <a href=\"https:\/\/www.youtube.com\/playlist?list=PL8YCzrSDCR7jdcrKiWaQ2OVjVSOWt46OP\">link<\/a><br \/><br \/><\/p>","waktu_publish":"2021-11-03 08:00:00","status_publish":"publish","urutan":3,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 07:02:42","updated_at":"2021-10-25 06:45:10","waktu_publish_formatted":" Rabu, 03 November 2021. 08:00:00 WIB."},{"id":662,"uuid":"f74ab301-0e45-4ad3-ad62-ce2f679118c3","author_user_id":9664,"materi_section_id":187,"judul":"Hari ke-4 | VueJS : Directives","permalink":"hari-ke-4-vuejs-directives","konten":"<h2 id=\"apa-itu-directive\" class=\"h2\">Apa itu Directive?<\/h2>\r\n<p>Directive secara bahasa artinya pengarahan, petunjuk, atau perintah. Directive merupakan atribut khusus yang disematkan pada elemen atau markup HTML sebagai penanda bahwa elemen DOM tersebut akan dikenai perlakuan tertentu oleh Vue. Directive berbentuk ekspresi Javascript yang secara reaktif menerapkan efek tertentu ke elemen DOM ketika nilai ekspresinya berubah. Penulisan atribut directive diawali dengan prefix <code>v-<\/code>, hal ini terinspirasi oleh prefix&nbsp;<code>ng-<\/code>&nbsp;pada Angular.<\/p>\r\n<p>Pada bagian sebelumnya, kita juga sudah sedikit menyinggung tentang directive yaitu pada v-once , v-html , v-bind, dan v-model<br \/><br \/>Apa saja directive pada vue yang lainnya, mari kita ikuti artikel dari petanikode berikut : <a href=\"https:\/\/www.petanikode.com\/vuejs-directive\/\">link<\/a><br \/>Setelah memahami dasar dasar Vue JS, dan directive pada Vue JS, kita akan pelajari lifecycle pada Vue JS pada artike dari Badr Interactive berikut : <a href=\"https:\/\/medium.com\/badr-interactive\/mengenal-lifecycle-hooks-pada-vue-js-78cd2225a69\">link<\/a><\/p>","waktu_publish":"2021-11-04 08:00:00","status_publish":"publish","urutan":4,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 07:03:51","updated_at":"2021-10-25 06:45:37","waktu_publish_formatted":" Kamis, 04 November 2021. 08:00:00 WIB."},{"id":663,"uuid":"6aed00c4-ccde-49a6-a7ac-8fda8adad96b","author_user_id":9664,"materi_section_id":187,"judul":"Hari ke-5 | Form Input Binding dan Validation","permalink":"hari-ke-5-form-input-binding-dan-validation","konten":"<p>Pada kesempatan kali ini kita akan belajar tentang bagaimana menangani input data dari user melalui form serta bagimana memanipulasi tampilan datanya.<br \/>Form HTML memiliki berbagai jenis field input seperti text, password, radio, dsb yang peruntukannya tentu berbeda tergantung dari data yang ingin ditangkap.<br \/>Terkait dengan input binding ini, yang kita butuhkan adalah two way data binding, di mana nilai dari field input terhubung dengan data secara dua arah. Artinya perubahan field input yang dilakukan oleh user akan menyebabkan perubahan variabel data, sebaliknya perubahan variabel data akan menyebabkan perubahan pada field input.<br \/><br \/>Untuk lebih detail marilah simak dari playlist berikut : <a href=\"https:\/\/www.youtube.com\/playlist?list=PL8YCzrSDCR7j1tSJywkt6FVLyMptlJrk2\">link<\/a><\/p>","waktu_publish":"2021-11-05 08:00:00","status_publish":"publish","urutan":5,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 07:04:37","updated_at":"2021-10-25 06:45:55","waktu_publish_formatted":" Jumat, 05 November 2021. 08:00:00 WIB."}]},{"id":188,"uuid":"ca71cbf7-b2c8-4546-b688-256fc0b0de33","materi_id":22,"nama":"Pekan 2 - Tugas","permalink":"pekan-2-tugas","urutan":4,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:32:27","updated_at":"2021-07-16 11:29:24","posting":[{"id":658,"uuid":"96966b00-5d4d-4ea0-b848-6861c0352432","author_user_id":9664,"materi_section_id":188,"judul":"Har ke-1 | Javascript : ES6","permalink":"har-ke-1-javascript-es6","konten":"<p><!-- wp:heading --><\/p>\r\n<h2>Petunjuk Pengerjaan<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>1. Menambahkan Folder Baru dan file baru<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buat folder baru dengan nama \"Tugas-6-ES6\" dan buatlah file index.js<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>2. Kerjakan Soal di bawah ini<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>kerjakan soal di bawah ini di dalam file index.js<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Soal 1<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>buatlah fungsi menggunakan arrow function luas dan keliling persegi panjang dengan arrow function lalu gunakan let atau const di dalam soal ini<\/p>\r\n<p><!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Soal 2<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ubahlah code di bawah ke dalam arrow function dan object literal es6 yang lebih sederhana<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">const newFunction = function literal(firstName, lastName){\r\n  return {\r\n    firstName: firstName,\r\n    lastName: lastName,\r\n    fullName: function(){\r\n      console.log(firstName + \" \" + lastName)\r\n    }\r\n  }\r\n}\r\n \r\n\/\/Driver Code \r\nnewFunction(\"William\", \"Imoh\").fullName() <br \/><br \/><!-- wp:heading {\"level\":4} --><\/pre>\r\n<h4>Soal 3<!-- wp:paragraph --><\/h4>\r\n<p>Diberikan sebuah objek sebagai berikut:<!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">const newObject = {\r\n  firstName: \"Muhammad\",\r\n  lastName: \"Iqbal Mubarok\",\r\n  address: \"Jalan Ranamanyar\",\r\n  hobby: \"playing football\",\r\n}<!-- wp:paragraph --><\/pre>\r\n<p>dalam ES5 untuk mendapatkan semua nilai dari object tersebut kita harus tampung satu per satu:<!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">const firstName = newObject.firstName;\r\nconst lastName = newObject.lastName;\r\nconst address = newObject.address;\r\nconst hobby = newObject.hobby;<!-- wp:paragraph --><\/pre>\r\n<p>Gunakan metode destructuring dalam ES6 untuk mendapatkan semua nilai dalam object dengan lebih singkat (1 line saja)<!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Driver code\r\nconsole.log(firstName, lastName, address, hobby)<br \/><br \/><!-- wp:heading {\"level\":4} --><\/pre>\r\n<h4>soal 4<!-- wp:paragraph --><\/h4>\r\n<p>Kombinasikan dua array berikut menggunakan array spreading ES6<!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">const west = [\"Will\", \"Chris\", \"Sam\", \"Holly\"]\r\nconst east = [\"Gill\", \"Brian\", \"Noel\", \"Maggie\"]\r\nconst combined = west.concat(east)\r\n\/\/Driver Code\r\nconsole.log(combined)<br \/><br \/><\/pre>\r\n<h3 id=\"5-template-literals\">soal 5<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>sederhanakan string berikut agar menjadi lebih sederhana menggunakan template literals ES6:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">const planet = \"earth\" <br \/>const view = \"glass\" <br \/>var before = 'Lorem ' + view + 'dolor sit amet, ' + 'consectetur adipiscing elit,' + planet <!-- \/wp:preformatted --><\/pre>\r\n<p><!-- \/wp:preformatted --><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-11-01 08:00:00","status_publish":"publish","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:55:47","updated_at":"2021-10-25 06:43:38","waktu_publish_formatted":" Senin, 01 November 2021. 08:00:00 WIB."},{"id":660,"uuid":"cc2b4d7a-f102-4ae1-92c7-0ea0f7f52c4b","author_user_id":9664,"materi_section_id":188,"judul":"Hari ke-2 | Javascript : Asynchronous","permalink":"hari-ke-2-javascript-asynchronous","konten":"<p><!-- wp:heading --><\/p>\r\n<h2>Petunjuk Pengerjaan<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>1. Menambahkan Folder Baru dan file baru<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buat folder baru dengan nama \"Tugas-7-Asynchronous\"<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>2. Kerjakan Soal di bawah ini<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>kerjakan soal di bawah ini di dalam folder \"Tugas-7-Asynchronous\"<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Soal 1<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kita mempunyai tumpukan buku untuk dibaca. Setiap buku memiliki waktu yang dibutuhkan untuk menghabiskan buku tersebut. Sudah disediakan function readBooks yang menerima tiga parameter: waktu, buku yang dibaca, dan sebuah callback. Salin code berikut ke dalam sebuah file bernama <code>callback.js<\/code> .<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ di callback.js\r\nfunction readBooks(time, book, callback ) {\r\n    console.log(`saya membaca ${book.name}`)\r\n    setTimeout(function(){\r\n        let sisaWaktu = 0\r\n        if(time &gt;= book.timeSpent) {\r\n            sisaWaktu = time - book.timeSpent\r\n            console.log(`saya sudah membaca ${book.name}, sisa waktu saya ${sisaWaktu}`)\r\n            callback(sisaWaktu) \/\/menjalankan function callback\r\n        } else {\r\n            console.log('waktu saya habis')\r\n            callback(time)\r\n        }   \r\n    }, book.timeSpent)\r\n}\r\n \r\nmodule.exports = readBooks <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Masih satu folder dengan file <code>callback.js<\/code>, buatlah sebuah file dengan nama <code>index.js<\/code> lalu tuliskan code seperti berikut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ di index.js\r\nvar readBooks = require('.\/callback.js')\r\n \r\nvar books = [\r\n    {name: 'LOTR', timeSpent: 3000}, \r\n    {name: 'Fidas', timeSpent: 2000}, \r\n    {name: 'Kalkulus', timeSpent: 4000},\r\n    {name: 'komik', timeSpent: 1000}\r\n]\r\n \r\n\/\/ Tulis code untuk memanggil function readBooks di sini<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>lanjutkan code pada <code>index.js<\/code> untuk memanggil function readBooks. Buku yang akan dihabiskan adalah buku-buku di dalam array <code>books<\/code>. Pertama function readBooks menerima input waktu yang dimiliki yaitu 10000 ms (10 detik) dan books pada indeks ke-0. Setelah mendapatkan callback sisa waktu yang dikirim lewat callback, sisa waktu tersebut dipakai untuk membaca buku pada indeks ke-1. Begitu seterusnya sampai waktu habis atau semua buku sudah terbaca. Untuk melihat output, jalankan file <code>index.js<\/code> dengan node js :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\"> $ node index.js<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:separator --><\/p>\r\n<hr class=\"wp-block-separator\" \/>\r\n<p><!-- \/wp:separator --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Soal 2<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Setelah no.1 berhasil, implementasikan function readBooks yang menggunakan callback di atas namun sekarang menggunakan Promise. Buatlah sebuah file dengan nama <code>promise.js<\/code>. Tulislah sebuah function dengan nama readBooksPromise yang me-return sebuah promise seperti berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ di file promise.js\r\nfunction readBooksPromise (time, book) {\r\n  console.log(`saya mulai membaca ${book.name}`)\r\n  return new Promise( function (resolve, reject){\r\n    setTimeout(function(){\r\n      let sisaWaktu = time - book.timeSpent\r\n      if(sisaWaktu &gt;= 0 ){\r\n          console.log(`saya sudah selesai membaca ${book.name}, sisa waktu saya ${sisaWaktu}`)\r\n          resolve(sisaWaktu)\r\n      } else {\r\n          console.log(`saya sudah tidak punya waktu untuk baca ${book.name}`)\r\n          reject(sisaWaktu)\r\n      }\r\n    }, book.timeSpent)\r\n  })\r\n}\r\n \r\nmodule.exports = readBooksPromise<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Masih di folder yang sama dengan promise.js, buatlah sebuah file dengan nama <code>index2.js<\/code>. Tuliskan code sebagai berikut<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var readBooksPromise = require('.\/promise.js')\r\n \r\nvar books = [\r\n    {name: 'LOTR', timeSpent: 3000}, \r\n    {name: 'Fidas', timeSpent: 2000}, \r\n    {name: 'Kalkulus', timeSpent: 4000},<br \/> &nbsp; &nbsp;{name: 'komik', timeSpent: 1000}\r\n]\r\n \r\n\/\/ Lanjutkan code untuk menjalankan function readBooksPromise <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Lakukan hal yang sama dengan soal no.1, habiskan waktu selama 10000 ms (10 detik) untuk membaca semua buku dalam array books.!<br \/><br \/><\/p>\r\n<p>*Petunjuk<br \/>Untuk mengerjakan soal di atas , tidak perlu dilooping, cukup panggil satu satu elemen tiap array nya : books[0] , books[1] , dst.<br \/>Gunakan sisa waktu membaca books[0] untuk membaca books[1], kemudaian sisa waktu membaca books[1] untuk membaca books[2], dst.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>3. Tips<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ soal 1\r\n.... jawaban soal 1\r\n\r\n\/\/ soal 2\r\n.... jawaban soal 2\r\n\r\ndan seterusnya<\/code><\/pre>\r\n<p><!-- \/wp:code --><\/p>","waktu_publish":"2021-11-02 08:00:00","status_publish":"publish","urutan":2,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 07:00:48","updated_at":"2021-10-25 06:44:24","waktu_publish_formatted":" Selasa, 02 November 2021. 08:00:00 WIB."},{"id":664,"uuid":"28603eb9-d6b9-433b-9213-b34ef3bffdc2","author_user_id":9664,"materi_section_id":188,"judul":"Hari ke-3 | Pengenalan VueJS","permalink":"hari-ke-3-pengenalan-vuejs","konten":"<h2>Petunjuk Pengerjaan<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>1. Menambahkan Folder Baru dan file baru<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buat folder baru dengan nama \"Tugas-8-Pengenalan-VueJS\", kemudian buatlah file index.html<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>2. Kerjakan Soal di bawah ini<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>kerjakan soal di bawah ini di dalam folder \"Tugas-8-Pengenalan-VueJS\"<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Soal 1<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah kode seperti kode di bawah ini pada file index.html :<\/p>\r\n<div>\r\n<div><code><code><code><\/code><\/code><\/code>\r\n<div>\r\n<div><code>&lt;!DOCTYPE&nbsp;html&gt;<\/code><\/div>\r\n<div><code>&lt;html&nbsp;lang=\"en\"&gt;<\/code><\/div>\r\n<div><code>&lt;head&gt;<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&lt;meta&nbsp;charset=\"UTF-8\"&gt;<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&lt;meta&nbsp;http-equiv=\"X-UA-Compatible\"&nbsp;content=\"IE=edge\"&gt;<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&lt;meta&nbsp;name=\"viewport\"&nbsp;content=\"width=device-width,&nbsp;initial-scale=1.0\"&gt;<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&lt;title&gt;Document&lt;\/title&gt;<\/code><\/div>\r\n<div><code>&lt;\/head&gt;<\/code><\/div>\r\n<div><code>&lt;body&gt;<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&lt;div&nbsp;id=\"app\"&gt;<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;{{&nbsp;fullName&nbsp;}}<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&lt;\/div&gt;<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&lt;script&nbsp;src=\"https:\/\/cdn.jsdelivr.net\/npm\/vue@2\/dist\/vue.js\"&gt;&lt;\/script&gt;<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&lt;script&gt;<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;var&nbsp;vm&nbsp;=&nbsp;new&nbsp;Vue({<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;el:&nbsp;'#app',<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:&nbsp;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firstName&nbsp;:&nbsp;'Tuanku',<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastName&nbsp;:&nbsp;'Imam&nbsp;Bonjol'<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;computed&nbsp;:&nbsp;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullName&nbsp;:&nbsp;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get(){<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set(){<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;methods&nbsp;:&nbsp;{}<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&lt;\/script&gt;<\/code><\/div>\r\n<div><code>&lt;\/body&gt;<\/code><\/div>\r\n<div><code>&lt;\/html&gt;<\/code><\/div>\r\n<\/div>\r\n<code><code><\/code><\/code>&nbsp;<\/div>\r\n<\/div>\r\n<p>Isilah function get() pada fullName yang menggabungkan antara firstName dan lastName dan pisahkan antara firstName dan lastName dengan 1 spasi, sehingga muncul pada browser : Tuanku Imam Bonjol.<br \/>Kemudian isilah kode di dalam function set() pada fullName , sehingga ketika pada tab console browser kita mengetik vm.fullName = \"Abdul Haris Nasution\" , maka secara reaktif tampilan di browser berubah menjadi : Abdul Haris Nasution<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Soal 2&nbsp;<\/p>\r\n<p>Perhatikan instruksi berikut : <a href=\"https:\/\/youtu.be\/enjSSujNA-Y\">link<\/a> , dan buatlah index2.html , dan kerjakan soal 2 pada index2.html<\/p>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>","waktu_publish":"2021-11-03 08:00:00","status_publish":"publish","urutan":3,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 07:04:56","updated_at":"2021-10-25 06:45:24","waktu_publish_formatted":" Rabu, 03 November 2021. 08:00:00 WIB."},{"id":666,"uuid":"133543fe-64da-4c20-95e3-af5a21982e06","author_user_id":9664,"materi_section_id":188,"judul":"Hari ke-5 | Form Input Binding dan Validation","permalink":"hari-ke-5-form-input-binding-dan-validation","konten":"<h2>Petunjuk Pengerjaan<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>1. Menambahkan Folder Baru dan file baru<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buat folder baru dengan nama \"Tugas-9-Dan-10-Form-Input-Binding\", kemudian buatlah file index.html<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>2. Kerjakan Soal di bawah ini<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>kerjakan soal di bawah ini di dalam folder \"Tugas-9-Dan-10-Form-Input-Binding\"<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Soal&nbsp;<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Perhatikan instruksi berikut : <a href=\"https:\/\/youtu.be\/SFV92yFKox0\">link ,<\/a>kerjakan soal pada index.html<\/p>\r\n<p>&nbsp;<\/p>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>","waktu_publish":"2021-11-05 08:00:00","status_publish":"publish","urutan":4,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 07:06:28","updated_at":"2021-10-25 06:46:07","waktu_publish_formatted":" Jumat, 05 November 2021. 08:00:00 WIB."}]},{"id":189,"uuid":"1d1a2029-fcb4-4ba0-aea7-8660bb5c9128","materi_id":22,"nama":"Pekan 3 - Materi","permalink":"pekan-3-materi","urutan":5,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:32:47","updated_at":"2021-09-29 09:12:18","posting":[{"id":800,"uuid":"30305ecd-5174-47ea-86ed-089522705d5b","author_user_id":9664,"materi_section_id":189,"judul":"Hari ke-1 | Pengenalan RESTful API dan POSTMAN","permalink":"hari-ke-1-pengenalan-restful-api-dan-postman","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>API (Application Program Interface) merupakan suatu bentuk interaksi antar program dalam bentuk request dan response, dimana response yang diberikan bergantung pada isi request nya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>REST (Representional State Transfer) adalah suatu arsitektur metode komunikasi untuk pertukaran data yang umumnya menggunakan protokol HTTP. REST menjadikan objek\/data pada server sebagai sumber data yang dapat ditambah, diubah atau dihapus. Dan umumnya REST dapat digunakan di berbagai bahasa pemrograman.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Berdasarkan pada definisi keduanya, maka RESTful API merupakan bentuk komunikasi antar program (API) dengan menggunakan arsitektur REST, yang diantaranya menggunakan protokol HTTP. Beberapa metode HTTP yang umum digunakan, antara lain:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>GET, kegiatan menerima data.<br \/>contoh: <code>GET https:\/\/situsweb\/api\/users\/detail\/1<\/code> =&gt; mengambil data detail user dengan id = 1.<\/li>\r\n<li>POST, kegiatan pengiriman\/input data untuk diproses selanjutnya.<br \/>contoh: <code>POST https:\/\/situsweb\/api\/users<\/code> =&gt; mengirim data user.<\/li>\r\n<li>PUT, kegiatan mengubah data.<br \/>contoh <code>PUT https:\/\/situsweb\/api\/users\/update\/1<\/code> =&gt; melakukan update pada data user dengan id = 1.<\/li>\r\n<li>DELETE, kegiatan menghapus data.<br \/>contoh: <code>DELETE https:\/\/situsweb\/api\/users\/delete\/1<\/code> =&gt; menghapus data user dengan id = 1.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Perlu diperhatikan bahwa tidak semua API dapat diakses secara langsung, dan memerlukan Authentication. Dalam hal ini terkadang perlu dilakukan registrasi\/pendaftaran pada situs penyedia API tersebut. Setelah proses pendaftaran, biasanya akan diperoleh kode seperti API key, atau OAUTH token, atau bisa juga dalam bentuk client_id dan client_secret. Kode tersebut harus disertakan setiap kali melakukan request pada situs penyedia API tersebut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Postman<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Postman merupakan salah satu aplikasi terpopuler dalam menangani API. Untuk menggunakannya Anda bisa terlebih dahulu mendownload nya di link berikut: <a href=\"https:\/\/www.postman.com\/downloads\/\">https:\/\/www.postman.com\/downloads\/<\/a>. Setelah mendownload aplikasi Postman tersebut, lakukan instalasi dan kemudian lakukan Sign Up (bisa dilakukan melalui aplikasi atau melalui web berikut: <a href=\"https:\/\/identity.getpostman.com\/signup\">https:\/\/identity.getpostman.com\/signup<\/a>).<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Setelah Sign Up dan berhasil masuk ke dalam aplikasi Postman, berikut tampilan yang akan Anda temukan:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":5243,\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-5243\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/Postman1-1024x549.png\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Collection<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Disarankan untuk mengelompokkan API yang akan digunakan pada satu Collection, dengan cara memilih menu \"Collection\" pada sidebar dan klik \"+ New Collection\" kemudian memasukkan nama Collection tersebut, bisa menggunakan nama Project maupun nama web \/ sumber API nya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":5244,\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-5244\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/Postman4-618x1024.png\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Request<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Selanjutnya Anda bisa menambahkan request API dengan menekan tombol \"+\" pada menu yang tersedia (1) . Selanjutnya Anda bisa memasukkan URL yang dituju pada bagian yang telah disediakan (2). Pada Postman telah disediakan berbagai method yang dapat Anda temukan pada sebelah kiri dari kolom input URL, mulai dari GET, POST, PUT, DELETE dan lainnya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":5209,\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-5209\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/Postman2-1024x549.png\" alt=\"\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>Dibawah kolom input URL, Anda akan menemukan menu\/tab \"Params\", \"Authentication\", \"Header\", \"Body\", dan lainnya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Menu \"Params\" yang dapat digunakan untuk menambah query yang akan membuat URL yang digunakan bertambah panjang (biasanya diawali dengan \"?\").<\/li>\r\n<li>Pada menu \"Authentication\", Anda akan menemukan metode Auth yang terkadang diperlukan untuk dapat mengakses suatu API (umumnya menggunakan API Key, Bearer Token, atau OAuth tergantung sumber\/penyedia API).<\/li>\r\n<li>Pada menu \"Header\", Anda juga dapat mengatur Authentication dengan menggunakan key \"Authentication\" dan value dari Authentication yang diperlukan (misal bearer {token}). Pada bagian ini biasanya dimasukkan informasi tambahan yang digunakan oleh back-end\/server untuk mengatur bagaimana cara response akan diberikan.<\/li>\r\n<li>Menu \"Body\", yang biasa diperlukan ketika menggunakan method \"POST\" atau mengirim suatu form kepada back-end\/server.<\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<p>Berikut adalah salah satu contoh dokumentasi API menggunakan POSTMAN&nbsp; : <a href=\"https:\/\/documenter.getpostman.com\/view\/4796444\/TzCQa6Ws\">https:\/\/documenter.getpostman.com\/view\/4796444\/TzCQa6Ws<\/a><\/p>\r\n<p><!-- \/wp:image --><\/p>","waktu_publish":"2021-11-08 08:00:00","status_publish":"publish","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2021-03-20 15:18:08","updated_at":"2021-10-25 06:46:40","waktu_publish_formatted":" Senin, 08 November 2021. 08:00:00 WIB."},{"id":801,"uuid":"60ed5fc3-8276-4b0b-b6f0-745ff49270fd","author_user_id":9664,"materi_section_id":189,"judul":"Hari ke-2 | Belajar CRUD mengunakan Axios","permalink":"hari-ke-2-belajar-crud-mengunakan-axios","konten":"<h3>Apa itu AJAX?<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Biasanya web tanpa teknologi AJAX , setiap mengambil atau mengirim data dari server , browser akan reload halaman. Dengan adanya AJAX semestinya itu tidak terjadi lagi.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>AJAX merupakan singkatan dari&nbsp;<strong>A<\/strong>synchronous&nbsp;<strong>J<\/strong>avascript&nbsp;<strong>A<\/strong>and&nbsp;<strong>X<\/strong>ML.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>AJAX berfungsi untuk:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Mengambil data dari server secara&nbsp;<em>background<\/em>;<\/li>\r\n<li>Update tampilan web tanpa harus relaod browser;<\/li>\r\n<li>Mengirim data ke server secara&nbsp;<em>background<\/em><\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Berikut contoh penggunaan Ajax Request menggunakan Axios: <a href=\"https:\/\/www.youtube.com\/playlist?list=PL8YCzrSDCR7isvKAuWKOUV235ogP9idg6\">video<\/a><\/p>","waktu_publish":"2021-11-09 08:00:00","status_publish":"publish","urutan":2,"created_by":9664,"updated_by":9664,"created_at":"2021-03-20 15:18:33","updated_at":"2021-10-25 06:47:15","waktu_publish_formatted":" Selasa, 09 November 2021. 08:00:00 WIB."},{"id":802,"uuid":"abe279ee-1012-4ddd-a8fa-77638347bccf","author_user_id":9664,"materi_section_id":189,"judul":"Hari ke-3 | Component VueJS","permalink":"hari-ke-3-component-vuejs","konten":"<p>Kali ini kita akan belajar tentang konsep component pada Vue dan penggunaannya pada aplikasi sederhana. Sebuah aplikasi Vue bisa dibangun dari beberapa component , sebagai contoh Sebagi contoh: sebuah aplikasi blog bisa terdiri dari tiga component utama yaitu header, content, dan footer. Pada component content memiliki dua sub component (child) yaitu sidebar dan main content. Component sidebar memiliki sub component lagi yaitu link navigasi, dst.<br \/><br \/><em>Component<\/em>&nbsp;adalah salah satu fitur yang&nbsp;<em>powerful<\/em> dari Vue.js, bayangkan kita dapat membuat sebuah <em>component<\/em>&nbsp;yang berisi elemen HTML yang dapat digunakan kembali (<em>reusable<\/em>) tanpa perlu menuliskan kembali elemen tersebut. Hal ini tentu saja dapat membantu kita mempercepat proses <em>development<\/em>, selain itu kita juga dimudahkan dalam me-<em>mantainance<\/em>&nbsp;<em>code<\/em> yang telah kita tulis&nbsp;<br \/><br \/>Untuk lebih detail mengenai Component pad VueJS, mari kita belajar melalui playlist berikut : <a href=\"https:\/\/www.youtube.com\/playlist?list=PL8YCzrSDCR7jK5Ya0WCLgOLqRkZ5_JWgH\">link<\/a><\/p>","waktu_publish":"2021-11-10 08:00:00","status_publish":"publish","urutan":3,"created_by":9664,"updated_by":9664,"created_at":"2021-03-20 15:18:58","updated_at":"2021-10-25 06:48:07","waktu_publish_formatted":" Rabu, 10 November 2021. 08:00:00 WIB."},{"id":803,"uuid":"5d663d7a-762d-4bda-9f79-4d3550c0aa81","author_user_id":9664,"materi_section_id":189,"judul":"Hari ke-4 | VueRouter","permalink":"hari-ke-4-vuerouter","konten":"<p>Pada kesempatan kali ini kita akan belajar cara bagaimana menangani routing di palikasi Vue JS kita. Secara official Vue JS membuat library yang dinamakan Vue Router. Ini alamat webnya : <a href=\"https:\/\/router.vuejs.org\/\">https:\/\/router.vuejs.org<\/a>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Instalasi<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Vue Router perlu ditambahkan ke dalam halaman HTML kita. Caranya bisa kita unduh ke lokal (sehingga tidak membutuhkan koneksi internet lagi) atau ditautkan langsung dengan server pustaka Vue (CDN). Silakan tambahkan ke file index.html kita :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;script src=\"https:\/\/unpkg.com\/vue-router\/dist\/vue-router.js\"&gt;&lt;\/script&gt;<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk mengembangkan aplikasi dengan skala besar, maka untuk instalasi Vue Router disarankan kita menggunakan package manager seperti NPM atau YARN.&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Mari kita mulai..<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Silakan buat index.html berikut<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset=\"UTF-8\"&gt;\r\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n  &lt;title&gt;Document&lt;\/title&gt;\r\n&lt;\/head&gt;\r\n&lt;body&gt;\r\n  &lt;div id=\"app\"&gt;\r\n    &lt;h1&gt;Belajar Vue Router&lt;\/h1&gt;\r\n  &lt;\/div&gt;\r\n\r\n  &lt;script src=\"https:\/\/unpkg.com\/vue\/dist\/vue.js\"&gt;&lt;\/script&gt;\r\n  &lt;script src=\"https:\/\/unpkg.com\/vue-router\/dist\/vue-router.js\"&gt;&lt;\/script&gt;\r\n \r\n&lt;\/body&gt;\r\n&lt;\/html&gt;<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>jalankan file index.html dengan http , silakan jalankan dengan command \"http-server --port=\"3000\"<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":13330,\"width\":620,\"height\":30,\"sizeSlug\":\"large\"} --><\/p>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian kita tambahkan script berikut :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ Kita membuat 2 component , yaitu Home dan About\r\nconst Home = { template: '&lt;div&gt;Ini Halaman Home&lt;\/div&gt;' }\r\nconst About = { template: '&lt;div&gt;Ini Halaman About&lt;\/div&gt;' }\r\n\r\n\/\/ Kemudian kita arahkan setiap route ke component yang kita inginkan\r\nconst routes = [\r\n  { path: '\/', component: Home , alias: '\/home'},\r\n  { path: '\/about', component: About }\r\n]\r\n\r\n\/\/Kemudian kita instansiasi object Vue Router dan tambahkan routes yang sudah kita buat tadi\r\nconst router = new VueRouter({\r\n  routes \r\n})\r\n\r\n\/\/Kemudian kita tambahkan object VueRouter yang kita namakan router ke object Vue\r\n<br \/>var vm = new Vue({ <br \/>   el: '#app', <br \/>   router, <br \/>  })<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian kita tambahkan di html kita :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;div id=\"app\"&gt;\r\n  \r\n    &lt;h1&gt;Belajar Vue Router&lt;\/h1&gt;\r\n\r\n    &lt;!-- Pengganti tag &lt;a href=\"\"&gt;&lt;\/a&gt;  --&gt;\r\n    &lt;router-link to=\"\/\"&gt;Home&lt;\/router-link&gt;\r\n    &lt;router-link to=\"\/about\"&gt;About&lt;\/router-link&gt;\r\n\r\n    &lt;!-- Untuk Menampilkan component secara dinamis , sesuai dengan route yang diakses --&gt;\r\n    &lt;router-view&gt;&lt;\/router-view&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Silakan Akses di browser html kita, dan lihat Kita telah berhasil membuat route di aplikasi Vue JS kita.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Kita bisa menghandle , jika kita mengakses url selain '\/' dan '\/about' , maka akan kita redirect ke '\/' dengan cara :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>const routes = [\r\n    { path: '\/', component: Home, alias: '\/home' },\r\n    { path: '\/about', component: About },\r\n    { path: '*', redirect: '\/' }\r\n]<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Dynamic Routing<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kita akan membuat route yang dinamis<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>{ path: '\/category\/:id', component: CategoryComponent }<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Silakan buat file&nbsp;<code>CategoriesComponent.js<\/code>&nbsp;pada direktori yang sama dengan file&nbsp;<code>index.html<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>export const CategoriesComponent = {\r\n    data () {\r\n        return {\r\n            categories: [\r\n                {\r\n                    id: 1,\r\n                    title: 'Alat Tulis'\r\n                },\r\n                {\r\n                    id: 2,\r\n                    title: 'Alat Mandi'\r\n                },\r\n                {\r\n                    id: 3,\r\n                    title: 'Alat Masak'\r\n                },\r\n                \r\n            ]\r\n        }\r\n    },\r\n    template: `\r\n        &lt;div&gt;\r\n            &lt;h1&gt;Daftar Kategori&lt;\/h1&gt;\r\n            &lt;ul&gt;\r\n                &lt;li v-for=\"category of categories\"&gt;\r\n                    &lt;router-link :to=\"'\/category\/'+category.id\"&gt; \r\n                        {{ category.title }} \r\n                    &lt;\/router-link&gt;\r\n                &lt;\/li&gt;\r\n            &lt;\/ul&gt;\r\n        &lt;\/div&gt;\r\n    ` \r\n}\r\n<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian di index.html kita import CategoriesComponent :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;script type=\"module\"&gt;\r\nimport { CategoriesComponent } from '.\/CategoriesComponent.js'<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>dan tambahkan map route nya :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>const routes = [\r\n    { path: '\/', component: Home, alias: '\/home' },\r\n    { path: '\/about', component: About },\r\n    { path: '\/categories', component: CategoriesComponent },\r\n    { path: '*', redirect: '\/' }\r\n]<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian tambahkan router link nya :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;div id=\"app\"&gt;\r\n    &lt;router-link to=\"\/\"&gt;Home&lt;\/router-link&gt;\r\n    &lt;router-link to=\"\/about\"&gt;About&lt;\/router-link&gt;        \r\n    &lt;router-link to=\"\/categories\"&gt;Categories&lt;\/router-link&gt;        \r\n    &lt;hr&gt;\r\n    &lt;router-view&gt;&lt;\/router-view&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian buatlah CategoryComponent pada directory yang sama dengan index.html<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>export const CategoryComponent = {\r\n    data(){\r\n        return {\r\n            categories: [\r\n                {\r\n                    id: 1,\r\n                    title: 'Alat Tulis',\r\n                    description : 'Alat tulis adalah alat yang digunakan untuk menulis, diantaranya pulpen, pensil, penghapus, dll.'\r\n                },\r\n                {\r\n                    id: 2,\r\n                    title: 'Alat Mandi',\r\n                    description : 'Alat tulis adalah alat yang digunakan untuk mandi, diantaranya gayung, sikat gigi, handuk, dll.'\r\n\r\n                },\r\n                {\r\n                    id: 3,\r\n                    title: 'Alat Masak',\r\n                    description : 'Alat tulis adalah alat yang digunakan untuk memasak, diantaranya panci, kompor, katel, dll.'\r\n\r\n                },\r\n                \r\n            ]\r\n        }\r\n    },\r\n    computed: {\r\n        category() {\r\n            return this.categories.filter((category)=&gt;{\r\n                return category.id === parseInt(this.$route.params.id)                \r\n            })[0]\r\n        }\r\n    },\r\n    template: `&lt;div &gt;\r\n            &lt;h1&gt;Category :  {{ category.title }}&lt;\/h1&gt;\r\n            &lt;ul&gt;\r\n                &lt;li v-for=\"(num, value) of category\"&gt;\r\n                    {{ num +' : '+ value }} &lt;br&gt;\r\n                &lt;\/li&gt;\r\n            &lt;\/ul&gt;\r\n        &lt;\/div&gt;`,\r\n   \r\n}<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian jangan lupa kita import di dalam index.html :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;script type=\"module\"&gt;\r\n    import { CategoriesComponent } from '.\/CategoriesComponent.js'\r\n    import { CategoryComponent } from '.\/CategoryComponent.js'<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian kita tambahkan juga di dalam const routes :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code> const routes = [\r\n        { path: '\/', component: Home, alias: '\/home' },\r\n        { path: '\/about', component: About },\r\n        { path: '\/categories', component: CategoriesComponent },\r\n        { path: '\/category\/:id', component: CategoryComponent },\r\n        { path: '*', redirect: '\/' }\r\n\r\n    ]\r\n<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Dan silakan coba pada browser .<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Navigation Guard<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kita akan belajar navigation guard melalui video berikut : <a href=\"https:\/\/youtu.be\/z4k3w3_ttjM\">video<\/a>.<\/p>","waktu_publish":"2021-11-11 08:00:00","status_publish":"publish","urutan":4,"created_by":9664,"updated_by":9664,"created_at":"2021-03-20 15:19:38","updated_at":"2021-10-25 06:48:57","waktu_publish_formatted":" Kamis, 11 November 2021. 08:00:00 WIB."},{"id":804,"uuid":"e1da6885-a3aa-45af-8028-c5c28c20b17d","author_user_id":9664,"materi_section_id":189,"judul":"Hari ke-5 | VueX","permalink":"hari-ke-5-vuex","konten":"<h3>Apa itu state management?<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>State management merupakan sentralisasi variabel data, sehingga semua component dalam aplikasi dapat mengakses dan memanipulasinya dengan aturan-aturan tertentu sehingga perubahannya dapat diprediksi.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mari kita saksikan tutorial state management menggunakan vuex dari channel balademy : <a href=\"https:\/\/www.youtube.com\/watch?v=jK_U1E_ZKk8&amp;list=PL9At9z2rvOC9ptNIm1G1aNAIJ60m5BTcI\">playlist<\/a><br \/>Atau bagi yang menyukai materi melalui artikel dari https:\/\/ngide.net, bisa baca artikel berikut : <a href=\"https:\/\/ngide.net\/kenalan-dengan-vuex-state-management-di-vue-js\/\">artikel<\/a><\/p>","waktu_publish":"2021-11-12 08:00:00","status_publish":"publish","urutan":5,"created_by":9664,"updated_by":9664,"created_at":"2021-03-20 15:20:19","updated_at":"2021-10-25 06:50:09","waktu_publish_formatted":" Jumat, 12 November 2021. 08:00:00 WIB."}]},{"id":190,"uuid":"0054b9bd-41e9-4a98-bf19-5de723aab163","materi_id":22,"nama":"Pekan 3 - Tugas","permalink":"pekan-3-tugas","urutan":6,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:33:01","updated_at":"2021-09-29 09:12:18","posting":[{"id":805,"uuid":"d678cec1-468d-41e0-9fde-94bdd1718e09","author_user_id":9664,"materi_section_id":190,"judul":"Hari ke-1 | Pengenalan RESTful API dan POSTMAN","permalink":"hari-ke-1-pengenalan-restful-api-dan-postman","konten":"<h2>Petunjuk Pengerjaan<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<ol>\r\n<li>Pelajari dokumentasi API tentang manipulasi data Blog berikut : <a href=\"https:\/\/documenter.getpostman.com\/view\/4796444\/TzCQa6Ws\">https:\/\/documenter.getpostman.com\/view\/4796444\/TzCQa6Ws<\/a><\/li>\r\n<li>Buatlah collection sendiri pada POSTMAN dengan nama \"Aplikasi Blog Sederhana - VueJS Sanbercode\"<\/li>\r\n<li>Dokumentasikan semua route yang ada pada <a href=\"https:\/\/documenter.getpostman.com\/view\/4796444\/TzCQa6Ws\">https:\/\/documenter.getpostman.com\/view\/4796444\/TzCQa6Ws<\/a> dengan mengganti domain dari <a href=\"http:\/\/localhost:8000\">http:\/\/localhost:8000<\/a> ke <a href=\"http:\/\/demo-api-vue.sanbercloud.com\/\">http:\/\/demo-api-vue.sanbercloud.com\/<\/a><\/li>\r\n<li>Sesuaikan data request yang digunakan<\/li>\r\n<li>Kemudian publish lah collection tersebut<\/li>\r\n<li>Isi form tugas dengan hasil generate url collection yang telah berhasil dipublish&nbsp;<\/li>\r\n<\/ol>\r\n<p>&nbsp;<\/p>\r\n<p>Catatan :<br \/>Tujuan dari tugas hari ini adalah teman teman diharapkan bisa membaca dan membuat dokumentasi API dengan menggunakan POSTMAN<\/p>","waktu_publish":"2021-11-08 08:00:00","status_publish":"publish","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2021-03-20 15:21:47","updated_at":"2021-10-25 06:46:49","waktu_publish_formatted":" Senin, 08 November 2021. 08:00:00 WIB."},{"id":808,"uuid":"8ade6399-4e95-49f0-bae4-7b94aa9c6cdf","author_user_id":9664,"materi_section_id":190,"judul":"Hari ke-2 | Belajar CRUD mengunakan Axios","permalink":"hari-ke-2-belajar-crud-mengunakan-axios","konten":"<h2>Petunjuk Pengerjaan<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>1. Menambahkan Folder Baru dan file baru<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buat folder baru dengan nama \"Tugas-12-Ajax-Axios\", kemudian buatlah file index.html<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>2. Kerjakan Soal di bawah ini<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Perhatikan dokumentasi API berikut :<br \/><br \/>Kerjakan CRUD (hanya create, edit, update, delete, dan upload file) seperti pada materi untuk API berikut : <a href=\"https:\/\/documenter.getpostman.com\/view\/4796444\/TzCQcSMe\">https:\/\/documenter.getpostman.com\/view\/4796444\/TzCQcSMe<\/a>&nbsp;<br \/><br \/><strong>3. Commit dan Push<\/strong><br \/><br \/>Lakukanlah&nbsp; perintah git commit dan push, kemudian kirimkan link commit terakhir pada form tugas yang telah disediakan&nbsp;<\/p>","waktu_publish":"2021-11-09 08:00:00","status_publish":"publish","urutan":2,"created_by":9664,"updated_by":9664,"created_at":"2021-03-21 15:02:56","updated_at":"2021-10-25 06:47:33","waktu_publish_formatted":" Selasa, 09 November 2021. 08:00:00 WIB."},{"id":809,"uuid":"161393c2-8122-4a4f-a2c2-4f7e329b9540","author_user_id":9664,"materi_section_id":190,"judul":"Hari ke-3 | Component VueJS","permalink":"hari-ke-3-component-vuejs","konten":"<h2>Petunjuk Pengerjaan<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>1. Menambahkan Folder Baru dan file baru<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buat folder baru dengan nama \"Tugas-13-Component\", kemudian buatlah file index.html<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>2. Kerjakan Soal di bawah ini<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pada tugas hari kemarin, kita berhasil mengimplemntasikan ajax menggunkan axios.<br \/>Ubahlah daftar member yang di dalam tag &lt;table&gt; menjadi component tersendiri dan berilah nama MembersComponent<br \/><br \/><strong>3. Commit dan Push<\/strong><br \/><br \/>Lakukanlah&nbsp; perintah git commit dan push, kemudian kirimkan link commit terakhir pada form tugas yang telah disediakan&nbsp;<\/p>","waktu_publish":"2021-11-10 08:00:00","status_publish":"publish","urutan":3,"created_by":9664,"updated_by":9664,"created_at":"2021-03-21 15:03:41","updated_at":"2021-10-25 06:48:16","waktu_publish_formatted":" Rabu, 10 November 2021. 08:00:00 WIB."},{"id":810,"uuid":"36d2b4b8-6521-4106-9040-6bf14071fee0","author_user_id":9664,"materi_section_id":190,"judul":"Hari ke-4 | VueRouter","permalink":"hari-ke-4-vuerouter","konten":"<h2>Petunjuk Pengerjaan<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3>1. Menambahkan Folder Baru dan file baru<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Buat folder baru dengan nama \"Tugas-14-VueRouter\",&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>2. Kerjakan Soal di bawah ini<\/h3>\r\n<p>Kerjakan di dalam folder Tugas-14-VueRouter<\/p>\r\n<ol>\r\n<li>Buatlah sebuah navigasi menu menggunakan Vue Router dengan 3 route.<\/li>\r\n<li>Kemudian buatlah 3 dummy Component (bebas) dan pasangkan dengan 3 route di atas<br \/>contoh :<br \/><code>const routes = [\r\n<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{ path: '\/halaman1', component: Component1 }, <br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{ path: '\/halaman2', component: Component2 }, <br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{ path: '\/halaman3', component: Component3 }, <br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]<\/code><\/li>\r\n<li><code><\/code>Kemudian buatlah skenario, halaman 1 boleh diakses siapa saja, halaman 2 hanya boleh diakses user yang sudah login saja, halaman 3 hanya boleh diakses oleh user yang sudah login dan memiliki role sebagai admin<\/li>\r\n<\/ol>\r\n<p><br \/><strong>3. Commit dan Push<\/strong><br \/><br \/>Lakukanlah&nbsp; perintah git commit dan push, kemudian kirimkan link commit terakhir pada form tugas yang telah disediakan&nbsp;<\/p>","waktu_publish":"2021-11-11 08:00:00","status_publish":"publish","urutan":4,"created_by":9664,"updated_by":9664,"created_at":"2021-03-21 15:04:32","updated_at":"2021-10-25 06:49:15","waktu_publish_formatted":" Kamis, 11 November 2021. 08:00:00 WIB."}]},{"id":191,"uuid":"785e1038-00df-4021-be43-326f102d35ef","materi_id":22,"nama":"Pekan 4 - Materi","permalink":"pekan-4-materi","urutan":7,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:33:12","updated_at":null,"posting":[]},{"id":192,"uuid":"4ae9afa3-781c-48f3-b6b9-432ce45a7390","materi_id":22,"nama":"Pekan 4 - Tugas","permalink":"pekan-4-tugas","urutan":8,"created_by":9664,"updated_by":9664,"created_at":"2021-03-12 06:33:23","updated_at":null,"posting":[]}],"list_kelas":null,"is_done":0}