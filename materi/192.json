{"response_code":"00","response_msg":"Berhasil mendapatkan materi kelas","materi_kelas":{"id":35,"uuid":"9734f46c-327f-498d-8ac4-d1f5912e9ca9","kategori_kelas_id":7,"versi":"4.0.0","created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":null},"section":[{"id":348,"uuid":"0457a41d-83fe-4eef-bf75-5e0bc8794b1a","materi_id":35,"nama":"Pendahuluan","permalink":"pendahuluan","urutan":1,"created_by":4336,"updated_by":4336,"created_at":"2021-08-09 16:42:06","updated_at":null,"posting":[{"id":1241,"uuid":"c8bfe7b2-ba95-401e-87ea-fe70ed9f0534","author_user_id":4336,"materi_section_id":348,"judul":"Persiapan Perangkat","permalink":"persiapan-perangkat","konten":"<div class=\"entry-content\">\r\n<p style=\"text-align: justify;\"><strong>Persiapan Perangkat<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Selamat datang peserta Bootcamp Sanbercode kelas ReactJS &ndash; Web Frontend Development. Sebelum membahas proses membuat aplikasi menggunakan framework ReactJS, terlebih dahulu kita akan membahas berbagai perangkat yang perlu dipersiapkan. Untuk mengikuti bootcamp ReactJS ini, diperlukan perangkat utama yaitu&nbsp;<strong>PC\/Laptop<\/strong>&nbsp;yang terhubung dengan&nbsp;<strong>internet<\/strong>.<\/p>\r\n<p style=\"text-align: justify;\">Berikut Minimal Spesifikasi PC\/Laptop yang diperlukan dalam Bootcamp Sanbercode kelas ReactJS &ndash; Web Frontend Development :<\/p>\r\n<ol style=\"text-align: justify;\">\r\n<li>RAM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Minimal <strong>2GB<\/strong>, Rekomendasi <strong>4GB<\/strong><\/li>\r\n<li>ROM Size : Menyediakan setidaknya <strong>10GB<\/strong> ruang tersedia<\/li>\r\n<li>OS &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Windows 7\/8\/10 32 atau 64 bit, Linux, Ubuntu, macOS dan lainnya<\/li>\r\n<li>CPU &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Minimal <strong>Intel Core 2 Duo<\/strong>, Rekomendasi <strong>Intel Core i3<\/strong><\/li>\r\n<\/ol>\r\n<p style=\"text-align: justify;\"><strong>Perangkat Lunak dan Teknologi yang Digunakan<\/strong><\/p>\r\n<ol style=\"text-align: justify;\">\r\n<li><strong> Terminal atau Console<\/strong><\/li>\r\n<\/ol>\r\n<p style=\"padding-left: 40px; text-align: justify;\">Pada Bootcamp kali ini, diperlukan sebuah terminal untuk mengeksekusi berbagai perintah dasar yang berkaitan dengan Git, Node. Kita bisa menggunakan terminal bawaan dari Sistem Operasi yang digunakan seperti Command Prompt\/Windows PowerShell pada OS Windows dan Terminal pada OS Linux maupun OSX. Dan ketika melakukan proses instalasi Git juga terdapat Git Bash yang memiliki fungsi yang serupa. Selain itu, peserta juga bisa menggunakan&nbsp;<a href=\"https:\/\/cmder.net\/\">cmder<\/a>&nbsp;(terutama yang menggunakan OS Windows) karena cmder memiliki banyak fitur yang tidak dimiliki command prompt atau terminal bawaan. Proses instalasi bisa dilakukan menggunakan konfigurasi default\/recommended<\/p>\r\n<ol style=\"text-align: justify;\" start=\"2\">\r\n<li><strong> Git<\/strong><\/li>\r\n<\/ol>\r\n<p style=\"padding-left: 40px; text-align: justify;\"><a href=\"https:\/\/git-scm.com\/\">Git&nbsp;<\/a>merupakan version control yang banyak digunakan oleh para programmer atau software developer. Untuk dapat menggunakannya, download dan install&nbsp;<a href=\"https:\/\/git-scm.com\/\">Git&nbsp;<\/a>sesuai dengan platform OS yang bersangkutan. Dan jalankan perintah instalasi dengan konfigurasi default\/recommended.<\/p>\r\n<ol style=\"text-align: justify;\" start=\"3\">\r\n<li><strong> Visual Studio Code<\/strong><\/li>\r\n<\/ol>\r\n<p style=\"padding-left: 40px; text-align: justify;\"><a href=\"https:\/\/code.visualstudio.com\/\">Visual Studio Code<\/a>&nbsp;adalah salah satu IDE (Integrated Development Environment) yang direkomendasikan untuk digunakan selama bootcamp ini. Salah satu kelebihannya adalah kemudahan pengoperasian dan user inteface yang lebih mudah dipahami oleh orang yang awam dalam pemrograman. Selain itu juga terdapat banyak extension atau plugin yang sangat membantu dalam menuliskan kode selama membangun suatu program\/aplikasi.<\/p>\r\n<p style=\"padding-left: 40px; text-align: justify;\">IDE lainnya yang juga dapat digunakan adalah&nbsp;<a href=\"https:\/\/www.sublimetext.com\/\">Sublime Text<\/a>&nbsp;atau&nbsp;<a href=\"https:\/\/atom.io\/\">Atom<\/a>. Untuk kemudahan proses pembelajaran kami tidak merekomendasikan Notepad atau Notepad++<\/p>\r\n<ol style=\"text-align: justify;\" start=\"4\">\r\n<li><strong> Node js<\/strong><\/li>\r\n<\/ol>\r\n<p style=\"padding-left: 40px; text-align: justify;\">Node js (<a href=\"https:\/\/nodejs.org\/en\/download\/\">https:\/\/nodejs.org\/en\/download\/<\/a>) adalah JavaScript run-time, yang menjadikan program JavaScript bisa berjalan, baik di web browser, node maupun di environment yang kompatibel lainnya. Selain menjadi eksekutor, pada pengembangan aplikasi menggunakan ReactJS ini, juga terdapat npm (node package manager) yang akan banyak digunakan dalam mengelola dependencies atau fitur-fitur tambahan yang ingin ditambahkan pada aplikasi ReactJS, seperti misalnya React Router, dan berbagai macam package\/library lainnya.<\/p>\r\n<p style=\"padding-left: 40px; text-align: justify;\">Silahkan download dan install&nbsp;<a href=\"https:\/\/nodejs.org\/en\/download\/\">node js<\/a>&nbsp;di local\/komputer Anda sesuai dengan OS ter-install. Disarankan untuk mendownload node js versi LTS.<\/p>\r\n<p style=\"text-align: justify;\">berikut ini video tutorial installasi nodejs: <a href=\"https:\/\/youtu.be\/B2S5WL5bKNo\">https:\/\/youtu.be\/B2S5WL5bKNo<\/a><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<\/div>","waktu_publish":"2021-10-25 08:00:00","status_publish":"publish","urutan":1,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-25 06:43:32","waktu_publish_formatted":" Senin, 25 Oktober 2021. 08:00:00 WIB."},{"id":1242,"uuid":"d04d1a17-9a2e-4b4e-ac2c-aaae707655ad","author_user_id":4336,"materi_section_id":348,"judul":"Teknis Pengumpulan Tugas","permalink":"teknis-pengumpulan-tugas","konten":"<p style=\"text-align: justify;\"><span style=\"color: #ffffff; background-color: #e03e2d;\"><strong>Catatan Tambahan<\/strong> : Pengumpulan Tugas hanya diperbolehkan menggunakan <strong>gitlab&nbsp;<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Setelah kelas dimulai, Kalian setiap harinya akan diminta untuk menyelesaikan tugas dan\/atau quiz yang diberikan. <strong>Disarankan<\/strong> Anda untuk membuat satu folder khusus di dalam local PC\/Laptop untuk menyimpan file-file tugas yang terhubung dengan repository project yang menggunakan Git kalian nantinya. Berikut ini tahapan atau tata cara mengumpulkan tugas :<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>CARA MENGUMPULKAN TUGAS ( GITLAB )<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Dalam hal ini tahapan yang bisa digunakan adalah sebagai berikut:<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>Buatlah sebuah folder tugas (misal &ldquo;tugas-5&rdquo;)<\/li>\r\n<li>Setelah masuk ke dalam folder, buatlah file tugas (misal &ldquo;tugas5.js&rdquo;)<\/li>\r\n<li>Jika di dalam tugas terdapat beberapa soal, Anda bisa gunakan fitur toggle comment pada visual studio code untuk pemisah antar soal (dengan menekan shortcut Ctrl + \/ pada Windows atau \u2318\/ pada Mac). contoh:<\/li>\r\n<\/ul>\r\n<pre style=\"padding-left: 40px; text-align: justify;\"><code>\/\/ Soal 1 <\/code><br \/><code>{ jawaban soal 1 } <\/code><br \/><code>\/\/ Soal 2 <\/code><br \/><code>{ jawaban soal 2 } <\/code><br \/><code>\/\/ dst.<\/code><\/pre>\r\n<ul style=\"text-align: justify;\">\r\n<li>Jika tugas adalah satu folder project maka masukan seluruh isi di dalam folder project kecuali folder node-modules jika tidak di gitignore (defaultnya di gitignore)<\/li>\r\n<li>Jika tugas telah selesai, upload file tugas ke <strong>Gitlab<\/strong> (Anda bisa menggunakan command di bawah ini).<\/li>\r\n<\/ul>\r\n<pre style=\"padding-left: 40px; text-align: justify;\"><code>$ git add .&nbsp;&nbsp; <\/code><br \/><code>$ git commit -m \"update tugas 5\"&nbsp;&nbsp;&nbsp; <\/code><br \/><code>$ git push<\/code><\/pre>\r\n<ul style=\"text-align: justify;\">\r\n<li>Jika proses git push telah berhasil, periksalah halaman Gitlab Anda untuk melihat <strong>Repository<\/strong> dan mecnari Link <strong>Commit<\/strong> &nbsp;anda.&nbsp; Berikut ini cara untuk melihat repository dan link commitnya :<\/li>\r\n<ul>\r\n<li>Pertama, Bukalah halaman Website Gitlab terlebih dahulu. Link : <a href=\"https:\/\/about.gitlab.com\/\">https:\/\/about.gitlab.com\/<\/a> , jangan lupa Register ( bagi yang tidak memiliki akun gitlab ) dan Login<\/li>\r\n<li>Jika sudah Login, maka tampilannya akan seperti berikut, lalu ikuti Langkah dibawah ini :<\/li>\r\n<\/ul>\r\n<\/ul>\r\n<p style=\"padding-left: 80px; text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/1-1.png\" width=\"631\" height=\"355\" \/><\/p>\r\n<p style=\"padding-left: 80px; text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"padding-left: 80px; text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/2-1.png\" width=\"649\" height=\"365\" \/><\/p>\r\n<ul>\r\n<li style=\"text-align: justify;\">Carilah nama Repositry yang mau diambil link commitnya, jika sudah berada didalam repository-nya.<\/li>\r\n<li style=\"text-align: justify;\">&nbsp;Ikuti Langkah berikut untuk melihat commit yang ada didalam repository. Pilihlah <strong>Commitan<\/strong> yang mau di Copy link nya, caranya yaitu Klik Kanan di nama Commitan nya, lalu <strong>Copy link address.<\/strong><\/li>\r\n<\/ul>\r\n<p style=\"padding-left: 80px; text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/3-2.png\" width=\"627\" height=\"352\" \/><\/p>\r\n<p style=\"padding-left: 40px; text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"padding-left: 80px; text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/4.png\" width=\"337\" height=\"146\" \/><\/p>\r\n<p style=\"padding-left: 80px; text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/5-1.png\" width=\"387\" height=\"225\" \/><\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>Setelah itu,&nbsp;<em>login&nbsp;<\/em>ke sanbercode.com kemudian akses kelas yang diikuti, pilih tab &lsquo;Kelola Tugas&rsquo;.<\/li>\r\n<\/ul>\r\n<p style=\"padding-left: 80px; text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/gambarss.png\" width=\"609\" height=\"138\" \/><\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>Setelah memilih tugas yang akan di input pada menu&nbsp;<em>drop-down<\/em>, klik tombol &lsquo;Input Tugas&rsquo;. Kemudian masukkan link commit tadi.<\/li>\r\n<\/ul>\r\n<p style=\"padding-left: 80px; text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/asd.png\" width=\"611\" height=\"194\" \/><\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>Tunggu hingga upload berhasil dan muncul&nbsp;<em>pop up <\/em>pemberitahuan bahwa tugas berhasil diinput.<\/li>\r\n<\/ul>\r\n<p style=\"padding-left: 80px; text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/sukses.png\" width=\"480\" height=\"295\" \/><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>","waktu_publish":"2021-10-25 08:00:00","status_publish":"publish","urutan":2,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-25 06:45:29","waktu_publish_formatted":" Senin, 25 Oktober 2021. 08:00:00 WIB."}]},{"id":349,"uuid":"f33bbd6c-3821-44fd-b35a-9a4765486712","materi_id":35,"nama":"Pekan 1 \u2013 Materi","permalink":"pekan-1-materi","urutan":2,"created_by":4336,"updated_by":4336,"created_at":"2021-08-09 16:42:06","updated_at":null,"posting":[{"id":1243,"uuid":"477f78a3-2a41-4714-87e4-dcaa2f80d47c","author_user_id":4336,"materi_section_id":349,"judul":"Hari Ke-1 \u2013 Command Line Interface","permalink":"hari-ke-1-command-line-interface","konten":"<p style=\"text-align: justify;\"><span style=\"font-size: 12pt;\"><strong><em>REFERENSI VIDEO MATERI CLI : <\/em><\/strong><em><a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7j5iX-dgLlBK1WBMZBY3pVd\">https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7j5iX-dgLlBK1WBMZBY3pVd<\/a><\/em><\/span><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\"><strong>Apa itu&nbsp;<em>command line Interface<\/em>?&nbsp;<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\"><em>Command line<\/em>&nbsp;<em>Interface<\/em>&nbsp;(CLI) atau yang biasa kita kenal cmd atau&nbsp;<em>command prompt<\/em>&nbsp;atau&nbsp;<em>terminal&nbsp;<\/em>adalah&nbsp;<em>software&nbsp;<\/em>atau antar muka untuk memberikan perintah-perintah dasar pada komputer kita. Biasanya kita mengoperasikan komputer seperti&nbsp;<em>browsing media<\/em>, mencari&nbsp;<em>file<\/em>, membuat&nbsp;<em>file&nbsp;<\/em>atau&nbsp;<em>folder<\/em>, dan lain-lain dengan GUI (<em>Graphical User Interface<\/em>) yang sudah disediakan pengembang Sistem Operasi seperti&nbsp;<em>Windows<\/em>,&nbsp;<em>Linux<\/em>, atau OSX. Akan tetapi, pada dasarnya kita juga bisa melakukan operasi-operasi tersebut dalam suatu perintah yang kita kirimkan melalui cmd\/<em>terminal<\/em>.<\/p>\r\n<p style=\"text-align: justify;\">Berikut ini beberapa contoh perintah yang dapat kita jalankan pada cmd\/terminal :<\/p>\r\n<p style=\"text-align: justify;\"><strong>1. Menuju <em>folder<\/em>\/direktori tertentu<\/strong><\/p>\r\n<p style=\"text-align: justify; padding-left: 40px;\">Untuk menuju posisi&nbsp;<em>folder&nbsp;<\/em>atau direktori tertentu bisa gunakan perintah&nbsp;cd&nbsp;atau kepanjangan dari&nbsp;<em>change directory<\/em><\/p>\r\n<pre style=\"padding-left: 40px;\">\/\/ Menuju Desktop<br \/>$ cd Desktop<br \/>\/\/ Menuju ke direktori <em>parent <\/em>(sebelumnya)<br \/>$ cd ..<\/pre>\r\n<p style=\"text-align: justify;\"><strong>2. Mengetahui alamat dari direktori yang sedang dibuka<\/strong><\/p>\r\n<p style=\"text-align: justify; padding-left: 40px;\">Terkadang kita butuh tahu sedang dimana posisi terminal kita berjalan. Perintah untuk fungsi ini yaitu&nbsp;pwd&nbsp;atau kependekan dari path of working directory<\/p>\r\n<pre style=\"padding-left: 40px;\">$ pwd<br \/>\/home\/users<br \/>\/\/ sedang berada di folder home\/users<\/pre>\r\n<p style=\"text-align: justify;\"><strong>3. Mengetahui daftar isi dari sebuah direktori\/<em>folder<\/em><\/strong><\/p>\r\n<p style=\"text-align: justify; padding-left: 40px;\">Kamu bisa gunakan perintah&nbsp;ls&nbsp;atau&nbsp;dir&nbsp;. contohnya sebagai berikut<\/p>\r\n<pre style=\"padding-left: 40px;\">$ ls<\/pre>\r\n<p style=\"text-align: justify; padding-left: 40px;\">Document Desktop Image index.html<\/p>\r\n<pre style=\"padding-left: 40px;\">$ dir<\/pre>\r\n<p style=\"text-align: justify; padding-left: 40px;\">Document Desktop Image index.html<\/p>\r\n<p style=\"text-align: justify;\"><strong>4. Membuat <em>folder<\/em>&nbsp;baru<\/strong><\/p>\r\n<p style=\"text-align: justify; padding-left: 40px;\">Perintahnya adalah&nbsp;mkdir&nbsp;atau singkatan dari&nbsp;<em>make directory<\/em>. contohnya sebagai berikut<\/p>\r\n<pre style=\"padding-left: 40px;\">\/\/ membuat folder baru bernama new-folder<br \/>$ mkdir new-folder<br \/><br \/>\/\/ mengecek apakah sudah berhasil buat folder baru<br \/>$ ls<br \/>new-folder ... ... <\/pre>\r\n<p style=\"text-align: justify;\"><strong>5. Membuat <em>file&nbsp;<\/em>baru<\/strong><\/p>\r\n<p style=\"text-align: justify; padding-left: 40px;\">Gunakan perintah&nbsp;touch&nbsp;untuk membuat file baru<\/p>\r\n<pre style=\"padding-left: 40px;\">\/\/ membuat <em>file <\/em>index.html<br \/>$ touch index.html<br \/><br \/>\/\/ mengecek apakah sudah berhasil buat <em>file <\/em>baru<br \/>$ ls<br \/>index.html ... ...<br \/><br \/><\/pre>\r\n<p style=\"text-align: left;\"><span style=\"font-size: 24pt;\"><span style=\"font-size: 18pt;\"><strong><em>Software terminal&nbsp;<\/em><\/strong><\/span><strong><span style=\"font-size: 18pt;\">\/&nbsp;<em>command line<\/em>&nbsp;yang direkomendasikan<\/span>&nbsp;<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Untuk OS Windows,&nbsp;<em>terminal&nbsp;<\/em>bawaannya adalah&nbsp;<em>command prompt<\/em>&nbsp;atau cmd yang relatif kurang nyaman untuk dipakai dalam tahap&nbsp;<em>development<\/em>. Oleh karena itu direkomendasikan untuk&nbsp;<em>install terminal<\/em>&nbsp;di bawah ini agar lebih optimal dalam mengerjakan&nbsp;<em>project&nbsp;<\/em>Contohnya seperti :<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>Git bash, Git bash biasanya ter-<em>install<\/em>&nbsp;jika kita meng-<em>install<\/em>&nbsp;<strong>git<\/strong> di pc\/laptop kita.<\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<hr \/>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 18pt;\"><strong><em>Frequent cases ( Kasus yang sering terjadi ):<\/em><\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/1.png\" width=\"598\" height=\"204\" \/><\/p>\r\n<p style=\"text-align: justify;\">Jika Anda mengetikkan sebuah perintah yang <strong>tidak dikenali<\/strong> oleh komputer Anda, maka anda akan mendapatkan pesan yang mengatakan [Command] tidak dikenali ( <em>is recognized as an internal ...<\/em> ) seperti gambar diatas dan perintah tidak akan menghasilkan apa pun.<\/p>\r\n<p style=\"text-align: justify;\">Perintah yang tidak dilakukan seperti itu sebenarnya bukanlah sebuah masalah, karena yang lebih berisiko adalah mengetik <strong>perintah yang salah <\/strong>secara tidak sengaja, atau menggunakan perintah dengan cara yang tidak Anda inginkan. Misalnya, saat mencoba menghapus satu file, Namun, anda mungkin secara tidak sengaja memintanya untuk menghapus seluruh folder. Solusinya tetap menyesuaikan perintah dan terminal apa yang akan anda gunakan sesuai kebutuhan.<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<hr \/>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\"><strong><em>Referensi lainnya Materi CLI&nbsp; :<\/em><\/strong><\/span><\/p>\r\n<ul>\r\n<li style=\"text-align: justify;\">co.id : <a href=\"https:\/\/www.hostinger.co.id\/tutorial\/apa-itu-cli\">https:\/\/www.hostinger.co.id\/tutorial\/apa-itu-cli<\/a><\/li>\r\n<li style=\"text-align: justify;\">id : <a href=\"https:\/\/www.techfor.id\/mengenal-command-line-interface-cli-dan-kelebihannya\/\">https:\/\/www.techfor.id\/mengenal-command-line-interface-cli-dan-kelebihannya\/<\/a><\/li>\r\n<li style=\"text-align: justify;\">W3school About CLI : <a href=\"https:\/\/www.w3schools.com\/whatis\/whatis_cli.asp\">https:\/\/www.w3schools.com\/whatis\/whatis_cli.asp<\/a><\/li>\r\n<li style=\"text-align: justify;\">com : <a href=\"https:\/\/www.makeuseof.com\/tag\/a-beginners-guide-to-the-windows-command-line\/\">https:\/\/www.makeuseof.com\/tag\/a-beginners-guide-to-the-windows-command-line\/<\/a><\/li>\r\n<\/ul>","waktu_publish":"2021-10-25 08:00:00","status_publish":"publish","urutan":1,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-25 10:40:37","waktu_publish_formatted":" Senin, 25 Oktober 2021. 08:00:00 WIB."},{"id":1244,"uuid":"2e2dfce9-00a6-49e9-97f0-1f008009a9d3","author_user_id":4336,"materi_section_id":349,"judul":"Hari Ke-1 \u2013 Git","permalink":"hari-ke-1-git","konten":"<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\"><strong>Apa itu Git ?<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Git adalah sebuah&nbsp;<em>Version Control System<\/em>&nbsp;yaitu sistem yang mengelola perubahan dari sebuah dokumen, program komputer, website dan kumpulan informasi lain. Selain itu, Git memungkinkan para pengembang perangkat lunak dari berbagai belahan dunia mengerjakan banyak projek bersama-sama tanpa mengharuskan bertatap muka.<\/p>\r\n<p style=\"text-align: justify;\">Git akan disimpan dalam sebuah folder atau directory project yang biasa di sebut <strong>Repository<\/strong><\/p>\r\n<h2 id=\"installasi-git\" style=\"text-align: justify;\"><strong>Installasi Git<\/strong><\/h2>\r\n<h3 id=\"installasi-di-windows-dan-mac\" style=\"text-align: justify;\"><code>Installasi di Windows dan Mac<\/code><\/h3>\r\n<p style=\"text-align: justify;\">Berikut ini cara untuk menginstall git ke dalam windows dan mac<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li style=\"text-align: justify;\">Download terlebih dahulu file instalasi nya dari halaman <a href=\"https:\/\/git-scm.com\/download\">download git<\/a>.&nbsp;<\/li>\r\n<\/ul>\r\n<p style=\"padding-left: 40px; text-align: justify;\">Berikut ini ilustrasi gambar halaman download git :<\/p>\r\n<p style=\"padding-left: 40px; text-align: justify;\">&nbsp;<img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/2.png\" alt=\"\" width=\"517\" height=\"386\" \/>&nbsp;<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li style=\"text-align: justify;\">Pilihlah sesuai reqruiment OS pada PC\/Laptop anda misalnya Windows \/ macOS \/ Linux<\/li>\r\n<li style=\"text-align: justify;\">Jika sudah terdownload, Jalankan file instalasi lalu ikuti instruksi instalasi,<\/li>\r\n<\/ul>\r\n<p style=\"padding-left: 40px; text-align: justify;\">Berikut ini contohnya&nbsp; : ( <strong>Klik next saja sampai selesai )<\/strong><\/p>\r\n<p style=\"padding-left: 40px; text-align: justify;\">&nbsp;<img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/3-1.png\" alt=\"\" width=\"452\" height=\"353\" \/>&nbsp;<\/p>\r\n<ul>\r\n<li>setelah instalasi selesai, kita dapat mengecek apakah Git sudah terinstall dengan cara membuka cmd atau command prompt lalu ketikkan perintah <code>git --version<\/code>.<\/li>\r\n<\/ul>\r\n<h3 id=\"installasi-di-ubuntu\" style=\"text-align: justify;\"><code>Installasi di Ubuntu<\/code><\/h3>\r\n<p style=\"text-align: justify;\">Berikut ini cara untuk menginstall git ke dalam ubuntu :<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li style=\"text-align: justify;\">Ubuntu versi 18.04 cukup masuk terminal lalu jalankan perintah <code>$ sudo apt update<\/code><\/li>\r\n<li style=\"text-align: justify;\">lalu jalankan perintah <code>$ sudo apt install git<\/code><\/li>\r\n<li style=\"text-align: justify;\"><code><\/code>Lalu anda bisa melihat apakah git kita sudah terinstall dengan mengetikkan perintah <code>git --version<\/code>&nbsp;di terminal<\/li>\r\n<\/ul>\r\n<h2 style=\"padding-left: 40px; text-align: justify;\"><strong><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/5.png\" alt=\"\" width=\"666\" height=\"161\" \/><\/strong><\/h2>\r\n<h2 id=\"setup-git\" style=\"text-align: justify;\"><strong>Setup Git<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">Setelah menginstall git dalam PC\/Laptop kita, hal yang di lakukan pertama atau selanjutnya adalah setup Konfigurasi dari git config email dan username seperti di bawah ini :<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li><code>git config --global user.name \"username anda\"<\/code><\/li>\r\n<li><code>git config --global user.email \"email anda\"<\/code><\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">Git config ini bertujuan sebagai username yang akan digunakan untuk indetitas dari sebuah commit, Jika sudah melakukan setup, anda dapat melihat hasil config ini dengan perintah :<\/p>\r\n<p style=\"padding-left: 40px; text-align: justify;\"><code>git config -l<\/code><\/p>\r\n<h2 id=\"perintah-dasar-git\" style=\"text-align: justify;\"><strong>Perintah Dasar Git<\/strong><\/h2>\r\n<h3 id=\"git-init\" style=\"text-align: justify;\"><code>git init<\/code><\/h3>\r\n<p style=\"text-align: justify;\"><code>git init<\/code>&nbsp;adalah perintah untuk <strong>inisialisasi <\/strong>atau memasangkan git pada sebuah repository yang sedang terbuka di command prompt atau terminal.<\/p>\r\n<p style=\"text-align: justify;\">ini merupakan contoh file .git setelah kita menjalankan git init :<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/Screenshot_48.png\" width=\"180\" height=\"76\" \/>&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">(untuk melihatnya centang hidden files untuk windows, sedangkan macos shif + command + .)<\/p>\r\n<h3 id=\"git-add\" style=\"text-align: justify;\"><code>git add&nbsp;<\/code><\/h3>\r\n<p style=\"text-align: justify;\"><code>git add<\/code> yaitu perintah git untuk <strong>menambahkan<\/strong> perubahan-perubahan didalam direktori project kita yang sebelumnya telah kita lakukan sebuah perubahan<strong>.<\/strong> Misalkan di repository project kita terdapat file index.html yang ingin kita simpan perubahannya maka perintah yang kita jalankan contohnya seperti ini :<\/p>\r\n<pre class=\"wp-block-code\"><code>$ git add index.html<\/code><\/pre>\r\n<h3 id=\"git-commit\" style=\"text-align: justify;\"><code>git commit<\/code>&nbsp;<\/h3>\r\n<p style=\"text-align: justify;\"><code>git commit<\/code> yaitu perintah dari git untuk <strong>menyimpan<\/strong> perubahan file yang ada di repository kita, namun file yang tersimpan itu belum terkirim ke <strong>remote repository<\/strong>. Perintah commit ini biasanya disertakan dengan&nbsp;-m \"Nama Commitan anda\".Berikut contoh perintah yang dapat kita jalankan :<\/p>\r\n<pre class=\"wp-block-code\"><code>git commit -m \"menambahkan index.html\"<\/code><\/pre>\r\n<h3 id=\"git-status\" style=\"text-align: justify;\"><code>git status<\/code><\/h3>\r\n<p style=\"text-align: justify;\"><code>git status<\/code>&nbsp;adalah perintah dalam git untuk <strong>memeriksa status<\/strong> repository, apakah ada file baru, perubahan pada file sudah di &ldquo;<code>git add<\/code> &rdquo; atau apakah perubahan sudah di commit atau belum.&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">NOTE :&nbsp; Keterangan merah pada terminal artinya ada file yang belum dilakukan &ldquo;git add &rdquo; artinya ada file yang belum disimpan perubahannya, Dan Jika keterangan warna hijau pada terminal artinya file sudah siap untuk dilakukan &ldquo;git commit&rdquo;<\/p>\r\n<h3 id=\"git-push\" style=\"text-align: justify;\"><code>git push<\/code><\/h3>\r\n<p style=\"text-align: justify;\"><code>git push<\/code> adalah perintah dalam git untuk mengirimkan perubahan perubahan file yang berhubungan pada repository local di PC\/Laptop kita kepada <strong>remote repository. <\/strong>Berikut contoh perintah yang dapat kita jalankan :<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li><code>git push<\/code><\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">Atau<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li><code>git push origin main<\/code>( &ldquo;main&rdquo; merupakan nama branch yang ada di remote repository yang kita gunakan )<\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\"><strong>Catatan : <\/strong>Penggunaan origin hanya menentukan repositori mana yang harus digunakan untuk push. Contohnya yang kita ingin push repository kita ke remote repository yang menggunakan nama branch main<\/p>\r\n<h3 id=\"git-pull\" style=\"text-align: justify;\"><code>git pull<\/code><\/h3>\r\n<p style=\"text-align: justify;\"><code>git pull <\/code>adalah perintah dalam git untuk mengabil perubahan terakhir dari repository di git<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\"><strong>Remote Repository<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Pada penjelasan diatas kita sudah melihat bahwa perubahan yang dilakukan pada Git akan selalu berhubungan dengan Remote repository, jadi apa itu remote repository ? Remote Repository adalah tempat dimana kita menyimpan <em>source-code <\/em>project kita ditempat lain. Biasanya remote repository yang sering digunakan adalah layanan seperti Github, Gitlab, dan yang lainnya.<\/p>\r\n<p style=\"text-align: justify;\"><strong><span style=\"font-size: 24pt;\">Clone Remote Repository<\/span><em> <\/em><\/strong><\/p>\r\n<p style=\"text-align: justify;\">Dalam Melakukan Clone Remote Repository, terdapat 2 cara yang berbeda untuk bisa kita terapkan jika ingin melakuka clone remote repository, yiaitu ada yang menggunakan Link Https dan Link SSH :<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 14pt;\"><strong>Cara clone <em>Remote Repository <\/em>menjadi Repository local ( Menggunakan Https ) :<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Biasanya untuk melakukan sebuah clone repository hanya menggunakan perintah :<\/p>\r\n<pre>git clone https:\/\/gitlab.com\/yogimahaputra\/demo-git.git<\/pre>\r\n<p style=\"text-align: justify;\">Berikut ini contoh beberapa cara-cara untuk clone sebuah remote repository kedalam PC\/Laptop kita :<\/p>\r\n<p style=\"text-align: justify;\"><strong>Clone repository baru :<\/strong><\/p>\r\n<pre style=\"padding-left: 40px;\">git clone https:\/\/gitlab.com\/yogimahaputra\/demo-git.git<br \/>cd demo-git<br \/>touch README.md<br \/>git add README.md<br \/>git commit -m \"add README\"<br \/>git push origin main<\/pre>\r\n<p style=\"text-align: justify;\"><strong>Mendorong folder yang sudah ada untuk menjadikannya remote repository<\/strong><\/p>\r\n<pre style=\"padding-left: 40px;\">cd demo-git<br \/>git init&nbsp;<br \/>git remote add origin https:\/\/gitlab.com\/yogimahaputra\/demo-git.git<br \/>git add .<br \/>git commit -m \"Initial commit\"<br \/>git push origin main<\/pre>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 14pt;\"><strong>Cara clone <em>Remote Repository <\/em>menjadi Repository local ( Menggunakan SSH ) :<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Untuk Clone Remote Repository menggunakan SSH, kalian dapat membaca cara penggunaannya melalui referensi berikut ini :<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li><a href=\"https:\/\/www.petanikode.com\/github-ssh\/\">https:\/\/www.petanikode.com\/github-ssh\/<\/a><\/li>\r\n<li><a href=\"https:\/\/rakitaplikasi.com\/blog\/cara-menggunakan-ssh-di-github\">https:\/\/rakitaplikasi.com\/blog\/cara-menggunakan-ssh-di-github<\/a><\/li>\r\n<li><a href=\"https:\/\/docs.github.com\/en\/github\/authenticating-to-github\/connecting-to-github-with-ssh\">https:\/\/docs.github.com\/en\/github\/authenticating-to-github\/connecting-to-github-with-ssh<\/a><\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\"><strong>DISARANKAN : <\/strong>kepada teman-teman yang baru mengenal GIT kalian cukup clone menggunakan Https saja untuk membiasakan menggunakan Git dan Remote Repository<\/p>\r\n<p style=\"padding-left: 40px; text-align: justify;\">&nbsp;<\/p>\r\n<hr \/>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 18pt;\"><strong><em>Referensi Video&nbsp;<\/em><\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Materi Git lainnya dapat dicoba melalui video kelas dari referensi berikut :&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">Web Programming UNPAS &ndash; GIT - <a href=\"https:\/\/www.youtube.com\/watch?v=lTMZxWMjXQU&amp;list=PLFIM0718LjIVknj6sgsSceMqlq242-jNf\">link video<\/a>&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">Trainer kelas ReactJs : <a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7j5iX-dgLlBK1WBMZBY3pVd\">Link Ini<\/a><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\"><strong><em>Referensi lainnya Materi GIT&nbsp; :<\/em><\/strong><\/span><\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li><a href=\"https:\/\/docs.github.com\/en\/github\/creating-cloning-and-archiving-repositories\/cloning-a-repository-from-github\/cloning-a-repository\">https:\/\/docs.github.com\/en\/github\/creating-cloning-and-archiving-repositories\/cloning-a-repository-from-github\/cloning-a-repository<\/a><\/li>\r\n<li><a href=\"https:\/\/training.github.com\/downloads\/id\/github-git-cheat-sheet\/\">https:\/\/training.github.com\/downloads\/id\/github-git-cheat-sheet\/<\/a><\/li>\r\n<li>niagahoster.co.id : <a href=\"https:\/\/www.niagahoster.co.id\/blog\/git-tutorial-dasar\/\">https:\/\/www.niagahoster.co.id\/blog\/git-tutorial-dasar\/<\/a><\/li>\r\n<li>hostinger.co.id : <a href=\"https:\/\/www.hostinger.co.id\/tutorial\/tutorial-git-dasar-cara-menggunakan-git\">https:\/\/www.hostinger.co.id\/tutorial\/tutorial-git-dasar-cara-menggunakan-git<\/a><\/li>\r\n<li>warungprogram.com : <a href=\"http:\/\/www.warungprogram.com\/belajar-git\/\">http:\/\/www.warungprogram.com\/belajar-git\/<\/a><\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>","waktu_publish":"2021-10-25 08:00:00","status_publish":"publish","urutan":2,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-25 09:39:00","waktu_publish_formatted":" Senin, 25 Oktober 2021. 08:00:00 WIB."},{"id":1245,"uuid":"abf58b34-3e29-4f7d-afb5-ab3868edd3aa","author_user_id":4336,"materi_section_id":349,"judul":"Hari Ke-2 \u2013 HTML","permalink":"hari-ke-2-html","konten":"<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\"><strong>Apa itu HTML ?<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">HTML merupakan singkatan dari <em>Hyper Text Markup Language<\/em>. HTML adalah sebuah bahasa standar untuk pembuatan halaman web. Dengan adanya HTML, kita dapat membedakan struktur yang tersusun dari sebuah halaman melalui tag atau elemen-elemen penyusunnya.<\/p>\r\n<p style=\"text-align: justify;\">Elemen atau tag pada HTML dikenali oleh browser seperti google chrome, firefox atau Ms Edge, dll. Browser tersebut mengidentifikasi setiap elemen penyusun HTML dan ditampilkan sesuai karakteristik elemen tersebut. Contohnya sebuah elemen paragraph akan ditampilkan sebagai tulisan panjang, atau sebuah elemen pranala\/link akan dicetak dengan warna biru dan ketika mouse mendekat kursornya berubah menjadi telunjuk, dsb.<\/p>\r\n<p style=\"text-align: justify;\">Contoh sebuah struktur HTML sederhana:<\/p>\r\n<p style=\"line-height: 1; text-align: justify;\"><code>&lt;!DOCTYPE html&gt;<\/code><\/p>\r\n<p style=\"line-height: 1; text-align: justify;\"><code>&lt;html&gt;<\/code><\/p>\r\n<p style=\"line-height: 1; text-align: justify;\"><code>&lt;head&gt;<\/code><\/p>\r\n<p style=\"line-height: 1; text-align: justify;\"><code>&lt;title&gt;Page Title&lt;\/title&gt;<\/code><\/p>\r\n<p style=\"line-height: 1; text-align: justify;\"><code>&lt;\/head&gt;<\/code><\/p>\r\n<p style=\"line-height: 1; text-align: justify;\"><code>&lt;body&gt;<\/code><\/p>\r\n<p style=\"line-height: 1; text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;h1&gt;My First Heading&lt;\/h1&gt;<\/code><\/p>\r\n<p style=\"line-height: 1; text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;p&gt;My first paragraph.&lt;\/p&gt;<\/code><\/p>\r\n<p style=\"line-height: 1; text-align: justify;\"><code>&lt;\/body&gt;<\/code><\/p>\r\n<p style=\"line-height: 1; text-align: justify;\"><code>&lt;\/html&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">Dari contoh struktur HTML sederhana di atas kita dapat mengidentifikasi beberapa hal seperti berikut :<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>&lt;!DOCTYPE html&gt; mengartikan bahwa dokumen ditulis dengan versi HTML5<\/li>\r\n<li>&lt;html&gt;&nbsp;adalah elemen induk atau elemen utama yang sering disebut juga root element dari sebuah halaman HTML.<\/li>\r\n<li>&lt;head&gt;&nbsp;berisi informasi tentang halaman HTML yang sedang dibuat<\/li>\r\n<li>&lt;title&gt; adalah judul dari halaman HTML yang akan tampil di tab browser.<\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\"><strong>Elemen &amp; Hirarki pada HTML&nbsp; <\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\"><strong>Elemen HTML<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Elemen atau sering disebut dengan <strong>tag<\/strong> pada HTML adalah penyusun dari sebuah halaman web yang dapat dikenali oleh browser dan ditampilkan oleh browser sesuai karakteristik masing-masing. Sebuah elemen HTML terdiri dari tag pembuka(start\/open tag), atribut (attribute), isi (content), dan tag penutup (close tag). Berikut ini ilustrasi Tag pada html<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/6.png\" alt=\"\" width=\"415\" height=\"113\" \/><\/p>\r\n<p style=\"text-align: justify;\">Pada ilustrasi di atas merupakan contoh sebuah elemen paragraph dengan tag &lt;p&gt;&nbsp;. Di dalam tag tersebut terdapat atribut&nbsp;class&nbsp;yang disematkan ke dalam tag. Isi atau content dari sebuah tag&nbsp;<em>paragraph&nbsp;<\/em><em>&lt;p&gt;<\/em><em>&nbsp;<\/em>akan ditampilkan sebagai paragraf. lalu terakhir sebuah tag ditutup dengan sebuah tag penutup <em>&lt;\/p&gt;<\/em><em>&nbsp;<\/em>.<\/p>\r\n<p style=\"text-align: justify;\"><strong>Catatan&nbsp; : <\/strong><em>Tidak semua elemen HTML memiliki tag penutup seperti&nbsp;: &nbsp;<\/em><em>&lt;input&gt; &lt;img&gt; &lt;meta&gt;<\/em><em>&nbsp;.<\/em><\/p>\r\n<p style=\"text-align: justify;\">Pada contoh di bawah ini Kita dapat melihat bahwa struktur dasar HTML dituliskan dari beberapa elemen. Pada setiap elemen HTML terdapat dua tag, yaitu pembuka tag &lt;&gt; dan penutup tag &lt;\/&gt;.<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;!DOCTYPE html&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;html&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;body&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;h1&gt;My First Heading&lt;\/h1&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;p&gt;My first paragraph.&lt;\/p&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;\/body&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;\/html&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code><strong>&nbsp;<\/strong><\/code><\/p>\r\n<p style=\"text-align: justify;\"><strong>Hirarki HTML<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Didalam Sebuah <strong>elemen<\/strong> HTML dapat terisi dengan elemen-elemen lain di dalamnya. Semua dokumen HTML yang kita lihat di halaman web terdiri dari kumpulan elemen <strong>bersarang<\/strong> atau <strong>elemen yang mengandung elemen lain <\/strong>di dalamnya. Contohnya setelah tag pembuka dan sebelum penutup sebuah elemen, kita dapat meletakkan sebuah konten. Konten dapat berupa teks ataupun sebuah Tag HTML yang lain.<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/7.jpg\" alt=\"\" width=\"468\" height=\"258\" \/><\/p>\r\n<p style=\"text-align: justify;\">Pada hirarki elemen HTML diatas, Contohnya tag &lt;html&gt; memiliki konten yaitu elemen &lt;head&gt; dan juga tag &lt;body&gt;. Lalu, elemen &lt;head&gt; memiliki konten berupa elemen &lt;title&gt; yang di dalamnya memiliki konten berupa teks dari judul halaman yang ditampilkan. Begitu pula dengan elemen lainnya.<\/p>\r\n<p style=\"text-align: justify;\"><strong>Catatan<\/strong> : Untuk Konten dari setiap elemen itu sebenernya masih banyak lagi, namun contoh konten dari elemen diatas hanya beberapa saja atau yang pertama untuk kita ketahui.<\/p>\r\n<p style=\"text-align: justify;\">Berikut ini merupakan tampilan sebuah Website yang kita bangun menggunakan HTML :<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/8.png\" alt=\"\" width=\"819\" height=\"426\" \/><\/p>\r\n<p style=\"text-align: justify;\">Dengan Struktur HTML sederhana sebagai Berikut :<\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;!DOCTYPE html&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;html&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;head&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Page&nbsp;Title&lt;\/title&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;\/head&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;body&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;Selamat&nbsp;datang&nbsp;Di&nbsp;kelas&nbsp;ReactJs&nbsp;&lt;\/h1&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;Ini&nbsp;adalah&nbsp;sebuah&nbsp;paragraf.&nbsp;&lt;\/p&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&lt;b&gt;Sanbercode&lt;\/b&gt;&nbsp;membantu&nbsp;Anda&nbsp;belajar&nbsp;&lt;b&gt;intensif&lt;\/b&gt;&nbsp;membuat&nbsp;website,&nbsp;mobile&nbsp;apps,&nbsp;data&nbsp;science,&nbsp;desain&nbsp;grafis,&nbsp;dan&nbsp;lainnya.<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/p&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp; &lt;img&nbsp;src=\"https:\/\/sanbercode.com\/assets\/img\/identity\/logo-horizontal.svg\"&nbsp;width=\"100\"&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;\/body&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;\/html&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<hr \/>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 18pt;\"><strong>Video Pembahasan Materi dari Trainer Kelas :<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Video pembahasan materi hari 2: <a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7jrSznGII8nlHKP_ZM92nc6\">https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7jrSznGII8nlHKP_ZM92nc6<\/a><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 18pt;\"><strong><em>Referensi Video&nbsp;:<\/em><\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Materi HTML lainnya dapat dicoba melalui video kelas dari referensi berikut :&nbsp;<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>Sekolah Koding:&nbsp;- <a href=\"https:\/\/www.youtube.com\/playlist?list=PLCZlgfAG0GXC9ojTmU95BRefbJoi4clY-\">link video&nbsp;<\/a><\/li>\r\n<li>Arkademy :&nbsp;- <a href=\"https:\/\/www.youtube.com\/playlist?list=PLf61QUuMoXcPC1Yc2km8B5qwWJgQ_7NZr\">link video&nbsp;<\/a><\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 18pt;\"><strong><em>Referensi lainnya Materi HTML&nbsp; :<\/em><\/strong><\/span><\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>w3schools &nbsp;: <a href=\"https:\/\/www.w3schools.com\/html\/default.asp\"><em>https:\/\/www.w3schools.com\/html\/default.asp<\/em><\/a>&nbsp;<\/li>\r\n<li>jadiguru &nbsp;: <a href=\"https:\/\/www.jadiguru.com\/2020\/11\/struktur-dasar-html.html\">https:\/\/www.jadiguru.com\/2020\/11\/struktur-dasar-html.html<\/a><\/li>\r\n<li>hostinger &nbsp;: <a href=\"https:\/\/www.hostinger.co.id\/tutorial\/apa-itu-html\">https:\/\/www.hostinger.co.id\/tutorial\/apa-itu-html<\/a><\/li>\r\n<li>glints &nbsp;: <a href=\"https:\/\/glints.com\/id\/lowongan\/pengertian-html-adalah\/#.YPzsXY4zY2w\">https:\/\/glints.com\/id\/lowongan\/pengertian-html-adalah\/#.YPzsXY4zY2w<\/a><\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>","waktu_publish":"2021-10-26 08:00:00","status_publish":"publish","urutan":3,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-26 08:55:27","waktu_publish_formatted":" Selasa, 26 Oktober 2021. 08:00:00 WIB."},{"id":1246,"uuid":"ee7ae948-405b-4bff-a869-56bea838ff0d","author_user_id":4336,"materi_section_id":349,"judul":"Hari Ke-2 \u2013 CSS","permalink":"hari-ke-2-css","konten":"<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\"><strong>Apa Itu CSS ?<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Cascading Style Sheet atau dikenal dengan CSS merupakan bahasa style sheet yang berguna untuk membantu menyajikan dokumen yang ditulis dengan HTML. CSS dipakai untuk mendesain halaman depan atau tampilan website (<em>front end<\/em>). Menggunakan CSS kita bisa mengatur warna , ukuran , posisi ,&nbsp;<em>background<\/em>, dan lain lain. Sehingga ada nilai estetika yang ditambahkan dalam tampilan suatu website. Perhatikan ilustrasi dibawah ini :<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/9-Copy.png\" alt=\"\" width=\"374\" height=\"350\" \/><\/p>\r\n<p style=\"text-align: justify;\">Jika diibaratkan seorang manusia, struktur HTML pada website berperan sebagai kerangka dasar yang digunakan dalam menampilkan visual pada website. Tapi jika hanya kerangka saja, manusia akan terlihat menyeramkan bukan ? Di sinilah peran CSS yang akan membuat seorang manusia mempunyai tampilan yang cantik sama halnya seperti sebuah website yang akan kita bangun nantinya<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\"><strong>Istilah di dalam CSS <\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Pada CSS ada beberapa istilah biasa kita temukan diantara : <em>selector , properti, dan value<\/em> . Kita mempelajari terlabih dahulu pengertian dari ketiga istilah tersebut.<\/p>\r\n<p style=\"text-align: justify;\">\/\/contoh css<\/p>\r\n<p style=\"text-align: justify;\">h2 {<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; font-family: sans;<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; color: rgb(10, 8, 8);<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;&nbsp;&nbsp; }<\/p>\r\n<p>Pada Contoh diatas, <strong>selektor <\/strong>adalah h2, <strong><em>properti<\/em><\/strong> pada contoh diatas adalah font-family dan color dan <strong><em>value<\/em><\/strong> pada contoh diatas adalah sans dan rgb(10, 8, 8).<\/p>\r\n<ul>\r\n<li style=\"text-align: justify;\"><strong>Selektor<\/strong>&nbsp;adalah metode pengelompokan syntax didalam CSS. Selector juga dapat diartikan sebagai aturan yang digunakan untuk memisahkan beberapa syntax dengan target yang berbeda.<\/li>\r\n<li style=\"text-align: justify;\"><strong>Properti<\/strong>&nbsp;adalah suatu jenis style CSS yang berfungsi memberikan style pada selector yang telah ditentukan. Property pada CSS sangat banyak sekali. Banyak contoh properti css seperti :&nbsp;background-color,&nbsp;color,&nbsp;font-family,&nbsp;font-size,&nbsp;margin,&nbsp;padding&nbsp;dan lain lain.<\/li>\r\n<li style=\"text-align: justify;\"><strong>Value<\/strong>&nbsp;adalah nilai dari property . Dan value harus bersesuaian dengan properti, misalnya properti&nbsp;\"font-family\"&nbsp;tidak bisa diisi&nbsp;\"red\"&nbsp;karena&nbsp;\"red\"&nbsp;adalah value untuk property&nbsp;\"color\".<\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">Berikut ini bentuk baku dalam penulisan selektor , properti dan value :<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/10.png\" alt=\"\" width=\"483\" height=\"122\" \/><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\"><strong>Cara Penulisan Kode CSS dalam HTML&nbsp;<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Terdapat 3 cara yang berbeda dalam menuliskan kode CSS kedalam HTML, yaitu inline, internal dan eksternal. Simak penjelasan dibawah ini :<\/p>\r\n<p style=\"text-align: justify;\"><strong>&zwnj;Internal CSS<\/strong><br \/>Penulisan CSS didalam tag&nbsp;&lt;head&gt;&nbsp;atau&nbsp;&lt;body&gt;&nbsp;HTML. Penulisannya ditulis dalam tag&nbsp;&lt;style&gt;&nbsp;.<\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;!DOCTYPE html&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;html&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;head&gt;&nbsp;&nbsp;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp; &lt;style type=\"text\/css\"&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp; p{<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; font-family: Helvetica;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; line-height: 2.00 em;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; font-size: 20px;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; color: orange;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp; }<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp; &lt;\/style&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;\/head&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;body&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp; &lt;style type=\"text\/css\"&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp; h2 {<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; font-family: sans;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; color: rgb(10, 8, 8);<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp;&nbsp;&nbsp; }<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp; &lt;\/style&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp; &lt;h2&gt;Hello CSS&lt;\/h2&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&nbsp; &lt;p&gt;Hello aku bisa CSS&lt;\/p&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;\/body&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>&lt;\/html&gt;<\/code><\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/11.png\" alt=\"\" width=\"586\" height=\"326\" \/><\/p>\r\n<p style=\"text-align: justify;\">Gambar\/Contoh Internal CSS dalam HTML dan tampilannya<\/p>\r\n<p style=\"text-align: justify;\"><strong>Eksternal CSS<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Penulisan CSS terpisah dengan file HTML. File CSS ditulis dan disimpan dengan file berekstensi .css .Untuk memasukkan ekstensi CSS ke HTML menggunakan tag&nbsp;&lt;link href=\"dirfolder\/namefile.css\"&gt;.&nbsp;href&nbsp;diisi direktori folder dan nama file CSS untuk mengarahkan halaman html menemukan file CSS tersebut.<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/12.png\" alt=\"\" width=\"615\" height=\"240\" \/><\/p>\r\n<p style=\"text-align: justify;\">Gambar &lt;kiri&gt; file HTML dan &lt;kanan&gt; style.css<\/p>\r\n<p style=\"text-align: justify;\"><strong>Inline CSS<\/strong><br \/>Penulisan CSS langsung di atribut HTML tersebut. Contoh cara pemakaian inline CSS:<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/13.png\" alt=\"\" width=\"332\" height=\"461\" \/><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<hr \/>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\"><strong>Video Pembahasan Materi Trainer Kelas<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Berikut ini video pembahasan materi hari 2: <a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7jrSznGII8nlHKP_ZM92nc6\">https:\/\/www.youtube.com\/watch?v=k-d4MqpIUbM<\/a><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\"><strong><em>Referensi Video<\/em><\/strong><\/span><\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>Tutorial CSS dari Sekolah Coding:&nbsp;<a href=\"https:\/\/www.youtube.com\/playlist?list=PLCZlgfAG0GXAvVZ1Wb1D7HVAPNJGk4f-G\">https:\/\/www.youtube.com\/playlist?list=PLCZlgfAG0GXAvVZ1Wb1D7HVAPNJGk4f-G<\/a><\/li>\r\n<li>CSS Dasar dari Web Programming Unpas :<a href=\"https:\/\/www.youtube.com\/playlist?list=PLFIM0718LjIUBrbm6Gdh6k7ZUvPIAZm7p\">https:\/\/www.youtube.com\/playlist?list=PLFIM0718LjIUBrbm6Gdh6k7ZUvPIAZm7p<\/a><\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\"><strong><em>Referensi Lainnya Materi CSS<\/em><\/strong><\/span><\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>W3schools <a href=\"https:\/\/www.w3schools.com\/cssref\/\">https:\/\/www.w3schools.com\/cssref\/<\/a><\/li>\r\n<li><u>eplusgo : <\/u><a href=\"https:\/\/www.eplusgo.com\/cara-penulisan-kode-css\/\">https:\/\/www.eplusgo.com\/cara-penulisan-kode-css\/<\/a><\/li>\r\n<li><a href=\"http:\/\/isdhadahlia.blogspot.com\/2020\/07\/anatomi-website.html\">http:\/\/isdhadahlia.blogspot.com\/2020\/07\/anatomi-website.html<\/a><u> <\/u><\/li>\r\n<li><u>petanikode : https:\/\/www.petanikode.com\/css-untuk-pemula\/<\/u><\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>","waktu_publish":"2021-10-26 08:00:00","status_publish":"publish","urutan":4,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-26 06:00:17","waktu_publish_formatted":" Selasa, 26 Oktober 2021. 08:00:00 WIB."},{"id":1247,"uuid":"c93f86ee-1ebd-469f-8150-f34f61c5e418","author_user_id":4336,"materi_section_id":349,"judul":"Hari Ke-3 \u2013 Javascript Intro","permalink":"hari-ke-3-javascript-intro","konten":"<div class=\"entry-content\">\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Apa itu Javascript&nbsp;?<\/span><\/p>\r\n<p style=\"text-align: justify;\">Javascript merupakan salah satu bahasa pemrograman yang terpopuler di dunia. Javascript membuat aplikasi web menjadi interaktif tanpa reload halaman. Hampir semua browser modern yang kita ketahui dapat menjalankan javascript agar website yang ditampilkan lebih menarik. Perhatikan Ilustrasi dibawah ini :<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/9.png\" alt=\"\" width=\"368\" height=\"230\" \/><\/p>\r\n<p style=\"text-align: justify;\">Jika kita sudah tahu betapa pentingnya CSS untuk membuat tampilan menjadi lebih menarik dari pada sebuah kerangka saja, maka Javascript berfungsi sebagai sebuah otak, otot dan saraf agar seorang manusia dapat dinamis dan berinteraksi. Dalam website disini JavaScript-lah yang berperan dalam membuat website yang dinamis dan interaktif.<\/p>\r\n<p id=\"menjalankan-javascript\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Menjalankan Javascript&nbsp;<\/span><\/p>\r\n<p style=\"text-align: justify;\">Ada bermacam cara untuk menjalankan kode javascript yang kita buat, di antaranya:<\/p>\r\n<ol style=\"text-align: justify;\">\r\n<li>Menjalankan javascript di console browser<\/li>\r\n<li>Menjalankan javascript di tools online seperti&nbsp;<a href=\"https:\/\/jsbin.com\/?js,console\" target=\"_blank\" rel=\"noreferrer noopener\" data-type=\"URL\" data-id=\"https:\/\/jsbin.com\/?js,console\">jsbin<\/a><a href=\"https:\/\/jsbin.com\/?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">.com<\/a><\/li>\r\n<li>Menjalankan javascript dengan nodejs<\/li>\r\n<\/ol>\r\n<p style=\"text-align: justify;\">Pada materi ini kita akan mencoba untuk menjalankan script dengan nodejs dan teman-teman bisa juga untuk mencoba kode langsung menggunakan jsbin.com<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 32px;\">Apa itu NodeJs ?<\/span><\/p>\r\n<p style=\"text-align: justify;\"><strong>Nodejs <\/strong>adalah software berbasis pemrograman javascript yang dijalankan di sisi server. Jika biasanya javascript kita kenal erat kaitannya dengan client\/browser tapi dengan nodejs ini kita bisa membangun server menggunakan bahasa javascript.<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>Berikut ini cara menginstall NodeJs<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Pertama-tama tentu kita harus menginstall terlebih dahulu nodejs di komputer kita. Berikut ini link untuk download&nbsp;<a href=\"https:\/\/nodejs.org\/en\/download\/\">nodejs<\/a>&nbsp;(disarankan memilih versi LTS). Untuk OS Windows dan macOs tinggal diikuti saja instalasinya sampai selesai, sedangkan untuk Ubuntu 18.04 kamu bisa install mengikuti&nbsp;<a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-install-node-js-on-ubuntu-18-04\">tutorial dari digitalocean<\/a>.<\/p>\r\n<p style=\"text-align: justify;\">Untuk Melihat apakah instalasi nodejs sudah berhasil kita bisa jalankan script di terminal kita:<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: justify;\"><img class=\"wp-image-7178\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-42.png\" sizes=\"(max-width: 691px) 100vw, 691px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-42.png 691w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-42-300x55.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-42-683x126.png 683w\" alt=\"\" width=\"691\" height=\"126\" \/><\/figure>\r\n<p style=\"text-align: justify;\">dengan perintah tersebut, diketahui saat ini terinstall node dengan versi 12.16.2 dan npm versi 6.14.4 (untuk versi bisa menggunakan yang terbaru ini hanya contoh untuk mengecek version nya)<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>Cara Menjalankan Javascript menggunakan NodeJs<\/strong><\/p>\r\n<ul>\r\n<li>Buatlah file dengan nama &ldquo;index.js&rdquo;&nbsp; ( File index.js ini berfungsi untuk menuliskan script javascript dan kita akan menjalankan javascriptnya dengan nodejs )<\/li>\r\n<li>Tulislah code dibawah ini ke dalam file index.js seperti berikut:<\/li>\r\n<\/ul>\r\n<pre class=\"wp-block-preformatted\" style=\"padding-left: 80px;\"><code>var sayHello = \"Hello World!\" \r\nconsole.log(sayHello)<\/code><\/pre>\r\n<ul>\r\n<li style=\"text-align: justify;\">kemudian simpan file tersebut (save).<\/li>\r\n<li style=\"text-align: justify;\">Setelah itu kita bisa menjalankan script pada index.js tersebut dengan memberikan perintah seperti berikut pada terminal:<\/li>\r\n<\/ul>\r\n<pre class=\"wp-block-preformatted\" style=\"padding-left: 80px;\"><code>$ node index.js<\/code><\/pre>\r\n<ul>\r\n<li style=\"text-align: justify;\">Secara otomatis pada terminal kita akan muncul &ldquo;<code>Hello World!<\/code>&rdquo; . (Selamat Anda telah berhasil menjalankan program pertama Anda ^_^)<\/li>\r\n<\/ul>\r\n<p>Demikian cara untuk menjalankan Javascript dengan nodejs.<\/p>\r\n<h2 style=\"text-align: justify;\">&nbsp;<\/h2>\r\n<p><span style=\"font-size: 24pt;\">Penulisan Syntax Javascript<\/span><\/p>\r\n<h2 id=\"variable\" style=\"text-align: justify;\"><strong>Variable Javascript<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">Variable adalah suatu blok data atau wadah untuk menampung sekumpulan data dengan berbagai tipe data apapun. Dengan variable kita bisa menyimpan suatu nilai untuk kemudian kita olah kembali pada program kita. Untuk deklarasi variable dalam javascript kita bisa gunakan sintaks&nbsp;<code>var<\/code>&nbsp;lalu diikuti nama variablenya.<\/p>\r\n<p><code>var name = \"John\" \/\/ Tipe<\/code><\/p>\r\n<p><code>var angka = 12<\/code><\/p>\r\n<p><code>var todayIsFriday = false<\/code><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><code>console.log(name) \/\/ \"John\"<\/code><\/p>\r\n<p><code>console.log(angka) \/\/ 12<\/code><\/p>\r\n<p><code>console.log(todayIsFriday) \/\/ false<\/code><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>Waspadai<\/strong> pendeklarasian variable yang tidak bernilai !<\/p>\r\n<p><code>var items<\/code><\/p>\r\n<p><code>console.log(items) \/\/ Undefined<\/code><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode tersebut disini&nbsp; :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><a href=\"https:\/\/jsbin.com\/xohorabohu\/1\/edit?js,console\"><span style=\"color: #000000;\">klik disini<\/span><\/a><\/p>\r\n<h2 id=\"data-type\" style=\"text-align: justify;\"><strong>Data Type Javascript<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">Data Type atau dalam bahasa indonesia Tipe Data adalah sekumpulan informasi yang memiliki nilai dan karakteristik tertentu. Beberapa contoh tipe data pada javascript di antaranya:<\/p>\r\n<ol style=\"text-align: justify;\">\r\n<li><strong>Integer<\/strong>: tipe data yang berupa angka<\/li>\r\n<li><strong>String<\/strong>&nbsp;: tipe data berupa text atau kumpulan karakter, biasanya string dibungkus dalam tanda petik ganda (double quote) atau tanda petik tunggal (single quote).<\/li>\r\n<li><strong>Boolean:&nbsp;<\/strong>tipe data dengan nilai&nbsp;<code>true<\/code>&nbsp;atau&nbsp;<code>false<\/code><\/li>\r\n<\/ol>\r\n<p>&nbsp;<\/p>\r\n<p><span style=\"font-size: 24pt;\">String dalam Javascript<\/span><\/p>\r\n<p style=\"text-align: justify;\">String adalah tipe data yang berisi karakter-karakter dibungkus dalam tanda petik (<code>\"\"<\/code>&nbsp;atau&nbsp;<code>''<\/code>&nbsp;). Karakter-karakter pada suatu string dapat diakses dengan menggunakan indeks atau posisi karakter berada. Indeks pada string selalu mulai dari 0.<\/p>\r\n<code>var sentences = \"Javascript\" <\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(sentences[0]) \/\/ \"J\"\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(sentences[2]) \/\/ \"v\"<\/code>\r\n<p>&nbsp;<\/p>\r\n<p><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode tersebut disini&nbsp; :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><a href=\"https:\/\/jsbin.com\/gonawej\/edit?js,console\"><span style=\"color: #000000;\">klik disini<\/span><\/a><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p><span style=\"font-size: 24pt;\">String Properties dan Methods dalam Javascript<\/span><\/p>\r\n<p style=\"text-align: justify;\">String pada javascript juga memiliki property dan methods tertentu. Property dan methods tersebut bisa kita gunakan dalam memanipulasi data agar sesuai dengan program yang kita inginkan.<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">Anda dapat mencoba kode dibawah ini disini&nbsp; :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><a href=\"https:\/\/jsbin.com\/takozup\/1\/edit?js,console\"><span style=\"color: #000000;\">klik disini<\/span><\/a><\/p>\r\n<h3 id=\"string-properties\" class=\"has-vivid-red-color has-text-color\" style=\"text-align: justify;\"><strong>String Properties&nbsp;<\/strong><\/h3>\r\n<p style=\"text-align: justify;\"><strong>.length<\/strong><br \/>mengembalikan panjang atau jumlah karakter pada suatu string.<\/p>\r\n<code>var word = \"Javascript is awesome\"\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(word.length) \/\/ 21 <\/code>\r\n<h3 class=\"has-vivid-red-color has-text-color\" style=\"text-align: justify;\">&nbsp;<\/h3>\r\n<h3 id=\"string-methods\" class=\"has-vivid-red-color has-text-color\" style=\"text-align: justify;\"><strong>String Methods<\/strong><\/h3>\r\n<p style=\"text-align: justify;\"><strong>.charAt([indeks])<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Mengembalikan karakter pada indeks yang diinginkan<\/p>\r\n<code>console.log('i am a string'.charAt(3)); \/\/ 'm'<\/code>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>.concat([string])<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Menggabungkan beberapa string dan mengembalikannya menjadi string baru.<\/p>\r\n<code>var string1 = 'good';\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var string2 = 'luck';\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(string1.concat(string2)); \/\/ goodluck<\/code>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>.indexOf([string\/karakter])<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Mengembalikan indeks dari string\/karakter yang dicari, yang pertama kali ditemukan, atau -1 apabila tidak ditemukan.<\/p>\r\n<code>var text = 'dung dung ces!';\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(text.indexOf('dung'));  \/\/ 0\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(text.indexOf('u'));     \/\/ 1\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(text.indexOf('jreng')); \/\/ -1<\/code>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>.substring([indeks awal], [indeks akhir (optional)])<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Mengembalikan potongan string mulai dari indeks pada parameter pertama (indeks awal) sampai dengan indeks pada parameter kedua (indeks akhir). Bila parameter kedua tidak ditentukan, maka secara otomatis berakhir pada karakter terakhir. Karakter pada indeks yang ditentukan pada parameter kedua tidak diikutkan sebagai output.<\/p>\r\n<code>var car1 = 'Lykan Hypersport';\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var car2 = car1.substr(6);\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(car2); \/\/ Hypersport<\/code>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>.substr([indeks awal], [jumlah karakter yang diambil (optional)])<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Mendapatkan potongan string mulai dari indeks pada parameter pertama (indeks awal) dengan jumlah indeks pada parameter kedua (jumlah karakter). Bila parameter kedua tidak ditentukan, maka secara otomatis berakhir pada karakter terakhir. Karakter pada indeks yang ditentukan pada parameter kedua tidak diikutkan sebagai output.<\/p>\r\n<code>var motor1 = 'zelda motor';\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var motor2 = motor1.substr(2, 2);\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(motor2); \/\/ ld<\/code>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>.toUpperCase()<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Mengembalikan string baru dengan semua karakter yang diubah menjadi huruf kapital.<\/p>\r\n<code>var letter = 'This Letter Is For You';\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var upper  = letter.toUpperCase();\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(upper); \/\/ THIS LETTER IS FOR YOU<\/code>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>.toLowerCase()<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Mengembalikan string baru dengan semua karakter yang diubah menjadi huruf kecil<\/p>\r\n<code>var letter = 'This Letter Is For You';\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var lower  = letter.toLowerCase();\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(lower); \/\/ this letter is for you<\/code>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>.trim()<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Mengembalikan string baru yang sudah dihapus karakter&nbsp;<em>whitespace<\/em>&nbsp;(&rdquo; &ldquo;) pada awal dan akhir string tersebut.<\/p>\r\n<code>var username    = ' administrator ';\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var newUsername = username.trim(); <\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(newUsername) \/\/ 'administrator'<\/code>\r\n<p class=\"has-vivid-red-color has-text-color\" style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p id=\"mengubah-tipe-data-dari-dan-ke-string\" class=\"has-vivid-red-color has-text-color\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Mengubah tipe data dalam Javascript<\/span><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">Anda dapat mencoba kode dibawah ini disini&nbsp; :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><a href=\"https:\/\/jsbin.com\/qenalas\/1\/edit?js,console\"><span style=\"color: #000000;\">klik disini<\/span><\/a><\/p>\r\n<p style=\"text-align: justify;\">Di Javascript terkadang kita ingin mengubah sebuah data string menjadi tipe data lain atau sebaliknya. Contoh diperoleh data angka tapi dalam tipe data String maka kita dapat mengubah string tersebut menjadi tipe data angka.<\/p>\r\n<p style=\"text-align: justify;\"><strong>String([angka\/array])<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Fungsi global&nbsp;<code>String()<\/code>&nbsp;dapat dipanggil kapan saja pada program JavaScript dan akan mengembalikan data dalam tipe data String dari parameter yang diberikan.<\/p>\r\n<code>var int  = 12;\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var real = 3.45;\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var arr  = [6, 7, 8];<\/code><\/div>\r\n<div class=\"entry-content\"><code><\/code><\/div>\r\n<div class=\"entry-content\"><code>var strInt  = String(int);\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var strReal = String(real);\r\nv<\/code><\/div>\r\n<div class=\"entry-content\"><code>ar strArr  = String(arr);<\/code><\/div>\r\n<div class=\"entry-content\"><code><\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(strInt);  \/\/ '12'\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(strReal); \/\/ '3.45'\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(strArr);  \/\/ '6,7,8'<\/code>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>.toString()<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Mengonversi tipe data lain menjadi string. Bila data tersebut adalah array, setiap nilai akan dituliskan dan dipisah dengan karakter koma.<\/p>\r\n<code>var number = 21;\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(number.toString()); \/\/ '21'\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var array = [1,2];\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>console.log(array.toString());  \/\/ '1,2'<\/code>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>Number([String])<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Fungsi global&nbsp;<code>Number()<\/code>&nbsp;mengonversi tipe data string menjadi angka. Data yang diberikan pada parameter harus berupa karakter angka saja, dengan titik (separator) bila angka adalah bilangan desimal. Bila parameter berisi karakter selain angka dan\/atau titik,&nbsp;<code>Number()<\/code>&nbsp;akan mengembalikan&nbsp;<strong>NaN<\/strong>&nbsp;<strong><em>(Not a Number)<\/em><\/strong>.<\/p>\r\n<code>var number1 = Number(\"90\");   \/\/ <\/code><code>number1 = 90\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var number2 = Number(\"1.23\"); \/\/ number2 = 1.23\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var number3 = Number(\"4 5\");  \/\/ number3 = NaN<\/code><\/div>\r\n<div class=\"entry-content\">\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>parseInt([String]) dan parseFloat([String])<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Fungsi global&nbsp;<code>parseInt([String])<\/code>&nbsp;dan&nbsp;<code>parseFloat([String])<\/code>&nbsp;mengembalikan angka dari string. Bila angka adalah bilangan desimal maka gunakan&nbsp;<code>parseFloat()<\/code>, bila tidak bilangan dibelakang koma akan diabaikan.<\/p>\r\n<code>var int  = '89';\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var real = '56.7';\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var strInt_1 = parseInt(int);  \/\/ strInt_1 = 89\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var strInt_2 = parseInt(real); \/\/ strInt_2 = 56\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var strReal_1 = parseFloat(int); \/\/ strReal_1 = 89\r\n<\/code><\/div>\r\n<div class=\"entry-content\"><code>var strReal_2 = parseFloat(real); \/\/ strReal_2 = 56.7<\/code><br \/><br \/>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p id=\"operator\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Operator Dalam Javascript<\/span><\/p>\r\n<p style=\"text-align: justify;\">Operator adalah karakter khusus yang merepresentasikan sebuah tindakan. Operator terbagi ke dalam beberapa jenis:<\/p>\r\n<p><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode dibawah ini disini&nbsp; :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><a href=\"https:\/\/jsbin.com\/quyehup\/edit?js,console\"><span style=\"color: #000000;\">klik disini<\/span><\/a><\/p>\r\n<ol style=\"text-align: justify;\">\r\n<li>Operator Aritmatika Operator yang melibatkan operasi matematika seperti tambah, kurang, kali, bagi.\r\n<ul>\r\n<li>Tambah&nbsp;<strong>(+)<\/strong><\/li>\r\n<li>Kurang (<strong>&ndash;<\/strong>)<\/li>\r\n<li>Kali (<strong>*<\/strong>)<\/li>\r\n<li>Bagi (<strong>\/<\/strong>)<\/li>\r\n<li>Modulus (<strong>%<\/strong>)<br \/>Modulus adalah sisa bagi. Contohnya 5%3 hasilnya adalah 2, 100%5 hasilnya 0.<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Operator Assignment (<code>=<\/code>), Operator untuk mendaftarkan atau meng-assign suatu nilai ke dalam suatu variable\r\n<pre class=\"wp-block-preformatted\"><code>var angka<\/code> <br \/><code>angka = 10 \/\/ Contoh assignment variable angka dengan nilai 10<\/code><\/pre>\r\n<\/li>\r\n<li>Operator Perbandingan, Operator yang membandingkan suatu nilai dengan nilai yang lain. Hasil dari perbandingan ini akan dikembalikan dalam tipe data boolean&nbsp;<code>true<\/code>&nbsp;atau&nbsp;<code>false<\/code>.\r\n<ul>\r\n<li>Equal Operator (<code>==<\/code>)\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 100<\/code><br \/><code>console.log(angka == 100) \/\/ true<\/code><br \/><code>console.log(angka == 20) \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>Not Equal (<code>&nbsp;!=<\/code>&nbsp;)\r\n<pre class=\"wp-block-preformatted\"><code>var sifat = \"rajin\"<\/code><br \/><code>console.log(sifat != \"malas\") \/\/ true<\/code><br \/><code>console.log(sifat != \"bandel\") \/\/true <\/code><\/pre>\r\n<\/li>\r\n<li>Strict Equal (&nbsp;<code>===<\/code>&nbsp;) Selain membandingkan dua nilai nya, strict equal juga membandingkan tipe datanya apakah sama atau tidak\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 8<\/code><br \/><code>console.log(angka == \"8\") \/\/ true, padahal \"8\" adalah string.<\/code><br \/><code>console.log(angka === \"8\") \/\/ false, karena tipe data nya berbeda<\/code><br \/><code>console.log(angka === 8) \/\/ true <\/code><\/pre>\r\n<\/li>\r\n<li>Strict not Equal (&nbsp;<code>!==<\/code>&nbsp;) Kebalikan dari strict equal.\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 11<\/code><br \/><code>console.log(angka != \"11\") \/\/ false, padahal \"11\" adalah string<\/code><br \/><code>console.log(angka !== \"11\") \/\/ true, karena tipe datanya berbeda<\/code><br \/><code>console.log(angka !== 11) \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>Kurang dari &amp; Lebih Dari (&nbsp;<code>&lt;<\/code>,&nbsp;<code>&gt;<\/code>,&nbsp;<code>&lt;=<\/code>,&nbsp;<code>&gt;=<\/code>)\r\n<pre class=\"wp-block-preformatted\"><code>var number = 17<\/code><br \/><code>console.log( number &lt; 20 ) \/\/ true<\/code><br \/><code>console.log( number &gt; 17 ) \/\/ false<\/code><br \/><code>console.log( number &gt;= 17 ) \/\/ true, karena terdapat sama dengan<\/code><br \/><code>console.log( number &lt;= 20 ) \/\/ true<\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Operator Kondisional, Operator yang mengkombinasikan dua nilai kebenaran . Terdapat operator AND (<code>&amp;&amp;<\/code>) dan OR (<code>||<\/code>)\r\n<ul>\r\n<li>OR (&nbsp;<code>||<\/code>&nbsp;)\r\n<pre class=\"wp-block-preformatted\"><code>console.log(true || true); \/\/ true<\/code><br \/><code>console.log(true || false); \/\/ true<\/code><br \/><code>console.log(true || false || false); \/\/ true<\/code><br \/><code>console.log(false || false); \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>AND (&nbsp;<code>&amp;&amp;<\/code>&nbsp;)\r\n<pre class=\"wp-block-preformatted\"><code>console.log(true &amp;&amp; true); \/\/ true<\/code><br \/><code>console.log(true &amp;&amp; false); \/\/ false<\/code><br \/><code>console.log(false &amp;&amp; false); \/\/ false<\/code><br \/><code>console.log(false &amp;&amp; true &amp;&amp; true); \/\/ false<\/code><br \/><code>console.log(true &amp;&amp; true &amp;&amp; true); \/\/ true <\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ol>\r\n<hr \/>\r\n<h2 id=\"referensi-tambahan\" style=\"text-align: justify;\"><strong>Video Pembahasan Materi<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">berikut ini video pembahasan materi hari 3: <a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7gV2QOAzWaFyG8eAXygFCLv\">https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7gV2QOAzWaFyG8eAXygFCLv<\/a><\/p>\r\n<h2 style=\"text-align: justify;\"><strong>Referensi<\/strong><\/h2>\r\n<ul style=\"text-align: justify;\">\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_variables.asp\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"JavaScript Variables By W3School (opens in a new tab)\">JavaScript Variables By W3School<\/a><\/li>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_operators.asp\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">JavaScript Operator By W3School<\/a><\/li>\r\n<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/String\" target=\"_blank\" rel=\"noreferrer noopener\">String by Mozilla Developer Network<\/a><\/li>\r\n<li><a href=\"http:\/\/www.w3schools.com\/jsref\/jsref_obj_string.asp\" target=\"_blank\" rel=\"noreferrer noopener\">JavaScript String Reference by W3School<\/a><\/li>\r\n<li><a href=\"http:\/\/www.w3schools.com\/js\/js_type_conversion.asp\" target=\"_blank\" rel=\"noreferrer noopener\">JavaScript Type Conversion<\/a><\/li>\r\n<li><a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-string-reference.md#length\" target=\"_blank\" rel=\"noreferrer noopener\">github hacktiv8 phase 0 materials<\/a><\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<\/div>\r\n<div id=\"gtx-trans\" style=\"position: absolute; left: 207px; top: 3825.31px;\">\r\n<div class=\"gtx-trans-icon\" style=\"text-align: justify;\">&nbsp;<\/div>\r\n<\/div>","waktu_publish":"2021-10-27 08:00:00","status_publish":"publish","urutan":5,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-27 07:53:04","waktu_publish_formatted":" Rabu, 27 Oktober 2021. 08:00:00 WIB."},{"id":1248,"uuid":"93132b4c-908d-402e-b96e-c6c11f908876","author_user_id":4336,"materi_section_id":349,"judul":"Hari Ke-3 \u2013 Javascript Conditional","permalink":"hari-ke-3-javascript-conditional","konten":"<div class=\"entry-content\">\r\n<p><span style=\"font-size: 24pt;\">Conditional Dalam Javascript<\/span><\/p>\r\n<p>Conditional merupakan cara yang digunakan dalam program komputer untuk mengambil keputusan dari kemungkinan benar(true) atau salah(false) terhadap beberapa kondisi.<\/p>\r\n<h2 id=\"kondisional-dengan-if-else-if-else\"><strong><code>if \/ else if \/ else<\/code>&nbsp;<\/strong><\/h2>\r\n<p><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode dibawah ini disini&nbsp; :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><a href=\"https:\/\/jsbin.com\/rikinuj\/edit?js,console\"><span style=\"color: #000000;\">klik disini<\/span><\/a><\/p>\r\n<ul>\r\n<li>Contoh 1 menjalankan kode jika premis bernilai&nbsp;<code>true<\/code>\r\n<pre class=\"wp-block-preformatted\"><code>if ( true ) {<\/code><br \/><code>    console.log(\"jalankan code\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<li>Contoh 2 kode tidak dijalankan jika premis bernilai&nbsp;<code>false<\/code>\r\n<pre class=\"wp-block-preformatted\"><code>if ( false ) {<\/code><br \/><code>    console.log(\"code tidak dijalankan\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<li>Contoh 3 Premis dengan perbandingan suatu nilai\r\n<pre class=\"wp-block-preformatted\"><code>var mood = \"happy\"<\/code><br \/><code>if ( mood == \"happy\" ) {<\/code><br \/><code>    console.log(\"hari ini aku bahagia!\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<p>Di dalam conditional dikenal juga dengan istilah branching atau percabangan. Dengan percabangan kita bisa mengecek nilai kebenaran dari berbagai premis yang kita sediakan. cara menambahkan kondisi atau premis lain dari premis pertamanya adalah dengan sintaks&nbsp;<code>else<\/code>&nbsp;. Contohnya ketika kita diminta untuk membeli telur dan buah ke minimarket oleh ibu kita maka akan banyak sekali kondisi atau kemungkinan yang terjadi dalam perjalanan kita membeli barang-barang tersebut di supermarket.<\/p>\r\n<ul>\r\n<li>Contoh 4 Branching sederhana\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"open\"<\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarketnya tutup\")<br \/>}<\/code><\/pre>\r\n<p>Kondisi else di atas adalah kondisi selain&nbsp;<code>minimarketStatus == \"open\"<\/code>&nbsp;.<\/p>\r\n<\/li>\r\n<li>Contoh 5 Branching dengan kondisi\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"close\"<\/code><br \/><code>var minuteRemainingToOpen = 5<\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>} else if ( minuteRemainingToOpen &lt;= 5 ) {<\/code><br \/><code>    console.log(\"minimarket buka sebentar lagi, saya tungguin\")<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarket tutup, saya pulang lagi\")<br \/>}<\/code><\/pre>\r\n<p>contoh di atas kita memberikan kondisi tambahan yaitu jika minimarket akan buka kurang atau sama dengan 5 menit lagi maka saya akan menunggu.<\/p>\r\n<\/li>\r\n<\/ul>\r\n<p>Selain Branching atau percabangan, conditional juga dapat memiliki sarang atau tumpukan yaitu terdapat conditional di dalam sebuah kondisional.<\/p>\r\n<ul>\r\n<li>Contoh 6 conditional bersarang\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"open\"<\/code><br \/><code>var telur = \"soldout\"<\/code><br \/><code>var buah = \"soldout\" <\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>    if(telur == \"soldout\" || buah == \"soldout\" ) {<\/code><br \/><code>        console.log(\"belanjaan saya tidak lengkap\")    <\/code><br \/><code>    } else if( telur == \"soldout\") {<\/code><br \/><code>        console.log(\"telur habis\")<\/code><br \/><code>    } else if ( buah == \"soldout\" ) {<\/code><br \/><code>        console.log(\"buah habis\")<\/code><br \/><code>    }<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarket tutup, saya pulang lagi\")<\/code><br \/><code>}<\/code><\/pre>\r\n<p>pada kondisi di atas minimarketnya sudah buka lalu cek kondisi selanjutnya cek apakah telur atau buah habis. Karena kondisinya adalah jika telur ATAU buah salah satunya ada yang soldout maka belanjaan saya lengkap. Demikian seterusnya akan mengecek kondisi-kondisi yang disediakan dalam logika program yang dibuat.<\/p>\r\n<\/li>\r\n<\/ul>\r\n<h2 id=\"kondisional-dengan-switch-case\"><strong><code>Switch Case<\/code><\/strong>&nbsp;<\/h2>\r\n<p><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode dibawah ini disini&nbsp; :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><a href=\"https:\/\/jsbin.com\/susexav\/edit?js,console\"><span style=\"color: #000000;\">klik disini<\/span><\/a><\/p>\r\n<p>Cara lain untuk melakukan pengondisian atau conditional adalah dengan&nbsp;<code>switch case<\/code>. Penggunaan switch case mirip seperti kita menyalakan tombol switch pada remote. Jika kondisi tombol yang dipijit adalah tombol dengan nomer tertentu maka akan menjalankan prorgram tertentu.<\/p>\r\n<ul>\r\n<li>Contoh 7 Kondisional dengan&nbsp;<code>switch case<\/code>\r\n<pre class=\"wp-block-preformatted\"><code>var buttonPushed = 1;<\/code><br \/><code>switch(buttonPushed) {<\/code><br \/><code>  case 1:   { console.log('matikan TV!'); break; }<\/code><br \/><code>  case 2:   { console.log('turunkan volume TV!'); break; }<\/code><br \/><code>  case 3:   { console.log('tingkatkan volume TV!'); break; }<\/code><br \/><code>  case 4:   { console.log('matikan suara TV!'); break; }<\/code><br \/><code>  default:  { console.log('Tidak terjadi apa-apa'); }}<\/code><\/pre>\r\n<p>Pada kode di atas, switch akan mengevaluasi nilai&nbsp;<code>buttonPushed<\/code>&nbsp;jika&nbsp;<code>case<\/code>&nbsp;yang ditemui cocok dengan nilai yang diberikan maka kode pada&nbsp;<code>case<\/code>&nbsp;tersebut akan dijalankan sehingga pada console akan dimunculkan &ldquo;<code>matikan TV!<\/code>&ldquo;. Pada setiap case terdapat&nbsp;<code>break<\/code>&nbsp;yang berfungsi untuk menghentikan proses switch agar tidak menjalankan case yang lain. Juga terdapat&nbsp;<code>default<\/code>&nbsp;yaitu kondisi dimana tidak ditemukan&nbsp;<code>case&nbsp;<\/code>yang sesuai.<\/p>\r\n<\/li>\r\n<\/ul>\r\n<h2 id=\"kondisional-dengan-switch-case\"><strong><code>Ternary Operator<\/code><\/strong>&nbsp;<\/h2>\r\n<p><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode dibawah ini disini&nbsp; :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><a href=\"https:\/\/jsbin.com\/nisezuy\/edit?js,console\"><span style=\"color: #000000;\">klik disini<\/span><\/a><\/p>\r\n<p>ternary operator merupakan pengondisian yang bisa di buat dengan satu baris,&nbsp; biasanya di deklarasi kan di variabel, berikut ini contoh dari ternary operator:<br \/><br \/><code>var age= 20<br \/>var bisaVote= age &gt; 20 ? \"bisa vote\" : \"belum bisa vote\" \/\/ hasilnya belum bisa vote<br \/>var angka = 9<br \/>var jenisBilangan = angka % 2 === 0 ? \"Bilangan Genap\" : \"Bukan Bilangan Genap\" \/\/hasilnya bukan bilangan genap<\/code><code><\/code><\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>\r\n<h2 id=\"referensi-tambahan\"><strong>Video Pembahasan Materi<\/strong><\/h2>\r\n<p>berikut ini video pembahasan materi hari 3: <a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7gV2QOAzWaFyG8eAXygFCLv\">https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7gV2QOAzWaFyG8eAXygFCLv<\/a><\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-10-27 08:00:00","status_publish":"publish","urutan":6,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-27 07:53:26","waktu_publish_formatted":" Rabu, 27 Oktober 2021. 08:00:00 WIB."},{"id":1249,"uuid":"4847f9cd-6624-4866-bafd-48fc72bbc2a8","author_user_id":4336,"materi_section_id":349,"judul":"Hari Ke-4 \u2013 Javascript Loop","permalink":"hari-ke-4-javascript-loop","konten":"<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Loop di Javascript<\/span><\/p>\r\n<p style=\"text-align: justify;\">Loop\/Iteration adalah tindakan mengulang sebuah proses, dengan tujuan untuk mendapatkan deret hasil, atau dengan tujuan mendapatkan hasil tertentu dengan perulangan. Setiap proses perulangan ini disebut sebagai Iteration atau <em>Looping<\/em>.<\/p>\r\n<p style=\"text-align: justify;\">Untuk melakukan looping\/iteration, JavaScript menyediakan beberapa jenis iteration, yaitu <em>while-loop<\/em> dan <em>for-loop<\/em><\/p>\r\n<p id=\"while-loop\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">While-loop<\/span><\/p>\r\n<p style=\"text-align: justify;\">While-loop adalah iterasi yang akan mengulang sebuah proses dengan sebuah kondisi tertentu.<\/p>\r\n<p style=\"text-align: justify;\">Berikut adalah cara atau struktur penulisan while-loop:<\/p>\r\n<pre class=\"wp-block-preformatted\">while([Kondisi]) { \/\/ Kondisi yang menentukan apakah program akan melakukan iterasi. \r\n\/\/ Berupa boolean atau true\/false.\r\n  [Proses] \/\/ Merupakan proses yang akan dijalankan dalam satu iterasi\r\n}<\/pre>\r\n<p style=\"text-align: justify;\">Pada while-loop, statement&nbsp;<code>while<\/code>&nbsp;akan mengambil sebuah nilai&nbsp;<code>true<\/code>&nbsp;atau&nbsp;<code>false<\/code>&nbsp;dari hasil kondisi yang diberikan. Apabila statement&nbsp;<code>while<\/code>&nbsp;mendapatkan nilai&nbsp;<code>true<\/code>, maka proses yang berada didalam curly bracket (<code>{ }<\/code>) akan dijalankan. Looping akan terus dilakukan selama kondisi while-loop masih&nbsp;<code>true<\/code>.<\/p>\r\n<p style=\"text-align: justify;\">Untuk mencegah looping berjalan terus-menerus, dilakukan sebuah proses yang akan mengubah kondisi yang sedemikian rupa yang bertujuan untuk menghentikan looping dengan menghasilkan kondisi yang&nbsp;<code>false<\/code>.<\/p>\r\n<p style=\"text-align: justify;\"><strong>Contoh Looping While-loop 1<\/strong>&nbsp;Looping Angka 1-9 Sederhana<\/p>\r\n<pre class=\"wp-block-preformatted\">var flag = 1;\r\nwhile(flag &lt; 10) { \/\/ Loop akan terus berjalan selama nilai flag masih dibawah 10\r\n  console.log('Iterasi ke-' + flag); \/\/ Menampilkan nilai flag pada iterasi tertentu\r\n  flag++; \/\/ Mengubah nilai flag dengan menambahkan 1\r\n}<\/pre>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode diatas :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <a href=\"https:\/\/jsbin.com\/pahure\/1\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/span><\/p>\r\n<p style=\"text-align: justify;\"><strong>Contoh Looping While-loop 2<\/strong>&nbsp;Looping Mengembalikan Angka Total<\/p>\r\n<pre class=\"wp-block-preformatted\">var deret = 5;\r\nvar jumlah = 0;\r\nwhile(deret &gt; 0) { \/\/ Loop akan terus berjalan selama nilai deret masih di atas 0\r\n  jumlah += deret; \/\/ Menambahkan nilai variable jumlah dengan angka deret\r\n  deret--; \/\/ Mengubah nilai deret dengan mengurangi 1\r\n  console.log('Jumlah saat ini: ' + jumlah)\r\n}\r\n \r\nconsole.log(jumlah);<\/pre>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode diatas :&nbsp;<\/span><\/span> <a href=\"https:\/\/jsbin.com\/nolocam\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<p style=\"text-align: justify;\"><strong>Contoh Looping While-loop 3<\/strong>&nbsp;Looping dengan Kondisi<\/p>\r\n<pre>var i = 0;<br \/><br \/>while( i &lt; 5){<br \/><br \/>&nbsp; if(i === 3){<br \/><br \/> &nbsp;&nbsp; console.log(\"Ini While dengan Kondisi\")<br \/>&nbsp; }else{<br \/><br \/> &nbsp;&nbsp;&nbsp;&nbsp; console.log(i)<br \/>  }<br \/>  i++;<br \/>}<\/pre>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;<\/span><\/span><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">Anda dapat mencoba kode diatas :&nbsp;<\/span><\/span> <a href=\"https:\/\/jsbin.com\/nolocam\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<h2 id=\"for-loop\" style=\"text-align: justify;\"><strong>For-loop&nbsp;<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">For-loop adalah bentuk lain dari iterasi, dimana statement&nbsp;<code>for<\/code>&nbsp;menjadi kontrol atas loop yang dilakukan. Hal ini yang menjadi pembeda antara for-loop dengan while-loop.<\/p>\r\n<p style=\"text-align: justify;\">Berikut adalah cara atau struktur penulisan for-loop:<\/p>\r\n<pre class=\"wp-block-preformatted\">for([Inisialisasi], [Kondisi], [Incremental\/Decremental]) {\r\n  [Proses] \/\/ Merupakan proses yang akan dijalankan dalam satu iterasi\r\n} <\/pre>\r\n<p style=\"text-align: justify;\">Pada for-loop, statement&nbsp;<code>for<\/code>&nbsp;akan menampung tiga parameter, yaitu sebut saja inisialisasi, kondisi, dan incremental\/decremental. Ketiga parameter ini akan menjadi kontrol kapan loop ini harus berhenti. Pada parameter pertama, yaitu inisialisasi, sebuah variable diberikan nilai awal atau default. Pada parameter kedua, yaitu kondisi, for-loop akan terus berjalan selama kondisi ini masih terpenuhi, dengan kata lain, mengandung nilai&nbsp;<code>true<\/code>. Pada parameter kedua, yaitu incremental\/decremental, variabel yang menjadi kontrol terhadap loop ini akan diubah nilainya.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p><em>Best Practice:<\/em>&nbsp;Walaupun memang for-loop dapat mengubah kondisi di dalam proses, namun best practice dari penggunaan for-loop adalah seluruh kendali atau kontrol dari looping ditentukan oleh variable yang diinisialisasi, di increment\/decrement, dan juga kondisi for-loop pun menggunakan variable tersebut.<\/p>\r\n<\/blockquote>\r\n<p style=\"text-align: justify;\">Untuk memudahkan kamu mendapatkan gambaran jelas tentang penggunaan for-loop, mari kita gunakan kedua contoh while-loop dan kita tulis ulang dalam bentuk for-loop.<\/p>\r\n<p style=\"text-align: justify;\"><strong>Contoh Looping For-loop 1<\/strong>&nbsp;Looping Angka 1-9 Sederhana<\/p>\r\n<pre class=\"wp-block-preformatted\">for(var angka = 1; angka &lt; 10; angka++) {\r\n  console.log('Iterasi ke-' + angka);\r\n} <\/pre>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode diatas :&nbsp;<\/span><\/span> <a href=\"https:\/\/jsbin.com\/dijukel\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<p style=\"text-align: justify;\"><strong>Contoh Looping For-loop 2<\/strong>&nbsp;Looping Mengembalikan Angka Total<\/p>\r\n<pre class=\"wp-block-preformatted\">var jumlah = 0;\r\nfor(var deret = 5; deret &gt; 0; deret--) {\r\n  jumlah += deret;\r\n  console.log('Jumlah saat ini: ' + jumlah);\r\n}\r\n \r\nconsole.log('Jumlah terakhir: ' + jumlah);<\/pre>\r\n<p style=\"text-align: justify;\"><a href=\"https:\/\/jsbin.com\/xukega\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\"><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode diatas :&nbsp;<\/span><\/span>di sini<\/a><\/p>\r\n<p style=\"text-align: justify;\"><strong>Contoh Looping For-loop 3<\/strong>&nbsp;Looping Dengan Increment dan Decrement Lebih dari 1<\/p>\r\n<pre class=\"wp-block-preformatted\">for(var deret = 0; deret &lt; 10; deret += 2) {\r\n  console.log('Iterasi dengan Increment counter 2: ' + deret);\r\n}\r\n \r\nconsole.log('-------------------------------');\r\n \r\nfor(var deret = 15; deret &gt; 0; deret -= 3) {\r\n  console.log('Iterasi dengan Decrement counter : ' + deret);\r\n} <\/pre>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>Contoh Looping For-loop 4<\/strong> Looping Kondisi<\/p>\r\n<pre>for(var i = 0; i &lt;= 6 ; i++){<br \/>  if(i === 3){<br \/> &nbsp;&nbsp; console.log(\"ini For-Loop dengan Kondisi\")<br \/>  }else{<br \/> &nbsp;&nbsp; console.log(i)<br \/>  }<br \/>}<\/pre>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<h4 style=\"text-align: justify;\"><strong>Waspadai Infinite Looping!<\/strong><\/h4>\r\n<p style=\"text-align: justify;\">Dengan sengaja atau tidak sengaja, kode kamu mungkin dapat menghasilkan infinite looping, atau looping yang tidak akan pernah berhenti. Bila ini terjadi, segera periksa statement kondisi kamu.<\/p>\r\n<pre class=\"wp-block-preformatted\" style=\"text-align: justify;\">var flag = 1; <br \/>while(flag &lt; 10) { <br \/>  \/\/ Loop akan terus berjalan, karena nilai flag tidak pernah berubah <br \/>  console.log('Iterasi ke-' + flag);<br \/>} <br \/><br \/><\/pre>\r\n<h2 id=\"referensi-tambahan\" style=\"text-align: justify;\"><strong>Video Pembahasan Materi<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">berikut ini video pembahasan materi hari 4: <a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7hx_d0vQ0RIKMjxxTu1D2Fw\">https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7hx_d0vQ0RIKMjxxTu1D2Fw<\/a><br \/><br \/><br \/><strong>Sumber<\/strong>: <a style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-first-time.md#loopiteration\" target=\"_blank\" rel=\"noreferrer noopener\">github hacktiv8 phase 0 materials<\/a><\/p>","waktu_publish":"2021-10-28 08:00:00","status_publish":"publish","urutan":7,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-28 08:00:57","waktu_publish_formatted":" Kamis, 28 Oktober 2021. 08:00:00 WIB."},{"id":1250,"uuid":"f0bc0c89-1d36-4412-8994-6f82d7d2ef54","author_user_id":4336,"materi_section_id":349,"judul":"Hari Ke-4 \u2013 Javascript Array","permalink":"hari-ke-4-javascript-array","konten":"<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Array Javascript<\/span><\/p>\r\n<p style=\"text-align: justify;\">Array adalah kumpulan atau tumpukan berbagai data. Cara menuliskan array yaitu dengan kurung siku ([]) dan elemen-elemen nya dipisah menggunakan tanda koma (,). Setiap elemen dari array memiliki indeks yang dimulai dari 0, 1, 2,dan seterusnya, untuk mengakses indeks tersebut cukup dengan menggunakan kurung siku beserta indexnya misalnya array[0] ( yang berarti array dengan indeks 0 ).<\/p>\r\n<p style=\"text-align: justify;\">Berikut ini merupakan ilustrasi dan pendefinisan dari &nbsp;sebuah array :<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/14.jpg\" alt=\"\" width=\"360\" height=\"183\" \/><\/p>\r\n<p><code>var array = [2, 5, 1, 3, 4]<\/code><\/p>\r\n<p><code>console.log( array[0] ) \/\/\/ outputnya -&gt; 2<\/code><\/p>\r\n<p><code>console.log( array[2] ) \/\/\/ outputnya -&gt; 1<\/code><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">Array juga dapat kita manipulasi dengan berbagai cara seperti menambahkan dan mengeluarkan elemen dalam array, menggabungkan array, atau bahkan menghapus seluruh elemen Array nya. Kita bisa memasukkan beberapa tipe data yang berbeda ke dalam Array bahkan memasukkan Array ke dalam Array.<\/p>\r\n<p style=\"text-align: justify;\">Array juga memiliki property&nbsp;<code>.length<\/code>&nbsp;seperti pada string yang berarti panjang dari sebuah array.<\/p>\r\n<pre class=\"wp-block-preformatted\">var hobbies = [\"coding\", \"cycling\", \"climbing\", \"skateboarding\"] \r\nconsole.log(hobbies) \/\/ [ 'coding', 'cycling', 'climbing', 'skateboarding' ]\r\nconsole.log(hobbies.length) \/\/ 4 \r\n \r\nconsole.log(hobbies[0]) \/\/ coding\r\nconsole.log(hobbies[2]) \/\/ climbing\r\n\/\/ Mengakses elemen terakhir dari array\r\nconsole.log(hobbies[hobbies.length -1] \/\/ skateboarding<\/pre>\r\n<p id=\"metode-array\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Metode Array&nbsp;<\/span><\/p>\r\n<p style=\"text-align: justify;\">Berikut ini adalah beberapa metode atau built-in functions yang dimiliki oleh tipe data array:<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li class=\"\">push: menambah 1 nilai ke array ke index paling belakang<\/li>\r\n<li class=\"\">pop: menghapus 1 nilai dari array index paling belakang<\/li>\r\n<li class=\"\">unshift: menambah 1 nilai ke array index paling depan (index 0)<\/li>\r\n<li class=\"\">shift: menghapus 1 nilai dari array index paling depan (index 0)<\/li>\r\n<li class=\"\">join: menggabungkan seluruh element array menjadi sebuah string dan mengambil parameter sebagai simbol penyambung antar elemen<\/li>\r\n<li class=\"\">sort: mengurutkan elemen di dalam array sesuai alphabet<\/li>\r\n<li class=\"\">slice: mengambil beberapa lapis data<\/li>\r\n<li class=\"\">splice: mengubah nilai array dengan menghapus dan\/atau menambah nilai baru ke array<\/li>\r\n<li class=\"\">split: memecah string dan mengembalikan array sesuai dengan separator \/ pemisah yang didefinisikan<\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">Beberapa metode array ada yang mengembalikan nilai array lama yang sudah diperbarui (array lama di-update) dengan metode tersebut , dan ada pula metode array yang mengembalikan sebuah array baru dan tidak mengubah data pada array yang lama (array baru yang serupa dengan array lama). Sifat seperti ini disebut mutable atau immutable.<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p><span style=\"font-size: 24pt;\">Implementasi metode Array&nbsp;<\/span><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">Berikut ini cara kita menggunakan metode array adalah dengan menggunakan tanda dot (<code>.<\/code>) contohnya sbb:<\/p>\r\n<pre class=\"wp-block-preformatted\">var feeling = [\"dag\", \"dig\"]\r\nfeeling.push(\"dug\") \/\/ menambahkan nilai \"dug\" ke index paling belakang\r\nfeelling.pop() \/\/ menghapus nilai pada elemen terakhir array<\/pre>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<h3 id=\"push\" style=\"text-align: justify;\"><code><strong>.push()<\/strong><\/code><\/h3>\r\n<p style=\"text-align: justify;\"><em>Push&nbsp;<\/em>adalah metode array untuk menambahkan nilai di belakang elemen terakhir di array. metode push menerima sebuah parameter yaitu nilai yang ingin kita tambahkan ke dalam array.<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2]\r\nnumbers.push(3)\r\nconsole.log(numbers) \/\/ [0, 1, 2, 3]\r\n\/\/ Bisa juga memasukkan lebih dari satu nilai menggunakan metode push\r\nnumbers.push(4, 5)\r\nconsole.log(numbers) \/\/ [0, 1, 2, 3, 4, 5] <\/pre>\r\n<h3 id=\"pop\" style=\"text-align: justify;\"><code><strong>.pop()<\/strong><\/code><\/h3>\r\n<p style=\"text-align: justify;\">Pop adalah kebalikan dari push yaitu menghapus nilai elemen paling terakhir dari sebuah array. metode Pop tidak menerima parameter apapun sehingga metode pop hanya bisa mengeluarkan satu elemen saja yaitu yang paling terakhir dari sebuah array.<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2, 3, 4, 5]\r\nnumbers.pop() \r\nconsole.log(numbers) \/\/ [0, 1, 2, 3, 4] <\/pre>\r\n<h3 id=\"unshift\" style=\"text-align: justify;\"><code><strong>.unshift()<\/strong><\/code><\/h3>\r\n<p style=\"text-align: justify;\">Unshift yaitu menambahkan nilai pada index ke-0 sehingga elemen-elemen sebelumnya bergeser.<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2, 3]\r\nnumbers.unshift(-1) \r\nconsole.log(numbers) \/\/ [-1, 0, 1, 2, 3]<\/pre>\r\n<h3 id=\"shift\" style=\"text-align: justify;\"><code><strong>.shift()<\/strong><\/code><\/h3>\r\n<p style=\"text-align: justify;\">Shift kebalikan dari unshift yaitu menghapus nilai pada elemen terdepan dari sebuah array. metode Shift tidak menerima parameter apapun.<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [ 0, 1, 2, 3]\r\nnumbers.shift()\r\nconsole.log(numbers) \/\/ [1, 2, 3] <\/pre>\r\n<h3 id=\"sort\" style=\"text-align: justify;\"><code><strong>.sort()<\/strong><\/code><\/h3>\r\n<p style=\"text-align: justify;\">Sort adalah metode untuk mengurutkan nilai pada array. Secara otomatis, sort akan mengurutkan secara ascending (dari rendah ke tinggi) dan diurutkan berdasarkan unicode dari karakter. Urutan unicode artinya ada karakter yang secara nilai lebih besar dibandingkan dengan karakter yang lainnya. contohnya adalah karakter &ldquo;b&rdquo; akan lebih besar daripada &ldquo;a&rdquo;, karakter &ldquo;c&rdquo; lebih besar daripada karakter &ldquo;b&rdquo;, dst.<\/p>\r\n<pre class=\"wp-block-preformatted\">var animals = [\"kera\", \"gajah\", \"musang\"] \r\nanimals.sort()\r\nconsole.log(animals) \/\/ [\"gajah\", \"kera\", \"musang\"]<\/pre>\r\n<h3 id=\"slice\" style=\"text-align: justify;\"><code><strong>.slice()<\/strong><\/code><\/h3>\r\n<p style=\"text-align: justify;\">slice adalah metode untuk mengambil irisan dari sebuah array. Metode slice bisa menerima satu atau dua parameter. Parameter pertama adalah nomer index pertama yang akan kita ambil sebagai irisan, sedangkan parameter kedua adalah nomer index terakhir yang ingin kita ambil sebagai irisan.<\/p>\r\n<pre class=\"wp-block-preformatted\">var angka = [0, 1, 2, 3]\r\nvar irisan1 = angka.slice(1,3) \r\nconsole.log(irisan1) \/\/[1, 2, 3]\r\nvar irisan2 = angka.slice(0,2)\r\nconsole.log(irisan2) \/\/[0, 1, 2] <\/pre>\r\n<p style=\"text-align: justify;\">Jika parameter kedua tidak diisi maka secara otomatis slice akan mengiris array dari indeks di paramer pertama sampai ke indeks terakhir array tersebut.<\/p>\r\n<pre class=\"wp-block-preformatted\">var angka = [0, 1, 2, 3]\r\nvar irisan3 = angka.slice(2)\r\nconsole.log(irisan3) \/\/ [2, 3] <\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Jika diperhatikan, metode slice tidak mengubah Array yang awal dan hasil irisan array dapat kita tampung kembali ke variable yang baru. Oleh karena itu metode Slice juga berfungsi untuk membuat salinan atau &ldquo;shallow copy&rdquo; dari sebuah array. Cara membuat shallow copy dengan metode slice yaitu dengan tanpa memberikan parameter apapun pada metode slice.<\/p>\r\n<pre class=\"wp-block-preformatted\"><code>var angka = [0, 1, 2, 3]<\/code><br \/><code>var salinAngka = angka.slice()<\/code><br \/><code>console.log(salingAngka) \/\/ [0, 1, 2, 3]<\/code><\/pre>\r\n<\/blockquote>\r\n<h3 id=\"splice\" style=\"text-align: justify;\"><code><strong>.splice()<\/strong><\/code><\/h3>\r\n<p style=\"text-align: justify;\">Splice yaitu metode untuk menghapus dan\/atau menambahkan nilai elemen pada array. Metode splice bisa menerima parameter sebanyak dua atau lebih parameter. Jika ingin menggunakan splice untuk menghapus elemen pada index tertentu maka digunakan 2 paramater. Jika ingin menggunakan splice untuk menambahkan elemen pada index tertentu maka digunakan tiga parameter.<\/p>\r\n<pre class=\"wp-block-preformatted\">array.splice([IndexMulai], [JumlahNilaiYangDihapus], [NilaiYangDitambahkan1], [NilaiYangDitambahkan2], ...);<\/pre>\r\n<p style=\"text-align: justify;\">Berikut contoh penggunaan metode&nbsp;<code>splice()<\/code><\/p>\r\n<pre class=\"wp-block-preformatted\">var fruits = [ \"banana\", \"orange\", \"grape\"]\r\nfruits.splice(1, 0, \"watermelon\") \r\nconsole.log(fruits) \/\/ [ \"banana\", \"watermelon\", \"orange\", \"grape\"]<\/pre>\r\n<p style=\"text-align: justify;\">Contoh di atas berarti kita mulai mengubah array fruits dari indeks no 1, dan melakukan penghapusan nilai sebanyak 0 (yang berarti tidak menghapus apapun), dan menambahkan nilai &ldquo;watermelon&rdquo; pada indeks tersebut.<\/p>\r\n<pre class=\"wp-block-preformatted\">var fruits = [ \"banana\", \"orange\", \"grape\"]\r\nfruits.splice(0, 2)\r\nconsole.log(fruits) \/\/ [\"grape\"]<\/pre>\r\n<p style=\"text-align: justify;\">Contoh di atas berarti kita mulai mengubah array fruits dari indeks ke-0 dan melakukan penghapusan data sebanyak 2 elemen.<\/p>\r\n<h3 id=\"split-dan-join\" style=\"text-align: justify;\"><code><strong>.split()<\/strong><\/code>&nbsp;dan&nbsp;<code><strong>.join()<\/strong><\/code><\/h3>\r\n<p style=\"text-align: justify;\">Metode split yaitu memecah sebuah string sehingga menjadi sebuah array. Split menerima sebuah parameter berupa karakter yang menjadi separator untuk memecah string.<\/p>\r\n<pre class=\"wp-block-preformatted\">var biodata = \"name:john,doe\" \r\nvar name = biodata.split(\":\")\r\nconsole.log(name) \/\/ [ \"name\", \"john,doe\"] <\/pre>\r\n<p style=\"text-align: justify;\">Metode join yaitu kebalikan dari split yaitu mengubah sebuah array menjadi string dengan cara menggabungkan (join) seluruh elemen array menjadi satu dengan sebuah karakter pemisah yang dikirim melalui parameter. contohnya sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">var title = [\"my\", \"first\", \"experience\", \"as\", \"programmer\"] \r\nvar slug = title.join(\"-\")\r\nconsole.log(slug) \/\/ \"my-first-experience-as-programmer\"<\/pre>\r\n<hr \/>\r\n<p><span style=\"font-size: 18pt;\"><strong>Referensi Video<\/strong><\/span> :<\/p>\r\n<ul>\r\n<li>Web Programming UNPAS : <a href=\"https:\/\/youtu.be\/CW5pfpafgDE\">https:\/\/youtu.be\/CW5pfpafgDE<\/a><\/li>\r\n<li><a href=\"https:\/\/youtu.be\/arIhhRd1RPc\">https:\/\/youtu.be\/arIhhRd1RPc<\/a><\/li>\r\n<li><a href=\"https:\/\/youtu.be\/Lf9rG5DsQYg\">https:\/\/youtu.be\/Lf9rG5DsQYg<\/a><\/li>\r\n<\/ul>\r\n<p><span style=\"font-size: 18pt;\"><strong>Referensi lainnya Materi Array Javascript<\/strong> :<\/span><\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_arrays.asp\">https:\/\/www.w3schools.com\/js\/js_arrays.asp<\/a><\/li>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_array_methods.asp\">https:\/\/www.w3schools.com\/js\/js_array_methods.asp<\/a><\/li>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_array_sort.asp\">https:\/\/www.w3schools.com\/js\/js_array_sort.asp<\/a><\/li>\r\n<\/ul>\r\n<p><span style=\"font-size: 18pt;\"><strong>Video Pembahasan Materi<\/strong><\/span><\/p>\r\n<p>berikut ini video pembahasan materi hari 4: <a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7hx_d0vQ0RIKMjxxTu1D2Fw\">https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7hx_d0vQ0RIKMjxxTu1D2Fw<\/a><\/p>","waktu_publish":"2021-10-28 08:00:00","status_publish":"publish","urutan":8,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-28 08:01:12","waktu_publish_formatted":" Kamis, 28 Oktober 2021. 08:00:00 WIB."},{"id":1251,"uuid":"202e3174-69d8-40e7-a25c-e71cd08b9aac","author_user_id":4336,"materi_section_id":349,"judul":"Hari Ke-5 \u2013 Javascript Function","permalink":"hari-ke-5-javascript-function","konten":"<p><span style=\"font-size: 24pt;\">Function Javascript<\/span><\/p>\r\n<p>Function adalah sebuah blok kode yang disusun sedemikian rupa untuk menjalankan sebuah tindakan. Blok kode ini dibuat untuk dapat bisa digunakan kembali. Perhatikan ilustrasi function javascript dibawah ini :<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/15.png\" alt=\"\" width=\"278\" height=\"181\" \/><\/p>\r\n<p>Cara atau bentuk penulisan sebuah function javascript adalah sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">function nama_function(parameter\/argument 1, parameter\/argument 2, ...) {\r\n  [Isi dari function berupa tindakan\/steatment]\r\n  return [expression];\r\n}<\/pre>\r\n<p>Kode di atas tidak dapat kita copy-paste kan langsung, melainkan hanya sebuah bentuk penulisan&nbsp;<code>function<\/code>. Sebuah&nbsp;<code>function<\/code>, umumnya melakukan tindakan dan sebelum&nbsp;<code>function<\/code>&nbsp;berakhir,&nbsp;<code>function<\/code>&nbsp;bisa mengembalikan nilai dengan cara menambahkan sintaks return.<\/p>\r\n<p>Kita juga dapat mengirimkan nilai ke dalam sebuah&nbsp;<code>function<\/code>&nbsp;dengan mencantumkannya ke dalam tanda kurung dalam penulisan&nbsp;<code>function<\/code>. Untuk mengirimkan nilai lebih dari satu, gunakan tanda&nbsp;<code>,<\/code>&nbsp;sebagai pemisah.<\/p>\r\n<p><span style=\"font-size: 24pt;\">Implementasi Function Javascript<\/span><\/p>\r\n<p>Berikut ini merupakan beberapa contoh function yang akan sering digunakan :<\/p>\r\n<p><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode dibawah ini :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><span style=\"color: #000000;\">klik disini<\/span><\/p>\r\n<p><strong>Contoh Function 1:<\/strong>&nbsp;Function sederhana tanpa return<\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkan() {\r\n  console.log(\"halo!\");\r\n}\r\n \r\ntampilkan(); <\/pre>\r\n<p><strong>Contoh Function 2:<\/strong>&nbsp;Function sederhana dengan return<\/p>\r\n<pre class=\"wp-block-preformatted\">function munculkanAngkaDua() {\r\n  return 2\r\n}\r\n \r\nvar tampung = munculkanAngkaDua();\r\nconsole.log(tampung)<\/pre>\r\n<p><strong>Contoh Function 3:<\/strong>&nbsp;Function dengan parameter<\/p>\r\n<pre class=\"wp-block-preformatted\">function kalikanDua(angka) {\r\n  return angka * 2\r\n}\r\n \r\nvar tampung = kalikanDua(2);\r\nconsole.log(tampung) <\/pre>\r\n<p><strong>Contoh Function 4:<\/strong>&nbsp;Pengiriman parameter lebih dari satu<\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkanAngka(angkaPertama, angkaKedua) {\r\n  return angkaPertama + angkaKedua\r\n}\r\n \r\nconsole.log(tampilkanAngka(5, 3))<\/pre>\r\n<p><strong>Contoh Function 5:<\/strong>&nbsp;Inisialisasi parameter dengan nilai default<\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkanAngka(angka = 1) {\r\n  return angka\r\n}\r\n \r\nconsole.log(tampilkanAngka(5)) \/\/ 5, sesuai dengan nilai parameter yang dikirim\r\nconsole.log(tampilkanAngka()) \/\/ 1, karena default dari parameter adalah 1<\/pre>\r\n<p><strong>Contoh Function 6:<\/strong>&nbsp; Function dengan Conditional<\/p>\r\n<p>function tampilAngka(angkaPertama, angkaKedua){<\/p>\r\n<pre>var hasil = angkaPertama + angkaKedua<br \/><br \/>if(hasil &gt; 10){<br \/> &nbsp;&nbsp; return \"hasil lebih besar dari 10\"<br \/>  } else if(hasil &gt; 0 &amp;&amp; hasil &lt; 10 ){<br \/> &nbsp;&nbsp; return \"hasil lebih kecil dari 10\"<br \/>  } else if(hasil === 0&nbsp; ){<br \/> &nbsp;&nbsp; return \"hasil 0\"<br \/>  }else {<br \/> &nbsp;&nbsp; return \"Tidak ada nilai dari parameter\"<br \/>  }<br \/>}<br \/><br \/><br \/>console.log(tampilAngka(5,10))<br \/><br \/><\/pre>\r\n<p><strong>Contoh Function 6:<\/strong> &nbsp;Function dengan Looping didalamnya<\/p>\r\n<pre>function looping(iteration){<br \/>  for(var i = 0; i &lt; iteration; i++){<br \/> &nbsp;&nbsp;&nbsp; console.log(i)<br \/>  }<br \/>}<br \/><br \/>looping(2)<\/pre>\r\n<pre>&nbsp;<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p><strong>CATATAN : <\/strong>Waspadai pengiriman parameter yang <strong>UNDEFINED!<\/strong><\/p>\r\n<\/blockquote>\r\n<p>&nbsp;<\/p>\r\n<p><span style=\"font-size: 24pt;\">Anonymous Function<\/span><\/p>\r\n<p>Kita juga dapat menampung function sebagai variable dengan sebuah bentuk function yang dinamakan Anonymous Function.<\/p>\r\n<pre class=\"wp-block-preformatted\">var fungsiPerkalian = function(angkaPertama, angkaKedua) {   \r\n   return angkaPertama * angkaKedua \r\n}\r\nconsole.log(fungsiPerkalian(2, 4))<br \/><br \/><\/pre>\r\n<hr \/>\r\n<h2 id=\"referensi-tambahan\"><strong>Video Pembahasan Materi<\/strong><\/h2>\r\n<p>berikut ini video pembahasan materi hari 5: &nbsp;<a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7jkoaiqnN58UiLAH6rIGakW\">https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7jkoaiqnN58UiLAH6rIGakW<\/a><\/p>\r\n<p><strong>Referensi Video<\/strong><\/p>\r\n<ul>\r\n<li>Web programming UNPAS : <a href=\"https:\/\/youtu.be\/dld5ZKHYxC0\">https:\/\/youtu.be\/dld5ZKHYxC0<\/a><\/li>\r\n<li>Sekolah Koding : <a href=\"https:\/\/youtu.be\/3WbGabR8ZOM\">https:\/\/youtu.be\/3WbGabR8ZOM<\/a><\/li>\r\n<\/ul>\r\n<p><strong>Referensi Lainnya Materi Function Javascript<\/strong><\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/medium.com\/bahasa-ai\/kenali-function-di-javascript-5427cd9128b2\">https:\/\/medium.com\/bahasa-ai\/kenali-function-di-javascript-5427cd9128b2<\/a><\/li>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_functions.asp\">https:\/\/www.w3schools.com\/js\/js_functions.asp<\/a><\/li>\r\n<li><a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-first-time.md#loopiteration\">github hacktiv8 phase 0 materials<\/a><\/li>\r\n<\/ul>","waktu_publish":"2021-10-29 08:00:00","status_publish":"publish","urutan":9,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-29 07:38:20","waktu_publish_formatted":" Jumat, 29 Oktober 2021. 08:00:00 WIB."},{"id":1252,"uuid":"cc3f1a5c-5c6d-4fc7-a977-07351c90a8bb","author_user_id":4336,"materi_section_id":349,"judul":"Hari Ke-5 \u2013 Javascript \u2013 Object","permalink":"hari-ke-5-javascript-object","konten":"<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Object Javascript<\/span><\/p>\r\n<p style=\"text-align: justify;\">Object adalah kumpulan data tidak berurut yang berisikan pasangan property (key) dan value . Jika kita ingat pada tipe data Array yang merupakan kumpulan data yang berurut sesuai indeks, sedangkan Object mirip dengan Array tapi kini kita memberikan property atau key sendiri .<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/16.png\" alt=\"\" width=\"425\" height=\"134\" \/><\/p>\r\n<p style=\"text-align: justify;\"><br \/>Property atau key pada Object itu dapat kita umpamakan sperti indeks pada Array. Bedanya indeks pada Array langsung diberikan secara otomatis mulai dari indeks 0 dst, sedangkan property pada Object dapat kita namai sesuka kita.<\/p>\r\n<p style=\"text-align: justify;\">Bandingkan kedua variable berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">var personArr = [\"John\", \"Doe\", \"male\", 27]\r\nvar personObj = {\r\n    firstName : \"John\",\r\n    lastName: \"Doe\",\r\n    gender: \"male\",\r\n    age: 27\r\n} <\/pre>\r\n<p style=\"text-align: justify;\">contoh di atas kita ingin mendeklarasikan variable person dalam Array dan Object. Jika pada Array kita mengakses nama depan dengan cara&nbsp;<code>personArr[0]<\/code>&nbsp;, sedangkan jika kita ingin mengakses nama depan pada Object kita dapat melakukannya dengan&nbsp;<code>personObj.firstName<\/code>&nbsp;. Keduanya memberikan value yang sama namun pemanggilan value dengan cara Object lebih kita senangi karena kita bisa mendefinisikan bahwa seseorang &ldquo;Person&rdquo; itu pasti memiliki nama depan (<code>firstName<\/code>), nama belakang (<code>lastName<\/code>), (<code>gender<\/code>), dan umur (<code>age<\/code>).<\/p>\r\n<pre class=\"wp-block-preformatted\">var personArr = [\"John\", \"Doe\", \"male\", 27]\r\nvar personObj = {\r\n    firstName : \"John\",\r\n    lastName: \"Doe\",\r\n    gender: \"male\",\r\n    age: 27\r\n}\r\n \r\nconsole.log(personArr[0]) \/\/ John\r\nconsole.log(personObj.firstName) \/\/ John <\/pre>\r\n<p id=\"deklarasi-object\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Deklarasi Object Javascript<\/span><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode dibawah ini :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><span style=\"color: #000000;\">klik disini<\/span><\/p>\r\n<p style=\"text-align: justify;\">Cara untuk mendeklarasi sebuah object yaitu dengan memberikan curly brackets (<code>{}<\/code>) lalu buat pasangan&nbsp;<code>key: value<\/code>&nbsp;di dalamnya. Jika ingin menambahkan pasangan key dan value maka dipisah dengan tanda koma. contohnya:<\/p>\r\n<pre class=\"wp-block-preformatted\">var object = {\r\n    [key]: [value]\r\n} &nbsp;<\/pre>\r\n<p>Maka contoh penerapannya seperti berikut :<\/p>\r\n<pre class=\"wp-block-preformatted\"> var car = {\r\n    brand: \"Ferrari\",\r\n    type: \"Sports Car\",\r\n    price: 50000000\r\n    \"horse power\": 986\r\n}<\/pre>\r\n<p style=\"text-align: justify;\">Jika diperhatikan pada contoh object&nbsp;<code>car<\/code>&nbsp;di atas terdapat key dengan nama &ldquo;<code>horse power<\/code>&rdquo; yang penulisannya berbeda dengan key yang lain. Hal ini karena jika nama key dari Object lebih dari satu kata atau dipisah dengan spasi kita bisa deklarasikan dengan memberikan tanda petik (<code>\"\"<\/code>).<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Deklarasi Object Kosong<\/span><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode dibawah ini :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><span style=\"color: #000000;\">klik disini<\/span><\/p>\r\n<p style=\"text-align: justify;\">Cara lainnya untuk membuat object adalah dengan mendeklarasikan terlebih dahulu variable sebagai Object kosong lalu melakukan assign property dan valuenya ke varible tersebut. Contohnya sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">var car2 = {}\r\n\/\/ meng-assign key:value dari object car2\r\ncar2.brand = \"Lamborghini\"\r\ncar2.brand = \"Sports Car\"\r\ncar2.price = 100000000 <\/pre>\r\n<p style=\"text-align: justify;\">Jika ingin memberikan nama key yang lebih dari satu kata dan dipisah dengan spasi maka kita dapat menulis key nya dengan menggunakan tanda petik (<code>\"\"<\/code>) di dalam kurung siku (<code>[]<\/code>).<\/p>\r\n<pre class=\"wp-block-preformatted\">car2[\"horse power\"] = 730 <\/pre>\r\n<p>Maka Hasil dari object car2 adalah sebagai berikut :<\/p>\r\n<pre>[object Object] {<br \/>  brand: \"Sports Car\",<br \/>  horse power: 730,<br \/>  price: 100000000<br \/>}<\/pre>\r\n<p>Jika ingin mengakses nilai pada key horse power, maka caranya adalah sebagai berikut&nbsp; :<\/p>\r\n<pre>car2[\"horse power\"])<\/pre>\r\n<p><strong>Catatan :<\/strong> Value yang kita assign pada object tidak terbatas hanya string atau number saja tapi bisa juga Array, boolean, bahkan Object lagi di dalamnya.<\/p>\r\n<p id=\"mengakses-nilai-pada-object\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Mengakses Nilai pada Object<\/span><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode dibawah ini :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><span style=\"color: #000000;\">klik disini<\/span><\/p>\r\n<p style=\"text-align: justify;\">Untuk mengakses nilai pada Object bisa dengan cara memanggil object nya lalu tanda titik (dot) dan nama property\/key nya. contohnya seperti berikut<\/p>\r\n<pre class=\"wp-block-preformatted\">var motorcycle1 = {    \r\n    brand: \"Handa\",\r\n    type: \"CUB\",\r\n    price: 1000\r\n}\r\nconsole.log(motorcycle1.brand) \/\/ \"Handa\"\r\nconsole.log(motorcycle1.type) \/\/ \"CUB\"<\/pre>\r\n<p style=\"text-align: justify;\">Cara lain untuk mengakses nilai, yaitu cara yang mirip dengan mengakses nilai suatu elemen pada Array, menggunakan tanda kurung siku, dan di dalam kurung siku tersebut kita sebutkan nama property nya.<\/p>\r\n<pre class=\"wp-block-preformatted\">console.log(motorcycle1[\"price\"])<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p><strong>FYI : <\/strong>Tipe data Array technically adalah sebuah Object tetapi Array memiliki sifat khusus. Array secara otomatis memberikan indeks yang analogi dengan key pada Object. Coba kamu cek di console menggunakan <code>typeof<\/code><\/p>\r\n<pre class=\"wp-block-preformatted\"><code>var array = [ 1, 2, 3 ] <br \/>console.log(typeof array) \/\/ object<\/code><\/pre>\r\n<\/blockquote>\r\n<p id=\"array-of-object\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Array of Object<\/span><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode dibawah ini :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><span style=\"color: #000000;\">klik disini<\/span><\/p>\r\n<p style=\"text-align: justify;\">object bisa termasuk dalam tipe data yang berarti dapat di masukkan ke dalam array, seperti contoh di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var mobil = [<br \/>{merk: \"BMW\", warna: \"merah\", tipe: \"sedan\"}, <br \/>{merk: \"toyota\", warna: \"hitam\", tipe: \"box\"}, <br \/>{merk: \"audi\", warna: \"biru\", tipe: \"sedan\"}<br \/>]<\/code><\/pre>\r\n<p>Untuk mengakses nilainya adalah sebagai berikut :<\/p>\r\n<pre>console.log(mobil[0].merk) <br \/>\/\/ yang berarti value mobil yang berada diindex 0 dengan property objectnya adalah merk, maka value dari key merknya adalah &ldquo;bmw&rdquo;<\/pre>\r\n<p id=\"array-iteration\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Array Iteration<\/span><\/p>\r\n<p>Jika pada sebelumnya ( Array of object ) kita mengeluarkan nilainya menggunakan index, maka ada acara lain yang dapat kita gunakan untuk mengeluarkan nilai tersebut yaitu dengan menerapkan Array iteration. <strong>Array iteration<\/strong> merupakan method dalam array untuk melakukan perulangan data dari array. Berdasarkan W3school.com, Berikut ini beberapa method array iteration diketahui:<\/p>\r\n<ul>\r\n<li>forEach()<\/li>\r\n<li>map()<\/li>\r\n<li>filter()<\/li>\r\n<li>reduce()<\/li>\r\n<li>every()<\/li>\r\n<li>some()<\/li>\r\n<li>indexOf()<\/li>\r\n<li>includes()<\/li>\r\n<li>dan masih banyak lagi<\/li>\r\n<\/ul>\r\n<p>Method array iteration ada banyak tapi untuk basic belajar kita hanya perlu menggunakan 3 method ini yaitu forEach(), map() dan filter()<\/p>\r\n<p><span style=\"font-size: 24pt;\">Implementasi Array Iteration<\/span><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode dibawah ini :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><span style=\"color: #000000;\">klik disini<\/span><\/p>\r\n<p style=\"text-align: justify;\"><strong>.foreach()<\/strong><\/p>\r\n<p style=\"text-align: justify;\">foreach method untuk array berfungsi untuk perulangan data dari array, misal kita punya array seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>var mobil = [{merk: \"BMW\", warna: \"merah\", tipe: \"sedan\"}, {merk: \"toyota\", warna: \"hitam\", tipe: \"box\"}, {merk: \"audi\", warna: \"biru\", tipe: \"sedan\"}]<\/code><\/pre>\r\n<p style=\"text-align: justify;\">lalu kita gunakan foreach seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>mobil.forEach(function(item){\r\n   console.log(\"warna : \" + item.warna)\r\n})<\/code><\/pre>\r\n<p style=\"text-align: justify;\">maka akan muncul tampilan seperti di bawah ini<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: justify;\"><img class=\"wp-image-9872\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-59.png\" alt=\"\" width=\"172\" height=\"98\" \/><\/figure>\r\n<p style=\"text-align: justify;\"><strong>.map()<\/strong><\/p>\r\n<p style=\"text-align: justify;\">map method untuk array berfungsi untuk membuat array baru. misal dengan var mobil diatas kita buat kode seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var arrayWarna = mobil.map(function(item){\r\n   return item.warna\r\n})\r\n\r\nconsole.log(arrayWarna)<\/code><\/pre>\r\n<p style=\"text-align: justify;\">maka akan muncul tampilan seperti di bawah ini:<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: justify;\"><img class=\"wp-image-9873\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-60.png\" alt=\"\" width=\"284\" height=\"52\" \/><\/figure>\r\n<p style=\"text-align: justify;\"><strong>.filter()<\/strong><\/p>\r\n<p style=\"text-align: justify;\">filter method untuk array berfungsi untuk memnyaring data yang diinginkan. misal dengan var mobil diatas kita buat kode seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var arrayMobilFilter = mobil.filter(function(item){\r\n   return item.tipe != \"sedan\";\r\n})\r\n\r\nconsole.log(arrayMobilFilter)<\/code><\/pre>\r\n<p style=\"text-align: justify;\">maka akan muncul tampilan seperti di bawah ini:<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: justify;\"><img class=\"wp-image-9874\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-61.png\" alt=\"\" width=\"169\" height=\"131\" \/><\/figure>\r\n<h2 id=\"referensi-tambahan\" style=\"text-align: justify;\"><strong>Video Pembahasan Materi<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">berikut ini video pembahasan materi hari 5: &nbsp;<a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7jkoaiqnN58UiLAH6rIGakW\">https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7jkoaiqnN58UiLAH6rIGakW<\/a><\/p>\r\n<p><strong>Referensi Video :<\/strong><\/p>\r\n<ul>\r\n<li>Web Programming UNPAS : <a href=\"https:\/\/youtu.be\/bUZKDBgJFIM\">https:\/\/youtu.be\/bUZKDBgJFIM<\/a><\/li>\r\n<li><a href=\"https:\/\/youtu.be\/CNcAqdsBqrQ\">https:\/\/youtu.be\/CNcAqdsBqrQ<\/a><\/li>\r\n<li>Junior Dev : <a href=\"https:\/\/youtu.be\/nssoGltsgJw\">https:\/\/youtu.be\/nssoGltsgJw<\/a><\/li>\r\n<\/ul>\r\n<p><strong>Referensi Lainnya Materi Object Javascript :<\/strong><\/p>\r\n<ul>\r\n<li>w3schools : <a href=\"https:\/\/www.w3schools.com\/js\/js_objects.asp\">https:\/\/www.w3schools.com\/js\/js_objects.asp<\/a><\/li>\r\n<li>w3schools : <a href=\"https:\/\/www.w3schools.com\/js\/js_array_iteration.asp\">https:\/\/www.w3schools.com\/js\/js_array_iteration.asp<\/a><\/li>\r\n<li>javascripttutorial : <a href=\"https:\/\/www.javascripttutorial.net\/javascript-objects\/\">https:\/\/www.javascripttutorial.net\/javascript-objects\/<\/a><\/li>\r\n<li>programiz : <a href=\"https:\/\/www.programiz.com\/javascript\/object\">https:\/\/www.programiz.com\/javascript\/object<\/a><\/li>\r\n<\/ul>","waktu_publish":"2021-10-29 08:00:00","status_publish":"publish","urutan":10,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-29 07:38:35","waktu_publish_formatted":" Jumat, 29 Oktober 2021. 08:00:00 WIB."}]},{"id":350,"uuid":"ded7f2c0-39ca-4336-9bb3-c986374d9c68","materi_id":35,"nama":"Pekan 1 \u2013 Tugas","permalink":"pekan-1-tugas","urutan":3,"created_by":4336,"updated_by":4336,"created_at":"2021-08-09 16:42:06","updated_at":null,"posting":[{"id":1253,"uuid":"b3546fd0-316a-45cc-b331-55339c55e649","author_user_id":4336,"materi_section_id":350,"judul":"Tugas 1 \u2013 Git","permalink":"tugas-1-git","konten":"<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<p><span style=\"color: #ffffff; background-color: #e03e2d;\"><strong>Catatan Tambahan<\/strong> : Pengumpulan Tugas hanya diperbolehkan menggunakan <strong>gitlab&nbsp;<\/strong><\/span><\/p>\r\n<p>Jangan lupa untuk lihat video pembahasan materi dulu ya : <a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7j5iX-dgLlBK1WBMZBY3pVd\" target=\"_blank\" rel=\"noopener\">Klik disini<\/a><\/p>\r\n<hr \/>\r\n<h2 id=\"1-buat-repository-project-baru\"><strong>1. Buat repository project baru ( harus GITLAB )<\/strong><\/h2>\r\n<p>Buatlah satu repository project baru dengan project name adalah &ldquo;<strong>BDS Sanbercode Reactjs Batch 29<\/strong>&ldquo;, pastikan visibility level di set &ldquo;<strong>Private<\/strong>&ldquo; ( WAJIB ), dan centang pada bagian &ldquo;<strong>Initialize repository with a README<\/strong>&ldquo;.<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-13799\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-1024x485.png\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-1024x485.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-300x142.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-768x364.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image.png 1193w\" alt=\"\" width=\"90%\" \/><\/figure>\r\n<h2 id=\"2-buat-branch-baru\"><strong>2. invite trainer<\/strong><\/h2>\r\n<p>invite trainer pada repository project yang telah di buat dengan cara menuju kehalaman dibawah ini :&nbsp;<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/Screenshot_8.png\" width=\"661\" height=\"291\" \/><br \/>lalu pada tab invite member isi input &ldquo;<strong>GitLab member or Email address<\/strong>&rdquo; dengan <strong>username trainer <\/strong>lalu pada choose &ldquo;<strong>Choose a Role Permission<\/strong>&rdquo; pilih <strong>maintainer<\/strong> dan klik <strong>invite<\/strong><\/p>\r\n<p><strong>username trainer di gitlab: yogimahaputra<\/strong><\/p>\r\n<h2 id=\"2-buat-branch-baru\"><strong>3. Clone repository<\/strong><\/h2>\r\n<p>Lakukanlah clone dari project yang telah dibuat. Kemudian masuk ke folder project yang telah di clone<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/Screenshot_9.png\" width=\"647\" height=\"303\" \/><\/p>\r\n<p>lalu copy text yang ada di dalam Clone With HTTPS lalu jalankan perintah ini di terminal\/cmd pada komputer\/laptop anda<\/p>\r\n<pre class=\"wp-block-code\"><code>git clone <strong>hasil_copy_dari_clone_with_https<\/strong><\/code><\/pre>\r\n<p>lalu pindahkan ke folder project yang sudah di clone<\/p>\r\n<p>NOTE : kalo sudah git clone ga perlu git init lagi ya..<\/p>\r\n<h2 id=\"3-menambahkan-file-baru\"><strong>4. Menambahkan folder dan file baru<\/strong><\/h2>\r\n<p>Buat folder baru dengan nama &ldquo;Tugas-Harian-Part-1&rdquo; dan di dalamnya tambahkan folder baru lagi dengan nama &ldquo;Tugas-1&rdquo; lalu tambahkan file &ldquo;data_peserta.txt&rdquo;. kurang lebih struktur foldernya seperti ini<\/p>\r\n<pre class=\"wp-block-code\"><code>bds-sanbercode-reactjs-batch-29\/\r\n  Tugas-Harian-Part-1\/\r\n    Tugas-1\/\r\n      data_peserta.txt<\/code><\/pre>\r\n<p>Isi file &ldquo;data_peserta.txt&rdquo; tersebut dengan nama dan email Anda saat mendaftar, akun gitlab, serta akun telegram pada grup diskusi, contoh:<\/p>\r\n<pre class=\"wp-block-preformatted\">Data Peserta Sanbercode Bootcamp ReactJS\r\n1. Nama: \r\n2. Email: \r\n3. Sistem Operasi yang digunakan:\r\n4. Akun Gitlab: \r\n5. Akun Telegram: <\/pre>\r\n<h2 id=\"5-kumpulkan-tugas\"><strong>5. Kumpulkan tugas<\/strong><\/h2>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di tab materi -&gt; lalu klik pendahuluan -&gt; lalu klik teknis pengumpulan<\/p>","waktu_publish":"2021-10-25 14:00:00","status_publish":"publish","urutan":1,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-25 15:10:59","waktu_publish_formatted":" Senin, 25 Oktober 2021. 14:00:00 WIB."},{"id":1254,"uuid":"0ed37dbb-4416-49e5-8287-e001cfacf2c5","author_user_id":4336,"materi_section_id":350,"judul":"Tugas 2 \u2013 HTML & CSS","permalink":"tugas-2-html-css","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p><span style=\"background-color: #e03e2d; color: #ecf0f1;\"><strong>&nbsp;CATATAN : <\/strong>TIDAK PERLU BUAT REPOSITORY BARU ( PAKAI REPOSITORY DARI TUGAS SEBELUMNYA )&nbsp;<\/span><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru\"><strong>1. Menambahkan Folder Baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buatlah folder baru didalam folder &ldquo;Tugas-Harian-Part-1&rdquo; dengan nama &ldquo;Tugas-2&rdquo;, lalu file yang dibuat di bawah di masukan ke folder tersebut<\/p>\r\n<h3 id=\"1-membuat-file-html\"><strong>2. Membuat File HTML<\/strong><\/h3>\r\n<h4><strong>a.<\/strong>&nbsp;<strong>membuat file index.html<\/strong><\/h4>\r\n<p>Buatlah sebuah file HTML bernama index.html. Gunakan code yang sudah disediakan di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;link href=\"public\/css\/style.css\" rel=\"stylesheet\" \/&gt;\r\n    &lt;link href=\"https:\/\/fonts.googleapis.com\/css?family=Slabo+27px\" rel=\"stylesheet\"&gt;\r\n  &lt;\/head&gt;\r\n  &lt;body&gt;\r\n    &lt;header&gt;\r\n      &lt;img id=\"logo\" src=\"public\/img\/logo.png\" width=\"200px\" \/&gt;\r\n      &lt;nav&gt;\r\n        &lt;ul&gt;\r\n          &lt;a href=\"index.html\"&gt;&lt;li&gt;Home&lt;\/li&gt;&lt;\/a&gt;\r\n          &lt;a href=\"about.html\"&gt;&lt;li&gt;About&lt;\/li&gt;&lt;\/a&gt;\r\n          &lt;a href=\"contact.html\"&gt;&lt;li&gt;Contact&lt;\/li&gt;&lt;\/a&gt;\r\n        &lt;\/ul&gt;\r\n      &lt;\/nav&gt;\r\n    &lt;\/header&gt;\r\n    &lt;section&gt;\r\n      &lt;h1&gt;Featured Posts&lt;\/h1&gt;\r\n      &lt;div id=\"article-list\"&gt;\r\n        &lt;div&gt;\r\n          &lt;a href=\"\"&gt;&lt;h3&gt;Lorem Post 1&lt;\/h3&gt;&lt;\/a&gt;\r\n          &lt;p&gt;\r\n            Lorem Ipsum Dolor Sit Amet, mea te verear signiferumque, per illum labores ne. Blandit omnesque scripserit pri ex, et pri dicant eirmod deserunt. Aeque perpetua ea nec. Sit erant patrioque delicatissimi ut. Et sea quem sint, nam in minim voluptatibus. Etiam placerat eam in.\r\n          &lt;\/p&gt;\r\n        &lt;\/div&gt;\r\n        &lt;div&gt;\r\n          &lt;a href=\"\"&gt;&lt;h3&gt;Lorem Post 2&lt;\/h3&gt;&lt;\/a&gt;\r\n          &lt;p&gt;\r\n            Lorem Ipsum Dolor Sit Amet, mea te verear signiferumque, per illum labores ne. Blandit omnesque scripserit pri ex, et pri dicant eirmod deserunt. Aeque perpetua ea nec. Sit erant patrioque delicatissimi ut. Et sea quem sint, nam in minim voluptatibus. Etiam placerat eam in.\r\n          &lt;\/p&gt;\r\n        &lt;\/div&gt;\r\n        &lt;div&gt;\r\n          &lt;a href=\"\"&gt;&lt;h3&gt;Lorem Post 3&lt;\/h3&gt;&lt;\/a&gt;\r\n          &lt;p&gt;\r\n            Lorem Ipsum Dolor Sit Amet, mea te verear signiferumque, per illum labores ne. Blandit omnesque scripserit pri ex, et pri dicant eirmod deserunt. Aeque perpetua ea nec. Sit erant patrioque delicatissimi ut. Et sea quem sint, nam in minim voluptatibus. Etiam placerat eam in.\r\n          &lt;\/p&gt;\r\n        &lt;\/div&gt;\r\n        &lt;div&gt;\r\n          &lt;a href=\"\"&gt;&lt;h3&gt;Lorem Post 4&lt;\/h3&gt;&lt;\/a&gt;\r\n          &lt;p&gt;\r\n            Lorem Ipsum Dolor Sit Amet, mea te verear signiferumque, per illum labores ne. Blandit omnesque scripserit pri ex, et pri dicant eirmod deserunt. Aeque perpetua ea nec. Sit erant patrioque delicatissimi ut. Et sea quem sint, nam in minim voluptatibus. Etiam placerat eam in.\r\n          &lt;\/p&gt;\r\n        &lt;\/div&gt;\r\n        &lt;div&gt;\r\n          &lt;a href=\"\"&gt;&lt;h3&gt;Lorem Post 5&lt;\/h3&gt;&lt;\/a&gt;\r\n          &lt;p&gt;\r\n            Lorem Ipsum Dolor Sit Amet, mea te verear signiferumque, per illum labores ne. Blandit omnesque scripserit pri ex, et pri dicant eirmod deserunt. Aeque perpetua ea nec. Sit erant patrioque delicatissimi ut. Et sea quem sint, nam in minim voluptatibus. Etiam placerat eam in.\r\n          &lt;\/p&gt;\r\n        &lt;\/div&gt;\r\n      &lt;\/div&gt;\r\n    &lt;\/section&gt;\r\n    &lt;footer&gt;\r\n      &lt;h5&gt;copyright &amp;copy; 2020 by Sanbercode&lt;\/h5&gt;\r\n    &lt;\/footer&gt;\r\n  &lt;\/body&gt;\r\n&lt;\/html&gt;<\/code><\/pre>\r\n<h4><strong>b.<\/strong>&nbsp;<strong>membuat file about.html<\/strong><\/h4>\r\n<p>buatlah file about.html dengan tampilan seperti ini<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/Screenshot_18.png\" width=\"751\" height=\"398\" \/><\/p>\r\n<p>lalu tambahkan tag di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;a href=\"index.html\"&gt;Kembali Ke Index&lt;\/a&gt;<\/code><\/pre>\r\n<h4><strong>c.<\/strong>&nbsp;<strong>membuat file contact.html<\/strong><\/h4>\r\n<p>buatlah file contact.html dengan tampilan seperti ini<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/Screenshot_19.png\" width=\"844\" height=\"445\" \/><\/p>\r\n<p>lalu tambahkan tag di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;a href=\"index.html\"&gt;Kembali Ke Index&lt;\/a&gt;<\/code><\/pre>\r\n<h3 id=\"2-buat-file-css\"><strong>3. Buat File CSS<\/strong><\/h3>\r\n<p>Buatlah file CSS di dalam folder bernama &lsquo;css&rsquo;. folder &lsquo;css&rsquo; tersebut berada di dalam folder public. kemudian hubungkan pada file index.html dengan cara menambahkannya di header<\/p>\r\n<pre class=\"wp-block-preformatted\">&lt;link href=\"public\/css\/style.css\" rel=\"stylesheet\" type=\"text\/css\"&gt;<\/pre>\r\n<h3 id=\"3-menyiapkan-asset-gambar\"><strong>4. Menyiapkan Asset Gambar<\/strong><\/h3>\r\n<p>Buatlah folder di dalam folder public dengan nama img dimana kita akan meletakkan gambar kita di sana. Sehingga nantinya pengambilan alamat dari gambar di folder :&nbsp;<code>public\/img\/logo.png<\/code>&nbsp;. Aset gambar bisa kamu download dari file di bawah ini. Download logo dengan nama&nbsp;<code>logo.png<\/code>&nbsp;dan gambar pola sebagai&nbsp;<code>pattern.jpg<\/code><\/p>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LiR2ZMOIaxmhLlPQhLa%2F-LsKO0ePPOrb2KQEd7Gq%2F-LsKOmfnPPoDiqmDH44r%2Flogo.png?alt=media&amp;token=b613bed4-5936-4f6b-aec4-aed6c214f630\" alt=\"\" \/>\r\n<figcaption>logo.png<\/figcaption>\r\n<\/figure>\r\n<\/div>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LiR2ZMOIaxmhLlPQhLa%2F-LsKO0ePPOrb2KQEd7Gq%2F-LsKOnZbYN8Zs5H89ODH%2Fpattern.jpg?alt=media&amp;token=27a7b746-8252-45a5-8df2-b1b68fb8ceae\" alt=\"\" \/>\r\n<figcaption>pattern.jpg<\/figcaption>\r\n<\/figure>\r\n<\/div>\r\n<p>&zwnj;<\/p>\r\n<p>keterangan: logo sanbercode untuk logo yang akan ditampilkan. sedangkan gambar pola yang di bawahnya adalah gambar yang dijadikan background. &zwnj;<\/p>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>5. Membuat Layout HTML + CSS<\/strong><\/h3>\r\n<p>Buatlah halaman web dengan layout seperti di bawah ini di file index.html:<\/p>\r\n<p><img class=\"wp-image-14005\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-1-1024x494.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-1-1024x494.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-1-300x145.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-1-768x370.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-1.png 1344w\" alt=\"\" width=\"100%\" \/><\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/preview-tugas-html-css.gif\" width=\"100%\" \/><\/p>\r\n<p>File-file gambar:<\/p>\r\n<ul>\r\n<li>logo sanbercode :&nbsp;<a href=\"https:\/\/drive.google.com\/file\/d\/1125xkTSNko19q8wbksvKbj4s7ybIwmHO\/view?usp=sharing\">download<\/a><\/li>\r\n<li>background pattern:&nbsp;<a href=\"https:\/\/drive.google.com\/file\/d\/1aMMIlxYxOcWUDW5JwoSp31fW0A73-Y5D\/view?usp=sharing\">download<\/a><\/li>\r\n<li>simulasi output gif:&nbsp;<a href=\"https:\/\/drive.google.com\/file\/d\/17Cl5vISGOwWqjcDsJmJqQBiHxGoJ_GWB\/view?usp=sharing\">download<\/a><\/li>\r\n<\/ul>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>6. Kumpulkan Tugas<\/strong><\/h3>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di tab materi -&gt; lalu klik pendahuluan -&gt; lalu klik teknis pengumpulan<\/p>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>Tambahan<\/strong><\/h3>\r\n<p>Pada tugas ini <strong>tidak di perbolehkan<\/strong> menggunakan <strong>bootstrap dan sejenisnya<\/strong><\/p>\r\n<\/div>","waktu_publish":"2021-10-26 14:00:00","status_publish":"publish","urutan":2,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-26 14:40:19","waktu_publish_formatted":" Selasa, 26 Oktober 2021. 14:00:00 WIB."},{"id":1255,"uuid":"6387a142-7be9-43a3-9323-b59830320fc6","author_user_id":4336,"materi_section_id":350,"judul":"Tugas 3 \u2013 Javascript \u2013 Intro & Conditional","permalink":"tugas-3-javascript-intro-conditional","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p><span style=\"background-color: #e03e2d; color: #ecf0f1;\"><strong>&nbsp;CATATAN : <\/strong>SEKALI LAGI TIDAK PERLU BUAT REPOSITORY BARU ( PAKAI REPOSITORY DARI TUGAS SEBELUMNYA )&nbsp;<\/span><\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-dan-file-baru\"><strong>1. Menambahkan Folder Baru dan file baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buatlah folder baru didalam folder &ldquo;Tugas-Harian-Part-1&rdquo; dengan nama &ldquo;Tugas-3&rdquo;, lalu buat file baru di dalam folder tersebut dengan nama &ldquo;tugas3.js&rdquo;.<\/p>\r\n<p>sehingga struktur foldernya seperti di bawah ini<br \/><code>  Tugas-Harian-Part-1\/\r\n<br \/>&nbsp; &nbsp;Tugas-1\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-2\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-3\/<\/code><code><\/code><\/p>\r\n<h3 id=\"1-membuat-file-html\"><strong>2. Kerjakan Soal di bawah ini<\/strong><\/h3>\r\n<p>kerjakan soal di bawah ini dan masukkan semua kode jawabannya ke dalam file &ldquo;tugas3.js&rdquo;<\/p>\r\n<p>kerjakan soal ini&nbsp;<strong>tanpa&nbsp;<\/strong>menggunakan <strong>looping<\/strong>, <strong>function <\/strong>dan kode-kode <strong>ES6<\/strong> (bagi yang sudah paham ES6), jadi kerjakan dengan kode-kode sesuai materi yang sudah di pelajari<\/p>\r\n<p><strong>soal 1<\/strong><\/p>\r\n<p>buatlah variabel-variabel seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var kataPertama = \"saya\";\r\nvar kataKedua = \"senang\";\r\nvar kataKetiga = \"belajar\";\r\nvar kataKeempat = \"javascript\";<\/code><\/pre>\r\n<p>gabungkan variabel-variabel tersebut agar menghasilkan output<\/p>\r\n<pre class=\"wp-block-code\"><code>saya Senang belajaR JAVASCRIPT<\/code><\/pre>\r\n<p><strong>soal 2<\/strong><\/p>\r\n<p>buatlah variabel-variabel seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var panjangPersegiPanjang = \"8\";\r\nvar lebarPersegiPanjang = \"5\";\r\n<br \/>var alasSegitiga= \"6\";\r\nvar tinggiSegitiga = \"7\";<\/code><\/pre>\r\n<p>ubah lah variabel diatas ke dalam integer dan gunakan pada operasi perhitungan dari keliling persegi panjang dan luas segitiga dengan variabel di bawah ini:<\/p>\r\n<p><code>var kelilingPersegiPanjang;<br \/>var luasSegitiga;<\/code><\/p>\r\n<p>lalu tampilkan dengan console.log<\/p>\r\n<p><strong>soal 3<\/strong><\/p>\r\n<p>buatlah variabel-variabel seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var sentences= 'wah javascript itu keren sekali'; \r\n\r\nvar firstWord= sentences.substring(0, 3); \r\nvar secondWord; \/\/ do your own! \r\nvar thirdWord; \/\/ do your own! \r\nvar fourthWord; \/\/ do your own! \r\nvar fifthWord; \/\/ do your own! \r\n\r\nconsole.log('Kata Pertama: ' + firstWord); \r\nconsole.log('Kata Kedua: ' + secondWord); \r\nconsole.log('Kata Ketiga: ' + thirdWord); \r\nconsole.log('Kata Keempat: ' + fourthWord); \r\nconsole.log('Kata Kelima: ' + fifthWord);<\/code><\/pre>\r\n<p>selesaikan variabel yang belum diisi dan hasilkan output seperti berikut:<\/p>\r\n<pre class=\"wp-block-code\"><code>Kata Pertama: wah\r\nKata Kedua: javascript\r\nKata Ketiga: itu\r\nKata Keempat: keren\r\nKata Kelima: sekali<\/code><\/pre>\r\n<p><strong>soal 4<\/strong><\/p>\r\n<p>buatlah variabel seperti di bawah ini<\/p>\r\n<p><code>var nilaiJohn = 80; <br \/>var nilaiDoe = 50;<\/code><\/p>\r\n<p>tentukan indeks nilai dari <strong>nilaiJohn <\/strong>dan <strong>nilaiDoe <\/strong>(tampilkan dengan console.log) dengan kondisi :<\/p>\r\n<pre class=\"wp-block-code\"><code>nilai &gt;= 80 indeksnya A\r\nnilai &gt;= 70 dan nilai &lt; 80 indeksnya B\r\nnilai &gt;= 60 dan nilai &lt; 70 indeksnya c\r\nnilai &gt;= 50 dan nilai &lt; 60 indeksnya D\r\nnilai &lt; 50 indeksnya E<\/code><\/pre>\r\n<p>kerjakan soal ini <strong>tanpa <\/strong>menggunakan <strong>function(ini materi hari 5)<\/strong><\/p>\r\n<p><strong>soal 5<\/strong><\/p>\r\n<p>buatlah variabel seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var tanggal = 22;\r\nvar bulan = 7;\r\nvar tahun = 2020;<\/code><\/pre>\r\n<p>ganti tanggal ,bulan, dan tahun sesuai dengan tanggal lahir anda dan buatlah switch case pada bulan, lalu muncul kan string nya dengan output seperti ini 22 Juli 2020 (isi di sesuaikan dengan tanggal lahir masing-masing)<\/p>\r\n<h3 id=\"3-tips\"><strong>3. Tips<\/strong><\/h3>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ soal 1\r\n.... jawaban soal 1\r\n\r\n\/\/ soal 2\r\n.... jawaban soal 2\r\n\r\ndan seterusnya<\/code><\/pre>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>4. Kumpulkan Tugas<\/strong><\/h3>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di tab materi -&gt; lalu klik pendahuluan -&gt; lalu klik teknis pengumpulan<\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-10-27 14:00:00","status_publish":"publish","urutan":3,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-27 13:35:39","waktu_publish_formatted":" Rabu, 27 Oktober 2021. 14:00:00 WIB."},{"id":1256,"uuid":"96c6dfa0-07a5-4e87-8c65-a43ac17e6113","author_user_id":4336,"materi_section_id":350,"judul":"Tugas 4 \u2013 Javascript \u2013 Loop & Array","permalink":"tugas-4-javascript-loop-array","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-dan-file-baru\"><strong>1. Menambahkan Folder Baru dan file baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buatlah folder baru didalam folder &ldquo;Tugas-Harian-Part-1&rdquo; dengan nama &ldquo;Tugas-4&rdquo;, lalu buat file baru di dalam folder tersebut dengan nama &ldquo;tugas4.js&rdquo;.<br \/><br \/>sehingga struktur foldernya seperti di bawah ini<br \/><code>  Tugas-Harian-Part-1\/\r\n<br \/>&nbsp; &nbsp;Tugas-1\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-2\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-3\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-4\/<\/code><\/p>\r\n<h3 id=\"1-membuat-file-html\"><strong>2. Kerjakan Soal di bawah ini<\/strong><\/h3>\r\n<p>kerjakan soal di bawah ini dan masukkan semua kode jawabannya ke dalam file &ldquo;tugas4.js&rdquo;<\/p>\r\n<p>kerjakan soal ini&nbsp;<strong>tanpa&nbsp;<\/strong>menggunakan kode-kode&nbsp;<strong>ES6<\/strong>&nbsp;(bagi yang sudah paham ES6), jadi kerjakan dengan kode-kode sesuai materi<\/p>\r\n<p>output nya hanya menggunakan <strong>console.log&nbsp;<\/strong>atau <strong>console.debug<\/strong>, selain itu tidak di perbolehkan<\/p>\r\n<h4><strong>soal 1<\/strong><\/h4>\r\n<p>Pada tugas ini kamu diminta untuk melakukan looping dalam JavaScript dengan menggunakan syntax&nbsp;<code>while<\/code>. Untuk membuat tantangan ini lebih menarik, kamu juga diminta untuk membuat suatu looping yang menghitung maju dan menghitung mundur. Jangan lupa tampilkan di console juga judul &lsquo;LOOPING PERTAMA&rsquo; dan &lsquo;LOOPING KEDUA&rsquo;.&rdquo;<\/p>\r\n<p>Output:<\/p>\r\n<pre class=\"wp-block-code\"><code>LOOPING PERTAMA\r\n2 - I love coding\r\n4 - I love coding\r\n6 - I love coding\r\n8 - I love coding\r\n10 - I love coding\r\n12 - I love coding\r\n14 - I love coding\r\n16 - I love coding\r\n18 - I love coding\r\n20 - I love coding\r\nLOOPING KEDUA\r\n20 - I will become a frontend developer\r\n18 - I will become a frontend developer                                                                              \r\n16 - I will become a frontend developer\r\n14 - I will become a frontend developer\r\n12 - I will become a frontend developer\r\n10 - I will become a frontend developer\r\n8 - I will become a frontend developer\r\n6 - I will become a frontend developer\r\n4 - I will become a frontend developer\r\n2 - I will become a frontend developer<\/code><\/pre>\r\n<h4><strong>soal 2<\/strong><\/h4>\r\n<p>Pada tugas ini kamu diminta untuk melakukan looping dalam JavaScript dengan menggunakan syntax&nbsp;<code>for<\/code>. Untuk membuat tantangan ini lebih menarik, kamu juga diminta untuk memenuhi syarat tertentu yaitu:<\/p>\r\n<p>SYARAT:<br \/>A. Jika angka ganjil maka tampilkan Santai<br \/>B. Jika angka genap maka tampilkan Berkualitas<br \/>C. Jika angka yang sedang ditampilkan adalah kelipatan 3 DAN angka ganjil maka tampilkan I Love Coding.<\/p>\r\n<p>Output:<\/p>\r\n<pre class=\"wp-block-code\"><code>1 - Santai\r\n2 - Berkualitas\r\n3 - I Love Coding \r\n4 - Berkualitas\r\n5 - Santai\r\n6 - Berkualitas\r\n7 - Santai\r\n8 - Berkualitas\r\n9 - I Love Coding\r\n10 - Berkualitas\r\n11 - Santai\r\n12 - Berkualitas\r\n13 - Santai\r\n14 - Berkualitas\r\n15 - I Love Coding\r\n16 - Berkualitas\r\n17 - Santai\r\n18 - Berkualitas\r\n19 - Santai\r\n20 - Berkualitas<\/code><\/pre>\r\n<h4><strong>soal 3<\/strong><\/h4>\r\n<p>Kali ini kamu diminta untuk menampilkan sebuah segitiga dengan tanda pagar (#) dengan dimensi tinggi 7 dan alas 7. Looping boleh menggunakan syntax apa pun (<code>while<\/code>,&nbsp;<code>for<\/code>,&nbsp;<code>do while<\/code>).<\/p>\r\n<p>Output:<\/p>\r\n<pre class=\"wp-block-code\"><code>#\r\n##\r\n###\r\n####\r\n#####\r\n######\r\n#######<\/code><\/pre>\r\n<h4>soal 4<\/h4>\r\n<p>buatlah variabel seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var kalimat=[\"aku\", \"saya\", \"sangat\", \"sangat\", \"senang\", \"belajar\", \"javascript\"]<\/code><\/pre>\r\n<p>ubah kalimat diatas menjadi seperti di bawah ini:<\/p>\r\n<p><code>[\"saya\", \"sangat\", \"senang\", \"belajar\", \"javascript\"]<\/code><code><\/code><\/p>\r\n<p>lalu tampilkan dengan output seperti di bawah ini:<\/p>\r\n<p>\"saya sangat senang belajar javascript\"<\/p>\r\n<h4>soal 5<\/h4>\r\n<p>buatlah variabel seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var sayuran=[]<\/code><\/pre>\r\n<p>perlu di ingat bahwa <strong>deklarasi variabel sayuran<\/strong> diatas di mulai dengan <strong>array kosong<\/strong> dulu&nbsp;<\/p>\r\n<p>tambahkanlah data di bawah ini ke variabel sayuran:<\/p>\r\n<ul>\r\n<li>Kangkung<\/li>\r\n<li>Bayam<\/li>\r\n<li>Buncis<\/li>\r\n<li>Kubis<\/li>\r\n<li>Timun<\/li>\r\n<li>Seledri<\/li>\r\n<li>Tauge<\/li>\r\n<\/ul>\r\n<p>lalu urutkan berdasarkan alfabet dan lalu tampilkan dengan loop dan beri angka di depannya sehingga menghasilkan output seperti ini:<\/p>\r\n<p>1. Bayam<br \/>2. Buncis<br \/>3. Kangkung<br \/>4. Kubis<br \/>5. Seledri<br \/>6. Tauge<br \/>7. Timun<\/p>\r\n<h3 id=\"3-tips\"><strong>3. Tips<\/strong><\/h3>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ soal 1\r\n.... jawaban soal 1\r\n\r\n\/\/ soal 2\r\n.... jawaban soal 2\r\n\r\ndan seterusnya<br \/><br \/><\/code><\/pre>\r\n<div class=\"entry-content\">\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>4. Kumpulkan Tugas<\/strong><\/h3>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di tab materi -&gt; lalu klik pendahuluan -&gt; lalu klik teknis pengumpulan<\/p>\r\n<\/div>\r\n<\/div>","waktu_publish":"2021-10-28 14:00:00","status_publish":"publish","urutan":4,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-28 13:48:22","waktu_publish_formatted":" Kamis, 28 Oktober 2021. 14:00:00 WIB."},{"id":1257,"uuid":"49a5273d-103d-4d3d-a8d6-4f3e9d6697de","author_user_id":4336,"materi_section_id":350,"judul":"Tugas 5 \u2013 Function & Object","permalink":"tugas-5-function-object","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-dan-file-baru\"><strong>1. Menambahkan Folder Baru dan file baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buatlah folder baru dengan nama &ldquo;Tugas-5&rdquo;, lalu buat file baru di dalam folder tersebut dengan nama &ldquo;tugas5.js&rdquo;.<\/p>\r\n<p>sehingga struktur foldernya seperti di bawah ini<br \/><code>  Tugas-Harian-Part-1\/\r\n<br \/>&nbsp; &nbsp;Tugas-1\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-2\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-3\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-4\/<br \/>&nbsp; &nbsp;Tugas-5\/<\/code><code><\/code><\/p>\r\n<h3 id=\"1-membuat-file-html\"><strong>2. Kerjakan Soal di bawah ini<\/strong><\/h3>\r\n<p>kerjakan soal di bawah ini dan masukkan semua kode jawabannya ke dalam file &ldquo;tugas5.js&rdquo;<br \/><br \/>kerjakan soal ini&nbsp;<strong>tanpa&nbsp;<\/strong>menggunakan kode-kode&nbsp;<strong>ES6<\/strong>&nbsp;(bagi yang sudah paham ES6), jadi kerjakan dengan kode-kode sesuai materi<\/p>\r\n<pre class=\"wp-block-preformatted\">&nbsp;<\/pre>\r\n<h3 id=\"soal-2\"><strong>soal 1<\/strong><\/h3>\r\n<p>Tulislah 3 function dengan nama luas persegi panjang, keliling persegi panjang dan volume balok<\/p>\r\n<pre class=\"wp-block-preformatted\">\/*\r\n    Tulis code function di sini\r\n*\/\r\n \r\nvar panjang= 12\r\nvar lebar= 4<br \/>var tinggi = 8\r\n \r\nvar luasPersegiPanjang = luasPersegiPanjang(panjang, lebar)<br \/>var kelilingPersegiPanjang = kelilingPersegiPanjang(panjang, lebar)<br \/>var volumeBalok = volumeBalok(panjang, lebar, tinggi)<br \/><br \/>console.log(luasPersegiPanjang) <br \/>console.log(kelilingPersegiPanjang)<br \/>console.log(volumeBalok)<\/pre>\r\n<h3 id=\"soal-3\"><strong>soal 2<\/strong><\/h3>\r\n<p>Tulislah sebuah function dengan nama introduce() yang memproses paramater yang dikirim menjadi sebuah kalimat perkenalan seperti berikut: &ldquo;Nama saya [nama], umur saya [umur] tahun, alamat saya di [alamat], dan saya punya hobby yaitu [hobi]!&rdquo;<\/p>\r\n<pre class=\"wp-block-preformatted\">\/* \r\n    Tulis kode function di sini\r\n*\/\r\n \r\nvar name = \"John\"\r\nvar age = 30\r\nvar address = \"Jalan belum jadi\"\r\nvar hobby = \"Gaming\"\r\n \r\nvar perkenalan = introduce(name, age, address, hobby)\r\nconsole.log(perkenalan) \/\/ Menampilkan \"Nama saya John, umur saya 30 tahun, alamat saya di Jalan belum jadi, dan saya punya hobby yaitu Gaming!\" <\/pre>\r\n<h4><strong>soal 3<\/strong><\/h4>\r\n<p>ubahlah array di bawah ini menjadi object dengan property nama, jenis kelamin, hobi dan tahun lahir (var arrayDaftarPeserta harus di olah menjadi object)<\/p>\r\n<pre class=\"wp-block-code\"><code>var arrayDaftarPeserta = [\"John Doe\", \"laki-laki\", \"baca buku\" , 1992]<\/code><\/pre>\r\n<h4><strong>soal 4<\/strong><\/h4>\r\n<p>anda diberikan data-data buah seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>1.nama: Nanas\r\n  warna: Kuning\r\n  ada bijinya: tidak\r\n  harga: 9000 \r\n2.nama: Jeruk\r\n  warna: Oranye\r\n  ada bijinya: ada\r\n  harga: 8000\r\n3.nama: Semangka\r\n  warna: Hijau &amp; Merah\r\n  ada bijinya: ada\r\n  harga: 10000\r\n4.nama: Pisang\r\n  warna: Kuning\r\n  ada bijinya: tidak\r\n  harga: 5000<\/code><\/pre>\r\n<p>uraikan data tersebut menjadi array of object dan munculkan data yang tidak memiliki biji<\/p>\r\n<h4><strong>soal 5<\/strong><\/h4>\r\n<p>buatlah function tambahDataFilm yang menambahkan object ke array<\/p>\r\n<pre class=\"wp-block-code\"><code>\/* <br \/>    Tulis kode function di sini <br \/>*\/<br \/><br \/>var dataFilm = []<br \/><br \/>tambahDataFilm(\"LOTR\", \"2 jam\", \"action\", \"1999\")<br \/>tambahDataFilm(\"avenger\", \"2 jam\", \"action\", \"2019\")<br \/>tambahDataFilm(\"spiderman\", \"2 jam\", \"action\", \"2004\")<br \/>tambahDataFilm(\"juon\", \"2 jam\", \"horror\", \"2004\")<\/code><\/pre>\r\n<p><code>console.log(dataFilm)<\/code><\/p>\r\n<p>berikut ini contoh output tugas 5:<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/tugas-5-c.png\" width=\"849\" height=\"543\" \/><\/p>\r\n<h3 id=\"3-tips\"><strong>3. Tips<\/strong><\/h3>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ soal 1\r\n.... jawaban soal 1\r\n\r\n\/\/ soal 2\r\n.... jawaban soal 2\r\n\r\ndan seterusnya<\/code><\/pre>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>4. Kumpulkan Tugas<\/strong><\/h3>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di tab materi -&gt; lalu klik pendahuluan -&gt; lalu klik teknis pengumpulan<\/p>\r\n<p>&nbsp;<\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-10-29 14:00:00","status_publish":"publish","urutan":5,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-29 10:55:38","waktu_publish_formatted":" Jumat, 29 Oktober 2021. 14:00:00 WIB."}]},{"id":351,"uuid":"32dc6e6a-f04c-439e-981c-ac6f779c74f1","materi_id":35,"nama":"Pekan 2 - Materi","permalink":"pekan-2-materi","urutan":4,"created_by":4336,"updated_by":4336,"created_at":"2021-08-09 16:42:06","updated_at":null,"posting":[{"id":1258,"uuid":"299c7f52-b145-471a-a2fb-04be9f27dbb4","author_user_id":4336,"materi_section_id":351,"judul":"Hari Ke-6 \u2013 Javascript \u2013 ES6","permalink":"hari-ke-6-javascript-es6","konten":"<div class=\"entry-content\">\r\n<div class=\"entry-content\">\r\n<div class=\"entry-content\">\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Javascript EcmaScript 6 ( ES6 )<\/span><\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/17.png\" \/><\/p>\r\n<p style=\"text-align: justify;\">ES6 atau EcmaScript 6 atau EcmaScript 2015 merupakan fitur bahasa pada pemrograman Javascript modern atau biasa di sebut next gen javascript. lalu kenapa kita harus mempelajari ES6, itu karena di reactJS kita akan banyak menggunakan sintaks-sintaks ES6.<\/p>\r\n<h2 id=\"daftar-fitur-es6\" style=\"text-align: justify;\"><strong>Daftar Fitur ES6<\/strong><\/h2>\r\n<ul style=\"text-align: justify;\">\r\n<li class=\"\">Arrows Function<\/li>\r\n<li class=\"\">Classes<\/li>\r\n<li class=\"\">Enchanced object literals<\/li>\r\n<li class=\"\">Template strings<\/li>\r\n<li class=\"\">Destructuring<\/li>\r\n<li class=\"\">Default + rest + spread<\/li>\r\n<li class=\"\">Let + const<\/li>\r\n<li class=\"\">Iterators + for..of<\/li>\r\n<li class=\"\">Generators<\/li>\r\n<li class=\"\">Unicode<\/li>\r\n<li class=\"\">Modules<\/li>\r\n<li class=\"\">Modules loaders<\/li>\r\n<li class=\"\">Map +set + weakmap + weakset<\/li>\r\n<li class=\"\">Proxies<\/li>\r\n<li class=\"\">Symbols<\/li>\r\n<li class=\"\">Subclassable built-ins<\/li>\r\n<li class=\"\">Promises<\/li>\r\n<li class=\"\">Math + number + string + array + object apis<\/li>\r\n<li class=\"\">Binary dan octal literals<\/li>\r\n<li class=\"\">Reflect API<\/li>\r\n<li class=\"\">Tail calls<\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">Tidak perlu menguasai seluruh fitur diatas, tetapi kita akan membagi fitur-fitur yang penting untuk di pelajari yaitu:<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>let + const<\/li>\r\n<li>arrow function<\/li>\r\n<li>default paramater<\/li>\r\n<li>Template literal<\/li>\r\n<li>Enhanced object literals<\/li>\r\n<li>Destructuring<\/li>\r\n<li>Rest Parameters + Spread Operator<\/li>\r\n<li>promise (nanti ada materinya di asynchronous)<\/li>\r\n<li>class<\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Implementasi Fitur ES6<\/span><\/p>\r\n<h2 id=\"let-const\" style=\"text-align: justify;\"><strong>Let + Const<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">let dan const merupakan <strong>statement <\/strong>untuk mendefinisikan variable sama seperti var hanya saja terdapat perbedaan diantara let + const dan var.<\/p>\r\n<p style=\"text-align: justify;\">let hampir sama seperti var hanya saja jika dalam satu block kode ada sebuah let yang sudah di definisikan kita tidak dapat mendefinisikan kembali kecuali kita membuat block kode baru di dalamnya misal seperti menambahkan if. sedangkan const sendiri bersifat tidak bisa di rubah seperti sebuah konstanta dalam matematika. var sendiri masih bisa digunakan untuk menjaga compability dengan versi sebelumnya<\/p>\r\n<p style=\"text-align: justify;\">berikut ini perbandingan var dengan let + const:<\/p>\r\n<p><strong>Before ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>var x = 1;\r\n \r\nif (x === 1) {\r\nvar x = 2;\r\n \r\nconsole.log(x);\r\n\/\/ expected output: 2\r\n}\r\n \r\nconsole.log(x); \/\/ 2 <\/code><\/pre>\r\n<p><strong>After ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>let x = 1;\r\n \r\nif (x === 1) {\r\n  let x = 2;\r\n \r\n  console.log(x);\r\n  \/\/ expected output: 2\r\n}\r\n \r\nconsole.log(x); \/\/ 1 \r\n\r\nconst number = 42;\r\nnumber = 100; \/\/ Uncaught TypeError: Assignment to constant variable.<\/code><\/pre>\r\n<h2 id=\"arrow-functions\" style=\"text-align: justify;\"><strong>Arrow Functions<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">arrow functions merupakan fitur yang ada pada es6 bisa dibilang lebih singkat dari function biasa, function biasa sendiri masih bisa di gunakan.<\/p>\r\n<p style=\"text-align: justify;\">berikut ini perbandingan penggunaan function dan arrow function:<\/p>\r\n<p style=\"text-align: justify;\"><strong>Before ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>function myFunction (){\r\n    \/\/ isi Function\r\n}\r\n\/\/ panggil Function\r\nmyFunction()<\/code><\/pre>\r\n<p><strong>After ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>const myFuncton = () =&gt; {\r\n    \/\/function\r\n}\r\n\r\n\/\/ panggil Function\r\nmyFunction()<\/code><\/pre>\r\n<h2 id=\"default-parameters\" style=\"text-align: justify;\"><strong>Default Parameters<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">biasanya kita dalam membuat function pasti punya parameter tapi apakah parameter itu sendiri bisa di beri default, jawabannya adalah ya di ES6 kita dapat memasukkan default parameter seperti contoh di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>function multiply(a, b = 1) {\r\n  return a * b;\r\n}\r\n \r\nconsole.log(multiply(5, 2));\r\n\/\/ expected output: 10\r\n \r\nconsole.log(multiply(5));\r\n\/\/ expected output: 5 <\/code><\/pre>\r\n<h2 id=\"template-literals\" style=\"text-align: justify;\"><strong>Template Literals<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">template literal atau biasa di sebut template string merupakan fitur ES6 yang memungkinkan kita menyusun string dengan rapi dengan menggunakan tanda petik terbalik dan ${variabelnya}.<\/p>\r\n<p style=\"text-align: justify;\">berikut ini cara menggunakan template literal:<\/p>\r\n<pre class=\"wp-block-code\"><code>const firstName= \"John\"\r\nconst lastName = \"Doe\"\r\nconst teamName = \"Mr\"\r\n\r\nconst theString = `${firstName} ${lastName}, ${teamName}`\r\n\r\nconsole.log(theString) \/\/ John Doe, Mr<\/code><\/pre>\r\n<h2 id=\"enhanced-object-literals\" style=\"text-align: justify;\"><strong>Enhanced object literals&nbsp;<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">Enhanced object literals merupakan fitur ES6 yang memungkinkan kita untuk menyederhanakan sebuah object, dimana biasanya kita selalu menulis property dan value, tetapi jika terdapat kondisi ada variabel yang namanya sama dengan property maka kita bisa assign hal tersebut sebagai value tetapi dengan&nbsp; hanya menulis property nya saja<\/p>\r\n<p style=\"text-align: justify;\">berikut ini contoh enhanced object literals dan perbandingan dengan javascript sebelum es6<\/p>\r\n<p style=\"text-align: justify;\"><strong>Before ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>const fullName = 'John Doe'\r\n \r\nconst john = {\r\n  fullName: fullName\r\n}<\/code><\/pre>\r\n<p style=\"text-align: justify;\"><strong>After ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>const fullName = 'John Doe'\r\n \r\nconst john = {fullName}<\/code><\/pre>\r\n<h2 id=\"destructuring\" style=\"text-align: justify;\"><strong>Destructuring<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">Destructuring merupakan ekspresi javascript yang memungkinkan untuk membagi atau memecah nilai dari sebuah array atau objek ke dalam variabel yang berbeda<\/p>\r\n<p style=\"text-align: justify;\">berikut ini contoh penggunaan destructuring dan perbandingannya dengan sebelum destructuring<\/p>\r\n<p style=\"text-align: justify;\"><strong>Before ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ array\r\nvar numbers = [1,2,3]\r\n\r\nvar numberOne = numbers[0]\r\nvar numberTwo = numbers[1]\r\nvar numberThree = numbers[2]\r\n\r\nconsole.log(numberOne)\r\n\r\n\/\/ object\r\nvar studentName = {\r\n    firstName: 'Peter',\r\n    lastName: 'Parker'\r\n};\r\n \r\nconst firstName = studentName.firstName;\r\nconst lastName = studentName.lastName;\r\n\r\nconsole.log(firstName)<\/code><\/pre>\r\n<p style=\"text-align: justify;\"><strong>After ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ array\r\nlet numbers = [1,2,3]\r\n\r\nconst [numberOne, numberTwo, numberThree] = numbers\r\n\r\nconsole.log(numberOne)\r\n\r\n\/\/ object\r\nvar studentName = {\r\n    firstName: 'Peter',\r\n    lastName: 'Parker'\r\n};\r\n \r\nconst {firstName, lastName} = studentName\r\n\r\nconsole.log(firstName)<\/code><\/pre>\r\n<p id=\"rest-parameters-spread-operator\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Rest Parameters + Spread Operator<\/span><\/p>\r\n<p style=\"text-align: justify;\">Rest Parameters dan Spread Operator di lambangkan dengan simbol yang sama yaitu \"...\"<\/p>\r\n<p style=\"text-align: justify;\"><strong>Rest Parameters <\/strong><\/p>\r\n<p style=\"text-align: justify;\">Rest Parameter&nbsp;ini berguna untuk menggabungkan semua paramater pada&nbsp;function&nbsp;ke dalam array. Dengan menggunakan&nbsp;Rest Parameter&nbsp;ini dapat membantu kita mendefinisikan&nbsp;function&nbsp;dengan rapi serta memberikan parameter yang tidak terbatas pada sebuah&nbsp;function.<\/p>\r\n<p style=\"text-align: justify;\">berikut ini contoh penggunaan rest parameters:<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/first example\r\nlet scores = ['98', '95', '93', '90', '87', '85']\r\nlet [first, second, third, ...restOfScores] = scores;\r\n \r\nconsole.log(first) \/\/ 98\r\nconsole.log(second) \/\/ 95\r\nconsole.log(third) \/\/ 93\r\nconsole.log(restOfScores) \/\/ [90, 87, 85] \r\n\r\n\/\/second example <br data-rich-text-line-break=\"true\" \/>const filter = (...rest) =&gt;{ <br data-rich-text-line-break=\"true\" \/>return rest.filter(el =&gt; el.text !== undefined) <br data-rich-text-line-break=\"true\" \/>} <br data-rich-text-line-break=\"true\" \/><br data-rich-text-line-break=\"true\" \/>console.log(filter(1, {text: \"wonderful\"}, \"next\")) \/\/ wonderful<br data-rich-text-line-break=\"true\" \/><br data-rich-text-line-break=\"true\" \/>\/\/third example <br data-rich-text-line-break=\"true\" \/>const fullName = (...rest) =&gt;{ <br data-rich-text-line-break=\"true\" \/>let [firstName, lastName] = rest<br data-rich-text-line-break=\"true\" \/>return `${firstName} ${lastName}`<br data-rich-text-line-break=\"true\" \/>} <br data-rich-text-line-break=\"true\" \/><br data-rich-text-line-break=\"true\" \/>console.log(fullName(\"John\", \"Doe\")) \/\/ John Doe<br \/><\/code><\/pre>\r\n<p style=\"text-align: justify;\"><strong>Spread Operator<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Spread Operator&nbsp;digunakan untuk membagi elemen array atau properti pada objek, sehingga elemen array dapat ditambahkan\/dimasukan ke dalam array baru<\/p>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p style=\"text-align: justify;\">berikut ini contoh penggunaan Spread Operator:<\/p>\r\n<pre class=\"wp-block-code\"><code>\r\n\/\/ spread operator\r\nlet array1 = ['one', 'two']\r\nlet array2 = ['three', 'four']\r\nlet array3 = ['five', 'six'] &nbsp; <br \/><br \/><strong>Before ES6 :<\/strong> &nbsp; <br \/>var combinedArray = array1.concat(array2).concat(array3)\r\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six'] &nbsp; <br \/><br \/><strong>After ES6 :<\/strong> &nbsp; let combinedArray = [...array1, ...array2, ...array3]\r\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six']<br \/><br \/>\/\/Spread in object<br data-rich-text-line-break=\"true\" \/><br data-rich-text-line-break=\"true\" \/>let person = {name: \"john\", age: 30}<br data-rich-text-line-break=\"true\" \/><br data-rich-text-line-break=\"true\" \/>let newPerson = {...person, hobby: \"Gaming\"}<br data-rich-text-line-break=\"true\" \/><br data-rich-text-line-break=\"true\" \/>console.log(newPerson) \/\/ {name: \"john\", age: 30, hobby: \"Gaming\"}<\/code><\/pre>\r\n<hr \/>\r\n<div class=\"entry-content\">\r\n<div class=\"entry-content\">\r\n<div class=\"entry-content\">\r\n<p><strong>Video Pembahasan Materi<\/strong><\/p>\r\n<p>berikut ini video pembahasan materi hari 6: <a href=\"https:\/\/youtu.be\/dC79Ou0YGJ4\">https:\/\/youtu.be\/dC79Ou0YGJ4<\/a><\/p>\r\n<\/div>\r\n<\/div>\r\n<\/div>\r\n<p><strong>Referensi Video :<\/strong><\/p>\r\n<ul>\r\n<li>Sekolah Koding : <a href=\"https:\/\/youtu.be\/XSgSWPLfFvE\">https:\/\/youtu.be\/XSgSWPLfFvE<\/a><\/li>\r\n<li><a href=\"https:\/\/www.youtube.com\/channel\/UCSNkfKl4cU-55Nm-ovsvOHQ\">Elzero Web School<\/a> : <a href=\"https:\/\/youtu.be\/DcyOVddJ62E\">https:\/\/youtu.be\/DcyOVddJ62E<\/a><\/li>\r\n<\/ul>\r\n<p><strong>Referensi Lainnya Materi ES6<\/strong>:&nbsp;<\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_es6.asp\">https:\/\/www.w3schools.com\/js\/js_es6.asp<\/a><\/li>\r\n<li><a href=\"https:\/\/medium.com\/linux-user-group-surabaya\/rest-dan-spread-pada-javascript-13f572ab85f4\">https:\/\/medium.com\/linux-user-group-surabaya\/rest-dan-spread-pada-javascript-13f572ab85f4<\/a><\/li>\r\n<li><a href=\"https:\/\/medium.com\/coderupa\/es6-var-let-const-apa-bedanya-1cd4daaee9f0\">https:\/\/medium.com\/coderupa\/es6-var-let-const-apa-bedanya-1cd4daaee9f0<\/a><\/li>\r\n<li><a href=\"https:\/\/arrowfunxtion.com\/2018\/02\/17\/apa-itu-es6\/\">https:\/\/arrowfunxtion.com\/2018\/02\/17\/apa-itu-es6\/<\/a><\/li>\r\n<\/ul>\r\n<\/div>\r\n<\/div>\r\n<\/div>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>","waktu_publish":"2021-11-01 08:00:00","status_publish":"publish","urutan":1,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-11-01 07:52:32","waktu_publish_formatted":" Senin, 01 November 2021. 08:00:00 WIB."},{"id":1259,"uuid":"ce3d12e2-f0ba-47a2-b8a7-55a61a2d1546","author_user_id":4336,"materi_section_id":351,"judul":"Hari Ke-7 \u2013 Javascript \u2013 Class","permalink":"hari-ke-7-javascript-class","konten":"<div class=\"entry-content\">\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Class Javascript&nbsp; ES6<\/span><\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p style=\"text-align: justify;\">Pada materi sebelumnya, telah dipelajari tentang Object Literals di Javascript. Dengan Object kita dapat merepresentasikan segala hal termasuk program yang akan kita buat dengan Javascript. Materi kali ini akan mempelajari object dalam bentuk Class.<\/p>\r\n<\/blockquote>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/18.png\" width=\"474\" height=\"341\" \/><\/p>\r\n<p style=\"text-align: justify;\">Di dalam dunia pemrograman dikenal sebuah konsep dengan nama OOP atau Object Oriented Programming. Secara sederhana, dengan konsep OOP maka segala sesuatu dapat kita anggap sebagai sebuah Object atau cetakan (Blueprint). Contohnya terdapat Object Class bernama &ldquo;Car&rdquo; yang berarti mobil. Suatu (cetakan) mobil biasanya memiliki nama dan dibuat oleh sebuah pabrikan otomotif (factory). Selain itu mobil dapat memiliki fungsi untuk berjalan, mengerem, membunyikan klakson, dll.<\/p>\r\n<p id=\"mendefinisikan-sebuah-class\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Mendefinisikan Sebuah Class&nbsp;<\/span><\/p>\r\n<p style=\"text-align: justify;\">Class sebetulnya adalah sebuah functions yang spesial, dan seperti function yang kita ketahui sebelumnya bahwa functions dapat dideklarasikan dan dipanggil begitu pula dengan Class.<\/p>\r\n<h3 id=\"deklarasi-class\" style=\"text-align: justify;\"><strong>Deklarasi Class<\/strong><\/h3>\r\n<p style=\"text-align: justify;\">Cara yang pertama untuk membuat sebuah class yaitu dengan mendeklarasikannya. Caranya adalah tuliskan &ldquo;Class&rdquo; diikuti dengan nama class-nya.<\/p>\r\n<pre class=\"wp-block-preformatted\">class Car {\r\n    constructor(brand,factory) {\r\n        this.brand = brand\r\n        this.factory = factory\r\n        this.sound = \"honk! honk!vroomvroom\"\r\n    }\r\n}<\/pre>\r\n<h3 id=\"ekspresi-class\" style=\"text-align: justify;\">Ekspresi Class<\/h3>\r\n<p style=\"text-align: justify;\">Cara lain untuk membuat sebuah class yaitu dengan cara membuat sebuah variabel. Class tersebut boleh diberikan nama atau tidak diberi nama. contohnya sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Tidak diberi nama \r\nvar Car = class {\r\n    constructor(brand, factory) {\r\n        this.brand = brand\r\n        this.factory = factory\r\n    }\r\n}\r\n \r\nconsole.log(Car.name) \/\/ Car\r\n \r\n\/\/ Diberi nama\r\nvar Car = class Car2 {\r\n    constructor(brand, factory) {\r\n        this.brand = brand\r\n        this.factory = factory\r\n    }\r\n}\r\nconsole.log(Car.name) \/\/ Car2<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Nama sebuah Class biasanya menggunakan kapital pada huruf pertama nya. Jika terdapat dua kata atau lebih maka huruf pertama pada kata yang selanjutnya harus kapital.<\/p>\r\n<pre class=\"wp-block-preformatted\"><code>class Car{} \/\/ BENAR<\/code><br \/><code>class car{} \/\/ SALAH<\/code><br \/><code>class SportsCar {} \/\/ BENAR<\/code><br \/><code>class sportscar {} \/\/ SALAH <\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<\/blockquote>\r\n<p><span style=\"font-size: 24pt;\">Method Javascript ES6<\/span><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #34495e;\"><span style=\"color: #ffffff;\">&nbsp;Anda dapat mencoba kode dibawah ini :&nbsp;<\/span><\/span><span style=\"color: #ffffff;\"> <\/span><span style=\"color: #000000;\">klik disini<\/span><\/p>\r\n<h2 id=\"method\" style=\"text-align: justify;\"><strong>Method<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">Sintaks constructor pada class merupakan method khusus, dimana dilakukan inisialisasi properties, yang akan dieksekusi secara otomatis ketika class dibuat, dan ia harus memiliki nama &ldquo;constructor&rdquo;. (Jika tidak dituliskan, maka Javascript akan menambahkan method constructor kosong secara otomatis).<\/p>\r\n<p style=\"text-align: justify;\">Kita juga dapat membuat method sendiri, dengan sintaks yang sudah biasa kita gunakan:<\/p>\r\n<pre class=\"wp-block-preformatted\">class&nbsp;Car {\r\n&nbsp;&nbsp;constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= brand;\r\n&nbsp;&nbsp;}\r\n&nbsp; present() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"I have a \"&nbsp;+&nbsp;this.carname;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nconsole.log(mycar.present()) \/\/ I have a Ford<\/pre>\r\n<p style=\"text-align: justify;\">Seperti yang terlihat pada contoh di atas, method dapat digunakan dengan cara memanggil nama class dan method nya ditambah dengan kurung buka dan kurung tutup. Parameter bisa dimasukan di dalam tanda kurung jika diperlukan, seperti pada contoh di bawah.<\/p>\r\n<pre class=\"wp-block-preformatted\">class&nbsp;Car {\r\n&nbsp;&nbsp;constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= brand;\r\n&nbsp;&nbsp;}\r\n&nbsp; present(x) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x +&nbsp;\", I have a \"&nbsp;+&nbsp;this.carname;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nconsole.log(mycar.present(\"Hello\"));<\/pre>\r\n<h2 id=\"static-method\" style=\"text-align: justify;\"><strong>Static Method<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">Static methods didefinisikan hanya untuk class itu sendiri. sehingga, jika melihat pada contoh sebelumnya static method hanya bisa diakses melalui Car, dan tidak bisa melalui mycar:<\/p>\r\n<pre class=\"wp-block-preformatted\"> class&nbsp;Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;=&nbsp;brand;\r\n&nbsp;&nbsp;}\r\n&nbsp;&nbsp;static&nbsp;hello() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"Hello!!\";\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\n\r\n\/\/ memanggil 'hello()' pada class Car:\r\nconsole.log(Car.hello());\r\n\r\n\/\/ dan tidak bisa pada 'mycar':\r\n\/\/ console.log(mycar.hello());\r\n\/\/ jika menggunakan sintaks tersebut akan memunculkan error.<\/pre>\r\n<p><span style=\"font-size: 24pt;\">Inheritance class Javascript ( Pewarisan )<\/span><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">Untuk membuat inheritance dari suatu class, gunakan keyword&nbsp;<code>extends<\/code>. Class yang dibuat dengan metode inheritance, akan memiliki method yang sama dengan class asalnya. Contoh berikut adalah class Model yang merupakan inheritance dari class Car:<\/p>\r\n<pre class=\"wp-block-preformatted\"> class&nbsp;Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;=&nbsp;brand;\r\n&nbsp;&nbsp;}\r\n&nbsp; present() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;'I have a '&nbsp;+&nbsp;this.carname;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nclass&nbsp;Model&nbsp;extends&nbsp;Car {\r\n&nbsp;&nbsp;constructor(brand, mod) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;super(brand);\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.model&nbsp;= mod;\r\n&nbsp;&nbsp;}\r\n&nbsp; show() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.present() +&nbsp;', it is a '&nbsp;+&nbsp;this.model;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Model(\"Ford\",&nbsp;\"Mustang\");\r\nconsole.log(mycar.show());<\/pre>\r\n<p style=\"text-align: justify;\">Method&nbsp;<code>super()<\/code>&nbsp;mengacu pada class asalnya, dimana dengan menggunakan method&nbsp;<code>super()<\/code>&nbsp; di dalam method constructor, kita dapat memanggil constructor class asalnya dan mengakses property dan method nya.<\/p>\r\n<h2 id=\"getters-dan-setters\" style=\"text-align: justify;\"><strong>Getters dan Setters<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">Pada class juga kita dapat menggunakan getter dan setter. getter dan setter dapat digunakan untuk melakukan proses tertentu pada suatu property, sebelum property tersebut digunakan. Untuk menambahak getter dan setter pada class, gunakan keyword&nbsp;<code>get<\/code>&nbsp;dan&nbsp;<code>set<\/code>. (Meskipun getter merupakan sebuah method, namun dalam menggunakannya tidak digunakan &ldquo;( )&rdquo; setelah memanggil method tersebut, seperti pada contoh di bawah).<\/p>\r\n<pre class=\"wp-block-preformatted\"> class&nbsp;Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= brand;\r\n&nbsp; }\r\n&nbsp; get cnam() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.carname;\r\n&nbsp; }\r\n&nbsp; set cnam(x) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= x;\r\n&nbsp; }\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nconsole.log(mycar.cnam); \/\/ Ford\r\n\/\/ getter cnam digunakan tanpa \"()\"<\/pre>\r\n<p style=\"text-align: justify;\">Biasanya untuk membedakan method dengan property, property ditulis dengan menggunakan &ldquo;_&rdquo; di depan namanya, sementara method (termasuk getter dan setter) tidak.<\/p>\r\n<pre class=\"wp-block-preformatted\">class Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this._carname = brand;\r\n&nbsp; }\r\n&nbsp; get carname() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return this._carname;\r\n&nbsp; }\r\n&nbsp; set carname(x) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this._carname = x;\r\n&nbsp; }\r\n}\r\n\r\nmycar = new Car(\"Ford\");\r\nmycar.carname = \"Volvo\"; \/\/ memanggil setter, mengubah Ford menjadi Volvo\r\nconsole.log(mycar.carname); \/\/ Volvo<br \/><br \/><\/pre>\r\n<hr \/>\r\n<p>&nbsp;<\/p>\r\n<p><strong>Referensi Video :<\/strong><\/p>\r\n<ul>\r\n<li><a href=\"\/dasbor\/materi\/editor\/posting\/Programming%20with%20Mosh\">Programming with Mosh<\/a> <a href=\"https:\/\/youtu.be\/NCwa_xi0Uuc\">https:\/\/youtu.be\/NCwa_xi0Uuc<\/a><\/li>\r\n<li><a href=\"https:\/\/youtu.be\/MKQ1KRl1hFU\">https:\/\/youtu.be\/MKQ1KRl1hFU<\/a><\/li>\r\n<\/ul>\r\n<p><strong>Referensi Lainnya Materi Class ES6<\/strong><\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_classes.asp\">https:\/\/www.w3schools.com\/js\/js_classes.asp<\/a><\/li>\r\n<li><a href=\"https:\/\/www.javatpoint.com\/es6-classes\">https:\/\/www.javatpoint.com\/es6-classes<\/a><\/li>\r\n<li><a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-class\/\">https:\/\/www.javascripttutorial.net\/es6\/javascript-class\/<\/a><\/li>\r\n<\/ul>\r\n<p><strong>Video Pembahasan Materi<\/strong><\/p>\r\n<p>berikut ini video pembahasan materi hari 7: <a href=\"https:\/\/youtu.be\/Kezs7cmFdP8\">https:\/\/youtu.be\/Kezs7cmFdP8<\/a><\/p>\r\n<\/div>","waktu_publish":"2021-11-02 08:00:00","status_publish":"publish","urutan":2,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-11-02 07:57:49","waktu_publish_formatted":" Selasa, 02 November 2021. 08:00:00 WIB."},{"id":1260,"uuid":"7312c24b-5157-4dab-962f-54a71f5ed896","author_user_id":4336,"materi_section_id":351,"judul":"Hari Ke-8 \u2013 Javascript \u2013 Asynchronous","permalink":"hari-ke-8-javascript-asynchronous","konten":"<div class=\"entry-content\">\r\n<p><span style=\"font-size: 24pt;\">Asynchronous Javascript<\/span><\/p>\r\n<p style=\"text-align: justify;\">Di dalam dunia pemrograman terdapat dua cara dalam menjalankan program: Synchronous dan Asynchronous. Synchronous artinya program berjalan secara berurutan sedangkan Asynchronous artinya program berjalan bersama-sama.&nbsp;Perhatikanlah ilustrasi dibawah ini :<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/19.png\" width=\"370\" height=\"194\" \/><\/p>\r\n<p>Bisa kita lihat saat penggunaan synchronous, waktu eksekusi setiap task nya akan dilakukan jika task sebelumnya sudah selesai. Sedangakn asynchrounous, dia akan melakukan semua task secara bersamaan sesuai waktu yang telah diberikan. Secara waktu eksekusi pun juga cukup jauh berbeda.<\/p>\r\n<p style=\"text-align: justify;\">Terkadang di dalam program yang kita buat terdapat suatu sintaks yang mengharuskan code pada baris tersebut untuk dijalankan terlebih dahulu sebelum menjalankan sintaks pada baris selanjutnya. Hal ini dikenal dengan istilah&nbsp;<strong>blocking<\/strong>. Sebaliknya&nbsp;<strong>non-blocking<\/strong>&nbsp;artinya program berjalan dengan mengeksekusi sintaks dari baris ke baris secara paralel (bersama-sama) .<\/p>\r\n<div class=\"wp-block-image\" style=\"text-align: justify;\">\r\n<figure class=\"aligncenter size-large\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LmaxxI-WCdSbno_EMIf%2F-Lmb1Y86xkSMjjQR9D_D%2Fcontrol-io.svg?alt=media&amp;token=28454ce2-c28b-4149-bd72-7fa57d83737c\" alt=\"\" \/><\/figure>\r\n<\/div>\r\n<p style=\"text-align: justify;\">Perhatikan contoh program di bawah ini:<\/p>\r\n<pre class=\"wp-block-preformatted\">setTimeout(function() {\r\n  console.log(\"saya dijalankan belakangan\")\r\n}, 3000)\r\n \r\nconsole.log(\"saya dijalankan pertama\") <\/pre>\r\n<p style=\"text-align: justify;\">Jika kita jalankan program di atas, maka yang akan tampil terlebih dahulu di console adalah &ldquo;saya dijalankan pertama&rdquo; walaupun sintaksnya ditulis belakangan setelah function setTimeout. Function setTimeout di atas merupakan salah satu contoh function asynchronous di Javascript.<\/p>\r\n<p style=\"text-align: justify;\">Cara untuk mengatasi Asynchronous seperti function setTimeout adalah dengan&nbsp;<strong>Callback<\/strong>&nbsp;atau dengan&nbsp;<strong>Promise<\/strong>.<\/p>\r\n<p id=\"callback\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Callback Javascript<\/span><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<h3 id=\"membuat-callback\" style=\"text-align: justify;\"><strong>Membuat Callback&nbsp;<\/strong><\/h3>\r\n<p style=\"text-align: justify;\">Callback adalah function yang dipanggil ketika function lain selesai menjalankan programnya. Contoh sederhana Callback adalah pada function setTimeout di atas. function setTimeout menerima dua parameter yaitu callback dan waktu tunggu (timeout). function tersebut menjalankan timeout terlebih dahulu lalu ketika waktu yang diset sudah dilewati maka function callback akan dipanggil.<\/p>\r\n<p style=\"text-align: justify;\">Contoh untuk membuat callback seperti berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Deklarasi function yang memilik callback sebagai parameter\r\nfunction periksaDokter(nomerAntri, callback) {\r\n    if(nomerAntri &gt; 50 ) {\r\n        callback(false)\r\n    } else if(nomerAntri &lt; 10) {\r\n        callback(true)\r\n    }    \r\n} <\/pre>\r\n<p style=\"text-align: justify;\">Misalkan kita ingin periksa ke dokter yang antriannya sering panjang dan memakai nomer antri melalui pemesanan online. Setelah registrasi online lalu kita melakukan pemesanan dan menunggu nomer antrian. Function di atas menerima parameter nomer antri dan sebuah callback. Dilakukan pengecekan kondisi jika nomor antriannya lebih dari 50 maka lebih baik jalan-jalan dulu daripada menunggu, tapi jika nomor antriannya kurang dari 10 tentunya kita harus standby lagi di klinik untuk dipanggil.<\/p>\r\n<h3 id=\"menjalankan-callback\" style=\"text-align: justify;\"><strong>Menjalankan Callback<\/strong><\/h3>\r\n<p style=\"text-align: justify;\">Setelah dideklarasi function yang memiliki callback, kini kita jalankan function tersebut.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Menjalankan function periksaDokter yang sebelumnya sudah dideklarasi\r\nperiksaDokter(65, function(check) {\r\n    if(check) {\r\n        console.log(\"sebentar lagi giliran saya\")\r\n    } else {\r\n        console.log(\"saya jalan-jalan dulu\")\r\n    }\r\n}) <\/pre>\r\n<p style=\"text-align: justify;\">Karena kita tidak ingin menunggu maka kita gunakan callback untuk mengecek apakah nomer antriannya masih lama atau tidak. Jadi ketika dicek ternyata nomer antriannya masih lama maka hasil return (callback) dari function periksaDokter bernilai false (check = false), sebaliknya jika sudah sebentar lagi akan diberikan callback dengan nilai true (check = true) .<\/p>\r\n<p style=\"text-align: justify;\">Ketika menjalankan function periksaDokter, diberikan parameter pertama yaitu nomer antrian 65 dan parameter kedua adalah sebuah deklarasi function yang merupakan callback. Seperti sudah dideklarasikan di periksaDokter bahwa callback dipanggil dengan satu parameter bernilai boolean.<\/p>\r\n<p style=\"text-align: justify;\"><!-- wp:paragraph --><\/p>\r\n<p style=\"text-align: justify;\"><strong>contoh lainnya<\/strong>:<\/p>\r\n<p style=\"text-align: justify;\"><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p style=\"text-align: justify;\">terdapat fungsi callback seperti di bawah ini<\/p>\r\n<p style=\"text-align: justify;\"><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>function periksaAntrianDokter(nomerAntri, callback) {\r\n  console.log(`sekarang antrian ke-${nomerAntri}`)\r\n  setTimeout(function () {\r\n    if(nomerAntri === 10 ) { \r\n      console.log(\"saya masuk ruangan dokter\")\r\n      callback(0)\r\n    } else {\r\n      console.log(\"saya masih menunggu\")\r\n      callback(nomerAntri+1)\r\n    }    \r\n  }, 1000)\r\n}<\/code><\/pre>\r\n<p style=\"text-align: justify;\"><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p style=\"text-align: justify;\">cara menggunakan callback dengan setTimeout di dalamnya adalah seperti ini:<\/p>\r\n<p style=\"text-align: justify;\"><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>var nomorAntriSekarang = 7\r\n\r\n\/\/ contoh menggunakan callback hell\r\nperiksaAntrianDokter(nomorAntriSekarang, function(nomorAntriBaru){\r\n  periksaAntrianDokter(nomorAntriBaru, function(nomorAntriBaru1){\r\n    periksaAntrianDokter(nomorAntriBaru1, function(nomorAntriBaru2){\r\n      periksaAntrianDokter(nomorAntriBaru2, function(nomorAntriBaru3){\r\n        return nomorAntriBaru3\r\n      })\r\n    })\r\n  })\r\n});\r\n\r\n\/\/ atau dengan\r\n menggunakan function recursive\r\nfunction execute(nomorAntri){\r\n  periksaAntrianDokter(nomorAntri, function(nomorAntriBaru){\r\n    if (nomorAntriBaru !== 0){\r\n      execute(nomorAntriBaru)\r\n    }\r\n  })\r\n}\r\n\r\nexecute(nomorAntriSekarang)<\/code><\/pre>\r\n<p style=\"text-align: justify;\"><!-- \/wp:code --><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p id=\"promise\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Promise Javascript<\/span><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">Sesuai dengan namanya, Promise berarti janji. Seperti janji yang biasanya memakan waktu dan janji bisa ditepati (resolve) atau diingkari (reject). Misalkan pada contoh di bawah ini seorang anak dijanjikan mendapatkan sebuah handphone baru oleh Ibunya. Jika Ibunya sedang bahagia maka janji sebuah handphone baru ditepati, selain itu jika ibunya sedang marah maka janji diingkari.<\/p>\r\n<h3 id=\"membuat-promise\" style=\"text-align: justify;\"><strong>Membuat Promise<\/strong><\/h3>\r\n<p style=\"text-align: justify;\">Cara membuat promise adalah dengan menginstance sebuah class Promise. class Promise tersebut sudah disediakan di Javascript. Parameter yang dikirim ketika melakukan instance class Promise yaitu sebuah function yang menerima dua parameter yaitu resolve dan reject.<\/p>\r\n<pre class=\"wp-block-preformatted\">var isMomHappy = false;\r\n \r\n\/\/ Promise\r\nvar willIGetNewPhone = new Promise(\r\n    function (resolve, reject) {\r\n        if (isMomHappy) {\r\n            var phone = {\r\n                brand: 'Samsung',\r\n                color: 'black'\r\n            };\r\n            resolve(phone); \/\/ fulfilled atau janji dipenuhi\r\n        } else {\r\n            var reason = new Error('mom is not happy');\r\n            reject(reason); \/\/ reject (ingkar)\r\n        }\r\n \r\n    }\r\n); <\/pre>\r\n<h3 id=\"menjalankan-promise\" style=\"text-align: justify;\"><strong>Menjalankan Promise&nbsp;<\/strong><\/h3>\r\n<p style=\"text-align: justify;\">Menjalankan promise seperti kita menagih janji yang sudah dibuat.<\/p>\r\n<pre class=\"wp-block-preformatted\">function askMom() {\r\n    willIGetNewPhone\r\n        .then(function (fulfilled) {\r\n            \/\/ yay, you got a new phone\r\n            console.log(fulfilled);\r\n         \/\/ output: { brand: 'Samsung', color: 'black' }\r\n        })\r\n        .catch(function (error) {\r\n            \/\/ oops, mom don't buy it\r\n            console.log(error.message);\r\n         \/\/ output: 'mom is not happy'\r\n        });\r\n}\r\n \r\n\/\/ Tanya Mom untuk menagih janji\r\naskMom() <\/pre>\r\n<p style=\"text-align: justify;\">Untuk menagih janji dibuat sebuah function dengan nama askMom yang isinya adalah menagih janji willIGetNewPhone. Ketika anak menagih janji menggunakan function askMom() maka promise willIGetNewPhone dipanggil dan terdapat dua methods yaitu&nbsp;<code>then<\/code>&nbsp;dan&nbsp;<code>catch<\/code>&nbsp;. Method .then() dan .catch() keduanya menerima parameter function. Resolve yang dijalankan di pendeklarasian promise akan mengirim handphone baru dan ditangkap di method&nbsp;<code>.then()<\/code>. Sedangkan reject pada pendeklarasian promise akan mengirim pesan error atau alasan kenapa janji diingkari dan ditangkap di method&nbsp;<code>.catch()<\/code>.<\/p>\r\n<p style=\"text-align: justify;\"><!-- wp:paragraph --><\/p>\r\n<p style=\"text-align: justify;\"><strong>contoh lainnya<\/strong>:<\/p>\r\n<p style=\"text-align: justify;\"><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p style=\"text-align: justify;\">terdapat dua fungsi promise seperti di bawah ini:<\/p>\r\n<p style=\"text-align: justify;\"><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ promise periksa antrian dokter\r\nfunction periksaAntrianDokterPromise(nomerAntri) {\r\n  console.log(`sekarang antrian ke-${nomerAntri}`)\r\n  return new Promise( function (resolve, reject){\r\n    setTimeout(function () {\r\n      if(nomerAntri === 10 ) { \r\n        console.log(\"saya masuk ruangan dokter\")\r\n        reject(0)\r\n      } else {\r\n        console.log(\"saya masih menunggu\")\r\n        resolve(nomerAntri+1)\r\n      }    \r\n    }, 1000)\r\n  })\r\n}\r\n\r\n\/\/ promise periksa data pasien\r\nfunction periksaDataPasien(nomorIdPasien) {\r\n  var dataPasien = [\r\n    {id: 1, nama: \"John\", jenisKelamin: \"Laki-laki\"},\r\n    {id: 2, nama: \"Michael\", jenisKelamin: \"Laki-laki\"},\r\n    {id: 3, nama: \"Sarah\", jenisKelamin: \"Perempuan\"},\r\n    {id: 4, nama: \"Frank\", jenisKelamin: \"Laki-laki\"}\r\n  ]\r\n  return new Promise( function (resolve, reject){\r\n    var pasien = dataPasien.find(x=&gt; x.id === nomorIdPasien)\r\n    if (pasien === undefined){\r\n      reject(\"data pasien tidak ada\")\r\n    }else{\r\n      resolve(pasien)\r\n    }\r\n  })\r\n}<\/code><\/pre>\r\n<p style=\"text-align: justify;\"><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p style=\"text-align: justify;\">cara menggunakan promisenya adalah seperti ini:<\/p>\r\n<p style=\"text-align: justify;\"><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ untuk promise periksa antrian dokter\r\nvar nomorAntriSekarang = 7\r\nfunction execute(nomorAntri){\r\n periksaAntrianDokterPromise(nomorAntri).then(function(nomorAntriBaru){\r\n    if (nomorAntriBaru !== 0){\r\n      execute(nomorAntriBaru)\r\n    }\r\n  }).catch(function(err){\r\n    console.log(err)\r\n  })\r\n}\r\n\r\nexecute(nomorAntriSekarang)\r\n\r\n\r\n\/\/ untuk promise periksa data pasien\r\nperiksaDataPasien(5).then(function(data){\r\n  console.log(data)\r\n}).catch(function(err){\r\n  console.log(err)\r\n})<\/code><\/pre>\r\n<p class=\"main__header-title\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Async\/await Javascript<\/span><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong style=\"text-align: justify;\">1. Apa itu async\/await ?<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Async\/await adalah fitur yang hadir sejak ES2017. Fitur ini mempermudah kita dalam menangani proses&nbsp;<em class=\"jp\">asynchronous.&nbsp;<\/em><\/p>\r\n<p style=\"text-align: justify;\">Ada 2 kata kunci disini yaitu&nbsp;<strong class=\"hj if\"><em class=\"jp\">async<\/em><\/strong>&nbsp;dan&nbsp;<strong class=\"hj if\"><em class=\"jp\">await<\/em><\/strong><em class=\"jp\">, m<\/em>ari kita lihat contohnya :<\/p>\r\n<p style=\"text-align: justify;\">jika kita memiliki promise seperti ini:<\/p>\r\n<div style=\"text-align: justify;\">\r\n<div><code>function&nbsp;doAsync()&nbsp;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;return&nbsp;new&nbsp;Promise(&nbsp;function&nbsp;(resolve,&nbsp;reject){<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;check&nbsp;=&nbsp;true<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(check){<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(\"berhasil\")<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;}else{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reject(\"gagal\")<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;}<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<div>&nbsp;<\/div>\r\n<div>maka cara menggunakan nya pada async\/await adalah seperti ini:<\/div>\r\n<\/div>\r\n<p style=\"text-align: justify;\">&nbsp;<code>async function hello(){<br \/>&nbsp; &nbsp;var result = await doAsync()<br \/><\/code><code>&nbsp; &nbsp;console.log(result)<br \/>}<\/code><\/p>\r\n<p style=\"text-align: justify;\"><code>hello()<\/code><\/p>\r\n<p id=\"373d\" class=\"hh hi dq hj b hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ie di en\" style=\"text-align: justify;\" data-selectable-paragraph=\"\"><strong class=\"hj if\">Keterangan :<br \/>async<\/strong>&nbsp;<strong class=\"hj if\">&rarr;<\/strong>&nbsp;mengubah function menjadi asynchronous<br \/><strong class=\"hj if\">await &rarr;<\/strong>&nbsp;menunda eksekusi hingga proses asynchronous selesai, dari kode di atas berarti&nbsp;<em class=\"jp\">console.log(result)<\/em> tidak akan di eksekusi sebelum proses&nbsp;<em class=\"jp\">doAsync( )<\/em> selesai . <em class=\"jp\">await<\/em> juga bisa digunakan berkali-kali di dalam function<\/p>\r\n<p class=\"hh hi dq hj b hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ie di en\" style=\"text-align: justify;\" data-selectable-paragraph=\"\">sekarang kita coba gunakan promise pada async\/await :<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ promise periksa data pasien\r\nfunction periksaDataPasien(nomorIdPasien) {\r\n  var dataPasien = [\r\n    {id: 1, nama: \"John\", jenisKelamin: \"Laki-laki\"},\r\n    {id: 2, nama: \"Michael\", jenisKelamin: \"Laki-laki\"},\r\n    {id: 3, nama: \"Sarah\", jenisKelamin: \"Perempuan\"},\r\n    {id: 4, nama: \"Frank\", jenisKelamin: \"Laki-laki\"}\r\n  ]\r\n  return new Promise( function (resolve, reject){\r\n    var pasien = dataPasien.find(x=&gt; x.id === nomorIdPasien)\r\n    if (pasien === undefined){\r\n      reject(\"data pasien tidak ada\")\r\n    }else{\r\n      resolve(pasien)\r\n    }\r\n  })\r\n}<\/code><\/pre>\r\n<p class=\"hh hi dq hj b hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ie di en\" style=\"text-align: justify;\" data-selectable-paragraph=\"\"><code><\/code><br \/>jika promise diatas kita gunakan dalam async\/await maka akan menjadi seperti di bawah ini:<\/p>\r\n<div style=\"text-align: justify;\">\r\n<div><code>async&nbsp;function&nbsp;periksaPasien(){<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;const&nbsp;dataJohn&nbsp;=&nbsp;await&nbsp;periksaDataPasien(1)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;console.log(dataJohn)<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div>perbedaan saat kita menggunakan then dan catch disini kita bisa memasukkan hasil promise nya ke dalam variabel<\/div>\r\n<div>&nbsp;<\/div>\r\n<div><strong>2. Error Handling<\/strong><\/div>\r\n<div>&nbsp;<\/div>\r\n<div>ketika menggunakan promise maka pasangan dari then adalah catch yang di mana catch itu adalah error handling dari promise, tapi bagaiamana dengan async\/await, async\/await menggunakan try dan catch untuk error handlingnya seperti contoh di bawah ini:<br \/><br \/><\/div>\r\n<div>\r\n<div><code>async&nbsp;function&nbsp;hello(){<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;try&nbsp;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;await&nbsp;doAsync()<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;console.log(result)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;}&nbsp;catch(err){<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;console.log(err)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;}<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div><code>hello()<\/code><\/div>\r\n<div>&nbsp;<\/div>\r\n<div><strong>3. Serial &amp; Paralel<\/strong><\/div>\r\n<\/div>\r\n<div>&nbsp;<\/div>\r\n<div>Pada saat mengeksekusi beberapa proses asynchronous, ada kalanya kita harus memilih eksekusi secara serial atau parallel. Serial biasanya digunakan jika kita ingin mengeksekusi proses asynchronous secara berurutan. Sedangkan paralel jika ingin di eksekusi secara bersamaan, dalam hal ini urutan tidak menjadi prioritas tapi hasil dan performa.&nbsp;<\/div>\r\n<div>&nbsp;<\/div>\r\n<div>\r\n<div>\r\n<div><code>const&nbsp;firstPromise&nbsp;=&nbsp;()&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;return&nbsp;new&nbsp;Promise&nbsp;((resolve,reject)&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(()=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(\"first&nbsp;promise\")<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;},1000)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div><code>const&nbsp;secondPromise&nbsp;=&nbsp;()&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;return&nbsp;new&nbsp;Promise&nbsp;((resolve,reject)&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(()=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(\"second&nbsp;promise\")<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;},1000)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div><code>const&nbsp;thirdPromise&nbsp;=&nbsp;()&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;return&nbsp;new&nbsp;Promise&nbsp;((resolve,reject)&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(()=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(\"third&nbsp;promise\")<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;},1000)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div><code>\/\/ini&nbsp;paralel&nbsp;selama&nbsp;satu&nbsp;detik<\/code><\/div>\r\n<div><code>const&nbsp;asyncParalel&nbsp;=&nbsp;async&nbsp;()&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;firstPromise().then(res=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;console.log(res)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;secondPromise().then(res=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;console.log(res)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;thirdPromise().then(res=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;console.log(res)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div><code>\/\/&nbsp;ini&nbsp;berseri&nbsp;selama&nbsp;tiga&nbsp;detik<\/code><\/div>\r\n<div><code>const&nbsp;asyncSerial&nbsp;=&nbsp;async&nbsp;()&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;let&nbsp;a&nbsp;=&nbsp;await&nbsp;firstPromise()<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;console.log(a)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;let&nbsp;b&nbsp;=&nbsp;await&nbsp;secondPromise()<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;console.log(b)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;let&nbsp;c&nbsp;=&nbsp;await&nbsp;thirdPromise()<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;console.log(c)<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div><code>asyncParalel()<\/code><\/div>\r\n<div><code>asyncSerial()<\/code><\/div>\r\n<\/div>\r\n<\/div>\r\n<\/div>\r\n<p style=\"text-align: justify;\">jika kita jalankan kode diatas maka terlihat bahwa asyncParalel diatas menjalankan semua promisenya serentak sedangkan asyncSerial menjalankan kodenya satu persatu, maka dari itu permasalahan asynchronous dapat di selesaikan dengan ini.<\/p>\r\n<p style=\"text-align: justify;\">Setelah kita mengetahui metode-metode yang dapat kita gunakan untuk menghandle sebuah asynchronous pada javascript, maka kita dapat mengetahui\/menelaah dengan mudah kenapa asynchronous harus kita handle.<\/p>\r\n<p style=\"text-align: justify;\"><strong>Berikut ini gambaran setelah dan sebelum kita menghandle asynchronous pada javascript :<\/strong><\/p>\r\n<div>\r\n<pre>let angka = 1<br \/><br \/>\/\/sebelum menghandle asynchronous<br \/>console.log(\"sebelum&nbsp;menghandle&nbsp;asynchronous\")<br \/><br \/>const beforeAsync = (angka) =&gt; {<br \/> &nbsp;&nbsp;&nbsp;angka&nbsp;=&nbsp;2<br \/> &nbsp;&nbsp;&nbsp;console.log(angka)<br \/>}<br \/><br \/>beforeAsync(angka)<br \/>console.log(angka)<br \/>console.log()<br \/><br \/>\/\/setelah menghandle asynchronous<br \/>console.log(\"setelah&nbsp;menghandle&nbsp;asynchronous\")<br \/><br \/>const myFunctionPromise = (angka) =&gt;{<br \/> &nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Promise(&nbsp;(resolve,&nbsp;reject)&nbsp;=&gt;&nbsp;{<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(angka&nbsp;=&nbsp;2)<br \/> &nbsp;&nbsp;&nbsp;})<br \/>}<br \/><br \/>const afterAsync = async (param) =&gt; {<br \/> &nbsp;&nbsp;&nbsp;let&nbsp;output&nbsp;=&nbsp;await&nbsp;myFunctionPromise(param)<br \/> &nbsp;&nbsp;&nbsp;console.log(output)<br \/>}<br \/><br \/>afterAsync(angka)<br \/>console.log(angka)<br \/><br \/><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/Screenshot_44.png\" \/><br \/><br \/><br \/><\/pre>\r\n<div>Terlihat bahwa value dari variabel angka setelah asynchronous nya kita handle dia akan mengeksekusi value awalnya terlebih dahulu ( output 1 ), baru value yang memiliki perubahan (output 2). namun sebelum kita menghandle asynchronous, output dari variabel angka akan dieksekusi secara bersamaan ( malah yang dieksekusi duluan adalah value dari variabel angka yang sudah dilakukan perubahan (output 2) )<\/div>\r\n<\/div>\r\n<hr \/>\r\n<p>&nbsp;<\/p>\r\n<p><strong>Referensi Video :<\/strong><\/p>\r\n<p><strong>Referensi Lainnya Materi Asynchronous <\/strong><strong>:<\/strong><\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/medium.com\/coderupa\/panduan-komplit-asynchronous-programming-pada-javascript-part-4-async-await-fc504c344238\">https:\/\/medium.com\/coderupa\/panduan-komplit-asynchronous-programming-pada-javascript-part-4-async-await-fc504c344238<\/a><\/li>\r\n<li><a href=\"https:\/\/medium.com\/coderupa\/panduan-komplit-asynchronous-programming-pada-javascript-part-1-fca22279c056\">https:\/\/medium.com\/coderupa\/panduan-komplit-asynchronous-programming-pada-javascript-part-1-fca22279c056<\/a><\/li>\r\n<\/ul>\r\n<p><strong>Video Pembahasan Materi<\/strong><\/p>\r\n<p>berikut ini video pembahasan materi hari 8: &nbsp;<a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7jRmFAve74jVa4uZ3QDTGff\">https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7jRmFAve74jVa4uZ3QDTGff<\/a><\/p>\r\n<p style=\"text-align: justify;\"><!-- \/wp:code --><\/p>\r\n<\/div>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>","waktu_publish":"2021-11-03 08:00:00","status_publish":"publish","urutan":3,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-11-03 08:01:10","waktu_publish_formatted":" Rabu, 03 November 2021. 08:00:00 WIB."},{"id":1261,"uuid":"068a81bd-f3ee-448a-b27d-6ab43ac3e8bf","author_user_id":4336,"materi_section_id":351,"judul":"Hari Ke-9 \u2013 Pengenalan Reactjs","permalink":"hari-ke-9-pengenalan-reactjs","konten":"<div class=\"entry-content\">\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Apa itu ReactJS?<\/span><\/p>\r\n<p style=\"text-align: justify;\"><strong>ReactJS&nbsp;<\/strong>atau&nbsp;<strong>React&nbsp;<\/strong>adalah&nbsp;<strong>Javascript library<\/strong>&nbsp;yang digunakan untuk membangun<strong>&nbsp;user interface<\/strong>&nbsp;(antar muka), jadi react itu adalah sebuah library bukan sebuah framework. Kalian bisa membaca tentang React adalah library disini. Reactjs sendiri di kembangkan oleh facebook ( public realease 29 May 2013 ). React dibuat oleh Jordan Walke, seorang software engineer di Facebook, yang merilis prototipe awal React yang disebut &ldquo;FaxJS &ldquo;. React ini juga dapat digunakan sebagai basis dalam pengembangan Web App atau mobile. Namun, React hanya berkaitan dengan manajemen status dan rendering status itu ke DOM, jadi membuat aplikasi React biasanya memerlukan penggunaan library tambahan untuk perutean, serta fungsionalitas sisi klien tertentu.<\/p>\r\n<p style=\"text-align: justify;\">berikut ini hal-hal yang penting dalam reactjs:<\/p>\r\n<h3 id=\"9f62\" style=\"text-align: justify;\">1. Components<\/h3>\r\n<p style=\"text-align: justify;\"><strong>Component<\/strong>s&nbsp;bisa di bilang hal yang sangat penting di reactjs. Components adalah semacam konsep bagaimana cara untuk membuat tiap bagian dari UI (tampilan) bisa bekerja secara mandiri dan terisolasi dari bagian-bagian yang lain.<\/p>\r\n<p style=\"text-align: justify;\">Sebenarnya secara sadar atau tidak sadar bagi yang sering bekerja dengan kode HTML, selalu melakukan pemisahan bagian dari halaman-halaman misalnya&nbsp;<em>Header<\/em>,&nbsp;<em>Content<\/em>, dan&nbsp;<em>Footer<\/em>. Biasanya tujuannya agar kode tidak menumpuk di satu halaman sehingga di pisahkan ke file-file kecil yang lebih spesifik fungsinya dan kode lebih&nbsp;<em>maintainable<\/em>&nbsp;jika ada perbaikan.<\/p>\r\n<p style=\"text-align: justify;\"><strong>TIPS :<\/strong> Khusus di reactjs bahkan hampir bagian terkecil di tampilan disarankan untuk dipisahkan. components ini memiliki sifat reusable yang membuat developer tidak perlu menyalin halaman atau komponen yang sama berulang-ulang<\/p>\r\n<p style=\"text-align: justify;\">berikut ini ilustrasi components di reactjs:<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: justify;\"><img class=\"wp-image-8047\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-67-1024x651.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-67-1024x651.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-67-300x191.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-67-768x489.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-67.png 1105w\" alt=\"\" width=\"85%\" \/>\r\n<figcaption>illustrasi components<\/figcaption>\r\n<\/figure>\r\n<h3 id=\"9b23\" style=\"text-align: justify;\">2. JSX<\/h3>\r\n<p style=\"text-align: justify;\">JSX merupakan ekstensi javascript yang membuat kita dapat menuliskan tag HTML di dalam javascript.<\/p>\r\n<div class=\"wp-block-image\" style=\"text-align: justify;\">\r\n<figure class=\"aligncenter size-large\"><img class=\"wp-image-8027\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-58.png\" sizes=\"(max-width: 395px) 100vw, 395px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-58.png 395w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-58-300x33.png 300w\" alt=\"\" width=\"395\" height=\"43\" \/>\r\n<figcaption>illustrasi jsx<\/figcaption>\r\n<\/figure>\r\n<\/div>\r\n<p style=\"text-align: justify;\">pada reactjs ini kita akan JSX dan mungkin ada sedikit perbedaan di dalamnya, tetapi untuk yang sudah memahami html ini tidak akan terlihat sulit<\/p>\r\n<h3 id=\"78a0\" style=\"text-align: justify;\">3. Virtual DOM<\/h3>\r\n<p style=\"text-align: justify;\">Jika kita mulai mendalami React, akan ada pertanyaan apa itu&nbsp;<em>virtual&nbsp;<\/em>DOM?&nbsp;<strong><em>Virtual&nbsp;<\/em>DOM<\/strong> adalah representasi DOM secara&nbsp;<em>virtual<\/em>. Lalu Kenapa React menggunakan&nbsp;<em>virtual&nbsp;<\/em>DOM? Berikut ini penjelasannya :<\/p>\r\n<p style=\"text-align: justify;\">Yang pertama, JavaScript itu sebenarnya berjalan dengan cepat, yang menyebabkan JavaScript terasa&nbsp;lambat adalah ketika JavaScript mengolah DOM. Apa itu dom ? DOM adalah representasi dari UI pada aplikasi kita. Secara singkat bentuk DOM sendiri adalah struktur data tree, karena itu jika adanya perubahan atau update ke dom akan cepat. Namun, setelah adanya perubahan pada dom, element yang dirubah dari mulai parent hingga child nya akan dirender ulang untuk mengupdate UI di aplikasi kita. Proses re-rendering atau re-painting UI ini lah yang membuat lambat, Berikut ini ilustrasi dari DOM :<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/20.gif\" \/><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">Namun pada React, React membuat&nbsp;<em>virtual&nbsp;<\/em>DOM untuk mempercepat urusan tersebut. React melakukan semua operasi di dalam&nbsp;<em>virtual&nbsp;<\/em>DOM. Setelah operasi tersebut selesai, React menulis perubahan tersebut di DOM.<\/p>\r\n<p style=\"text-align: justify;\">Berikut ini proses pada React jika ada perubahan suatu elemen di dalam DOM:<\/p>\r\n<p style=\"text-align: justify; padding-left: 40px;\">1. React sudah mempunyai representasi dari DOM di virtual DOM.<\/p>\r\n<p style=\"text-align: justify; padding-left: 40px;\">2. React menerima representasi DOM yang berisi perubahan.<\/p>\r\n<p style=\"text-align: justify; padding-left: 40px;\">3. React membandingkan perbedaan kedua representasi lama dan baru.<\/p>\r\n<p style=\"text-align: justify; padding-left: 40px;\">4. Hasil dari perbandingan tersebut dimasukkan ke antrian.<\/p>\r\n<p style=\"text-align: justify; padding-left: 40px;\">5. Terakhir React akan me-<em>render&nbsp;<\/em>ulang&nbsp;<em>patch&nbsp;<\/em>tersebut ke DOM<\/p>\r\n<p>Analoginya begini, saya punya pensil dan spidol. Ketika saya menulis di kertas menggunakan spidol dan melakukan kesalahan (<em>typo<\/em>) di tengah paragraf maka saya harus mengganti dengan kertas yang baru dan menulis lagi dari awal. Namun jika saya menggunakan pensil ( Anggaplah React yang sedang menggunakan Virtual DOM ), saya bisa menghapus kesalahan tersebut dengan penghapus tanpa mengulang lagi dari awal.<\/p>\r\n<h3 id=\"de66\" style=\"text-align: justify;\">4. States &amp; Lifecycle<\/h3>\r\n<p style=\"text-align: justify;\"><strong>State&nbsp;<\/strong>adalah asal dari suatu data. Komponen pada react tentunya membutuhkan data (tidak semua namun rata-rata membutuhkan data). Data tersebut dapat berasal dari mana saja. State adalah salah satu sumber data tersebut. Selain state data dari komponen juga dapat berasal dari props (bukan property).<\/p>\r\n<p>Terdapat tiga <strong>Lifecycle&nbsp;<\/strong>dalam sebuah komponen dalam react yaitu :<\/p>\r\n<ol>\r\n<li>Inisialisasi \/ mounting (ketika komponen dibuat\/ditambahkan pertama kali pada DOM)<\/li>\r\n<li>Update \/ rerender (ketika terdapat perubahan state\/prop yang mengakibatkan perubahan pada DOM)<\/li>\r\n<li>Unmounting (ketika komponen akan dihapus dari DOM)<\/li>\r\n<\/ol>\r\n<p>Pada setiap lifecycle tersebut, komponen react akan mengeksekusi method\/fungsi yang berbeda yang kita sebut sebagai lifecycle methods. Beberapa method mempunyai prefix will dan did yang menunjukkan kapan method tersebut akan dieksekusi.<\/p>\r\n<p id=\"setup-dan-installasi-reactjs\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Installasi dan setup ReactJS<\/span><\/p>\r\n<p style=\"text-align: justify;\">sebelum ke installasi dan setup ada beberapa requirements atau prasyaratnya yaitu:<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>nodeJS (versi LTS terbaru)<\/li>\r\n<li>text editor (visual studio code, sublime, atom dll)<\/li>\r\n<li>terminal (bisa cmd, git bash atau terminal di text editor)<\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">berikut ini step installasi dan setup ReactJS:<\/p>\r\n<p style=\"text-align: justify;\"><strong>1. installasi<\/strong><\/p>\r\n<p style=\"text-align: justify;\">pertama masuk ke terminal lalu pindah ke folder yang diinginkan untuk installasi project reactjs, lalu jalankan perintah seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>npx create-react-app my-app<\/code><\/pre>\r\n<p style=\"text-align: justify;\">untuk text &ldquo;my-app&rdquo; dapat di ganti sesuai dengan nama project yang kita inginkan<\/p>\r\n<div class=\"wp-block-image\" style=\"text-align: justify;\">\r\n<figure class=\"aligncenter size-large\"><img class=\"wp-image-8028\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-59.png\" sizes=\"(max-width: 491px) 100vw, 491px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-59.png 491w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-59-300x101.png 300w\" alt=\"\" width=\"491\" height=\"165\" \/>\r\n<figcaption>illustrasi create react app<\/figcaption>\r\n<\/figure>\r\n<\/div>\r\n<p style=\"text-align: justify;\">tunggulah hingga proses installasi selesai<\/p>\r\n<p style=\"text-align: justify;\"><strong>2. menjalankan project reactjs yang sudah di install<\/strong><\/p>\r\n<p style=\"text-align: justify;\">pada terminal pindahkan posisinya menuju folder my-app (jika nama appnyna berbeda bisa di sesuaikan ). lalu ketikkan perintah<\/p>\r\n<p style=\"text-align: justify;\"><code>npm start<\/code><\/p>\r\n<p style=\"text-align: justify;\">seperti di gambar di bawah ini:<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: justify;\"><img class=\"wp-image-8030\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-60.png\" sizes=\"(max-width: 786px) 100vw, 786px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-60.png 786w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-60-300x110.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-60-768x282.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-60-683x250.png 683w\" alt=\"\" width=\"786\" height=\"289\" \/>\r\n<figcaption>illustrasi npm start<\/figcaption>\r\n<\/figure>\r\n<p style=\"text-align: justify;\">setelah itu otomatis browser default anda menambahkan tab dengan url localhost:3000(default port untuk localhostnya adalah 3000) yang menampilkan tampil react app seperti di bawah ini<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: justify;\"><img class=\"wp-image-8031\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-61-1024x460.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-61-1024x460.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-61-300x135.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-61-768x345.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-61.png 1304w\" alt=\"\" width=\"85%\" \/>\r\n<figcaption>starter react<\/figcaption>\r\n<\/figure>\r\n<p style=\"text-align: justify;\"><strong>3. edit file app.js untuk mencoba beberapa kodenya<\/strong>&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">pada gambar diatas kita di beritahu bahwa kita dapat mengedit file app.js di dalam folder src, mari kita ubah sedikit app js tersebut<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: justify;\"><img class=\"wp-image-8032\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-62.png\" sizes=\"(max-width: 443px) 100vw, 443px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-62.png 443w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-62-300x236.png 300w\" alt=\"\" width=\"443\" height=\"348\" \/><\/figure>\r\n<p style=\"text-align: justify;\">pada app.js tersebut maka anda akan mendapatkan kode seperti di bawah ini<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: justify;\"><img class=\"wp-image-8034\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-63.png\" sizes=\"(max-width: 671px) 100vw, 671px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-63.png 671w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-63-300x226.png 300w\" alt=\"\" width=\"671\" height=\"506\" \/><\/figure>\r\n<p style=\"text-align: justify;\">disini kita coba hapus semua tag header lalu masukkan kode baru seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;h1&gt;Hello World&lt;\/h1&gt;<\/code><\/pre>\r\n<p style=\"text-align: justify;\">maka akan muncul tampilan seperti di bawah ini:<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: justify;\"><img class=\"wp-image-8039\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-66-1024x126.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-66-1024x126.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-66-300x37.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-66-768x95.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-66.png 1352w\" alt=\"\" width=\"85%\" \/><\/figure>\r\n<p style=\"text-align: justify;\">selamat anda telah membuat app react pertama anda. untuk detail mengenai components, props, state dan lain sebagainya akan di berikan detailnya di materi berikutnya.<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<hr \/>\r\n<h2 id=\"referensi-tambahan\" style=\"text-align: justify;\"><strong>Video Pembahasan Materi<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">berikut ini video pembahasan materi hari 9: <a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7hAKC-WAzvh0jAfgoDMpzHm\">https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7hAKC-WAzvh0jAfgoDMpzHm<\/a><\/p>\r\n<p style=\"text-align: justify;\">referensi cara kerja Virtual DOM : <a href=\"https:\/\/youtu.be\/dxz9HZ40h4I\">https:\/\/youtu.be\/dxz9HZ40h4I<\/a><\/p>\r\n<p style=\"text-align: justify;\">referensi cara kerja Virtual DOM : <a href=\"https:\/\/youtu.be\/Iw2BLUjQo1E\">https:\/\/youtu.be\/Iw2BLUjQo1E<\/a><\/p>\r\n<p><strong>Referensi<\/strong>:<\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/reactjs.org\/docs\/create-a-new-react-app.html\">https:\/\/reactjs.org\/docs\/create-a-new-react-app.html<\/a><\/li>\r\n<li><a href=\"https:\/\/blog.codigo.id\/react-js-60fa358daefc\">https:\/\/blog.codigo.id\/react-js-60fa358daefc<\/a><\/li>\r\n<li><a href=\"https:\/\/medium.com\/@adhiguna.sabril\/mengenal-components-di-react-js-dengan-es6-2bcd6ba74c73\">https:\/\/medium.com\/@adhiguna.sabril\/mengenal-components-di-react-js-dengan-es6-2bcd6ba74c73<\/a><\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<\/div>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>","waktu_publish":"2021-11-04 08:00:00","status_publish":"publish","urutan":4,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-11-04 07:59:29","waktu_publish_formatted":" Kamis, 04 November 2021. 08:00:00 WIB."},{"id":1262,"uuid":"7911bb99-b4b1-486f-abe6-b901bf8a9531","author_user_id":4336,"materi_section_id":351,"judul":"Hari Ke-9 \u2013 React Components & Props","permalink":"hari-ke-9-react-components-props","konten":"<div class=\"entry-content\">\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">APA ITU COMPONENT REACT ?<\/span><\/p>\r\n<p style=\"text-align: justify;\"><strong>Components<\/strong>&nbsp;bisa di bilang hal yang&nbsp;sangat penting di react.js. Components adalah semacam konsep bagaimana cara untuk membuat tiap bagian dari UI (tampilan) bisa bekerja secara mandiri dan terisolasi dari bagian-bagian yang lain.<\/p>\r\n<p style=\"text-align: justify;\">Sebenarnya secara sadar atau tidak sadar bagi yang sering bekerja dengan kode HTML, selalu melakukan pemisahan bagian dari halaman-halaman misalnya&nbsp;<em>Header<\/em>,&nbsp;<em>Content<\/em>, dan&nbsp;<em>Footer<\/em>. Biasanya tujuannya agar kode tidak menumpuk di satu halaman sehingga di pisahkan ke file-file kecil yang lebih spesifik fungsinya dan kode lebih&nbsp;<em>maintainable<\/em>&nbsp;jika ada perbaikan.<\/p>\r\n<p style=\"text-align: justify;\"><strong>TIPS: Khusus di react.js&nbsp;<\/strong>bahkan hampir bagian terkecil di tampilan di sunnah-kan untuk dipisahkan.<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Jenis &ndash; Jenis Komponen React :<\/span><\/p>\r\n<h3 id=\"function-components-dan-class-components\" style=\"text-align: justify;\">Function Components&nbsp;<\/h3>\r\n<p style=\"text-align: justify;\">berikut ini contoh component yang menggunakan function<\/p>\r\n<pre class=\"wp-block-code\"><code>function Welcome(props) {\r\n  return &lt;h1&gt;Hello, {props.name}&lt;\/h1&gt;;\r\n}<\/code><\/pre>\r\n<p style=\"text-align: justify;\">function di atas ialah react component yang valid karena function itu menerima argumen &ldquo;props&rdquo; (singkatan dari properties) tunggal dengan data dan akan memberikan return ke React Element. kita bisa menyebut function tersebut dengan &ldquo;Function Component&rdquo; karna secara harfiah itu adalah function JavaScript.<\/p>\r\n<h3 id=\"function-components-dan-class-components\" style=\"text-align: justify;\">Class Components<\/h3>\r\n<p style=\"text-align: justify;\">Kita juga bisa menggunakan ES6 class untuk mebangun sebuah component. berikut ini contoh component dengan menggunakan class React.Component:<\/p>\r\n<pre class=\"wp-block-code\"><code>class Welcome extends React.Component {\r\n  render() {\r\n    return &lt;h1&gt;Hello, {this.props.name}&lt;\/h1&gt;;\r\n  }\r\n}<\/code><\/pre>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">APA ITU PROPS ?<\/span><\/p>\r\n<p style=\"text-align: justify;\">Sedangkan<strong> <\/strong>Props, merupakan properti-properti dari component yang dapat kita gunakan untuk menampilkan data, biasanya digunakan untuk inisialisasi data dengan kata lain bahwa props adalah &ldquo;<em>model<\/em>&rdquo; data yang memiliki fungsi ganda yaitu selain untuk menyimpan data, Props juga berfungsi untuk &ldquo;<em>melempar data<\/em>&rdquo; antar&nbsp;<em>components view&nbsp;<\/em>jika ada perubahan data di&nbsp;<em>state. <\/em>Berikut ini Contoh dari penggunaan Props :<\/p>\r\n<pre>function Welcome(props) { <br \/>  return &lt;h1&gt;Halo, {props.name}&lt;\/h1&gt;;<br \/>}<br \/><br \/>&lt;Welcome name=\"Sara\" \/&gt;;<\/pre>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p id=\"menyusun-components\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Cara Menyusun Components<\/span><\/p>\r\n<p style=\"text-align: justify;\">Component dapat merujuk ke component lain dalam outputnya. Ini memungkinkan kita bisa menggunakan component yang sama secara berulang-ulang (reusable).<\/p>\r\n<p style=\"text-align: justify;\">berikui ini contoh untuk cara menyusun components (asumsi ini di folder app.js dan kita menggunakan functional Component )<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from 'react';\r\nimport '.\/App.css'; &nbsp;<br \/><br \/>function Welcome(props){\r\n    return &lt;h1&gt;Hello, {props.name}&lt;\/h1&gt;;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;Welcome name=\"Sarah\" \/&gt;\r\n      &lt;Welcome name=\"Michael\" \/&gt;\r\n      &lt;Welcome name=\"John\" \/&gt;\r\n    &lt;\/div&gt;\r\n  );\r\n}\r\n\r\nexport default App;<\/code><\/pre>\r\n<p id=\"import-dan-export-module\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Import dan Export&nbsp;<\/span><\/p>\r\n<p>Import dan Export sendiri tujuannnya agar syntax yang kita tuliskan tidak menumpuk didalam 1 file, kita bisa membedakan syntax ( componentnya ) ke file yang lain. Berikut ini caranya&nbsp; :<\/p>\r\n<p style=\"text-align: justify;\">buatlah file <span style=\"color: #ecf0f1; background-color: #3598db;\">WelcomeComponent.js&nbsp;<\/span> di dalam folder src lalu masukkan kode di bawah ini:<\/p>\r\n<div>\r\n<pre>import&nbsp;React&nbsp;from&nbsp;\"react\"<br \/><br \/>function Welcome(props){<br \/> &nbsp;&nbsp;&nbsp;return&nbsp;&lt;h1&gt;Hello,&nbsp;{props.name}&lt;\/h1&gt;;<br \/>}<br \/><br \/>export&nbsp;default&nbsp;Welcome<\/pre>\r\n<\/div>\r\n<p style=\"text-align: justify;\">lalu untuk import <span style=\"color: #ecf0f1; background-color: #3598db;\">WelcomeComponent.js<\/span>&nbsp; di app.js bisa adalah seperti di bawah ini:<\/p>\r\n<div>\r\n<pre>import React from 'react';<br \/>import&nbsp;Welcome&nbsp;from&nbsp;'.\/WelcomeComponent';<br \/><br \/>function App() {<br \/> &nbsp;return&nbsp;(<br \/> &nbsp;&nbsp;&nbsp;&lt;div&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Welcome&nbsp;name=\"Sarah\"&nbsp;\/&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Welcome&nbsp;name=\"Michael\"&nbsp;\/&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Welcome&nbsp;name=\"John\"&nbsp;\/&gt;<br \/> &nbsp;&nbsp;&nbsp;&lt;\/div&gt;<br \/> &nbsp;);<br \/>}<br \/><br \/>export default App;<\/pre>\r\n<\/div>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<h2 id=\"referensi-tambahan\" style=\"text-align: justify;\"><strong>Video Pembahasan Materi<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">berikut ini video pembahasan materi hari 9 : <a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7hAKC-WAzvh0jAfgoDMpzHm\">https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7hAKC-WAzvh0jAfgoDMpzHm<\/a><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><strong>Referensi<\/strong>:<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li><a href=\"https:\/\/id.reactjs.org\/docs\/components-and-props.html\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">https:\/\/id.reactjs.org\/docs\/components-and-props.html<\/a><\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<\/div>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>","waktu_publish":"2021-11-04 08:00:00","status_publish":"publish","urutan":5,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-11-04 07:59:51","waktu_publish_formatted":" Kamis, 04 November 2021. 08:00:00 WIB."},{"id":1283,"uuid":"eeaf3822-5b31-4a32-8346-94d3dad1f3ae","author_user_id":14957,"materi_section_id":351,"judul":"Hari ke-10 - Apa itu Component Lifecycle ? ( class vs function )","permalink":"hari-ke-10-apa-itu-component-lifecycle-class-vs-function-","konten":"<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Apa itu State ?<\/span><\/p>\r\n<p style=\"text-align: justify;\">Sebelum kita masuk pada penjelasan component lifecycle, Kita harus mengetahui dulu tentang state.<\/p>\r\n<p style=\"text-align: justify;\">State merupakan data yang tersimpan dalam sebuah component. State bersifat private dan hanya relevan terhadap component itu sendiri. Berbeda dengan props yang valuenya dilempar dari component lain, state justru dapat menyimpan dan mengubah datanya sendiri dari dalam component. Contohnya&nbsp; :<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #f1c40f;\">Pada Class Component<\/span><\/p>\r\n<pre>this.state = {<br \/> Count : 0<br \/>}<\/pre>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #f1c40f;\">Pada React Hooks<\/span><\/p>\r\n<pre>Const [stateCount, setStateCount] = useState(0)<\/pre>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Component lifecycle ( Class Component )<\/span><\/p>\r\n<p style=\"text-align: justify;\">Berikut ini Ilustrasi Lifecycle Method pada Class Component :<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/22.png\" width=\"666\" height=\"308\" \/><\/p>\r\n<p style=\"text-align: justify;\">Sebuah komponen memiliki siklus atau lebih dikenal sebagai lifecycle. Lifecycle dapat mempermudah proses eksekusi suatu method atau function sehingga performa proses rendering menjadi lebih baik. Secara umum ada 3 kelompok Lifecycle, yaitu Mounting cycle, Updating cycle, dan Unmounting cycle. &nbsp;Berikut ini penjelasan singkat tentang Lifecycle dengan basis Class Component :<\/p>\r\n<p style=\"text-align: justify;\"><strong>Mounting cycle (Pemasangan)<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Fase Mounting adalah fase ketika components di buat atau pertama kali di render ke DOM, didalam fase ini terdapat method-method yang umum digunakan ( pada Class Component ) diantaranya <strong>constructor(), render()<\/strong>, dan <strong>componentDidMount()<\/strong><\/p>\r\n<p style=\"text-align: justify;\"><strong>Updating cycle<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Fase updating adalah fase ketika sebuah component akan di render ulang, biasanya ini terjadi ketika ada perubahan pada state atau props yang mengakibatkan perubahan DOM. didalam fase ini terdapat method-method yang digunakan ( pada Class Component )&nbsp; diantaranya <strong>render()<\/strong> dan <strong>componentDidUpdate()<\/strong><\/p>\r\n<p style=\"text-align: justify;\"><strong>Unmounting cycle&nbsp;(Pelepasan)<\/strong><\/p>\r\n<p style=\"text-align: justify;\">Fase unmounting adalah fase ketika component di hapus dari DOM. Pada fase ini hanya ada satu method yang akan di eksekusi ( pada Class Component )&nbsp; yaitu <strong>componentWillUnmount()<\/strong>, yang di jalankan sebelum sebuah component di hapus dari DOM<\/p>\r\n<p style=\"text-align: justify;\">berikut ini contoh singkat penggunaan component lifecycle pada class component :<\/p>\r\n<pre style=\"text-align: justify;\">import React from \"react\"<\/pre>\r\n<pre style=\"text-align: justify;\">class App extends React.Component {<br \/>  constructor(props) {<br \/> &nbsp;&nbsp; super(props)<br \/> &nbsp;&nbsp; this.state = {<br \/> &nbsp;&nbsp;&nbsp;&nbsp; count: 0,<br \/> &nbsp;&nbsp;&nbsp;&nbsp; text: \"\",<br \/> &nbsp;&nbsp; };<br \/>  }<br \/><br \/>  componentDidUpdate() {<br \/> &nbsp;&nbsp; if (this.state.text === \"\") {<br \/> &nbsp;&nbsp;&nbsp;&nbsp; this.testMethod()<br \/> &nbsp;&nbsp; }<br \/>&nbsp; }<br \/><br \/>  handleClick = () =&gt; {<br \/> &nbsp;&nbsp; this.setState(prev =&gt; ({ count: prev.count + 1 }));<br \/>&nbsp; };<br \/><br \/>  testMethod() {<br \/> &nbsp;&nbsp; if (this.state.count === 5) {<br \/> &nbsp;&nbsp;&nbsp;&nbsp; this.setState({<br \/> &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text: \"Selamat anda menggunakan lifecycle class component\"<br \/> &nbsp;&nbsp;&nbsp;&nbsp; })<br \/>&nbsp;&nbsp;&nbsp; }<br \/><br \/>  }<br \/><br \/>  render() {<br \/> &nbsp;&nbsp; return (<br \/> &nbsp;&nbsp;&nbsp;&nbsp; &lt;&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;div&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;p&gt;Angka ini akan terupdate jika menekan button dibawah : {this.state.count}&lt;\/p&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;p&gt;{this.state.text}&lt;\/p&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;\/div&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;button className=\"block\" onClick={this.handleClick}&gt;Update Angka&lt;\/button&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp; &lt;\/&gt;<br \/> &nbsp;&nbsp; );<br \/>  }<br \/>}<br \/><br \/>export default App;<\/pre>\r\n<p style=\"text-align: justify;\"><strong>&nbsp;<\/strong><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Components lifecycle ( React Hooks )<\/span><\/p>\r\n<p style=\"text-align: justify;\">Berikut ini 2 Ilustrasi Lifecycle Method pada React Hooks :<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/23.jpg\" width=\"570\" height=\"320\" \/><\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/24.png\" width=\"568\" height=\"452\" \/><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">Menurut Ilustrasi diatas,&nbsp;terdapat perbedaan yang cukup signifikan antara <em>lifecycle<\/em>&nbsp;method pada functional components dengan lifecycle di dalam class component, terutama pada bagian unmounting yang dimana pada React Hooks itu tidak ada method khusus. Namun, method functional component jika dibandingkan dengan class component, Kita hanya menggunakan useEffect saja untuk beberapa Lifecycle Component. Berikut ini merupakan beberapa method yang tersedia pada Functional Component ( React Hooks ) :<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>useState<\/li>\r\n<li>useEffect<\/li>\r\n<li>useRef<\/li>\r\n<li>useLayoutEffect<\/li>\r\n<li>useCallback<\/li>\r\n<li>useMemo<\/li>\r\n<li>useReducer<\/li>\r\n<li>useContext<\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">Pada Materi React Hooks ini, kita tidak akan mempelajari semuanya melainkan hanya beberapa saja seperti :<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li>useState<\/li>\r\n<li>useEffect<\/li>\r\n<li>useContext<\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">berikut ini contoh singakat penggunaan hooks:<\/p>\r\n<pre>import React, { useState } from 'react';<br \/><br \/>const App = () =&gt; {<br \/>  \/\/ Deklarasi variabel state baru yang kita sebut \"stateCount\"<br \/>&nbsp; const [stateCount, setStateCount] = useState(0);<br \/><br \/>  return (<br \/> &nbsp;&nbsp; &lt;div&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp; &lt;p&gt;Anda menekan sebanyak { stateCount } kali&lt;\/p&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp; &lt;button onClick={() =&gt; setStateCount (stateCount + 1)}&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Klik saya<br \/> &nbsp;&nbsp;&nbsp;&nbsp; &lt;\/button&gt;<br \/> &nbsp;&nbsp; &lt;\/div&gt;<br \/>  );<br \/>}<br \/><br \/>export default App<br \/><br \/><\/pre>\r\n<hr \/>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\">Sudah kelihatan bukan perbedaan penggunaan method Lifecycle pada function dan class component ? Nah, perlu teman-teman <strong>ketahui<\/strong> bahwa pada pendalaman materi tentang ReactJs nanti kita cukup akan menggunakan Functional Component ( React Hooks ) saja.<\/p>\r\n<p style=\"text-align: justify;\">Untuk Penjelasan Tentang Penggunaan Lifecycle component React hooks akan kita jelaskan dimateri selanjutnya.<\/p>","waktu_publish":"2021-11-05 08:00:00","status_publish":"publish","urutan":6,"created_by":14957,"updated_by":14957,"created_at":"2021-08-11 10:39:53","updated_at":"2021-11-05 08:06:32","waktu_publish_formatted":" Jumat, 05 November 2021. 08:00:00 WIB."},{"id":1282,"uuid":"b0452044-a8fd-4ec4-babc-77a1dc77cf6f","author_user_id":14957,"materi_section_id":351,"judul":"Hari ke-10 - React Component Lifecycle ( With Hooks )","permalink":"hari-ke-10-react-component-lifecycle-with-hooks-","konten":"<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Apa Itu React Hooks ?<\/span><\/p>\r\n<p style=\"text-align: justify;\">Hooks merupakan fitur baru di React 16.8 atau versi lebih baru dari itu. Dengan Hooks, kita dapat menggunakan state dan fitur React yang lain tanpa perlu menulis sebuah &ldquo;class&rdquo; baru. Hooks merupakan fungsi yang memungkinkan Anda untuk &ldquo;mengaitkan&rdquo; state dan fitur-fitur lifecycle React dari <strong>function component<\/strong>. Hooks tidak dapat berfungsi didalam &ldquo;class&rdquo; dan Hooks memungkinkan menggunakan React tanpa &ldquo;class&rdquo; serta memiliki syntax yang lebih <strong>simple <\/strong>tanpa harus memikirkan lagi penggunaan ( this ) maupun ( bind )<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Penggunaan Method React Hooks<\/span><\/p>\r\n<p style=\"text-align: justify;\">Seperti yang sudah kita ketahui bahwa component dapat dibuat dengan dua cara yaitu menggunakan react class component atau dengan function component. sebelum React versi 16.8 beberapa frontend developer cenderung menggunakan class component karena di dalamnya kita bisa menggunakan state, namun permasalahan tersebut sudah ada solusinya yaitu hooks<\/p>\r\n<p style=\"text-align: justify;\">berikut ini contoh singakat penggunaan hooks:<\/p>\r\n<pre style=\"text-align: justify;\">import React, { useState } from 'react';<br \/><br \/>const App = () =&gt; {<br \/><br \/>&nbsp; \/\/ Deklarasi variabel state baru yang kita sebut \"count\"<br \/><br \/>  const [count, setCount] = useState(0);<br \/><br \/>  return (<br \/> &nbsp;&nbsp; &lt;div&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp; &lt;p&gt;Anda menekan sebanyak {count} kali&lt;\/p&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp; &lt;button onClick={() =&gt; setCount(count + 1)}&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Klik saya<br \/> &nbsp;&nbsp;&nbsp;&nbsp; &lt;\/button&gt;<br \/> &nbsp;&nbsp; &lt;\/div&gt;<br \/>  );<br \/>}<br \/><br \/>export default App<\/pre>\r\n<p style=\"text-align: justify;\">Seperti yang kita lihat diatas pada function component diatas itu menggunakan useState, useState di panggil dalam function component untuk menambahkan suatu state lokal. React akan menyimpan state antar render. useState memberikan dua hal: nilai state saat ini dan fungsi untuk memperbarui nilai tersebut. Anda dapat memanggil fungsi ini dari sebuah event handler atau dimanapun. Hal ini serupa dengan this.setState pada kelas, tetapi tidak menggabungkan state lama dan baru menjadi satu<\/p>\r\n<p style=\"text-align: justify;\">Pada functional component, kita&nbsp; tidak akan menuliskan constuctor, tidak ada this, method render pun sudah tidak ada di function component tapi langsung return nilai yang diinginkan<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 18pt;\"><strong>useState()<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">React hooks useState digunakan untuk membuat state di function komponen. Berikut ini cara menggunakan useState Pada functional Component :<\/p>\r\n<pre style=\"text-align: justify;\">const [pesertaLomba, setPesertaLomba] =&nbsp; useState([ 'Budi', 'Susi', 'Lala', 'Agung' ])<br \/>const [inputName, setinputName]&nbsp; =&nbsp; useState(\"\")<br \/>const [indexOfForm, setIndexOfForm] =&nbsp; useState(-1)&nbsp;&nbsp;&nbsp;<\/pre>\r\n<p style=\"text-align: justify;\">Functional component terlihat lebih simpel dan elegan<em>&nbsp;<\/em>daripada class component, Pada contoh diatas, kita menggunakan useState. useState adalah sebuah Hooks, dan akan mengembalikan nilai dari state (pada contoh diatas: pesertaLomba) dan fungsi yang bisa kita gunakan untuk mengubah nilai tersebut (setPesertaLomba). Fungsi setPesertaLomba disini mirip dengan cara kerja this.setState pada method class component<strong><em>.<\/em><\/strong><\/p>\r\n<p style=\"text-align: justify;\">Jika kita bandingkan dengan insialisasi state pada class component :<\/p>\r\n<pre style=\"text-align: justify;\">  constructor(props) {<br \/> &nbsp;&nbsp; super(props);<br \/> &nbsp;&nbsp; this.state = {<br \/> &nbsp;&nbsp;&nbsp;&nbsp; name: \"John\",<br \/> &nbsp;&nbsp;&nbsp;&nbsp; age: 21,<br \/> &nbsp;&nbsp; };<br \/>&nbsp; }<\/pre>\r\n<p style=\"text-align: justify;\">Berbeda dengan this.state<em>,&nbsp;<\/em>state di dalam useState() tidak harus berbentuk <em>object<\/em>. Dan kita bisa menggunakan lebih dari satu useState di dalam satu component, contohnya lagi seperti ini:<\/p>\r\n<pre style=\"text-align: justify;\">const [name, setName] = useState(\"John\");<br \/>const [age, setAge] = useState(21);<br \/>const [job, setJob] = useState({<br \/>  jobTitle: \"UI\/UX Designer\",<br \/>  company: \"UNIKOM CodeLabs\"<br \/>});<br \/><br \/><\/pre>\r\n<p style=\"text-align: justify;\"><strong>PERINGATAN : <\/strong>jangan memanggil setState() diluar function\/tanpa dibungkus function untuk menghandle karena akan mendapatkan error seperti dibawah ini :<\/p>\r\n<p style=\"text-align: justify;\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/21.png\" width=\"791\" height=\"45\" \/><\/p>\r\n<p style=\"text-align: justify;\">Berikut ini soure code contoh penerapan useState pada react Hooks :<\/p>\r\n<pre style=\"text-align: justify;\">import React, { useState } from 'react';<br \/><br \/>const Example = () =&gt; {<br \/>  const [name, setName] = useState(\"John\");<br \/><br \/>  return (<br \/> &nbsp;&nbsp; &lt;div&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp; &lt;p&gt;Your name is {name}&lt;\/p&gt;<br \/> &nbsp;&nbsp; &lt;\/div&gt;<br \/>  );<br \/>}<\/pre>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 18pt;\"><strong>useEffect()<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">Seperti yang sudah dijelaskan di atas bahwa hooks memungkinkan untuk kita menerapkan state lifecycle tanpa harus menggunakan class component, lalu selain handle state apa penerapan lifecycle yang lain.<\/p>\r\n<p style=\"text-align: justify;\">useEffect adalah salah satu bagian dari hook yang berfungsi menggantikan lifecycle method yang ada dalam class component, useEffect memungkinkan Anda melakukan efek samping (side effects) didalam function component<\/p>\r\n<pre style=\"text-align: justify;\">  useEffect(() =&gt; {<br \/>    ...<br \/>&nbsp; },[depedency]);<br \/><br \/><br \/><\/pre>\r\n<p style=\"text-align: justify;\">Jika Anda Perhatikan pada materi sebelumnya dengan React class lifecycle methods, Anda dapat menganggap Hook <strong>useEffect() <\/strong>ini sebagai method yang mirip pada class component contohnya seperti <strong>componentDidMount<\/strong>, <strong>componentDidUpdate<\/strong>, dan <strong>componentWillUnmount<\/strong> yang disatukan<\/p>\r\n<p style=\"text-align: justify;\">berikut ini contoh penerapan useEffect:<\/p>\r\n<pre style=\"text-align: justify;\">import React, { useState, useEffect } from 'react';<br \/><br \/>const App = () =&gt; {<br \/>  const [count, setCount] = useState(0);<br \/><br \/>  \/\/ Mirip dengan componentDidMount dan componentDidUpdate:<br \/>  useEffect(() =&gt; {<br \/><br \/> &nbsp;&nbsp; \/\/ Memperbarui judul dokumen menggunakan API browser<br \/> &nbsp;&nbsp; document.title = \"You clicked \" + count + \" times\";<br \/>  });<br \/><br \/>  const handleClick = () =&gt; setCount(count + 1)<br \/><br \/>  return (<br \/> &nbsp;&nbsp; &lt;div&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp; &lt;p&gt;You clicked {count} times&lt;\/p&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp; &lt;button onClick={handleClick}&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Click me<br \/> &nbsp;&nbsp;&nbsp;&nbsp; &lt;\/button&gt;<br \/> &nbsp;&nbsp; &lt;\/div&gt;<br \/>  );<br \/>}<br \/><br \/>export default App<\/pre>\r\n<p style=\"text-align: justify;\">Pada kode diatas di dalam useEffect terdapat kode yang selalu mentrigger perubahan setiap kali ada perubahan dalam count maka title di browser akan selalu berubah.<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Issue&nbsp; InfiniteLoop useEffect()<\/span><\/p>\r\n<p style=\"text-align: justify;\">Berikut ini juga merupakan issue lain pada useEfect adalah InfiniteLoop :<\/p>\r\n<p style=\"text-align: justify;\"><strong>useEffect()<\/strong> adalah hook yang mengeksekusi callback (efek sampingnya) setelah rendering komponen. Jika Anda tidak berhati-hati dengan efek sampingnya, Anda mungkin memicu loop tak terbatas dari rendering komponen. Kasus umum yang menghasilkan infinite loop adalah memperbarui ( updateing state) di efek samping tanpa memiliki dependency sama sekali, contohnya sebagai berikut :<\/p>\r\n<pre style=\"text-align: justify;\">useEffect(() =&gt; {<br \/>  \/\/ Infinite loop!<br \/> &nbsp; &nbsp;setTime(time+ 1);<br \/>});<\/pre>\r\n<p style=\"text-align: justify;\">Penggunaan useEffect diatas akan menghasilkan infinite Loop ( Harus Dihindari ). Cara yang efisien untuk menghindari infinite loop adalah dengan mengelola dependensi hook dengan benar.<\/p>\r\n<pre style=\"text-align: justify;\"> &nbsp;const [time, setTime] = useState(0)<br \/> &nbsp;const [value, setValue] = useState('');<br \/><br \/> &nbsp;useEffect(() =&gt; {<br \/> &nbsp; &nbsp; &nbsp; &nbsp; setTime(time+ 1);<br \/>&nbsp;&nbsp;},[value])<br \/><br \/><\/pre>\r\n<p style=\"text-align: justify;\">Atau bisa dengan cara mengkosongkan dependency:<\/p>\r\n<pre style=\"text-align: justify;\"> &nbsp;const [time, setTime] = useState(0)<br \/> &nbsp;useEffect(() =&gt; {<br \/> &nbsp; &nbsp; &nbsp; &nbsp; setTime(time+ 1);<br \/> &nbsp;},[])<\/pre>\r\n<p style=\"text-align: justify;\">Dan juga bisa dengan cara memasangkan sebuah kondisi terlebih dahulu:<\/p>\r\n<pre style=\"text-align: justify;\">&nbsp;&nbsp;useEffect(() =&gt; {<br \/>     if(time=== 0){<br \/> &nbsp; &nbsp; &nbsp; &nbsp;setTime(time+ 1);<br \/>      }  <br \/>&nbsp;},[])<\/pre>\r\n<p style=\"text-align: justify;\">Got It!, Maka kode diatas tidak akan terjadi Infinite Loop lagi, Untuk issue lainnya teman-teman bisa cek melalui referensi berikut : <a href=\"https:\/\/dmitripavlutin.com\/react-useeffect-infinite-loop\/\">Klik Disini<\/a><\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 18pt;\"><strong>useContext()<\/strong><\/span><\/p>\r\n<p style=\"text-align: justify;\">( Akan dipelajarin pada materi State Management ( Context ) )<\/p>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<hr \/>\r\n<h2 style=\"text-align: justify;\">&nbsp;<\/h2>\r\n<h2 style=\"text-align: justify;\"><strong>Video Pembahasan Materi<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">berikut ini video pembahasan materi hari 13: <a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7jsufU-mEIlxtCXq23-54Pb\">https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7jsufU-mEIlxtCXq23-54Pb<\/a><\/p>\r\n<p style=\"text-align: justify;\"><strong>Referensi<\/strong>:<\/p>\r\n<ul>\r\n<li style=\"text-align: justify;\"><a href=\"https:\/\/id.reactjs.org\/docs\/hooks-intro.html\">https:\/\/id.reactjs.org\/docs\/hooks-intro.html<\/a><\/li>\r\n<li style=\"text-align: justify;\"><a href=\"https:\/\/id.reactjs.org\/docs\/hooks-overview.html\">https:\/\/id.reactjs.org\/docs\/hooks-overview.html<\/a><\/li>\r\n<li style=\"text-align: justify;\"><a href=\"https:\/\/id.reactjs.org\/docs\/hooks-state.html\">https:\/\/id.reactjs.org\/docs\/hooks-state.html<\/a><\/li>\r\n<li style=\"text-align: justify;\"><a href=\"https:\/\/id.reactjs.org\/docs\/hooks-effect.html\">https:\/\/id.reactjs.org\/docs\/hooks-effect.html<\/a><\/li>\r\n<\/ul>","waktu_publish":"2021-11-05 08:00:00","status_publish":"publish","urutan":7,"created_by":14957,"updated_by":14957,"created_at":"2021-08-11 02:54:31","updated_at":"2021-11-05 08:06:44","waktu_publish_formatted":" Jumat, 05 November 2021. 08:00:00 WIB."}]},{"id":352,"uuid":"9057f38e-4b3d-4d6a-a7e0-be07a31c66e5","materi_id":35,"nama":"Pekan 2 - Tugas","permalink":"pekan-2-tugas","urutan":5,"created_by":4336,"updated_by":4336,"created_at":"2021-08-09 16:42:06","updated_at":null,"posting":[{"id":1263,"uuid":"eee182e0-da63-46ba-8cff-f4b3a2104b99","author_user_id":4336,"materi_section_id":352,"judul":"Tugas 6 \u2013 Javascript ES6","permalink":"tugas-6-javascript-es6","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-dan-file-baru\"><strong>1. Menambahkan Folder Baru dan file baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buat folder baru dengan nama &ldquo;Tugas-6&rdquo; dan buatlah file tugas6.js<\/p>\r\n<p>sehingga struktur foldernya seperti di bawah ini<br \/><code>  Tugas-Harian-Part-1\/\r\n<br \/>&nbsp; &nbsp;Tugas-1\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-2\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-3\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-4\/<br \/>&nbsp; &nbsp;Tugas-5\/<br \/>&nbsp; &nbsp;Tugas-6\/<\/code><\/p>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\"><strong>2. Kerjakan Soal di bawah ini<\/strong><\/h3>\r\n<p>kerjakan soal di bawah ini di dalam file tugas6.js, perlu di ingat pada tugas ini yang di utamakan bukan hasil\/outputnya saja tapi juga kode nya sesuai dengan instruksi soal<\/p>\r\n<h4><strong>Soal 1<\/strong><\/h4>\r\n<p>buatlah <strong>dua fungsi<\/strong> yaitu fungsi <strong>luas lingkaran<\/strong> dan <strong>keliling lingkaran<\/strong> dengan <strong>arrow function <\/strong>(wajib ada parameternya)<strong>&nbsp;<\/strong> lalu gunakan let atau const di dalam soal ini<\/p>\r\n<h4><strong>Soal 2<\/strong><\/h4>\r\n<p>Tulislah sebuah <strong>arrow function <\/strong>dengan nama introduce yang parameternya menggunakan <strong>rest parameter&nbsp;<\/strong>dan menghasilkan kalimat \"Pak John adalah seorang penulis yang berusia 30 tahun\" <strong>menggunakan template literal.<\/strong><\/p>\r\n<p>pastikan <strong>semua parameter <\/strong>pada <strong>function introduce <\/strong>di gunakan semuanya<\/p>\r\n<pre class=\"wp-block-preformatted\">\/* \r\n    Tulis kode function di sini\r\n*\/\r\n <br \/>\/\/kode di bawah ini jangan dirubah atau dihapus\r\nconst perkenalan = introduce(\"John\", \"30\", \"Laki-Laki\", \"penulis\")\r\nconsole.log(perkenalan) \/\/ Menampilkan \"Pak John adalah seorang penulis yang berusia 30 tahun\"<\/pre>\r\n<h4><strong>Soal 3<\/strong><\/h4>\r\n<p>return dalam fungsi di bawah ini masih menggunakan object literal dalam ES5, ubahlah menjadi bentuk yang lebih sederhana di ES6.<\/p>\r\n<pre class=\"wp-block-preformatted\"> const newFunction = function literal(firstName, lastName){\r\n  return {\r\n    firstName: firstName,\r\n    lastName: lastName,\r\n    fullName: function(){\r\n      console.log(firstName + \" \" + lastName)\r\n    }\r\n  }\r\n}\r\n  <br \/>\/\/ kode di bawah ini jangan diubah atau dihapus sama sekali<br \/>console.log(newFunction(\"John\", \"Doe\").firstName)<br \/>console.log(newFunction(\"Richard\", \"Roe\").lastName)<br \/>newFunction(\"William\", \"Imoh\").fullName()<\/pre>\r\n<h4><strong>Soal 4<\/strong><\/h4>\r\n<p>Diberikan sebuah objek sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">let phone = {<br \/>   name: \"Galaxy Note 20\",<br \/>   brand: \"Samsung\",<br \/>   year: 2020,<br \/>   colors: [\"Mystic Bronze\", \"Mystic White\", \"Mystic Black\"]<br \/>}<br \/><code>\/\/ kode diatas ini jangan di rubah atau di hapus sama sekali<\/code><br \/><br \/>\/* Tulis kode jawabannya di sini *\/<\/pre>\r\n<pre class=\"wp-block-preformatted\">\/\/ kode di bawah ini jangan dirubah atau dihapus<br \/>console.log(phoneBrand, phoneName, year, colorBlack, colorBronze) <\/pre>\r\n<p>tuliskan kode jawaban yang berisi hasil destructuring yang nantinya akan di gunakan dalam console.log&nbsp;<\/p>\r\n<h4><strong>soal 5<\/strong><\/h4>\r\n<p>buatlah variabel-variabel seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>let warna = [\"biru\", \"merah\", \"kuning\" , \"hijau\"]\r\n\r\nlet dataBukuTambahan= {\r\n  penulis: \"john doe\",\r\n  tahunTerbit: 2020 \r\n}\r\n\r\nlet buku = {\r\n  nama: \"pemograman dasar\",\r\n  jumlahHalaman: 172,\r\n  warnaSampul:[\"hitam\"]\r\n}<br \/>\/\/ kode diatas ini jangan di rubah atau di hapus sama sekali<br \/><br \/>\/* Tulis kode jawabannya di sini *\/ <\/code><\/pre>\r\n<p>gabungkanlah variabel warna (gabungkan dengan atribut warnaSampul) dan dataBukuTambahan ke variabel buku dengan menggunakan <strong>spread operator<\/strong><\/p>\r\n<p>berikut ini contoh output tugas 6:<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/tugas-6-c.png\" \/><\/p>\r\n<p>&nbsp;<\/p>\r\n<h3 id=\"3-tips\"><strong>3. Tips<\/strong><\/h3>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ soal 1\r\n.... jawaban soal 1\r\n\r\n\/\/ soal 2\r\n.... jawaban soal 2\r\n\r\ndan seterusnya<\/code>&nbsp;<\/pre>\r\n<h3 id=\"3-tips\"><strong>4. Kumpulkan Tugas<\/strong><\/h3>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di tab materi -&gt; lalu klik pendahuluan -&gt; lalu klik teknis pengumpulan<\/p>\r\n<h3 id=\"4-membuat-layout-html-css\"><\/h3>\r\n<\/div>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-11-01 14:00:00","status_publish":"publish","urutan":1,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-11-01 13:40:16","waktu_publish_formatted":" Senin, 01 November 2021. 14:00:00 WIB."},{"id":1264,"uuid":"921af8ea-fa72-4561-a968-dafffb518e09","author_user_id":4336,"materi_section_id":352,"judul":"Tugas 7 \u2013 Javascript Class","permalink":"tugas-7-javascript-class","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-dan-file-baru\"><strong>1. Menambahkan Folder Baru dan file baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buat folder baru dengan nama &ldquo;Tugas-7&rdquo; dan buatlah file tugas7.js<\/p>\r\n<p>sehingga struktur foldernya seperti di bawah ini<br \/><code>  Tugas-Harian-Part-1\/\r\n<br \/>&nbsp; &nbsp;Tugas-1\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-2\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-3\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-4\/<br \/>&nbsp; &nbsp;Tugas-5\/<br \/>&nbsp; &nbsp;Tugas-6\/<br \/>&nbsp; &nbsp;Tugas-7\/<\/code><\/p>\r\n<h3 id=\"1-membuat-file-html\"><strong>2. Kerjakan Soal di bawah ini<\/strong><\/h3>\r\n<p>kerjakan soal di bawah ini di dalam folder &ldquo;Tugas-7&rdquo;<\/p>\r\n<h4>soal 1<\/h4>\r\n<p>Terdapat sebuah class Animal yang memiliki sebuah constructor name, default property legs= 4 dan cold_blooded = false.<\/p>\r\n<p><strong>Release 0<\/strong><\/p>\r\n<p>Buatlah class Animal yang menerima satu parameter constructor berupa name. Secara default class Animal akan memiliki property yaitu legs (jumlah kaki) yang bernilai 4 dan cold_blooded bernilai false.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Gunakan method getter dan setter untuk mengakses property di dalam class<\/p>\r\n<\/blockquote>\r\n<pre class=\"wp-block-preformatted\">class Animal {\r\n    \/\/ Code class di sini\r\n}\r\n \r\nvar sheep = new Animal(\"shaun\");\r\n \r\nconsole.log(sheep.name) \/\/ \"shaun\"\r\nconsole.log(sheep.legs) \/\/ 4\r\nconsole.log(sheep.cold_blooded) \/\/ false<br \/>sheep.legs = 3<br \/>console.log(sheep.legs)<\/pre>\r\n<p><strong>Release 1<\/strong><\/p>\r\n<p>Buatlah class Frog dan class Ape yang merupakan inheritance dari class Animal. Perhatikan bahwa Ape (Kera) merupakan hewan berkaki 2, hingga dia tidak menurunkan sifat jumlah kaki 4 dari class Animal. class Ape memiliki function yell() yang menampilkan &ldquo;Auooo&rdquo; dan class Frog memiliki function jump() yang akan menampilkan &ldquo;hop hop&rdquo;.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Code class Ape dan class Frog di sini\r\n \r\nvar sungokong = new Ape(\"kera sakti\")\r\nsungokong.yell() \/\/ \"Auooo\"<br \/>sungokong.legs = 2<br \/>console.log(sungokong.name)<br \/>console.log(sungokong.legs)<br \/>console.log(sungokong.cold_blooded)<br \/><br \/>var kodok = new Frog(\"buduk\")\r\nkodok.jump() \/\/ \"hop hop\"<br \/>console.log(kodok.name)<br \/>console.log(kodok.legs)<br \/>console.log(kodok.cold_blooded)<\/pre>\r\n<h4>soal 2<\/h4>\r\n<p>Terdapat sebuah class dengan nama&nbsp;<code>Clock<\/code>&nbsp;yang ditulis seperti penulisan pada function, ubahlah fungsi tersebut menjadi class dan pastikan fungsi tersebut tetap berjalan dengan baik. Jalankan fungsi di terminal\/console Anda untuk melihat hasilnya. (tekan tombol Ctrl + C pada terminal untuk menghentikan method clock.start())<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Hint: Fokus soal ini hanya pada kegiatan mengubah struktur function&nbsp;<code>Clock&nbsp;<\/code>menjadi class. Jangan lupa menambahkan constructor di dalam class, dan ubah function di dalam&nbsp;<code>Clock&nbsp;<\/code>menjadi method pada class.<\/p>\r\n<\/blockquote>\r\n<pre class=\"wp-block-preformatted\">function&nbsp;Clock({&nbsp;template&nbsp;})&nbsp;{\r\n&nbsp;&nbsp;\r\n&nbsp;&nbsp;var&nbsp;timer;\r\n\r\n&nbsp;&nbsp;function&nbsp;render()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;date&nbsp;=&nbsp;new&nbsp;Date();\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;hours&nbsp;=&nbsp;date.getHours();\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(hours&nbsp;&lt;&nbsp;10)&nbsp;hours&nbsp;=&nbsp;'0'&nbsp;+&nbsp;hours;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;mins&nbsp;=&nbsp;date.getMinutes();\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mins&nbsp;&lt;&nbsp;10)&nbsp;mins&nbsp;=&nbsp;'0'&nbsp;+&nbsp;mins;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;secs&nbsp;=&nbsp;date.getSeconds();\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(secs&nbsp;&lt;&nbsp;10)&nbsp;secs&nbsp;=&nbsp;'0'&nbsp;+&nbsp;secs;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;output&nbsp;=&nbsp;template\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace('h',&nbsp;hours)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace('m',&nbsp;mins)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace('s',&nbsp;secs);\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(output);\r\n&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;this.stop&nbsp;=&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;clearInterval(timer);\r\n&nbsp;&nbsp;};\r\n\r\n&nbsp;&nbsp;this.start&nbsp;=&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;render();\r\n&nbsp;&nbsp;&nbsp;&nbsp;timer&nbsp;=&nbsp;setInterval(render,&nbsp;1000);\r\n&nbsp;&nbsp;};\r\n\r\n}\r\n\r\nvar&nbsp;clock&nbsp;=&nbsp;new&nbsp;Clock({template:&nbsp;'h:m:s'});\r\nclock.start(); <\/pre>\r\n<p>function di atas diubah menjadi struktur class seperti berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">class Clock {\r\n    \/\/ Code di sini\r\n}\r\n\r\nvar&nbsp;clock&nbsp;=&nbsp;new&nbsp;Clock({template:&nbsp;'h:m:s'});\r\nclock.start();  <\/pre>\r\n<p>berikut ini contoh output dari tugas 7:<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-4.png\" \/><br \/><br \/>pada contoh output di atas soal 2 kebetulan saya mengeceknya ketika pukul 07.52-an<\/p>\r\n<h3><strong>3. Tips<\/strong><\/h3>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ soal 1\r\n.... jawaban soal 1\r\n\r\n\/\/ soal 2\r\n.... jawaban soal 2\r\n\r\ndan seterusnya<\/code><\/pre>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>4. Kumpulkan Tugas<\/strong><\/h3>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-reactjs\/pendahuluan\/teknis-pengumpulan-tugas\/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"teknis pengumpulan tugas (opens in a new tab)\">teknis pengumpulan tugas<\/a><\/p>\r\n<\/div>","waktu_publish":"2021-11-02 14:00:00","status_publish":"publish","urutan":2,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-11-02 13:50:01","waktu_publish_formatted":" Selasa, 02 November 2021. 14:00:00 WIB."},{"id":1265,"uuid":"97ca4900-c16a-4fe7-b677-5636ddd0aa88","author_user_id":4336,"materi_section_id":352,"judul":"Tugas 8 \u2013 Javascript \u2013 Asynchronous","permalink":"tugas-8-javascript-asynchronous","konten":"<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-dan-file-baru\"><strong>1. Menambahkan Folder Baru dan file baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buat folder baru dengan nama &ldquo;Tugas-8&rdquo;&nbsp;<\/p>\r\n<p>sehingga struktur foldernya seperti di bawah ini<br \/><code>  Tugas-Harian-Part-1\/\r\n<br \/>&nbsp; &nbsp;Tugas-1\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-2\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-3\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-4\/<br \/>&nbsp; &nbsp;Tugas-5\/<br \/>&nbsp; &nbsp;Tugas-6\/<br \/>&nbsp; &nbsp;Tugas-7\/<br \/>&nbsp; &nbsp;Tugas-8\/<\/code><code><\/code><\/p>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\"><strong>2. Kerjakan Soal di bawah ini<\/strong><\/h3>\r\n<p>kerjakan soal di bawah ini di dalam folder &ldquo;Tugas-8&rdquo;<\/p>\r\n<h4><strong>Soal 1<\/strong><\/h4>\r\n<p>Kita mempunyai tumpukan buku untuk dibaca. Setiap buku memiliki waktu yang dibutuhkan untuk menghabiskan buku tersebut. Sudah disediakan function readBooks yang menerima tiga parameter: waktu, buku yang dibaca, dan sebuah callback. Salin code berikut ke dalam sebuah file bernama&nbsp;<code>callback.js<\/code>&nbsp;.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ di callback.js\r\nfunction readBooks(time, book, callback ) {\r\n    console.log(\"saya membaca \" + book.name )\r\n    setTimeout(function(){\r\n        let sisaWaktu = 0\r\n        if(time &gt;= book.timeSpent) {\r\n            sisaWaktu = time - book.timeSpent\r\n            console.log(\"saya sudah membaca \" + book.name + \", sisa waktu saya \" + sisaWaktu)\r\n            callback(sisaWaktu) \/\/menjalankan function callback\r\n        } else {\r\n            console.log('waktu saya habis')\r\n            callback(time)\r\n        }   \r\n    }, book.timeSpent)\r\n}\r\n \r\nmodule.exports = readBooks <\/pre>\r\n<p>Masih satu folder dengan file&nbsp;<code>callback.js<\/code>, buatlah sebuah file dengan nama&nbsp;<code>index.js<\/code>&nbsp;lalu tuliskan code seperti berikut.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ di index.js\r\nvar readBooks = require('.\/callback.js')\r\n \r\nvar books = [\r\n    {name: 'LOTR', timeSpent: 3000}, \r\n    {name: 'Fidas', timeSpent: 2000}, \r\n    {name: 'Kalkulus', timeSpent: 4000},\r\n    {name: 'komik', timeSpent: 1000}\r\n]\r\n \r\n\/\/ Tulis code untuk memanggil function readBooks di sini<\/pre>\r\n<p>lanjutkan code pada&nbsp;<code>index.js<\/code>&nbsp;untuk memanggil function readBooks. Buku yang akan dihabiskan adalah buku-buku di dalam array&nbsp;<code>books<\/code>. Pertama function readBooks menerima input waktu yang dimiliki yaitu 10000 ms (10 detik) dan books pada indeks ke-0. Setelah mendapatkan callback sisa waktu yang dikirim lewat callback, sisa waktu tersebut dipakai untuk membaca buku pada indeks ke-1. Begitu seterusnya sampai waktu habis atau semua buku sudah terbaca. Untuk melihat output, jalankan file&nbsp;<code>index.js<\/code>&nbsp;dengan node js :<\/p>\r\n<pre class=\"wp-block-preformatted\"> $ node index.js<\/pre>\r\n<hr class=\"wp-block-separator\" \/>\r\n<p>berikut ini contoh output soal 1:&nbsp;<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/tugas8-1.gif\" \/><\/p>\r\n<h4><strong>Soal 2<\/strong><\/h4>\r\n<p>Setelah no.1 berhasil, implementasikan function readBooks yang menggunakan callback di atas namun sekarang menggunakan Promise. Buatlah sebuah file dengan nama&nbsp;<code>promise.js<\/code>. Tulislah sebuah function dengan nama readBooksPromise yang me-return sebuah promise seperti berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ di file promise.js\r\nfunction readBooksPromise (time, book) {\r\n  console.log(\"saya mulai membaca \" + book.name )\r\n  return new Promise( function (resolve, reject){\r\n    setTimeout(function(){\r\n      let sisaWaktu = time - book.timeSpent\r\n      if(sisaWaktu &gt;= 0 ){\r\n          console.log(\"saya sudah selesai membaca \" + book.name + \", sisa waktu saya \" + sisaWaktu)\r\n          resolve(sisaWaktu)\r\n      } else {\r\n          console.log(\"saya sudah tidak punya waktu untuk baca \"+ book.name)\r\n          reject(sisaWaktu)\r\n      }\r\n    }, book.timeSpent)\r\n  })\r\n}\r\n \r\nmodule.exports = readBooksPromise<\/pre>\r\n<p>Masih di folder yang sama dengan promise.js, buatlah sebuah file dengan nama&nbsp;<code>index2.js<\/code>. Tuliskan code sebagai berikut<\/p>\r\n<pre class=\"wp-block-preformatted\">var readBooksPromise = require('.\/promise.js')\r\n \r\nvar books = [\r\n    {name: 'LOTR', timeSpent: 3000}, \r\n    {name: 'Fidas', timeSpent: 2000}, \r\n    {name: 'Kalkulus', timeSpent: 4000}\r\n]\r\n \r\n\/\/ Lanjutkan code untuk menjalankan function readBooksPromise <\/pre>\r\n<p>Lakukan hal yang sama dengan soal no.1, habiskan waktu selama 10000 ms (10 detik) untuk membaca semua buku dalam array books.!<\/p>\r\n<p>berikut ini contoh output soal 2:&nbsp;<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/tugas8-2-edited.gif\" \/><\/p>\r\n<h4>Soal 3<\/h4>\r\n<p>Buatlah sebuah file dengan nama&nbsp;<code>promise2.js<\/code>. Tulislah sebuah function dengan nama filterBookPromise yang me-return sebuah promise seperti berikut:<\/p>\r\n<pre class=\"wp-block-code\"><code>function filterBooksPromise(colorful, amountOfPage){\r\n  return new Promise(function(resolve, reject){\r\n    var books=[\r\n        {name: \"shinchan\", totalPage: 50, isColorful: true},\r\n        {name: \"Kalkulus\", totalPage: 250, isColorful: false},\r\n        {name: \"doraemon\", totalPage: 40, isColorful: true},\r\n        {name: \"algoritma\", totalPage: 250, isColorful: false},\r\n    ]\r\n    if (amountOfPage &gt;= 40) {\r\n        resolve(books.filter(x=&gt; x.totalPage &gt;= amountOfPage &amp;&amp; x.isColorful == colorful));\r\n      } else {\r\n        var reason= new Error(\"Maaf buku di bawah 40 halaman tidak tersedia\")\r\n        reject(reason);\r\n      }\r\n  });\r\n}<br \/>\r\nmodule.exports = filterBooksPromise<\/code><\/pre>\r\n<p>Masih di folder yang sama dengan promise2.js, buatlah sebuah file dengan nama&nbsp;<code>index3.js<\/code>. Tuliskan code sebagai berikut:<\/p>\r\n<pre class=\"wp-block-code\"><code>var filterBooksPromise = require('.\/promise2.js')\r\n \r\n\/\/ Lanjutkan code untuk menjalankan function filterBookPromise<\/code><\/pre>\r\n<p>gunakan promise dengan kondisi seperti di bawah ini:<\/p>\r\n<ul>\r\n<li>bukunya berwarna dan jumlah halamannya 40&nbsp;<\/li>\r\n<li>bukunya tidak berwarna dan jumlah halamannya 250 (<strong>gunakan async\/await untuk kondisi ini<\/strong>)<\/li>\r\n<li>bukunya berwarna dan jumlah halamannya 30&nbsp;(<strong>gunakan async\/await untuk kondisi ini<\/strong>)<strong>&nbsp;<\/strong><\/li>\r\n<\/ul>\r\n<p>berikut ini contoh output soal 3:<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/tugas-8-3.png\" \/><\/p>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>3. Kumpulkan Tugas<\/strong><\/h3>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-reactjs\/pendahuluan\/teknis-pengumpulan-tugas\/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"teknis pengumpulan tugas (opens in a new tab)\">teknis pengumpulan tugas<\/a><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-11-03 08:00:00","status_publish":"publish","urutan":3,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-11-03 13:52:34","waktu_publish_formatted":" Rabu, 03 November 2021. 08:00:00 WIB."},{"id":1266,"uuid":"f48ad50a-b829-4b31-a148-dc8706b6edcf","author_user_id":4336,"materi_section_id":352,"judul":"Tugas 9 \u2013 Pengenalan Reactjs & Component Props","permalink":"tugas-9-pengenalan-reactjs-component-props","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\">Petunjuk Pengerjaan<\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<p><span style=\"background-color: #ba372a; color: #ecf0f1;\">NOTE :&nbsp; Saat push project reactnya ke repository tidak perlu \"git init\" lagi<\/span><\/p>\r\n<h3 id=\"1-buatlah-project-reactjs\">1. Buatlah Project ReactJS<\/h3>\r\n<p>buatlah project reactjs pada folder tugas harian dengan nama &ldquo;Tugas-Harian-Part-2&rdquo; pastikan folder &ldquo;tugas-Harian-Part-2&rdquo; berada sejajar dengan folder &ldquo;Tugas-Harian-Part-1&rdquo; ( bukan didalam tugas-harian-part-1 )<\/p>\r\n<p>jika sudah terlanjur membuat project dengan nama lain silahkan rename saja menjadi &ldquo;tugas-Harian-Part-2&rdquo;<\/p>\r\n<p>sehingga struktur foldernya akan terlihat seperti di bawah ini:<\/p>\r\n<p><code>Bds-sanbercode-reactjs-batch-29\/\r\n<br \/>&nbsp; &nbsp;Tugas-Harian-Part-1\/<br \/>&nbsp; &nbsp;Tugas-Harian-Part-2\/<\/code><\/p>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\">2. Kerjakan Soal di bawah ini<\/h3>\r\n<p>berikut ini merupakan ketentuan tugas 9 :<\/p>\r\n<ul>\r\n<li>Buatlah Tampilan seperti gambar dibawah ini ( styling harus sama persis )<\/li>\r\n<li>Editlah tampilan dibawah ini didalam file app.js&nbsp; ( misal mau ada component dari file terpisah, diperbolehkan )<\/li>\r\n<li>Untuk Syntax Css nya boleh edit didalam file app.css atau buat file .css baru<\/li>\r\n<li><strong>Wajib<\/strong> ada penggunaan props (&nbsp; misal list checkboxnya )<\/li>\r\n<li>Gunakan gambar ini : <a href=\"https:\/\/drive.google.com\/file\/d\/1125xkTSNko19q8wbksvKbj4s7ybIwmHO\/view?usp=sharing\">download<\/a><\/li>\r\n<li>pada tugas ini <strong>tidak di perbolehkan<\/strong> menggunakan bootstrap ataupun sejenisnya<\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/Screenshot_45.png\" width=\"711\" height=\"337\" \/><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Berikut ini demo tampilannya :<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/giphy.gif\" width=\"457\" height=\"257\" \/><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<h2 id=\"5-kumpulkan-tugas\">3. Kumpulkan tugas<\/h2>\r\n<p>Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab ke akun Anda di&nbsp;<a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-reactjs\/pendahuluan\/teknis-pengumpulan-tugas\/\" target=\"_blank\" rel=\"noreferrer noopener\">teknis pengumpulan tugas<\/a><\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-11-04 14:00:00","status_publish":"publish","urutan":4,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-11-04 10:37:22","waktu_publish_formatted":" Kamis, 04 November 2021. 14:00:00 WIB."},{"id":1267,"uuid":"9ec103d0-25b9-4c3d-a9f2-07dfd3623108","author_user_id":4336,"materi_section_id":352,"judul":"Tugas 10 \u2013 Component Lifecycle ( Hooks )","permalink":"tugas-10-component-lifecycle-hooks-","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-di-dalam-src\"><strong>1. Menambahkan folder baru di dalam src<\/strong><\/h3>\r\n<p>Ikutilah Ketentuan Tugas 10 :<\/p>\r\n<ul>\r\n<li>Masih Menggunakan Project React Sebelumnya ( tugas-harian-part2 )&nbsp;<strong>Tidak perlu install lagi<\/strong><\/li>\r\n<li>Selanjutnya, Didalam src buatlah folder Tugas-9 dan file tugas9.js didalamnya<\/li>\r\n<li>Pindahkan Tugas 9 yang kemarin ( pengenalan Reactjs ) ke file tugas9.js<\/li>\r\n<li>Lalu Component nya dipanggil ke app.js<\/li>\r\n<li>Selanjutnya, di dalam src juga buatlah folder Tugas-10 dan file tugas10.js didalamnya<\/li>\r\n<li>Dan Buatlah Tugas 10 Hari ini ( Component LifeCycle ) ke file tugas10.js<\/li>\r\n<li>Lalu Component Tugas Hari ini dipanggil ke dalam app.js juga<\/li>\r\n<li>pada tugas ini <strong>tidak di perbolehkan<\/strong> menggunakan bootstrap ataupun sejenisnya<\/li>\r\n<\/ul>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\"><strong>2. kerjakan soal di bawah ini<\/strong><\/h3>\r\n<ul>\r\n<li>Munculkan Component Tugas ini di app.js (tugas sebelumnya tetap dimunculkan)<\/li>\r\n<\/ul>\r\n<p>Tugas Hari ini memiliki ketentuan jawaban yaitu component memiliki dua timer yaitu jam sekarang dan hitung mundur seperti tampilan di bawah ini:<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/Screenshot_46.png\" width=\"542\" height=\"163\" \/><\/p>\r\n<p>dengan ketentuan start hitung mundur mulai dari diatas atau sama dengan 100, ketika hitung mundur sudah mencapai angka 0 maka buatlah smua component untuk tugas 10 hilang (<strong>gunakan method dalam component lifecycle bukan di hide pake css<\/strong>)<\/p>\r\n<p><strong>perlu diperhatikan untuk tugas 10 ini wajib menggunakan functional component (hooks)<\/strong><\/p>\r\n<p>berikut ini contoh output dari tugas 10:<br \/><br \/><\/p>\r\n<p style=\"padding-left: 80px;\">&nbsp;<img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/08\/giphy-1.gif\" width=\"619\" height=\"330\" \/><\/p>\r\n<p>&nbsp;<\/p>\r\n<h2 id=\"5-kumpulkan-tugas\">3. Kumpulkan tugas<\/h2>\r\n<p>Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab ke akun Anda di&nbsp;<a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-reactjs\/pendahuluan\/teknis-pengumpulan-tugas\/\" target=\"_blank\" rel=\"noreferrer noopener\">teknis pengumpulan tugas<\/a><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<\/div>","waktu_publish":"2021-11-05 14:00:00","status_publish":"publish","urutan":5,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-11-05 13:03:53","waktu_publish_formatted":" Jumat, 05 November 2021. 14:00:00 WIB."}]},{"id":353,"uuid":"93a07a76-4c2c-4c4f-a25a-186e6cc0f471","materi_id":35,"nama":"Pekan 3 - Materi","permalink":"pekan-3-materi","urutan":7,"created_by":4336,"updated_by":4336,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-25 14:14:56","posting":[{"id":1269,"uuid":"174046ec-8c27-4600-aadc-fb5799a83162","author_user_id":4336,"materi_section_id":353,"judul":"Hari Ke-11 \u2013 CRUD ReactJs ( With Hooks ) Bagian I","permalink":"hari-ke-11-crud-reactjs-with-hooks-bagian-i","konten":"<div class=\"entry-content\">\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">CRUD React ( using Hooks ) Bagian I<\/span><\/p>\r\n<p style=\"text-align: justify;\">Dalam sebuah aplikasi tentunya kita sering menemukan sebuah list atau table yang menampilkan data-data dan disana kita bisa mengolah datanya dengan menambahkan data ( Create), menampilkan data ( READ), update data (UPDATE), dan menghapus data (DELETE). tentunya di reactjs pun perlu hal tersebut karna itu merupakan hal yang lumrah dalam aplikasi. lalu bagaimana cara mengimplementasikannya? ya mari kita simak pemaparan di bawah ini, sebelum kita menerapkan CRUD pada React kita membutuhkan Lists dan Form<\/p>\r\n<p style=\"text-align: justify;\"><strong>FYI : <\/strong>Kita akan mengimplementasi List dan Form ini dengan menggunakan React Hooks<\/p>\r\n<p id=\"lists\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Implementasi Lists<\/span><\/p>\r\n<p>Langkah pertama yang harus kita sediakan adalah sebuah List. lists atau daftar, atau sering juga kita melihat daftar dalam bentuk table merupakan salah satu opsi untuk menampilkan data ( READ ), nah mari kita coba dengan kasus di bawah ini<\/p>\r\n<p style=\"padding-left: 40px;\">1. kita memiliki data array of object seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\" style=\"padding-left: 80px;\"><code>let pesertaLomba = [ 'Budi', 'Susi', 'Lala', 'Agung' ]<\/code><\/pre>\r\n<p style=\"text-align: justify; padding-left: 40px;\">2. lalu kita ingin menampilkan data tersebut kita olah di masukkan ke dalam state lalu kita tampilkan dalam tabel. berikut contoh kode penggunaanya:<\/p>\r\n<pre style=\"padding-left: 80px;\"><code>import React, { useState } from 'react';<br \/><\/code><br \/><code>const List = () =&gt; {<\/code><br \/><code> &nbsp;const&nbsp;[pesertaLomba,&nbsp;setPesertaLomba]&nbsp;=&nbsp;useState(<\/code><br \/><code>    ['Budi', 'Susi', 'Lala', 'Agung']<\/code><br \/><code>  )<\/code><br \/><br \/><code> &nbsp;return&nbsp;(<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&lt;&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;Daftar&nbsp;Peserta&nbsp;Lomba&lt;\/h1&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;thead&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;No&lt;\/th&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;Nama&lt;\/th&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tr&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/thead&gt;<\/code><br \/><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tbody&gt;<\/code><br \/><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pesertaLomba.map((val,&nbsp;index)&nbsp;=&gt;&nbsp;{<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;{index&nbsp;+&nbsp;1}&lt;\/td&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;{val}&lt;\/td&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tr&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<\/code><br \/><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<\/code><br \/><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tbody&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/table&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&lt;\/&gt;<\/code><br \/><code>&nbsp;&nbsp;)<\/code><br \/><br \/><code>}<\/code><br \/><br \/><code>export&nbsp;default&nbsp;List<\/code><\/pre>\r\n<p style=\"text-align: justify; padding-left: 40px;\">3. berikut ini tampilannya dan Selamat Anda telah berhasil Mengimplementasi List pada react untuk menampilkan sebuah data :<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: justify;\"><img class=\"wp-image-8382\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-37.png\" sizes=\"(max-width: 779px) 100vw, 779px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-37.png 779w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-37-300x128.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-37-768x328.png 768w\" alt=\"\" width=\"779\" height=\"333\" \/><\/figure>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>\r\n<p id=\"forms\" style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Implementasi Forms<\/span><\/p>\r\n<p style=\"text-align: justify;\">Lists sendiri itu erat kaitannya dengan penambahan data ( CREATE ) lalu bagaimana cara kita menerapkannya ?<\/p>\r\n<p style=\"text-align: justify; padding-left: 40px;\">1. Pertama mari kita coba buat sebuah form terlebih dahulu berdasarkan data sebelumnya tadi, itu berarti kita membutuhkan form dengan input nama<\/p>\r\n<pre class=\"wp-block-code\" style=\"padding-left: 80px;\"><code>&lt;form &gt;\r\n  &lt;label&gt;\r\n    Masukkan nama peserta:\r\n  &lt;\/label&gt;          \r\n  &lt;input type=\"text\" \/&gt;\r\n  &lt;input type=\"submit\" value=\"Submit\" \/&gt;\r\n&lt;\/form&gt;<\/code><\/pre>\r\n<p style=\"padding-left: 40px;\">2. lalu langkah berikutnya adalah kita tambahkan state baru seperti di bawah ini:<\/p>\r\n<p style=\"padding-left: 80px;\"><code>const [inputName, setInputName] =&nbsp;&nbsp;useState(\"\")<\/code><\/p>\r\n<p style=\"padding-left: 40px;\">3. lalu tambahkan value input text nya dengan inputName, tambahkan handle di input text dan tambahkan handle di submit seperti di bawah ini:<\/p>\r\n<pre style=\"padding-left: 80px;\"><code>&lt;form onSubmit={handleSubmit}&gt;<\/code><br \/><code>  &lt;label&gt;<\/code><br \/><code> &nbsp;&nbsp; Masukkan nama peserta:<\/code><br \/><code>  &lt;\/label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/code><br \/><code>  &lt;input type=\"text\" value={inputName} onChange={handleChange}\/&gt;<\/code><br \/><code>  &lt;input type=\"submit\" value=\"Submit\" \/&gt;<\/code><br \/><code>&lt;\/form&gt;<\/code><\/pre>\r\n<p style=\"text-align: justify; padding-left: 40px;\">4. lalu tambahkan function handle submit dan handlechange :<\/p>\r\n<p style=\"text-align: justify; padding-left: 80px;\"><code><span style=\"background-color: #e8e8e8;\">const [pesertaLomba, setPesertaLomba] = useState(['Budi', 'Susi', 'Lala', 'Agung'])&nbsp;&nbsp;<\/span><\/code><\/p>\r\n<p style=\"text-align: justify; padding-left: 80px;\"><code><\/code><code>const&nbsp;[inputName,&nbsp;setInputName]&nbsp;=&nbsp;useState(\"\")<\/code><\/p>\r\n<\/div>\r\n<div class=\"entry-content\" style=\"padding-left: 40px;\"><code><\/code><\/div>\r\n<div class=\"entry-content\" style=\"padding-left: 80px;\"><code>const handleChange = (event) =&gt; {&nbsp;&nbsp;&nbsp;&nbsp;<\/code><\/div>\r\n<div class=\"entry-content\" style=\"padding-left: 80px;\">&nbsp; &nbsp;&nbsp;<code>setInputName(event.target.value );&nbsp;&nbsp;<\/code><\/div>\r\n<div class=\"entry-content\" style=\"padding-left: 80px;\"><code>}<\/code><br \/><code><\/code><\/div>\r\n<div class=\"entry-content\" style=\"padding-left: 80px;\"><code>const handleSubmit = (event) =&gt; {&nbsp;&nbsp;&nbsp;&nbsp;<\/code><\/div>\r\n<div class=\"entry-content\" style=\"padding-left: 80px;\">&nbsp; &nbsp;&nbsp;<code>event.preventDefault()&nbsp;&nbsp;&nbsp;&nbsp;<\/code><\/div>\r\n<div class=\"entry-content\" style=\"padding-left: 80px;\">&nbsp; &nbsp;&nbsp;<code>setPesertaLomba(<\/code><code>[...pesertaLomba, inputName]<\/code><code>)&nbsp;&nbsp;&nbsp;&nbsp;<\/code><\/div>\r\n<div class=\"entry-content\" style=\"padding-left: 80px;\"><code>&nbsp; &nbsp;setInputName(\"\")&nbsp;&nbsp;<\/code><code><\/code><\/div>\r\n<div class=\"entry-content\" style=\"padding-left: 80px;\"><code>}<\/code><\/div>\r\n<div class=\"entry-content\" style=\"padding-left: 80px;\"><code><\/code><\/div>\r\n<div class=\"entry-content\">\r\n<p class=\"wp-block-code\"><br \/><span style=\"background-color: #3598db; color: #ffffff;\">&nbsp;Berikut ini Contoh Penerapan List dan Forms :&nbsp;<\/span><br \/><br \/><\/p>\r\n<pre><code>import&nbsp;React,&nbsp;{&nbsp;&nbsp;useState&nbsp;}&nbsp;from&nbsp;\"react\"<\/code><br \/><br \/><br \/><code>const List = () =&gt; {<\/code><br \/><code> &nbsp;const&nbsp;[pesertaLomba,&nbsp;setPesertaLomba]&nbsp;=&nbsp;useState(['Budi',&nbsp;'Susi',&nbsp;'Lala',&nbsp;'Agung'])<\/code><br \/><code> &nbsp;const&nbsp;[inputName,&nbsp;setInputName]&nbsp;=&nbsp;useState(\"\")<br \/><\/code><br \/><code> &nbsp;const&nbsp;handleChange&nbsp;=&nbsp;(event)&nbsp;=&gt;&nbsp;{<\/code><br \/><code> &nbsp;&nbsp;&nbsp;setInputName(event.target.value&nbsp;);<\/code><br \/><code>&nbsp;&nbsp;}<\/code><br \/><br \/><code> &nbsp;const&nbsp;handleSubmit&nbsp;=&nbsp;(event)&nbsp;=&gt;&nbsp;{<\/code><br \/><code> &nbsp;&nbsp;&nbsp;event.preventDefault()<\/code><br \/><code> &nbsp;&nbsp;&nbsp;setPesertaLomba(<\/code><code>[...pesertaLomba, inputName]<\/code><code>)<\/code><br \/><code> &nbsp;&nbsp;&nbsp;setInputName(\"\")<\/code><br \/><code>&nbsp;&nbsp;}<\/code><br \/><br \/><code> &nbsp;return&nbsp;(<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&lt;&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;Daftar&nbsp;Peserta&nbsp;Lomba&lt;\/h1&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;thead&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;No&lt;\/th&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;Nama&lt;\/th&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;&lt;\/th&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tr&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/thead&gt;<\/code><br \/><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tbody&gt;<\/code><br \/><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pesertaLomba.map((val,&nbsp;index)&nbsp;=&gt;&nbsp;{<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;{index&nbsp;+&nbsp;1}&lt;\/td&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;{val}&lt;\/td&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tr&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<\/code><br \/><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<\/code><br \/><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tbody&gt;<\/code><br \/><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/table&gt;<\/code><br \/><br \/><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\/*&nbsp;Form&nbsp;*\/}<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;Form&nbsp;Peserta&lt;\/h1&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;form&nbsp;onSubmit={handleSubmit}&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Masukkan&nbsp;nama&nbsp;peserta:<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/label&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=\"text\"&nbsp;value={inputName}&nbsp;onChange={handleChange}&nbsp;\/&gt;<\/code><br \/><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&gt;submit&lt;\/button&gt;<\/code><br \/><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/form&gt;<\/code><br \/><br \/><code> &nbsp;&nbsp;&nbsp;&lt;\/&gt;<\/code><br \/><code> &nbsp;)<\/code><br \/><code>}<\/code><br \/><br \/><br \/><code>export&nbsp;default&nbsp;List<\/code><\/pre>\r\n<\/div>\r\n<h2 id=\"referensi-tambahan\" style=\"text-align: justify;\"><strong>Video Pembahasan Materi<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">berikut ini video pembahasan materi hari 12: <a href=\"https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7hNIx8d1GGYZFoWw32YRHWM\">https:\/\/youtube.com\/playlist?list=PL8YCzrSDCR7hNIx8d1GGYZFoWw32YRHWM<\/a><\/p>","waktu_publish":"2021-11-08 08:00:00","status_publish":"publish","urutan":1,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-11-08 08:11:41","waktu_publish_formatted":" Senin, 08 November 2021. 08:00:00 WIB."},{"id":1284,"uuid":"af89fec6-7253-4432-b88f-f27d11fb8b77","author_user_id":14957,"materi_section_id":353,"judul":"Hari Ke-11 - CRUD ReactJs ( With Hooks ) Bagian II","permalink":"hari-ke-11-crud-reactjs-with-hooks-bagian-ii","konten":"<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">CRUD React ( using Hooks ) Bagian II<\/span><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 12pt;\">Pada Materi CRUD React Bagian I, kita telah mengimplementasi List dan Form. Dengan Secara tidak langsung kita telah menerapkan teknik Menampilkan Data ( READ ) dan Penambahan Data pada Form yang telah kita buat, yang berarti CREATE. Maka dari itu hanya UPDATE dan DELETE yang belum kita terapkan. Saatnya kita akan mencoba melengkapi CRUD yang kita buat sebelumnya.<\/span><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 12pt;\">Sebelum kita mulai, pada bagian list ( Tag Tabel ) tambahlah elemen baru untuk menempatkan \"Action\" Delete dan Edit nantinya, Contohnya sebagai berikut :<\/span><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 12pt;\">...<\/span><\/p>\r\n<div>\r\n<pre> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;thead&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;No&lt;\/th&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;Nama&lt;\/th&gt;<br \/><span style=\"background-color: #f1c40f;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;Action&lt;\/th&gt;<\/span><br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tr&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/thead&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tbody&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pesertaLomba.map((val,&nbsp;index)&nbsp;=&gt;&nbsp;{<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;{index&nbsp;+&nbsp;1}&lt;\/td&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;{val}&lt;\/td&gt;<br \/><span style=\"background-color: #f1c40f;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;<\/span><br \/><span style=\"background-color: #f1c40f;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button &gt;Edit&lt;\/button&gt;<\/span><br \/><span style=\"background-color: #f1c40f;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button &gt;Delete&lt;\/button&gt;<\/span><br \/><span style=\"background-color: #f1c40f;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/td&gt;<\/span><br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tr&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tbody&gt;<br \/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/table&gt;<\/pre>\r\n<\/div>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 12pt;\">...<\/span><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 12pt;\"><span style=\"font-size: 24pt;\">Implementasi Delete<\/span> <\/span><\/p>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 12pt;\">Ikuti langkah-langkah berikut ini untuk melakukan DELETE pada data file yang kita buat tadi :<\/span><\/p>\r\n<p style=\"text-align: justify; padding-left: 40px;\"><span style=\"font-size: 12pt;\">1. Buatlah Function dengan nama handleDelete :<\/span><\/p>\r\n<div>\r\n<pre style=\"padding-left: 40px;\"> &nbsp;const&nbsp;handleDelete&nbsp;=&nbsp;(event)&nbsp;=&gt;&nbsp;{<br \/><br \/>&nbsp;&nbsp;}<\/pre>\r\n<\/div>\r\n<p style=\"text-align: justify; padding-left: 40px;\"><span style=\"font-size: 12pt;\">2. Pasangkan handleDelete pada button delete yang telah kita buat serta pasangkan juga attribute value dengan membawa index data ( atau id data nya jika ada ) :<\/span><\/p>\r\n<pre style=\"text-align: justify; padding-left: 40px;\"><span style=\"font-size: 10pt;\"> &nbsp;&nbsp;&nbsp;...<br \/>    &lt;td&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button &gt;Edit&lt;\/button&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color: #f1c40f;\">&lt;button onClick={handleDelete} value={index}&gt;Delete&lt;\/button&gt;<\/span><br \/> &nbsp;&nbsp;&nbsp;&lt;\/td&gt;<br \/>    ...<\/span><\/pre>\r\n<p style=\"text-align: justify; padding-left: 40px;\"><span style=\"font-size: 12pt;\">3. Selanjutnya kita akan melengkapi function handleDelete yang telah kita buat tadi dengan cara :<\/span><\/p>\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"text-align: justify;\"><span style=\"font-size: 12pt;\">Menginialisasi nilai index yang kita dapatkan dari attribute value pada button delete<\/span><\/li>\r\n<li style=\"list-style-type: none;\">\r\n<div>\r\n<div>&nbsp;<\/div>\r\n<pre>let index = parseInt(event.target.value)<\/pre>\r\n<div>&nbsp;<\/div>\r\n<\/div>\r\n<\/li>\r\n<li style=\"text-align: justify;\"><span style=\"font-size: 12pt;\">Menginialisasi nilai array yang sesuai dengan index yang telah kita dapatkan<\/span><\/li>\r\n<\/ul>\r\n<\/li>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<div>\r\n<pre>let&nbsp;deletedItem&nbsp;=&nbsp;pesertaLomba[index]<\/pre>\r\n<\/div>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li style=\"list-style-type: none;\">&nbsp;\r\n<ul>\r\n<li style=\"text-align: justify;\"><span style=\"font-size: 12pt;\">Selanjutnya melakukan fillter terhadap state pesertaLomba dengan hanya menampilkan data yang tidak sama dengan nilai array kita ingin hapus<\/span><\/li>\r\n<\/ul>\r\n<\/li>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<div>\r\n<pre>let&nbsp;newData&nbsp;=&nbsp;pesertaLomba.filter((e)&nbsp;=&gt;&nbsp;{return&nbsp;e&nbsp;!==&nbsp;deletedItem})<\/pre>\r\n<\/div>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li style=\"list-style-type: none;\">&nbsp;\r\n<ul>\r\n<li style=\"text-align: justify;\"><span style=\"font-size: 12pt;\">Selanjutnya kita pasangkan nilai tersebut kepada state pesertaLomba melalui setPesertaLomba&nbsp; <\/span><\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<pre style=\"padding-left: 80px;\">setPesertaLomba(newData)<\/pre>\r\n<p style=\"text-align: justify;\"><span style=\"font-size: 12pt;\"><span style=\"font-size: 24pt;\">Implementasi Update<br \/><span style=\"font-size: 12pt;\">Ikuti langkah-langkah berikut ini untuk melakukan Update pada data file yang kita buat tadi :<\/span><br \/><\/span><\/span><\/p>\r\n<p style=\"text-align: justify; padding-left: 40px;\"><span style=\"font-size: 12pt;\">1. Buatlah State baru dengan nama currentIndex yang berfungsi untuk mentrigger Update pada submit :<\/span><\/p>\r\n<div>\r\n<pre style=\"padding-left: 80px;\">const&nbsp;[currentIndex,&nbsp;setCurrentIndex]&nbsp;=&nbsp;useState(-1)<\/pre>\r\n<\/div>\r\n<p style=\"text-align: justify; padding-left: 80px;\"><span style=\"font-size: 12pt;\">Buatlah Function dengan nama handleEdit :<\/span><\/p>\r\n<div style=\"padding-left: 40px;\">\r\n<pre style=\"padding-left: 80px;\"> &nbsp;const handleEdit = (event) =&gt; {<br \/><br \/>&nbsp;&nbsp;}<\/pre>\r\n<\/div>\r\n<p style=\"text-align: justify; padding-left: 40px;\"><span style=\"font-size: 12pt;\">2. Pasangkan handleEdit pada button Edit yang telah kita buat serta pasangkan juga attribute value dengan membawa index data ( atau id data nya jika ada ) :<\/span><\/p>\r\n<pre style=\"text-align: justify; padding-left: 40px;\"><span style=\"font-size: 10pt;\"> &nbsp;&nbsp;&nbsp;...<br \/>    &lt;td&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color: #f1c40f;\">&nbsp;&lt;button onClick={handleEdit} value={index}&gt;Edit&lt;\/button&gt;<\/span><br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button onClick={handleDelete} value={index}&gt;Delete&lt;\/button&gt;<br \/> &nbsp;&nbsp;&nbsp;&lt;\/td&gt;<br \/>    ...<\/span><\/pre>\r\n<p style=\"text-align: justify; padding-left: 40px;\"><span style=\"font-size: 12pt;\">3. Selanjutnya kita akan melengkapi function handleEdit yang telah kita buat tadi dengan cara :<\/span><\/p>\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<ul>\r\n<li style=\"text-align: justify;\"><span style=\"font-size: 12pt;\">Menginialisasi nilai index yang kita dapatkan dari attribute value pada button edit<\/span><\/li>\r\n<li style=\"list-style-type: none;\">\r\n<div>\r\n<div>&nbsp;<\/div>\r\n<pre>let index = parseInt(event.target.value)<\/pre>\r\n<div>&nbsp;<\/div>\r\n<\/div>\r\n<\/li>\r\n<li style=\"text-align: justify;\"><span style=\"font-size: 12pt;\">Menginialisasi nilai array yang sesuai dengan index yang telah kita dapatkan<\/span><\/li>\r\n<\/ul>\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<div>\r\n<pre>let editValue = pesertaLomba[index]<\/pre>\r\n<\/div>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li style=\"list-style-type: none;\">&nbsp;\r\n<ul>\r\n<li style=\"text-align: justify;\"><span style=\"font-size: 12pt;\">Selanjutnya kita akan melempar nilai editValue kepada setInput() untuk dapat ditampilkan kedalam input form :<\/span><\/li>\r\n<\/ul>\r\n<ul>\r\n<li style=\"list-style-type: none;\">\r\n<div>\r\n<div>\r\n<div>&nbsp;<\/div>\r\n<pre>setInputName(editValue)<\/pre>\r\n<\/div>\r\n<\/div>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li style=\"list-style-type: none;\">&nbsp;\r\n<ul>\r\n<li style=\"text-align: justify;\"><span style=\"font-size: 12pt;\">Selanjutnya kita pasangkan nilai baru pada currentIndex :<\/span><\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<pre style=\"padding-left: 80px;\">setCurrentIndex(event.target.value)<br \/><br \/><\/pre>\r\n<p style=\"text-align: justify; padding-left: 40px;\"><span style=\"font-size: 12pt;\">4. Selanjutnya ubah lah function handleSubmit menjadi sebagai berikut :<\/span><\/p>\r\n<pre style=\"text-align: justify; padding-left: 80px;\"><span style=\"font-size: 12pt;\"><span style=\"font-size: 10pt;\">const handleSubmit = (event) =&gt; {<\/span><br \/><span style=\"font-size: 10pt;\">&nbsp;&nbsp;&nbsp;event.preventDefault()<\/span><br \/><span style=\"font-size: 10pt;\">&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;newData&nbsp;=&nbsp;pesertaLomba<\/span><br \/><br \/><span style=\"font-size: 10pt;\">&nbsp;&nbsp;&nbsp;if&nbsp;(currentIndex&nbsp;===&nbsp;-1)&nbsp;{<\/span><br \/><span style=\"font-size: 10pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newData&nbsp;=&nbsp;[...pesertaLomba,&nbsp;inputName]<\/span><br \/><span style=\"font-size: 10pt;\">&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<\/span><br \/><span style=\"font-size: 10pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newData[currentIndex]&nbsp;=&nbsp;inputName<\/span><br \/><span style=\"font-size: 10pt;\">&nbsp;&nbsp;&nbsp;&nbsp;}<\/span><br \/><br \/><span style=\"font-size: 10pt;\">&nbsp;&nbsp;&nbsp;setPesertaLomba(newData)<\/span><br \/><span style=\"font-size: 10pt;\"> &nbsp;&nbsp;setInputName(\"\")<\/span><br \/><br \/><span style=\"font-size: 10pt;\">&nbsp;&nbsp;}<br \/><br \/><\/span><\/span><\/pre>\r\n<p style=\"text-align: justify;\"><span style=\"background-color: #3598db; color: #ffffff;\">&nbsp;Berikut ini Contoh SoureCode CRUD dengan penambahan Delete dan Update :&nbsp;<\/span><\/p>\r\n<pre style=\"text-align: justify;\"><span style=\"color: #000000;\"><span style=\"font-size: 12pt;\"><span style=\"font-size: 10pt;\"><span style=\"font-size: 8pt;\">import&nbsp;React,&nbsp;{&nbsp;useState&nbsp;}&nbsp;from&nbsp;\"react\"<\/span><br \/><br \/><span style=\"font-size: 8pt;\">const App = () =&gt; {<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;const&nbsp;[pesertaLomba,&nbsp;setPesertaLomba]&nbsp;=&nbsp;useState(['Budi',&nbsp;'Susi',&nbsp;'Lala',&nbsp;'Agung'])<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;const&nbsp;[inputName,&nbsp;setInputName]&nbsp;=&nbsp;useState(\"\")<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;const&nbsp;[currentIndex,&nbsp;setCurrentIndex]&nbsp;=&nbsp;useState(-1)<\/span><br \/><br \/><span style=\"font-size: 8pt;\"> &nbsp;const&nbsp;handleDelete&nbsp;=&nbsp;(event)&nbsp;=&gt;&nbsp;{<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;let&nbsp;index&nbsp;=&nbsp;parseInt(event.target.value)<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;let&nbsp;deletedItem&nbsp;=&nbsp;pesertaLomba[index]<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;let&nbsp;newData&nbsp;=&nbsp;pesertaLomba.filter((e)&nbsp;=&gt;&nbsp;{return&nbsp;e&nbsp;!==&nbsp;deletedItem})<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;console.log(newData)<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;setPesertaLomba(newData)<\/span><br \/><span style=\"font-size: 8pt;\">&nbsp;&nbsp;}<\/span><br \/><br \/><span style=\"font-size: 8pt;\"> &nbsp;const&nbsp;handleChange&nbsp;=&nbsp;(event)&nbsp;=&gt;&nbsp;{<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;setInputName(event.target.value);<\/span><br \/><span style=\"font-size: 8pt;\">&nbsp;&nbsp;}<\/span><br \/><br \/><span style=\"font-size: 8pt;\"> &nbsp;const&nbsp;handleSubmit&nbsp;=&nbsp;(event)&nbsp;=&gt;&nbsp;{<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;event.preventDefault()<\/span><br \/><span style=\"font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;newData&nbsp;=&nbsp;pesertaLomba<\/span><br \/><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;if&nbsp;(currentIndex&nbsp;===&nbsp;-1)&nbsp;{<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newData&nbsp;=&nbsp;[...pesertaLomba,&nbsp;inputName]<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newData[currentIndex]&nbsp;=&nbsp;inputName<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;}<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;setPesertaLomba(newData)<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;setInputName(\"\")<\/span><br \/><span style=\"font-size: 8pt;\">&nbsp;&nbsp;}<\/span><br \/><br \/><span style=\"font-size: 8pt;\"> &nbsp;const&nbsp;handleEdit&nbsp;=&nbsp;(event)&nbsp;=&gt;&nbsp;{<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;let&nbsp;index&nbsp;=&nbsp;parseInt(event.target.value)<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;let&nbsp;editValue&nbsp;=&nbsp;pesertaLomba[index]<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;setInputName(editValue)<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;setCurrentIndex(event.target.value)<\/span><br \/><span style=\"font-size: 8pt;\">&nbsp;&nbsp;}<\/span><br \/><br \/><span style=\"font-size: 8pt;\"> &nbsp;return&nbsp;(<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&lt;&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;Daftar&nbsp;Peserta&nbsp;Lomba&lt;\/h1&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;thead&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;No&lt;\/th&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;Nama&lt;\/th&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;Action&lt;\/th&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tr&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/thead&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tbody&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pesertaLomba.map((val,&nbsp;index)&nbsp;=&gt;&nbsp;{<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;{index&nbsp;+&nbsp;1}&lt;\/td&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;{val}&lt;\/td&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;onClick={handleEdit}&nbsp;value={index}&gt;Edit&lt;\/button&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;onClick={handleDelete}&nbsp;value={index}&gt;Delete&lt;\/button&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/td&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tr&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/tbody&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/table&gt;<br \/><\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\/*&nbsp;Form&nbsp;*\/}<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;Form&nbsp;Peserta&lt;\/h1&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;form&nbsp;onSubmit={handleSubmit}&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Masukkan&nbsp;nama&nbsp;peserta:<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/label&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=\"text\"&nbsp;value={inputName}&nbsp;onChange={handleChange}&nbsp;\/&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&gt;submit&lt;\/button&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/form&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;&nbsp;&nbsp;&lt;\/&gt;<\/span><br \/><span style=\"font-size: 8pt;\"> &nbsp;)<\/span><br \/><span style=\"font-size: 8pt;\">}<\/span><br \/><span style=\"font-size: 8pt;\">export&nbsp;default&nbsp;App<\/span><\/span><\/span><\/span><\/pre>\r\n<p style=\"text-align: justify;\"><strong><span style=\"color: #000000;\">Congratulations!&nbsp;<\/span><\/strong><span style=\"color: #000000;\">Kita telah mempelajari bagaimana CRUD pada React Hooks. Akan tetapi, Konsep ini hanya akan berjalan jika menggunakan data dummy ( dan dengan bentuk data <strong>Array <\/strong>biasa ) Karena jika ingin melakukan pengolahan data yang bentuk nya <strong>Array of object <\/strong>ataupun data yang berasal dari <strong>REST API<\/strong> ( pelajaran nanti ), konsepnya akan berbeda sedikit. Akan tetapi pemahaman terhadap pengolahan data yang masih bersifat dummy pun sangat penting untuk melatih logika berpikir + Menerapkan Lifecycle method react hooks.<\/span><\/p>\r\n<div>\r\n<pre>&nbsp;<\/pre>\r\n<\/div>","waktu_publish":"2021-11-08 08:00:00","status_publish":"publish","urutan":2,"created_by":14957,"updated_by":14957,"created_at":"2021-08-11 22:10:52","updated_at":"2021-11-08 08:11:57","waktu_publish_formatted":" Senin, 08 November 2021. 08:00:00 WIB."},{"id":1270,"uuid":"9d5f0174-9dfc-427a-a3b4-d58c381ac5fb","author_user_id":4336,"materi_section_id":353,"judul":"Hari Ke-12 \u2013 REST API ( With Axios )","permalink":"hari-ke-12-rest-api-with-axios-","konten":"<p style=\"text-align: justify;\"><span style=\"font-size: 24pt;\">Penerapan REST API dengan axios<\/span><\/p>\r\n<p style=\"text-align: justify;\">seperti yang kita ketahui salah satu tugas di dalam frontend development ialah mengoperasikan data dari server, dan hal tersebut biasanya menggunakan apa yang di sebut dengan REST API,<\/p>\r\n<p style=\"text-align: justify;\">REST (Representional State Transfer) API adalah suatu arsitektur metode komunikasi yang menggunakan protokol HTTP untuk pertukaran data dan metode ini sering diterapkan dalam pengembangan aplikasi<\/p>\r\n<p style=\"text-align: justify;\">lalu bagaimanakah cara mengimplementasikan nya di dalam reactjs, tentunya kita butuh tools yang bisa mendukung perpindahan data dengan mudah, disini kita akan menggunaka axios, axios merupakan packages yang memungkinkan kita dapat mengkonsumsi api<\/p>\r\n<p style=\"text-align: justify;\">untuk menggunakan axios silahkan install axios di project reactjs anda:<\/p>\r\n<pre class=\"wp-block-code\"><code>npm install axios<\/code><\/pre>\r\n<p style=\"text-align: justify;\">tunggu hingga proses selesai, setelah selesai mari kita terapkan axios ini dengan menggunakan Lists yang sudah kita buat di atas<\/p>\r\n<p style=\"text-align: justify;\">ubahlah inisialisasi peserta lomba menjadi array kosong:<\/p>\r\n<pre class=\"wp-block-code\"><code>const [pesertaLomba, setPesertaLomba] =  useState([])<\/code><\/pre>\r\n<p style=\"text-align: justify;\">lalu tambahkan useEffect sebelum return yang isinya adalah mengambil data dari server lalu kita tampilkan tabelnya isi tabelnya saja<\/p>\r\n<pre>import React, {useState, useEffect} from \"react\"<br \/>import axios from \"axios\"<br \/><br \/>const Peserta= () =&gt;{<br \/>  const [pesertaLomba, setPesertaLomba] = &nbsp;useState([])<br \/>  const [inputName, setInputName] =&nbsp;&nbsp;useState(\"\")<br \/>&nbsp;&nbsp;const [currentId, setCurrentId] =&nbsp;&nbsp;useState(null)<br \/><br \/>&nbsp; useEffect( () =&gt; {<br \/>&nbsp; &nbsp; const fetchData = async () =&gt; {<br \/>&nbsp; &nbsp; &nbsp; const result = await axios.get(`http:\/\/backendexample.sanbercloud.com\/api\/contestants`)<br \/><br \/>  &nbsp; &nbsp; setPesertaLomba(result.data.map(x=&gt;{ return {id: x.id, name: x.name} }) )<br \/>&nbsp; &nbsp; }<br \/>&nbsp; &nbsp; &nbsp;&nbsp;<br \/>&nbsp; &nbsp; fetchData()<br \/>&nbsp; }, [])<br \/><br \/>&nbsp; return(<br \/>&nbsp; &nbsp; &lt;&gt;<br \/>&nbsp; &nbsp; &nbsp; { pesertaLomba !== null &amp;&amp;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; (&lt;div style={{width: \"70%\", margin: \"0 auto\", textAlign: \"center\"}}&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;h1&gt;Daftar Peserta Lomba&lt;\/h1&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;table className=\"peserta-lomba\"&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;thead&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;tr&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;th&gt;No&lt;\/th&gt;<br \/>  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;th&gt;Nama&lt;\/th&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;\/tr&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;\/thead&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;tbody&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pesertaLomba.map((item, index)=&gt;{<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return( &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;tr key={index}&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;td&gt;{index+1}&lt;\/td&gt;<br \/>  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;td&gt;{item.name}&lt;\/td&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;\/tr&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;\/tbody&gt;<br \/>  &nbsp; &nbsp; &nbsp; &nbsp; &lt;\/table&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;\/div&gt;)<br \/>&nbsp; &nbsp; &nbsp; }<br \/><br \/>&nbsp; &nbsp; &lt;\/&gt;<br \/>&nbsp; )<br \/>}<br \/><br \/>export default Peserta<\/pre>\r\n<p style=\"text-align: justify;\">lalu tambahkan button edit dan delete yang memiliki trigger onclick untuk edit dan delete<\/p>\r\n<div style=\"text-align: justify;\">\r\n<pre>&lt;td&gt;<br \/> &lt;button onClick={handleEdit} value={item.id}&gt;Edit&lt;\/button&gt;<br \/>  &amp;nbsp;<br \/> &lt;button onClick={handleDelete} value={item.id}&gt;Delete&lt;\/button&gt;<br \/>&lt;\/td&gt;<\/pre>\r\n<\/div>\r\n<p style=\"text-align: justify;\">lalu di dalam handleEdit dan handleDelete tambahkan axios get dan delete<\/p>\r\n<div style=\"text-align: justify;\">\r\n<pre> const&nbsp;handleEdit&nbsp;=&nbsp;(event)&nbsp;=&gt;{<br \/> &nbsp;&nbsp;&nbsp;let&nbsp;idPeserta&nbsp;=&nbsp;event.target.value<br \/> &nbsp;&nbsp;&nbsp;axios.get(`http:\/\/backendexample.sanbercloud.com\/api\/contestants\/${idPeserta}`)<br \/> &nbsp;&nbsp;&nbsp;.then(res&nbsp;=&gt;&nbsp;{<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;data&nbsp;=&nbsp;res.data<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setInputName(data.name)<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setCurrentId(data.id)<br \/> &nbsp;&nbsp;&nbsp;})<br \/>&nbsp;&nbsp;}<br \/><br \/> &nbsp;const&nbsp;handleDelete&nbsp;=&nbsp;(event)&nbsp;=&gt;{<br \/> &nbsp;&nbsp;&nbsp;let&nbsp;idPeserta&nbsp;=&nbsp;parseInt(event.target.value)<br \/> &nbsp;&nbsp;&nbsp;axios.delete(`http:\/\/backendexample.sanbercloud.com\/api\/contestants\/${idPeserta}`)<br \/> &nbsp;&nbsp;&nbsp;.then(()&nbsp;=&gt;&nbsp;{<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;newPesertaLomba&nbsp;=&nbsp;pesertaLomba.filter(el=&gt;&nbsp;{return&nbsp;el.id&nbsp;!==&nbsp;idPeserta})<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setPesertaLomba(newPesertaLomba)<br \/> &nbsp;&nbsp;&nbsp;})<br \/>&nbsp;&nbsp;}<\/pre>\r\n<\/div>\r\n<p style=\"text-align: justify;\">lalu tambahkan form di bawah tabelnya<\/p>\r\n<div style=\"text-align: justify;\">\r\n<pre>{\/* Form *\/}<br \/>&lt;h1&gt;Form Peserta&lt;\/h1&gt;<br \/>&lt;form style={{paddingBottom: \"20px\"}}onSubmit={handleSubmit}&gt;<br \/>  &lt;label&gt;<br \/> &nbsp;  Masukkan nama peserta:<br \/> &nbsp;&lt;\/label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br \/> &nbsp;&lt;input type=\"text\" value={inputName} onChange={handleChange}\/&gt;<br \/> &nbsp;&lt;button&gt;submit&lt;\/button&gt;<br \/>&lt;\/form&gt;<\/pre>\r\n<\/div>\r\n<p style=\"text-align: justify;\">lalu tambahkan handle change<\/p>\r\n<div style=\"text-align: justify;\">\r\n<pre> &nbsp;const&nbsp;handleChange&nbsp;=&nbsp;(event)&nbsp;=&gt;{<br \/> &nbsp;&nbsp;&nbsp;let&nbsp;inputValue&nbsp;=&nbsp;event.target.value<br \/> &nbsp;&nbsp;&nbsp;setInputName(inputValue)<br \/>&nbsp;&nbsp;}<\/pre>\r\n<\/div>\r\n<p style=\"text-align: justify;\">lalu tambahkan function handle submit yang di dalamnya menggunakan axios post<\/p>\r\n<div style=\"text-align: justify;\">\r\n<pre>const handleSubmit = (event) =&gt;{<br \/>&nbsp; &nbsp; event.preventDefault()<br \/><br \/>&nbsp; &nbsp; if (currentId === null){<br \/>&nbsp; &nbsp; &nbsp; \/\/ untuk create data baru<br \/>&nbsp; &nbsp; &nbsp; axios.post(`http:\/\/backendexample.sanbercloud.com\/api\/contestants`, {name: inputName})<br \/>&nbsp; &nbsp; &nbsp; .then(res =&gt; {<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let data = res.data<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setPesertaLomba([...pesertaLomba, {id: data.id, name: data.name}])<br \/>&nbsp; &nbsp; &nbsp; })<br \/>&nbsp; &nbsp; }else{<br \/>&nbsp; &nbsp; &nbsp; axios.put(`http:\/\/backendexample.sanbercloud.com\/api\/contestants\/${currentId}`, {name: inputName})<br \/>&nbsp; &nbsp; &nbsp; .then(() =&gt; {<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let singlePeserta = pesertaLomba.find(el=&gt; el.id === currentId)<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; singlePeserta.name= inputName<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setPesertaLomba([...pesertaLomba])<br \/>&nbsp; &nbsp; &nbsp; }) &nbsp; &nbsp; &nbsp;<br \/>&nbsp; &nbsp; }<br \/>&nbsp; &nbsp; setInputName(\"\")<br \/>&nbsp; &nbsp; setCurrentId(null)<br \/>&nbsp; }<\/pre>\r\n<\/div>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<h2 id=\"referensi-tambahan\" style=\"text-align: justify;\"><strong>Video Pembahasan Materi<\/strong><\/h2>\r\n<p style=\"text-align: justify;\">berikut ini video pembahasan materi hari 13: <a href=\"https:\/\/youtu.be\/1_qs3EY_D6A\" target=\"_blank\" rel=\"noopener\">https:\/\/youtu.be\/1_qs3EY_D6A<\/a><\/p>\r\n<p style=\"text-align: justify;\"><strong>Referensi<\/strong>:<\/p>\r\n<ul style=\"text-align: justify;\">\r\n<li><a href=\"https:\/\/medium.com\/@kiddy.xyz\/restful-api-apaan-tuh-dbcfa434761e\">https:\/\/medium.com\/@kiddy.xyz\/restful-api-apaan-tuh-dbcfa434761e<\/a><\/li>\r\n<li><a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/react-axios-react\">https:\/\/www.digitalocean.com\/community\/tutorials\/react-axios-react<\/a><\/li>\r\n<\/ul>\r\n<p style=\"text-align: justify;\">&nbsp;<\/p>","waktu_publish":"2021-11-09 08:00:00","status_publish":"publish","urutan":4,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-11-09 07:46:39","waktu_publish_formatted":" Selasa, 09 November 2021. 08:00:00 WIB."}]},{"id":354,"uuid":"6093167f-9041-4cb8-97d4-27b038432ecb","materi_id":35,"nama":"Pekan 3 - Tugas","permalink":"pekan-3-tugas","urutan":7,"created_by":4336,"updated_by":4336,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-25 14:14:56","posting":[{"id":1274,"uuid":"08434b80-d2f5-4afd-91fb-6756de07d01a","author_user_id":4336,"materi_section_id":354,"judul":"Tugas 11 \u2013 CRUD Reactjs ( With Hooks )","permalink":"tugas-11-crud-reactjs-with-hooks-","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-di-dalam-src\"><strong>1. Menambahkan folder baru di dalam src&nbsp;<\/strong><\/h3>\r\n<p>Gunakanlah Project yang sudah di buat pada <strong>Tugas-9<\/strong>. lalu buatlah folder baru dengan nama &ldquo;Tugas-11&rdquo; di dalam folder src di dalam project reactjs<\/p>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\"><strong>2. kerjakan soal di bawah ini<\/strong><\/h3>\r\n<p>Ditugas ini anda diminta untuk mengelolah data dengan tipe ( array of object ) langkahnya kurang lebih mirip seperti materinya akan tetapi di materi data yang digunakan adalah Array.&nbsp;<\/p>\r\n<p>ketentuan mengerjakan tugas 11 :&nbsp;<\/p>\r\n<ul>\r\n<li>buatlah form untuk menambahkan data ke tabel harga buah dengan inputan nama, hargaTotal dan beratTotal (dalam satuan gram)<\/li>\r\n<li>untuk inisialisasi data awal gunakan data di bawah ini:&nbsp;<\/li>\r\n<\/ul>\r\n<div>\r\n<pre style=\"padding-left: 80px;\">var daftarBuah = [<br \/>  {nama: \"Nanas\", hargaTotal: 100000, beratTotal: 4000 },<br \/>  {nama: \"Manggis\", hargaTotal: 350000, beratTotal: 10000},<br \/>  {nama: \"Nangka\", hargaTotal: 90000, beratTotal: 2000},<br \/> &nbsp;{nama: \"Durian\", hargaTotal: 400000, beratTotal: 5000},<br \/> &nbsp;{nama: \"Strawberry\", hargaTotal: 120000, beratTotal: 6000}<br \/>]<\/pre>\r\n<\/div>\r\n<ul>\r\n<li>lalu pada tabel nanti tambahkan kolom aksi yang berisi button <strong>edit&nbsp;<\/strong>(yang dimana ketika klik edit maka akan muncul datanya di inputan form untuk bisa diedit) dan&nbsp;<strong>delete<\/strong><\/li>\r\n<li>lalu tampilkan dalam App.js<\/li>\r\n<li>untuk tugas-tugas sebelumnya silahkan dikomen saja ( ctrl + \/&nbsp; di komponennya ), jadi yang di tampilkan hanya tugas 11 saja<\/li>\r\n<li><strong>perlu diperhatikan untuk tugas 11 ini wajib menggunakan functional component ( react hooks )<\/strong><\/li>\r\n<li><strong>(stylingnya sudah boleh bebas asalkan tidak menggunakan bootstrap dan sejenisnya)<\/strong><\/li>\r\n<li>\r\n<p>ketentuan Lainnya pada form adalah:<\/p>\r\n<ul>\r\n<li>semua inputan wajib diisi<\/li>\r\n<li>inputan total berat minimal 2 kg<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<p>kurang lebih outputnya seperti ini :<br \/><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/tugas-12-a.png\" \/>&nbsp;<\/p>\r\n<\/div>\r\n<h2 id=\"5-kumpulkan-tugas\">3. Kumpulkan tugas<\/h2>\r\n<p>Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab ke akun Anda di&nbsp;<a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-reactjs\/pendahuluan\/teknis-pengumpulan-tugas\/\" target=\"_blank\" rel=\"noreferrer noopener\">teknis pengumpulan tugas<\/a><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-11-08 14:00:00","status_publish":"publish","urutan":1,"created_by":14957,"updated_by":14957,"created_at":"2021-08-09 16:42:06","updated_at":"2021-11-08 14:11:31","waktu_publish_formatted":" Senin, 08 November 2021. 14:00:00 WIB."}]},{"id":355,"uuid":"212fd1b2-366a-4ff9-b56d-350a16c3d7cb","materi_id":35,"nama":"Pekan 4  - Materi","permalink":"pekan-4-materi","urutan":8,"created_by":4336,"updated_by":4336,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-25 14:14:56","posting":[]},{"id":356,"uuid":"aafd9652-851f-4025-9c71-43f42e988063","materi_id":35,"nama":"Pekan 4 - Final Project","permalink":"pekan-4-final-project","urutan":9,"created_by":4336,"updated_by":4336,"created_at":"2021-08-09 16:42:06","updated_at":"2021-10-25 14:14:56","posting":[]}],"list_kelas":null,"is_done":0}