{"response_code":"00","response_msg":"Berhasil mendapatkan materi kelas","materi_kelas":{"id":27,"uuid":"3ce9352b-a37e-48e9-afa5-d3a975b4cccc","kategori_kelas_id":1,"versi":"3.0.0","created_by":12081,"updated_by":12081,"created_at":"2021-04-10 20:21:35","updated_at":null},"section":[{"id":250,"uuid":"82d5708e-1f17-4ea4-abf5-ff76b9870353","materi_id":27,"nama":"Pendahuluan","permalink":"pendahuluan","urutan":1,"created_by":8222,"updated_by":8222,"created_at":"2021-04-10 20:21:35","updated_at":"2021-09-20 07:28:12","posting":[{"id":866,"uuid":"b8a4fe14-1371-4b4b-8ca8-54d88cd91d43","author_user_id":8222,"materi_section_id":250,"judul":"Persiapan Perangkat","permalink":"persiapan-perangkat","konten":"<div class=\"entry-content\">\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Selamat datang peserta Bootcamp Sanbercode kelas Mobile Apps Development React Native. Sebelum membahas proses membuat aplikasi menggunakan framework React Native, terlebih dahulu kita akan membahas berbagai perangkat yang perlu dipersiapkan.<\/p>\r\n<\/blockquote>\r\n<h2 id=\"perangkat-yang-diperlukan\">Perangkat yang Diperlukan<\/h2>\r\n<p>Untuk mengikuti bootcamp React Native ini, diperlukan perangkat utama yaitu&nbsp;<strong>PC\/Laptop<\/strong>&nbsp;yang terhubung dengan&nbsp;<strong>internet<\/strong>. Spesifikasi PC\/Laptop minimal memiliki&nbsp;<strong>RAM 4GB<\/strong>.<\/p>\r\n<p>Dan untuk mempermudah proses pengembangan aplikasi, diperlukan perangkat&nbsp;<strong>smartphone Android<\/strong>&nbsp;dengan versi OS minimal&nbsp;<strong>5.0 Lollipop<\/strong>. Jika tidak, maka dapat menggunakan emulator Android seperti AVD (Android Virtual Device) yang terdapat pada&nbsp;<a href=\"https:\/\/developer.android.com\/studio\">Android Studio&nbsp;<\/a>(pastikan spesifikasi PC\/Laptop memenuhi system requirement pada Android Studio).<\/p>\r\n<p>Jika dalam proses pengembangan aplikasi menggunakan Expo, maka silahkan install aplikasi&nbsp;<a href=\"https:\/\/play.google.com\/store\/apps\/details?id=host.exp.exponent&amp;hl=en\">Expo<\/a>&nbsp;dari pengembang Expo Project di Google Play Store. Dan pastikan sudah mengaktifkan &ldquo;Developer Mode&rdquo; \/ &ldquo;Mode Pengembang&rdquo; dan juga mengaktifkan &ldquo;USB Debugging&rdquo;. (<a href=\"https:\/\/play.google.com\/store\/apps\/details?id=host.exp.exponent&amp;hl=en\">https:\/\/play.google.com\/store\/apps\/details?id=host.exp.exponent&amp;hl=en<\/a>).<\/p>\r\n<h2 id=\"perangkat-lunak-dan-teknologi-yang-digunakan\">Perangkat Lunak dan Teknologi yang Digunakan<\/h2>\r\n<h3 id=\"1-terminal-atau-console\">1. Terminal atau Console<\/h3>\r\n<p>Pada Bootcamp kali ini, diperlukan sebuah terminal untuk mengeksekusi berbagai perintah dasar yang berkaitan dengan Git, Node, dan Expo\/React Native CLI. Kita bisa menggunakan terminal bawaan dari Sistem Operasi yang digunakan seperti Command Prompt\/Windows PowerShell pada OS Windows dan Terminal pada OS Linux maupun OSX. Dan ketika melakukan proses instalasi Git juga terdapat Git Bash yang memiliki fungsi yang serupa. Selain itu, peserta juga bisa menggunakan&nbsp;<a href=\"https:\/\/cmder.net\/\">cmder<\/a>&nbsp;(terutama yang menggunakan OS Windows) karena cmder memiliki banyak fitur yang tidak dimiliki command prompt atau terminal bawaan. Proses instalasi bisa dilakukan menggunakan konfigurasi default\/recommended<\/p>\r\n<h3 id=\"2-git\">2. Git<\/h3>\r\n<p><a href=\"https:\/\/git-scm.com\/\">Git&nbsp;<\/a>merupakan version control yang banyak digunakan oleh para programmer atau software developer. Untuk dapat menggunakannya, download dan install&nbsp;<a href=\"https:\/\/git-scm.com\/\">Git&nbsp;<\/a>sesuai dengan platform OS yang bersangkutan. Dan jalankan perintah instalasi dengan konfigurasi default\/recommended.<\/p>\r\n<h3 id=\"3-visual-studio-code\">3. Visual Studio Code<\/h3>\r\n<p><a href=\"https:\/\/code.visualstudio.com\/\">Visual Studio Code<\/a>&nbsp;adalah salah satu IDE (Integrated Development Environment) yang direkomendasikan untuk digunakan selama bootcamp ini. Salah satu kelebihannya adalah kemudahan pengoperasian dan user inteface yang lebih mudah dipahami oleh orang yang awam dalam pemrograman. Selain itu juga terdapat banyak extension atau plugin yang sangat membantu dalam menuliskan kode selama membangun suatu program\/aplikasi. Beberapa extension yang disarankan untuk ditambahkan adalah Prettier &ndash; Code formatter, Material Icon Theme, dan ES7 React\/Redux\/React-Native\/JS snippets (opsional).<\/p>\r\n<p>IDE lainnya yang juga dapat digunakan adalah&nbsp;<a href=\"https:\/\/www.sublimetext.com\/\">Sublime Text<\/a>&nbsp;atau&nbsp;<a href=\"https:\/\/atom.io\/\">Atom<\/a>. Untuk kemudahan proses pembelajaran kami tidak merekomendasikan Notepad atau Notepad++<\/p>\r\n<h3 id=\"4-node-js\">4. Node js<\/h3>\r\n<p>Node js (<a href=\"https:\/\/nodejs.org\/en\/download\/\">https:\/\/nodejs.org\/en\/download\/<\/a>) adalah JavaScript run-time, yang menjadikan program JavaScript bisa berjalan, baik di web browser, node maupun di environment yang kompatibel lainnya. Selain menjadi eksekutor, pada pengembangan aplikasi menggunakan React Native ini, juga terdapat npm (node package manager) yang akan banyak digunakan dalam mengelola dependencies atau fitur-fitur tambahan yang ingin ditambahkan pada aplikasi React Native, seperti misalnya React Navigation, Redux, dan berbagai macam package\/library lainnya.<\/p>\r\n<p>Silahkan download dan install&nbsp;<a href=\"https:\/\/nodejs.org\/en\/download\/\">node js<\/a>&nbsp;di local\/komputer Anda sesuai dengan OS ter-install. Disarankan untuk mendownload node js versi LTS.<\/p>\r\n<h3 id=\"5-expo-cli\">5. Expo CLI<\/h3>\r\n<p>Expo (<a href=\"https:\/\/expo.io\/\">https:\/\/expo.io\/<\/a>) adalah framework dan platform untuk aplikasi React (termasuk React Native). Pada bootcamp ini, kita akan menggunakan Expo sebagai tools dalam mengembangkan aplikasi mobile, karena proses instalasi, penggunaan, dan build aplikasi akan terasa lebih mudah dan simpel. Terlebih di dalamnya sudah terdapat berbagai API atau fitur-fitur untuk mengakses fitur-fitur pada smartphone, seperti kontak, kamera, gps, dan lainnya tanpa harus menambahkannya secara manual.<\/p>\r\n<p>Silahkan install expo-cli di PC\/Laptop Anda melalui terminal\/command prompt\/cmder dengan mengeksekusi command berikut (pastikan node js sudah ter-install):<\/p>\r\n<pre class=\"wp-block-preformatted\"><code>$  npm install -g expo-cli<\/code><\/pre>\r\n<p>untuk membuat projek\/aplikasi baru (misal nama projeknya adalah &ldquo;SanberBlog&rdquo;), bisa menjalankan command berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\"><code>$ expo init SanberBlog\r\n\r\n$ cd SanberBlog   \/\/untuk masuk ke folder projek yang dibuat\r\n$ expo start      \/\/atau bisa juga menggunakan npm start<\/code><\/pre>\r\n<p>Sebelum menjalankan aplikasi, pastikan smartphone Anda sudah terhubung dan di dalamnya sudah ter-install&nbsp;<a href=\"https:\/\/play.google.com\/store\/apps\/details?id=host.exp.exponent&amp;hl=en\">aplikasi expo client<\/a>.<\/p>\r\n<h3 id=\"6-react-native-cli-opsional\">6. React Native CLI (opsional)<\/h3>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Bagian ini bersifat opsional, karena pada bootcamp kali ini akan lebih fokus dalam menggunakan Expo.<\/p>\r\n<\/blockquote>\r\n<p>Selain menggunakan Expo (Expo menyebutnya sebagai managed workflow), tentunya, kita bisa juga menggunakan framework React Native secara langsung (Expo menyebutnya sebagai bare workflow). Tentunya ada kelebihan dan kekurangan dalam menggunakan masing-masing framework tersebut yang bisa dilihat di dokumentasi Expo&nbsp;<a href=\"https:\/\/docs.expo.io\/introduction\/managed-vs-bare\/#workflow-comparison\">(https:\/\/docs.expo.io\/introduction\/managed-vs-bare\/#workflow-comparison<\/a>).<\/p>\r\n<p>Untuk bisa menggunakan framework React Native ini, diperlukan beberapa tahapan proses instalasi, yang bisa disederhanakan sebagai berikut (jika menggunakan OS Windows):<\/p>\r\n<ul>\r\n<li>Install node js<\/li>\r\n<li>Install python3<\/li>\r\n<li>Install JDK8 (Java SE Developent Kit)<\/li>\r\n<li>Install Android Studio<\/li>\r\n<li>Setting ANDROID_HOME environment variable<\/li>\r\n<li>Menambahkan platform-tools path pada environment variable<\/li>\r\n<\/ul>\r\n<p>Jika semua proses tersebut telah berhasil dilakukan, maka selanjutnya Anda bisa membuat projek\/aplikasi React Native dengan menjalankan command berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\"><code>$ npx react-native init SanberBlog\r\n\r\n$ cd SanberBlog                 \/\/masuk ke folder projek\r\n$ npx react-native start        \/\/menjalankan metro bundler\r\n$ npx react-native run-android  \/\/menjalankan aplikasi projek di Android<\/code><\/pre>\r\n<p>Proses instalasi lengkapnya bisa dilihat pada dokumentasi React Native (&nbsp;<a href=\"https:\/\/reactnative.dev\/docs\/environment-setup\">https:\/\/reactnative.dev\/docs\/environment-setup<\/a>), terutama untuk OS Linux dan MacOS karena memiliki beberapa konfigurasi yang berbeda dari Windows.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Catatan:<\/p>\r\n<p>Untuk menjalankan aplikasi di IOS hanya bisa melalui macOS<\/p>\r\n<\/blockquote>\r\n<\/div>","waktu_publish":"2021-08-16 20:00:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-04-10 20:21:35","updated_at":"2021-08-16 07:19:52","waktu_publish_formatted":" Senin, 16 Agustus 2021. 20:00:00 WIB."},{"id":867,"uuid":"d56716c4-4e60-4087-8d05-911f5a9a46d2","author_user_id":8222,"materi_section_id":250,"judul":"Pengumpulan Tugas: JavaScript dan Intro Git","permalink":"pengumpulan-tugas-javascript-dan-intro-git","konten":"<div class=\"entry-content\">\r\n<p>Setiap harinya Anda diminta untuk menyelesaikan tugas dan\/atau quiz yang diberikan. Disarankan Anda untuk membuat satu folder khusus dalam local PC\/Laptop untuk menyimpan file-file tugas yang terhubung dengan repository project pada tugas Git. Berikut tahapan atau tata cara mengumpulkan tugas.<\/p>\r\n<h2 id=\"tugas-javascript\">Tugas JavaScript<\/h2>\r\n<p>Tugas JavaScript yang diberikan pada 2 pekan pertama merupakan tugas per kasus. Dalam hal ini tahapan yang bisa digunakan adalah sebagai berikut:<\/p>\r\n<ul>\r\n<li>Buat folder tugas (misal &ldquo;tugas 5 &ndash; array&rdquo;)<\/li>\r\n<li>Setelah masuk ke dalam folder, buat file tugas (misal &ldquo;tugasArray.js&rdquo;)<\/li>\r\n<li>Jika di dalam tugas terdapat beberapa soal, Anda bisa gunakan fitur toggle comment pada visual studio code untuk pemisah antar soal (dengan menekan shortcut Ctrl + \/ pada Windows atau \u2318\/ pada Mac). contoh:\r\n<pre class=\"wp-block-preformatted\">\/\/ Soal 1 <br \/>{ jawaban soal 1 } <br \/>\/\/ Soal 2 <br \/>{ jawaban soal 2 } <br \/>\/\/ dst.<\/pre>\r\n<\/li>\r\n<li>Jika tugas telah selesai, upload file tugas ke Gitlab (Anda bisa menggunakan command di bawah ini).\r\n<pre class=\"wp-block-preformatted\">$ git add .   <br \/>$ git commit -m \"update tugas 5\"    <br \/>$ git push <\/pre>\r\n<\/li>\r\n<li>Jika proses git push telah berhasil, periksa halaman Gitlab Anda dan masuk ke menu &ldquo;<strong>Repository<\/strong>&rdquo; =&gt; &ldquo;<strong>Commits<\/strong>&rdquo; (yang terdapat di sidebar) kemudian copy link commit tugas Anda.<\/li>\r\n<\/ul>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-3578\" style=\"height: 100%; width: 100%; object-fit: contain;\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas4-1024x482.png\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas4-1024x482.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas4-300x141.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas4-768x361.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas4-1536x723.png 1536w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas4.png 1911w\" alt=\"\" \/>\r\n<figcaption>Contoh Copy Link Commit<\/figcaption>\r\n<\/figure>\r\n<ul>\r\n<li>Buka halaman web sanbercode<a href=\"\/login\">.com<\/a>&nbsp;masuk ke &ldquo;<strong>member area<\/strong>&rdquo; dan lakukan&nbsp;<strong>login<\/strong>. Masuk ke menu &ldquo;<strong>Kelas Training<\/strong>&rdquo; =&gt; &ldquo;<strong>Kelas yang Diikuti<\/strong>&rdquo; dan tekan tombol &ldquo;<strong>Akses Kelas<\/strong>&rdquo; pada kelas yang telah terdaftar.<\/li>\r\n<li>Selanjutnya masuk ke tab &ldquo;<strong>kelola tugas<\/strong>&rdquo; =&gt;&nbsp;<strong>Pilih Nama Tugas<\/strong>&nbsp;=&gt; tekan &ldquo;<strong>Input Tugas<\/strong>&rdquo; dan masukkan link commit yang telah di copy tadi.<\/li>\r\n<\/ul>\r\n<p><strong>Tambahan untuk tampilan buat perhari perfolder<\/strong><\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-11587\" style=\"height: 100%; width: 100%; object-fit: contain;\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/10\/tampilan-1024x536.png\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/10\/tampilan-1024x536.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/10\/tampilan-300x157.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/10\/tampilan-768x402.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/10\/tampilan.png 1296w\" alt=\"\" \/>\r\n<figcaption>Contoh Tampilan Tugas1 &ndash; Tugas 15, Quiz 1-3<\/figcaption>\r\n<\/figure>\r\n<p>Jika terjadi masalah dalam mengikuti tahapan tersebut silahkan disampaikan pada grup diskusi.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p><strong>Catatan<\/strong>: jika ingin mengumpulkan tugas menggunakan selain gitlab (github, bitbucket dll) di perbolehkan selama masih menggunakan git dan reponya bisa diakses oleh trainer<\/p>\r\n<\/blockquote>\r\n<\/div>","waktu_publish":"2021-08-16 08:00:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-04-10 20:21:35","updated_at":"2021-09-20 15:47:34","waktu_publish_formatted":" Senin, 16 Agustus 2021. 08:00:00 WIB."},{"id":1384,"uuid":"c8b71faf-c3cd-4417-b315-69e0f0c349b0","author_user_id":12081,"materi_section_id":250,"judul":"Pengumpulan Tugas: React Native\/Expo","permalink":"pengumpulan-tugas-react-native-expo","konten":"<h2 id=\"tugas-react-native-expo\">Tugas React Native\/Expo<\/h2>\r\n<p>Pada 2 pekan terakhir, Anda akan mengerjakan tugas menggunakan React Native\/Expo. Untuk mengurangi proses pembuatan projek baru yang cukup memakan waktu (proses&nbsp;<code>expo init NamaProyek<\/code>) maka Anda disarankan untuk mengerjakannya di folder projek yang sama.<\/p>\r\n<p>Salah satu cara yang disarankan adalah dengan membuat project pada folder tugas (berbarengan dengan kumpulan folder tugas javascript).<\/p>\r\n<p>Namun jika ingin membuat repository yang berbeda, maka bisa mengikuti tahapan berikut.<\/p>\r\n<ul>\r\n<li>Pada saat Anda akan mulai diminta membuat projek baru. Lakukan proses pembuatan projek expo (misal nama projek adalah Project).\r\n<pre class=\"wp-block-preformatted\">$ expo init SanberApps<\/pre>\r\n<\/li>\r\n<li>Buat repository baru di Gitlab, set visibility level &ldquo;<strong>Public<\/strong>&ldquo;, tetapi&nbsp;<strong>tanpa centang\/non-aktifkan &ldquo;Initialize repository with a README&rdquo;<\/strong>.<\/li>\r\n<\/ul>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-3573\" style=\"height: 100%; width: 100%; object-fit: contain;\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas-1024x487.png\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas-1024x487.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas-300x143.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas-768x365.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas-1536x730.png 1536w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas.png 1897w\" alt=\"Pembuatan Project Baru Tugas Expo\" \/>\r\n<figcaption>Pembuatan Repository Projek Baru untuk Tugas Expo<\/figcaption>\r\n<\/figure>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-3575\" style=\"height: 100%; width: 100%; object-fit: contain;\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas3-1024x483.png\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas3-1024x483.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas3-300x141.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas3-768x362.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas3-1536x724.png 1536w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas3.png 1900w\" alt=\"\" width=\"1024\" height=\"483\" \/>\r\n<figcaption>Instruksi Menghubungkan Projek Expo dengan Repository Gitlab<\/figcaption>\r\n<\/figure>\r\n<ul>\r\n<li>Masuk ke halaman projek Gitlab baru tersebut dan ikuti perintah pada bagian &ldquo;Push an existing folder&rdquo;. (command yang perlu dijalankan seperti di bawah ini).\r\n<pre class=\"wp-block-preformatted\">$ cd SanberApps \/\/ masuk ke folder projek expo    <br \/>$ git init \/\/ inisiasi ulang git   <br \/>$ git remote add origin https:\/\/gitlab.com\/bootcamp-rn-0620\/tugas-expo.git   \/\/ gunakan url repo gitlab Anda sendiri yang terdapat di halaman gitlab Anda    <br \/>$ git add .    <br \/>$ git commit -m \"Initial commit\"    <br \/>$ git push -u origin master<\/pre>\r\n<\/li>\r\n<li>Jika proses push berhasil, selanjutnya buat folder tugas di dalam folder projek expo (misal &ldquo;tugasComponent&rdquo;) dan selesaikan tugas di dalam folder tersebut.<\/li>\r\n<li>Jika tugas telah selesai, upload file tugas ke Gitlab (Anda bisa menggunakan command di bawah ini).\r\n<pre class=\"wp-block-preformatted\">$ git add .<br \/>$ git commit -m \"update tugas core component\"<br \/>$ git push<\/pre>\r\n<\/li>\r\n<li>Jika proses git push telah berhasil, periksa halaman Gitlab Anda dan masuk ke menu &ldquo;<strong>Repository<\/strong>&rdquo; =&gt; &ldquo;<strong>Commits<\/strong>&rdquo; (yang terdapat di sidebar) kemudian copy link commit tugas Anda.<\/li>\r\n<\/ul>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-3578\" style=\"height: 100%; width: 100%; object-fit: contain;\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas4-1024x482.png\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas4-1024x482.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas4-300x141.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas4-768x361.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas4-1536x723.png 1536w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/PengumpulanTugas4.png 1911w\" alt=\"\" width=\"1024\" height=\"482\" \/>\r\n<figcaption>Copy Link Commit<\/figcaption>\r\n<\/figure>\r\n<ul>\r\n<li>Buka halaman web sanbercode.com&nbsp;masuk ke &ldquo;<strong>member area<\/strong>&rdquo; dan lakukan&nbsp;<strong>login<\/strong>. Masuk ke menu &ldquo;<strong>Kelas Training<\/strong>&rdquo; =&gt; &ldquo;<strong>Kelas yang Diikuti<\/strong>&rdquo; dan tekan tombol &ldquo;<strong>Akses Kelas<\/strong>&rdquo; pada kelas yang telah terdaftar.<\/li>\r\n<li>Selanjutnya masuk ke tab &ldquo;<strong>kelola tugas<\/strong>&rdquo; =&gt;&nbsp;<strong>Pilih Nama Tugas<\/strong>&nbsp;=&gt; tekan &ldquo;<strong>Input Tugas<\/strong>&rdquo; dan masukkan link commit yang telah di copy tadi.<\/li>\r\n<\/ul>\r\n<p>Jika terjadi masalah dalam mengikuti tahapan tersebut silahkan disampaikan pada grup diskusi.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p><strong>Catatan<\/strong>: jika ingin mengumpulkan tugas menggunakan selain gitlab (github, bitbucket dll) di perbolehkan selama masih menggunakan git dan reponya bisa diakses oleh trainer<\/p>\r\n<\/blockquote>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-09-20 07:30:00","status_publish":"publish","urutan":3,"created_by":12081,"updated_by":12081,"created_at":"2021-09-20 05:13:51","updated_at":"2021-09-20 05:33:54","waktu_publish_formatted":" Senin, 20 September 2021. 07:30:00 WIB."}]},{"id":377,"uuid":"17ae3ab8-2101-4a94-b104-c40c83690775","materi_id":27,"nama":"Hari 1 - Command Line & Git","permalink":"hari-1-command-line-git","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-09-20 05:20:19","updated_at":"2021-09-20 07:28:12","posting":[{"id":1385,"uuid":"9f23d1cb-f775-4096-b74e-d5c17e326636","author_user_id":12081,"materi_section_id":377,"judul":"Intro Command Line","permalink":"intro-command-line","konten":"<p>Mengenal perintah-perintah dasar pada CLI (Command Line Interface)<\/p>\r\n<h2 id=\"apa-itu-command-line-interface\">Apa itu command line interface?&nbsp;<\/h2>\r\n<p><em>Command line interface<\/em>&nbsp;atau yang biasa kita kenal cmd atau&nbsp;<em>command prompt<\/em>&nbsp;atau&nbsp;<em>terminal&nbsp;<\/em>adalah&nbsp;<em>software&nbsp;<\/em>atau antar muka untuk memberikan perintah-perintah dasar pada komputer kita. Biasanya kita mengoperasikan komputer seperti&nbsp;<em>browsing media<\/em>, mencari&nbsp;<em>file<\/em>, membuat&nbsp;<em>file&nbsp;<\/em>atau&nbsp;<em>folder<\/em>, dan lain-lain dengan GUI (<em>Graphical User Interface<\/em>) yang sudah disediakan pengembang Sistem Operasi seperti&nbsp;<em>Windows<\/em>,&nbsp;<em>Linux<\/em>, atau OSX. Namun pada dasarnya kita juga bisa melakukan operasi-operasi tersebut dalam suatu perintah yang kita kirimkan melalui cmd\/<em>terminal<\/em>. Berikut ini beberapa contohnya:<\/p>\r\n<h4>Menuju&nbsp;<em>folder<\/em>\/direktori tertentu<\/h4>\r\n<p>Untuk menuju&nbsp;<em>folder&nbsp;<\/em>atau direktori tertentu bisa gunakan perintah&nbsp;<code>cd<\/code>&nbsp;atau kepanjangan dari&nbsp;<em>change directory<\/em><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Menuju Desktop\r\n$ cd Desktop\r\n\/\/ Menuju ke direktori <em>parent <\/em>(sebelumnya)\r\n$ cd ..<br \/><br \/><\/pre>\r\n<h4>Mengetahui alamat dari direktori yang sedang dibuka<\/h4>\r\n<p>Terkadang kita butuh tahu sedang dimana posisi terminal kita berjalan. Perintah untuk fungsi ini yaitu&nbsp;<code>pwd<\/code>&nbsp;atau kependekan dari path of working directory<\/p>\r\n<pre class=\"wp-block-preformatted\">$ pwd\r\n\/home\/users\r\n\/\/ sedang berada di folder home\/users<br \/><br \/><\/pre>\r\n<h4>Mengetahui daftar isi dari sebuah direktori\/<em>folder<\/em><\/h4>\r\n<p><em>Kamu bisa gunakan perintah&nbsp;<code>ls<\/code>&nbsp;atau&nbsp;<code>dir<\/code>&nbsp;. contohnya sebagai berikut<\/em><\/p>\r\n<pre class=\"wp-block-preformatted\">$ ls \r\nDocument Desktop Image index.html\r\n$ dir\r\nDocument Desktop Image index.html <br \/><br \/><\/pre>\r\n<h4>Membuat&nbsp;<em>folder<\/em>&nbsp;baru<\/h4>\r\n<p>Perintahnya adalah&nbsp;<code>mkdir<\/code>&nbsp;atau singkatan dari&nbsp;<em>make directory<\/em>. contohnya sebagai berikut<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ membuat folder baru bernama new-folder\r\n$ mkdir new-folder\r\n\/\/ mengecek apakah sudah berhasil buat folder baru\r\n$ ls\r\nnew-folder ... ...  <br \/><br \/><\/pre>\r\n<h4>Membuat&nbsp;<em>file&nbsp;<\/em>baru<\/h4>\r\n<p>Gunakan perintah&nbsp;<code>touch<\/code>&nbsp;untuk membuat file baru<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ membuat <em>file <\/em>index.html\r\n$ touch index.html\r\n\/\/ mengecek apakah sudah berhasil buat <em>file <\/em>baru\r\n$ ls \r\nindex.html ... ... <br \/><br \/><\/pre>\r\n<h2 id=\"software-terminal-command-line-yang-direkomendasikan\"><em>Software terminal&nbsp;<\/em>\/&nbsp;<em>command line<\/em>&nbsp;yang direkomendasikan<\/h2>\r\n<div class=\"entry-content\">\r\n<p>Untuk OS Windows,&nbsp;<em>terminal&nbsp;<\/em>bawaannya adalah&nbsp;<em>command prompt<\/em>&nbsp;atau cmd yang relatif kurang nyaman untuk dipakai dalam tahap&nbsp;<em>development<\/em>. Oleh karena itu direkomendasikan untuk&nbsp;<em>install terminal<\/em>&nbsp;di bawah ini agar lebih optimal dalam mengerjakan&nbsp;<em>project<\/em>.<\/p>\r\n<ul>\r\n<li>Cmder,&nbsp;<em>link download<\/em>:&nbsp;<a href=\"https:\/\/cmder.net\/\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/cmder.net\/cmder<\/a><\/li>\r\n<li>Git bash,link download: <a href=\"https:\/\/git-scm.com\/downloads\">https:\/\/git-scm.com\/downloads<\/a>, Git bash biasanya ter-<em>install<\/em>&nbsp;jika kita meng-<em>install<\/em>&nbsp;git di pc\/laptop kita.<\/li>\r\n<\/ul>\r\n<\/div>","waktu_publish":"2021-10-25 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-09-20 05:21:04","updated_at":"2021-10-25 07:25:53","waktu_publish_formatted":" Senin, 25 Oktober 2021. 07:30:00 WIB."},{"id":1386,"uuid":"5b847ddc-2260-4570-8997-1f6f0221abb7","author_user_id":12081,"materi_section_id":377,"judul":"Intro Git","permalink":"intro-git","konten":"<p>Mengenal version control Git dan version control platform Gitlab<\/p>\r\n<h2 id=\"membuat-project-git-dan-mengelolanya\">Membuat project Git dan mengelolanya<\/h2>\r\n<p>Pastikan sudah install git di komputer anda. Jika belum terinstall silakan ikuti langkah-langkahnya di sini:&nbsp;<a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-contribute-to-open-source-getting-started-with-git\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-contribute-to-open-source-getting-started-with-git<\/a><\/p>\r\n<h3 id=\"membuat-repository-baru\">Membuat Repository Baru&nbsp;<\/h3>\r\n<p>Repository atau repo di Gitlab biasa disebut dengan project. Berikut langkah-langkah untuk membuat repository baru:<\/p>\r\n<ul>\r\n<li class=\"\">Setelah login anda akan menuju halaman Projects yang berisi semua repository yang anda miliki. Jika Anda user baru maka belum ada repository yang tersedia. Di halaman tersebut anda akan melihat tombol New Project di sebelah kanan atas. Klik tombol tersebut.<\/li>\r\n<\/ul>\r\n<figure class=\"wp-block-image size-large\"><img style=\"height: 100%; width: 100%; object-fit: contain;\" src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LlbproPcbeCtKgKYGvN%2F-Llbq3l7Zcukr3daq0H_%2FScreenshot%20from%202019-07-04%2015-07-43.png?alt=media&amp;token=fa940493-e855-4331-92ad-8139dff079c6\" alt=\"\" \/><\/figure>\r\n<ul>\r\n<li class=\"\">Pada halaman membuat project baru, isi kolom project-name dengan nama yang Anda inginkan, misalkan: my first repo.<\/li>\r\n<li class=\"\">Pada kolom visibility level Anda akan melihat tiga pilihan yaitu Private, Internal, dan Public. Private artinya repo yang akan kita buat bersifat rahasia, hanya Anda dan orang yang Anda beri akses saja yang bisa membukanya. Sedangkan pilihan Internal berarti repo Anda akan dapat dilihat oleh semua user Gitlab. Pilihan &ldquo;Public&rdquo; berarti repo Anda akan terlihat oleh orang dari mana saja walaupun dia tidak memiliki akun gitlab. Pilih yang sesuai kebutuhan misalkan : Public.<\/li>\r\n<li class=\"\">Di bagian bawahnya terdapat pilihan checkbox &ldquo;Initialize repository with a README&rdquo;. Centang saja jika anda ingin langsung clone repository nya setelah dibuat.<\/li>\r\n<\/ul>\r\n<figure class=\"wp-block-image size-large\"><img style=\"height: 100%; width: 100%; object-fit: contain;\" src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LlbproPcbeCtKgKYGvN%2F-LlbqFzdUNMEHljLQNHA%2FScreenshot%20from%202019-07-04%2015-24-41.png?alt=media&amp;token=187ff3fe-30b6-4e97-8ec8-713145d30615\" alt=\"\" \/><\/figure>\r\n<ul>\r\n<li>Jika berhasil maka Anda akan diarahkan menuju halaman project atau repo yang telah dibuat. Jika sebelumnya kita centang &ldquo;Initialize repository with a README&rdquo; maka repository kita akan berisi file README.md.<\/li>\r\n<li>Pada Bagian kanan atas terdapat tombol clone. Ketika diklik maka akan keluar dua pilihan &ldquo;Clone with SSH&rdquo; dan &ldquo;Clone with HTTPS&rdquo;. Pilih saja clone dengan HTTPS. Klik tombol salin\/copy supaya langsung otomatis tercopy pada clipboard. Jika ingin clone dengan SSH maka anda harus setting dulu akun anda agar terhubung dengan komputer Anda.<\/li>\r\n<\/ul>\r\n<figure class=\"wp-block-image size-large\"><img style=\"height: 100%; width: 100%; object-fit: contain;\" src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LlbslGZ-w-tHwbKNuXb%2F-LlbsvawiXHthWqDmYZO%2FScreenshot%20from%202019-07-04%2016-10-48.png?alt=media&amp;token=89280629-8db4-4abd-aa2a-2f55671e08e0\" alt=\"\" \/><\/figure>\r\n<ul>\r\n<li>Setelah itu menuju ke terminal atau cmd. Arahkan menuju folder dimana anda ingin menyimpan repository yang sudah Anda buat. Berikan perintah git clone &lt;link_anda_yang_barusan_dicopy&gt; (tanda &lt;&gt; hanyalah sebagai penanda template tidak usah ditulis di perintah cmd)<\/li>\r\n<\/ul>\r\n<pre class=\"wp-block-preformatted\">$ git clone &lt;your_repository_link_url&gt;<\/pre>\r\n<ul>\r\n<li class=\"\">Jika sudah berhasil diclone maka akan ditemukan folder dengan nama repository di Gitlab. Cara mengeceknya dengan perintah &ldquo;ls&rdquo; atau &ldquo;dir&rdquo;.<\/li>\r\n<\/ul>\r\n<pre class=\"wp-block-preformatted\">$ ls\r\nmy-first-repo   <\/pre>\r\n<h3 id=\"mengupload-perubahan-project-dengan-git-push\">Mengupload perubahan project dengan git push<\/h3>\r\n<p>Ketika kita sudah berhasil clone repository kita di Gitlab maka tentu kita ingin melakukan update atau penambahan code pada project kita. Agar perbaruan yang kita simpan di local (komputer) kita dapat kita perbaharui juga di repository Gitlab maka kita bisa lakukan dengan git push. Berikut langkah-langkahnya:<\/p>\r\n<ul>\r\n<li class=\"\">Ketika kita sudah memberikan perubahan terhadap suatu file atau membuat folder-folder baru pada folder project kita maka cara mengecek status perbaruan adalah dengan git status<\/li>\r\n<\/ul>\r\n<pre class=\"wp-block-preformatted\">$ git status\r\nOn branch master\r\nYour branch is up to date with 'origin\/master'.\r\n \r\nChanges not staged for commit:\r\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\r\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\r\n \r\n modified:   README.md\r\n \r\nno changes added to commit (use \"git add\" and\/or \"git commit -a\") <\/pre>\r\n<ul>\r\n<li class=\"\">Setelah git status maka akan ditampilkan list file yang &ldquo;modified&rdquo; atau &ldquo;untracked&rdquo;. &ldquo;modified&rdquo; artinya adalah kita mengubah file yang sebelumnya ada sedangkan &ldquo;untracked&rdquo; artinya file tersebut sama sekali baru di repository. Dalam contoh di atas terdapat perubahan pada file &ldquo;README.md&rdquo;.<\/li>\r\n<li class=\"\">Untuk menaikkan perubahan (stage) yang kita buat maka berikan perintah git add<\/li>\r\n<\/ul>\r\n<pre class=\"wp-block-preformatted\">$ git add README.md\r\n\r\n\/\/ Jika ada terdapat banyak file dan kita ingin naikkan semuanya maka perintahnya: \r\n$ git add .  <\/pre>\r\n<ul>\r\n<li class=\"\">Sekarang perubahan tadi sudah pada tahap &ldquo;staged&rdquo;. jika kita cek status nya lagi maka akan didapati berbeda:<\/li>\r\n<\/ul>\r\n<pre class=\"wp-block-preformatted\">$ git status \r\nOn branch master\r\nYour branch is up to date with 'origin\/master'.\r\n \r\nChanges to be committed:\r\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\r\n \r\n modified:   README.md <\/pre>\r\n<ul>\r\n<li class=\"\">Selanjutnya adalah memberikan laporan atau commit terhadap perubahan yang kita buat dengan git commit.<\/li>\r\n<\/ul>\r\n<pre class=\"wp-block-preformatted\"> $ git commit -m \"Pesan saya: Mengubah README.md\"<\/pre>\r\n<ul>\r\n<li class=\"\">tanda &ldquo;-m&rdquo; pada perintah commit artinya kita ingin memberikan pesan atau laporan terhadap perubahan yang sudah dibuat. Dalam hal ini laporannya adalah &ldquo;Pesan saya: mengubah README.md&rdquo;<\/li>\r\n<li class=\"\">Selanjutnya adalah push untuk mengirim \/upload perubahan yang ada di local computer kita menuju repository yang ada di Gitlab. Jika kita berada di branch bernama master maka perintahnya adalah:<\/li>\r\n<\/ul>\r\n<pre class=\"wp-block-preformatted\">$ git push origin master <\/pre>\r\n<p>Jika branch yang sedang kita miliki di local adalah branch lain selain master maka cara push nya adalah<\/p>\r\n<pre class=\"wp-block-preformatted\">$ git push origin &lt;nama_branch&gt;<\/pre>\r\n<p>Jika langkah tersebut sudah maka kita sudah berhasil mengupload perubahan yang kita buat di repository kita.&nbsp;<img class=\"emoji\" role=\"img\" draggable=\"false\" src=\"https:\/\/s.w.org\/images\/core\/emoji\/13.0.0\/svg\/1f942.svg\" alt=\"\ud83e\udd42\" width=\"25\" height=\"25\" \/><\/p>\r\n<h4>Tutorial Versi Video<\/h4>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/Qkylow2Cpm4\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>\r\n<h2 id=\"git-branch-dan-merge-request-optional\">Git branch dan merge request (optional)<\/h2>\r\n<p>Membuat branch baru dan melakukan merge request<\/p>\r\n<h3 id=\"clone-repository\">Clone repository<\/h3>\r\n<p>Terlebih dahulu lakukan clone terhadap repository project.<\/p>\r\n<pre class=\"wp-block-preformatted\">$ git clone https:\/\/gitlab.com\/some-project \r\n$ cd some-project<\/pre>\r\n<p>Catatan: Link https di atas hanyalah contoh link dari sebuah repository. Link https tersebut bisa diperoleh di halaman gitlab pada bagian clone.<\/p>\r\n<h3 id=\"buat-branch-baru\">Buat branch baru<\/h3>\r\n<p>Setelah di-clone dan masuk ke folder project nya, buatlah branch baru . (myname hanyalah contoh nama branch, kita bisa mengubah sesuai nama yang diinginkan)<\/p>\r\n<pre class=\"wp-block-preformatted\">$ git branch myname\r\n$ git checkout myname <\/pre>\r\n<p>maka sekarang kita sudah berada di branch baru dan dapat mulai melakukan pekerjaan kita.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Catatan:<\/p>\r\n<p><code>myname<\/code>&nbsp;hanya contoh , silakan sesuaikan sendiri nama branch masing-masing.<\/p>\r\n<\/blockquote>\r\n<h3 id=\"push-ke-branch\">Push ke branch&nbsp;<\/h3>\r\n<p>Setelah pekerjaan selesai, kita akan melakukan upload atau push ke branch kita sendiri.<\/p>\r\n<pre class=\"wp-block-preformatted\">$ git add . \r\n$ git commit -m \"some message\"\/\/ push ke branch \r\n$ git push origin myname<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Catatan:<br \/><code>\"some message\"<\/code>&nbsp;hanyalah contoh pesan atau komentar pada sebuah commit. Silahkan isi dengan jenis update yang dikerjakan.<\/p>\r\n<\/blockquote>\r\n<h3 id=\"membuat-merge-request\">Membuat merge request<\/h3>\r\n<p>Setelah melakukan push ke branch sendiri maka selanjutnya melakukan merge request.<\/p>\r\n<p>Secara default pada halaman project akan tersedia tombol &ldquo;create merge request&rdquo;.<\/p>\r\n<figure class=\"wp-block-image size-large\"><img style=\"height: 100%; width: 100%; object-fit: contain;\" src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LldepAZorMgXgsf4exP%2F-Lldo6E7VUbbizSnzZRM%2Fmerge-request.jpeg?alt=media&amp;token=672f6a87-a9ad-4b11-a72c-d03bc6a820c2\" alt=\"\" \/><\/figure>\r\n<p>Jika tombol tersebut tersedia, klik tombol tersebut untuk menuju halaman merge request.<\/p>\r\n<p>Pada halaman merge request isilah kolom title dengan pesan commit atau laporan progress pekerjaan misalkan : done, work in progress atau WIP, dsb.<\/p>\r\n<figure class=\"wp-block-image size-large\"><img style=\"height: 100%; width: 100%; object-fit: contain;\" src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LldepAZorMgXgsf4exP%2F-LldpcFElD1xcptGIuSF%2Ftitle%20merge-request.jpeg?alt=media&amp;token=e97935be-d331-420a-9fb5-ec74fb539608\" alt=\"\" \/><\/figure>\r\n<p>Setelah itu, klik submit merge request maka pekerjaan kita sudah disubmit ke merge request dan akan direview oleh pengelola project.<\/p>\r\n<p>Selengkapnya kamu bisa ikuti juga video tutorial berikut ini:&nbsp;<a href=\"https:\/\/www.youtube.com\/watch?v=HGCTmMSU-Ac&amp;feature=youtu.be\" target=\"_blank\" rel=\"noreferrer noopener\">tutorial merge request<\/a>.<\/p>","waktu_publish":"2021-10-25 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-09-20 05:21:52","updated_at":"2021-10-25 07:26:02","waktu_publish_formatted":" Senin, 25 Oktober 2021. 07:30:00 WIB."},{"id":1387,"uuid":"8ffc627d-2e12-4a44-92b0-f67b93957c89","author_user_id":12081,"materi_section_id":377,"judul":"Tugas 1 - Git","permalink":"tugas-1-git","konten":"<h2>1. Buat repository project baru<\/h2>\r\n<div class=\"entry-content\">\r\n<p>Buatlah satu repository project baru dengan nama project \"<strong>BootcampReactNative<\/strong>\", pastikan visibility level di set \"<strong>private<\/strong>\", dan centang pada bagian \"<strong>Initialize repository with a README<\/strong>\".<\/p>\r\n<p style=\"text-align: center;\"><img style=\"height: 70%; width: 70%; object-fit: contain;\" src=\"https:\/\/dl.dropboxusercontent.com\/s\/nne3cbr6rml385f\/1.0.png\" alt=\"\" width=\"582\" height=\"402\" \/><\/p>\r\n<h2 id=\"1-buat-repository-project-baru\"><\/h2>\r\n<h2 id=\"2-buat-branch-baru\">2. Clone repository<\/h2>\r\n<p>Lakukanlah clone dari project yang telah dibuat. Kemudian masuk ke folder project yang telah di clone<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-14885\" style=\"height: 100%; width: 100%; object-fit: contain;\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/02\/clone-https.png\" alt=\"\" \/><\/figure>\r\n<p>lalu copy text yang ada di dalam Clone With HTTPS lalu jalankan perintah ini di terminal\/cmd<\/p>\r\n<pre class=\"wp-block-preformatted\">git clone [hasil copy dari clone with https]<\/pre>\r\n<p>lalu pindahkan ke folder project yang sudah di clone<\/p>\r\n<h2 id=\"3-menambahkan-file-baru\">3. Menambahkan folder dan file baru<\/h2>\r\n<pre class=\"wp-block-code\"><code>BootcampReactNative\/\r\n  Tugas-1-Git\/\r\n    data_peserta.txt<\/code><\/pre>\r\n<p>Buat folder baru dengan nama &ldquo;<strong>Tugas-1 &ndash; Git<\/strong>&rdquo; dan di dalamnya tambahkan file &ldquo;<strong>data_peserta.txt<\/strong>&rdquo;. Isi file &ldquo;data_peserta.txt&rdquo; tersebut dengan nama dan email Dummy menggunakan sanbercode seperti yang ada di bawah ini, akun gitlab, serta akun telegram pada grup diskusi, contoh:<\/p>\r\n<pre class=\"wp-block-preformatted\">Data Peserta Sanbercode Bootcamp React Native\r\n1. Nama: sanbercode\r\n2. Email: sanbercode@gmail.com\r\n3. Akun Gitlab: @sanbercode\r\n4. Akun Telegram: @sanbercode<\/pre>\r\n<h2 id=\"4-kumpulkan-tugas\">4. Kumpulkan tugas<\/h2>\r\n<p>Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab ke akun Anda di <a href=\"\/dasbor\">https:\/\/sanbercode.com\/dasbor<\/a>.<\/p>\r\n<p><strong>Pastikan&nbsp;<\/strong>repository statusnya&nbsp;<strong>private&nbsp;<\/strong>dan tambahkan&nbsp;<strong>masrurimz<\/strong><strong>&nbsp;<\/strong>sebagai maintainer agar bisa mengakses project<\/p>\r\n<p>Untuk selengkapnya, tata cara pengumpulan tugas dapat melihat halaman &ldquo;Pendahuluan&rdquo;, bagian Proses Pengumpulan Tugas yang ada di materi paling awal di <a href=\"\/dasbor\">https:\/\/sanbercode.com\/dasbor<\/a>&nbsp;.<\/p>\r\n<p><strong>TAMBAHAN<\/strong><\/p>\r\n<p>bagi yang ingin mengerjakan selain di gitlab (github, bitbucket dll) dipersilahkan dengan catatan masih menggunakan git.<\/p>\r\n<\/div>","waktu_publish":"2021-10-25 07:30:00","status_publish":"publish","urutan":3,"created_by":12081,"updated_by":12081,"created_at":"2021-09-20 05:25:04","updated_at":"2021-10-25 07:26:10","waktu_publish_formatted":" Senin, 25 Oktober 2021. 07:30:00 WIB."}]},{"id":378,"uuid":"f69c981e-69b5-462c-b1f9-051010a1ef28","materi_id":27,"nama":"Hari 2 : Intro JavaScript: Variable, Operator, String & Conditional","permalink":"hari-2-intro-javascript-variable-operator-string-conditional","urutan":3,"created_by":12081,"updated_by":12081,"created_at":"2021-09-20 05:38:21","updated_at":"2021-09-20 07:28:12","posting":[{"id":1388,"uuid":"0fa6ae8d-1430-499c-a056-bc520f20c892","author_user_id":12081,"materi_section_id":378,"judul":"JavaScript: Intro Variable & Operator","permalink":"javascript-intro-variable-operator","konten":"<header class=\"entry-header\">\r\n<h2 class=\"entry-title\">Intro<\/h2>\r\n<p class=\"entry-title\">Javascript merupakan salah satu bahasa pemrograman yang terpopuler di dunia. Javascript membuat aplikasi web menjadi interaktif tanpa reload halaman. Hampir semua browser modern yang kita ketahui dapat menjalankan javascript agar website yang ditampilkan lebih menarik.<\/p>\r\n<\/header>\r\n<h4 id=\"menjalankan-javascript\">Menjalankan Javascript&nbsp;<\/h4>\r\n<p>Ada bermacam cara untuk menjalankan kode javascript yang kita buat, di antaranya:<\/p>\r\n<ol>\r\n<li class=\"\">Menjalankan javascript di console browser<\/li>\r\n<li class=\"\">Menjalankan javascript di tools online seperti&nbsp;<a href=\"https:\/\/repl.it\/repls\" target=\"_blank\" rel=\"noreferrer noopener\">repl.it<\/a><\/li>\r\n<li class=\"\">Menjalankan javascript dengan nodejs<\/li>\r\n<\/ol>\r\n<p>Pada materi ini kita akan mencoba untuk menjalankan script dengan nodejs.<\/p>\r\n<p>Nodejs adalah software berbasis pemrograman javascript yang dijalankan di sisi server. Jika biasanya javascript kita kenal erat kaitannya dengan client\/browser tapi dengan nodejs ini kita bisa membangun server menggunakan bahasa javascript.<\/p>\r\n<h2 id=\"install-nodejs\">Install Nodejs<\/h2>\r\n<p>Pertama-tama tentu kita harus menginstall terlebih dahulu nodejs di komputer kita. Berikut ini link untuk download&nbsp;<a href=\"https:\/\/nodejs.org\/en\/download\/\" target=\"_blank\" rel=\"noreferrer noopener\">nodejs<\/a> (install versi LTS). Untuk OS Windows dan macOs tinggal diikuti saja instalasinya sampai selesai, sedangkan untuk Ubuntu 18.04 kamu bisa install mengikuti <a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-install-node-js-on-ubuntu-18-04\" target=\"_blank\" rel=\"noreferrer noopener\">tutorial dari digitalocean<\/a>.<\/p>\r\n<p>Untuk mengecek apakah instalasi nodejs sudah berhasil kita bisa jalankan script di<strong> terminal<\/strong> kita:<\/p>\r\n<pre class=\"wp-block-preformatted\">$ node -v<br \/>v14.17.6<br \/>\r\n$ npm -v \r\n6.14.15<\/pre>\r\n<p>dengan perintah tersebut, diketahui saat ini terinstall node dengan versi 10 dan npm versi 6.<\/p>\r\n<h2 id=\"hello-world\">First JS Program : Hello world<\/h2>\r\n<p>Untuk menjalankan javascript dengan nodejs mari kita coba dengan menuliskan script di sebuah file index.js .<\/p>\r\n<ol>\r\n<li>Buatlah file dengan nama index.js kemudian tulis code di dalam file tersebut seperti berikut:\r\n<pre><code>var sayHello = \"Hello World!\" <\/code><br \/><code>console.log(sayHello)<\/code><\/pre>\r\nkemudian simpan file tersebut (save).<br \/><br \/><\/li>\r\n<li>Buka terminal dan&nbsp;<strong>arahkan lokasi path terminal<\/strong>&nbsp;ke lokasi yang sama dengan file index.js<br \/>Jalankan script index.js tersebut dengan memberikan perintah pada terminal:<\/li>\r\n<\/ol>\r\n<pre class=\"wp-block-preformatted\"><code>$ node index.js<\/code><\/pre>\r\n<p>secara otomatis pada terminal kita akan muncul &ldquo;<code>Hello World!<\/code>&rdquo; . (Selamat Anda telah berhasil menjalankan program pertama Anda&nbsp;<img class=\"emoji\" role=\"img\" draggable=\"false\" src=\"https:\/\/s.w.org\/images\/core\/emoji\/13.0.0\/svg\/1f601.svg\" alt=\"\ud83d\ude01\" width=\"15\" height=\"15\" \/>)<\/p>\r\n<p>Demikian cara untuk menjalankan Javascript dengan nodejs.<\/p>\r\n<h2 id=\"data-type\">Data Type&nbsp;<\/h2>\r\n<p>Data Type atau dalam bahasa indonesia Tipe Data adalah sekumpulan informasi yang memiliki nilai dan karakteristik tertentu. Beberapa contoh tipe data pada javascript di antaranya:<\/p>\r\n<ol>\r\n<li class=\"\"><strong>Number<\/strong>&nbsp;: tipe data angka<\/li>\r\n<li class=\"\"><strong>String<\/strong>&nbsp;: tipe data berupa text atau kumpulan karakter, biasanya string dibungkus dalam tanda petik ganda (double quote) atau tanda petik tunggal (single quote).<\/li>\r\n<li class=\"\"><strong>Boolean:&nbsp;<\/strong>tipe data dengan nilai&nbsp;<code>true<\/code>&nbsp;atau&nbsp;<code>false<\/code><\/li>\r\n<\/ol>\r\n<h2 id=\"variable\">Variables<\/h2>\r\n<p>Variable adalah suatu blok data untuk menampung sekumpulan data dengan berbagai tipe data apapun. Dengan variable kita bisa menyimpan suatu nilai untuk kemudian kita olah kembali pada program kita. Untuk deklarasi variable dalam javascript kita bisa gunakan sintaks&nbsp;<code>var<\/code>&nbsp;lalu diikuti nama variablenya.<\/p>\r\n<pre class=\"wp-block-preformatted\">var name = \"John\" \/\/ Tipe\r\nvar angka = 12\r\nvar todayIsFriday = false \r\n\r\nconsole.log(name) \/\/ \"John\"\r\nconsole.log(angka) \/\/ 12\r\nconsole.log(todayIsFriday) \/\/ false<\/pre>\r\n<p>Waspadai pendeklarasian variable yang tidak bernilai !<\/p>\r\n<pre class=\"wp-block-preformatted\">var items\r\nconsole.log(items) \/\/ Undefined<\/pre>\r\n<h1 id=\"operator\">Operator<\/h1>\r\n<p>Operator adalah karakter khusus yang merepresentasikan sebuah tindakan. Operator terbagi ke dalam beberapa jenis:<\/p>\r\n<ol>\r\n<li>Operator Aritmatika Operator yang melibatkan operasi matematika seperti tambah, kurang, kali, bagi.\r\n<ul>\r\n<li>Tambah&nbsp;<strong>(+)<\/strong><\/li>\r\n<li>Kurang (<strong>&ndash;<\/strong>)<\/li>\r\n<li>Kali (<strong>*<\/strong>)<\/li>\r\n<li>Bagi (<strong>\/<\/strong>)<\/li>\r\n<li>Modulus (<strong>%<\/strong>)<br \/>Modulus adalah sisa bagi. Contohnya 5%3 hasilnya adalah 2, 100%5 hasilnya 0.<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Operator Assignment (<code>=<\/code>), Operator untuk mendaftarkan atau meng-assign suatu nilai ke dalam suatu variable yang berada pada bagian kiri operator&nbsp;\r\n<pre class=\"wp-block-preformatted\"><code>var angka<\/code> <br \/><code>angka = 10 \/\/ Contoh assignment variable angka dengan nilai 10<\/code><\/pre>\r\n<\/li>\r\n<li>Operator Perbandingan, Operator yang membandingkan suatu nilai dengan nilai yang lain. Hasil dari perbandingan ini akan dikembalikan dalam tipe data boolean&nbsp;<code>true<\/code>&nbsp;atau&nbsp;<code>false<\/code>.\r\n<ul>\r\n<li>Equal Operator (<code>==<\/code>)\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 100<\/code><br \/><code>console.log(angka == 100) \/\/ true<\/code><br \/><code>console.log(angka == 20) \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>Not Equal (<code>&nbsp;!=<\/code>&nbsp;)\r\n<pre class=\"wp-block-preformatted\"><code>var sifat = \"rajin\"<\/code><br \/><code>console.log(sifat != \"malas\") \/\/ true<\/code><br \/><code>console.log(sifat != \"bandel\") \/\/true <\/code><\/pre>\r\n<\/li>\r\n<li>Strict Equal (&nbsp;<code>===<\/code>&nbsp;) Selain membandingkan dua nilai nya, strict equal juga membandingkan tipe datanya apakah sama atau tidak\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 8<\/code><br \/><code>console.log(angka == \"8\") \/\/ true, padahal \"8\" adalah string.<\/code><br \/><code>console.log(angka === \"8\") \/\/ false, karena tipe data nya berbeda<\/code><br \/><code>console.log(angka === 8) \/\/ true <\/code><\/pre>\r\n<\/li>\r\n<li>Strict not Equal (&nbsp;<code>!==<\/code>&nbsp;) Kebalikan dari strict equal.\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 11<\/code><br \/><code>console.log(angka != \"11\") \/\/ false, padahal \"11\" adalah string<\/code><br \/><code>console.log(angka !== \"11\") \/\/ true, karena tipe datanya berbeda<\/code><br \/><code>console.log(angka !== 11) \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>Kurang dari &amp; Lebih Dari (&nbsp;<code>&lt;<\/code>,&nbsp;<code>&gt;<\/code>,&nbsp;<code>&lt;=<\/code>,&nbsp;<code>&gt;=<\/code>)\r\n<pre class=\"wp-block-preformatted\"><code>var number = 17<\/code><br \/><code>console.log( number &lt; 20 ) \/\/ true<\/code><br \/><code>console.log( number &gt; 17 ) \/\/ false<\/code><br \/><code>console.log( number &gt;= 17 ) \/\/ true, karena terdapat sama dengan<\/code><br \/><code>console.log( number &lt;= 20 ) \/\/ true<\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Operator Kondisional, Operator yang mengkombinasikan dua nilai kebenaran . Terdapat operator AND (<code>&amp;&amp;<\/code>) dan OR (<code>||<\/code>)\r\n<ul>\r\n<li>OR&nbsp;(&nbsp;<code>||<\/code>&nbsp;)&nbsp; : &nbsp;Operator or akan menghasilkan nilai&nbsp;<strong>true&nbsp;<\/strong>ketika&nbsp;<strong>salah satu input<\/strong>&nbsp;bernilai true dan menghasilhkan nilai&nbsp;<strong>false&nbsp;<\/strong>jika&nbsp;<strong>semua input<\/strong>&nbsp;bernilai false\r\n<pre class=\"wp-block-preformatted\"><code>console.log(true || true); \/\/ true<\/code><br \/><code>console.log(true || false); \/\/ true<\/code><br \/><code>console.log(true || false || false); \/\/ true<\/code><br \/><code>console.log(false || false); \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>AND&nbsp;(&nbsp;<code>&amp;&amp;<\/code>&nbsp;)&nbsp; : &nbsp;Operator and akan menghasilkan nilai&nbsp;<strong>true&nbsp;<\/strong>hanya jika&nbsp;<strong>semua input<\/strong>&nbsp;bernilai true dan menghasilkan nilai&nbsp;<strong>false&nbsp;<\/strong>jika&nbsp;<strong>salah satu input bernilai false<\/strong>\r\n<p class=\"wp-block-preformatted\"><code>console.log(true &amp;&amp; true); \/\/ true<\/code><br \/><code>console.log(true &amp;&amp; false); \/\/ false<\/code><br \/><code>console.log(false &amp;&amp; false); \/\/ false<\/code><br \/><code>console.log(false &amp;&amp; true &amp;&amp; true); \/\/ false<\/code><br \/><code>console.log(true &amp;&amp; true &amp;&amp; true); \/\/ true<br \/><br \/><\/code><\/p>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ol>\r\n<p>Referensi lengap semua jenis operator bisa dilihat di&nbsp;<a href=\"https:\/\/www.w3schools.com\/js\/js_operators.asp\">https:\/\/www.w3schools.com\/js\/js_operators.asp<\/a><\/p>","waktu_publish":"2021-10-26 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-09-20 05:38:59","updated_at":"2021-10-25 07:26:47","waktu_publish_formatted":" Selasa, 26 Oktober 2021. 07:30:00 WIB."},{"id":1389,"uuid":"9a6c5cee-a556-445a-a1bc-c70e77eff105","author_user_id":12081,"materi_section_id":378,"judul":"JavaScript: String Properties & Method","permalink":"javascript-string-properties-method","konten":"<p>Mengenal lebih dalam tentang tipe data string pada javascript<\/p>\r\n<p>String adalah tipe data yang berisi karakter-karakter dibungkus dalam tanda petik (<code>\"\"<\/code>&nbsp;atau&nbsp;<code>''<\/code>&nbsp;). Karakter-karakter pada suatu string dapat diakses dengan menggunakan indeks atau posisi karakter berada. Indeks pada string selalu mulai dari 0.<\/p>\r\n<pre class=\"wp-block-preformatted\">var sentences = \"Javascript\" \r\nconsole.log(sentences[0]) \/\/ \"J\"\r\nconsole.log(sentences[2]) \/\/ \"v\"<\/pre>\r\n<p>String pada javascript juga memiliki property dan methods tertentu. Property dan methods tersebut bisa kita gunakan dalam memanipulasi data agar sesuai dengan program yang kita inginkan.<\/p>\r\n<h2 id=\"string-properties\">String Properties&nbsp;<\/h2>\r\n<p><strong>.length<\/strong><br \/>mengembalikan panjang atau jumlah karakter pada suatu string.<\/p>\r\n<pre class=\"wp-block-preformatted\">var word = \"Javascript is awesome\"\r\nconsole.log(word.length) \/\/ 21 <\/pre>\r\n<h2 id=\"string-methods\">String Methods<\/h2>\r\n<p><strong>.charAt([indeks])<\/strong><\/p>\r\n<p>Mengembalikan karakter pada indeks yang diinginkan<\/p>\r\n<pre class=\"wp-block-preformatted\">console.log('i am a string'.charAt(3)); \/\/ 'm'<\/pre>\r\n<p><strong>.concat([string])<\/strong><\/p>\r\n<p>Menggabungkan beberapa string dan mengembalikannya menjadi string baru.<\/p>\r\n<pre class=\"wp-block-preformatted\">var string1 = 'good';\r\nvar string2 = 'luck';\r\nconsole.log(string1.concat(string2)); \/\/ goodluck<\/pre>\r\n<p><strong>.indexOf([string\/karakter])<\/strong><\/p>\r\n<p>Mengembalikan indeks dari string\/karakter yang dicari, yang pertama kali ditemukan, atau -1 apabila tidak ditemukan.<\/p>\r\n<pre class=\"wp-block-preformatted\">var text = 'dung dung ces!';\r\nconsole.log(text.indexOf('dung'));  \/\/ 0\r\nconsole.log(text.indexOf('u'));     \/\/ 1\r\nconsole.log(text.indexOf('jreng')); \/\/ -1<\/pre>\r\n<p><strong>.substring([indeks awal], [indeks akhir (optional)])<\/strong><\/p>\r\n<p>Mengembalikan potongan string mulai dari indeks pada parameter pertama (indeks awal) sampai dengan indeks pada parameter kedua (indeks akhir). Bila parameter kedua tidak ditentukan, maka secara otomatis berakhir pada karakter terakhir. Karakter pada indeks yang ditentukan pada parameter kedua tidak diikutkan sebagai output.<\/p>\r\n<pre class=\"wp-block-preformatted\">var car1 = 'Lykan Hypersport';\r\nvar car2 = car1.substr(6);\r\nconsole.log(car2); \/\/ Hypersport<\/pre>\r\n<p><strong>.substr([indeks awal], [jumlah karakter yang diambil (optional)])<\/strong><\/p>\r\n<p>Mendapatkan potongan string mulai dari indeks pada parameter pertama (indeks awal) dengan jumlah indeks pada parameter kedua (jumlah karakter). Bila parameter kedua tidak ditentukan, maka secara otomatis berakhir pada karakter terakhir. Karakter pada indeks yang ditentukan pada parameter kedua tidak diikutkan sebagai output.<\/p>\r\n<pre class=\"wp-block-preformatted\">var motor1 = 'zelda motor';\r\nvar motor2 = motor1.substr(2, 2);\r\nconsole.log(motor2); \/\/ ld<\/pre>\r\n<p><strong>.toUpperCase()<\/strong><\/p>\r\n<p>Mengembalikan string baru dengan semua karakter yang diubah menjadi huruf kapital.<\/p>\r\n<pre class=\"wp-block-preformatted\">var letter = 'This Letter Is For You';\r\nvar upper  = letter.toUpperCase();\r\nconsole.log(upper); \/\/ THIS LETTER IS FOR YOU<\/pre>\r\n<p><strong>.toLowerCase()<\/strong><\/p>\r\n<p>Mengembalikan string baru dengan semua karakter yang diubah menjadi huruf kecil<\/p>\r\n<pre class=\"wp-block-preformatted\">var letter = 'This Letter Is For You';\r\nvar lower  = letter.toLowerCase();\r\nconsole.log(lower); \/\/ this letter is for you<\/pre>\r\n<p><strong>.trim()<\/strong><\/p>\r\n<p>Mengembalikan string baru yang sudah dihapus karakter&nbsp;<em>whitespace<\/em>&nbsp;(&rdquo; &ldquo;) pada awal dan akhir string tersebut.<\/p>\r\n<pre class=\"wp-block-preformatted\">var username    = ' administrator ';\r\nvar newUsername = username.trim(); \r\nconsole.log(newUsername) \/\/ 'administrator'<\/pre>\r\n<h2 id=\"mengubah-tipe-data-dari-dan-ke-string\">Mengubah tipe data dari dan ke String<\/h2>\r\n<p>Di Javascript terkadang kita ingin mengubah sebuah data string menjadi tipe data lain atau sebaliknya. Contoh diperoleh data angka tapi dalam tipe data String maka kita dapat mengubah string tersebut menjadi tipe data angka.<\/p>\r\n<p><strong>String([angka\/array])<\/strong><\/p>\r\n<p>Fungsi global&nbsp;<code>String()<\/code>&nbsp;dapat dipanggil kapan saja pada program JavaScript dan akan mengembalikan data dalam tipe data String dari parameter yang diberikan.<\/p>\r\n<pre class=\"wp-block-preformatted\">var int  = 12;\r\nvar real = 3.45;\r\nvar arr  = [6, 7, 8];\r\n\r\nvar strInt  = String(int);\r\nvar strReal = String(real);\r\nvar strArr  = String(arr);\r\n\r\nconsole.log(strInt);  \/\/ '12'\r\nconsole.log(strReal); \/\/ '3.45'\r\nconsole.log(strArr);  \/\/ '6,7,8'<\/pre>\r\n<p><strong>.toString()<\/strong><\/p>\r\n<p>Mengonversi tipe data lain menjadi string. Bila data tersebut adalah array, setiap nilai akan dituliskan dan dipisah dengan karakter koma.<\/p>\r\n<pre class=\"wp-block-preformatted\">var number = 21;\r\nconsole.log(number.toString()); \/\/ '21'\r\nvar array = [1,2];\r\nconsole.log(array.toString());  \/\/ '1,2'<\/pre>\r\n<p><strong>Number([String])<\/strong><\/p>\r\n<p>Fungsi global&nbsp;<code>Number()<\/code>&nbsp;mengonversi tipe data string menjadi angka. Data yang diberikan pada parameter harus berupa karakter angka saja, dengan titik (separator) bila angka adalah bilangan desimal. Bila parameter berisi karakter selain angka dan\/atau titik,&nbsp;<code>Number()<\/code>&nbsp;akan mengembalikan&nbsp;<strong>NaN<\/strong>&nbsp;<strong><em>(Not a Number)<\/em><\/strong>.<\/p>\r\n<pre class=\"wp-block-preformatted\">var number1 = Number(\"90\");   \/\/ number1 = 90\r\nvar number2 = Number(\"1.23\"); \/\/ number2 = 1.23\r\nvar number3 = Number(\"4 5\");  \/\/ number3 = NaN<\/pre>\r\n<p><strong>parseInt([String]) dan parseFloat([String])<\/strong><\/p>\r\n<p>Fungsi global&nbsp;<code>parseInt([String])<\/code>&nbsp;dan&nbsp;<code>parseFloat([String])<\/code>&nbsp;mengembalikan angka dari string. Bila angka adalah bilangan desimal maka gunakan&nbsp;<code>parseFloat()<\/code>, bila tidak bilangan dibelakang koma akan diabaikan.<\/p>\r\n<pre class=\"wp-block-preformatted\">var int  = '89';\r\nvar real = '56.7';\r\nvar strInt_1 = parseInt(int);  \/\/ nilai strInt_1 = 89 dengan tipe data number\r\nvar strInt_2 = parseInt(real); \/\/ nilai strInt_2 = 56 dengan tipe data number dan nilai decimal dibelakang koma <strong>terpotong<\/strong>\r\nvar strReal_1 = parseFloat(int); \/\/ nilai strReal_1 = 89 dengan tipe data number\r\nvar strReal_2 = parseFloat(real); \/\/ nilai strReal_2 = 56.7 dengan tipe data number dan nilai decimal dibelakang koma <strong>tidak terpotong<\/strong><\/pre>\r\n<h2 id=\"referensi-tambahan\">Referensi Tambahan<\/h2>\r\n<ul>\r\n<li class=\"\"><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/String\" target=\"_blank\" rel=\"noreferrer noopener\">String by Mozilla Developer Network<\/a><\/li>\r\n<li class=\"\"><a href=\"http:\/\/www.w3schools.com\/jsref\/jsref_obj_string.asp\" target=\"_blank\" rel=\"noreferrer noopener\">JavaScript String Reference by W3School<\/a><\/li>\r\n<li class=\"\"><a href=\"http:\/\/www.w3schools.com\/js\/js_type_conversion.asp\" target=\"_blank\" rel=\"noreferrer noopener\">JavaScript Type Conversion<\/a><\/li>\r\n<\/ul>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>sumber:&nbsp;<a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-string-reference.md#length\" target=\"_blank\" rel=\"noreferrer noopener\">github hacktiv8 phase 0 materials<\/a><\/p>\r\n<\/blockquote>","waktu_publish":"2021-10-26 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-09-20 05:49:27","updated_at":"2021-10-25 07:26:57","waktu_publish_formatted":" Selasa, 26 Oktober 2021. 07:30:00 WIB."},{"id":1390,"uuid":"ecc5deb2-8a17-440a-8b3e-4a84fe882c47","author_user_id":12081,"materi_section_id":378,"judul":"JavaScript: Conditional","permalink":"javascript-conditional","konten":"<h1>Hari 2 &ndash; Javascript &ndash; Conditional<\/h1>\r\n<p>Kondisional adalah sebuah metode yang melakukan pengecekan terhadap suatu pernyataan atau premis apakah bernilai benar atau tidak, jika benar maka akan menjalankan sebuah block code tertentu.<\/p>\r\n<h1 id=\"kondisional-dengan-if-else-if-else\">Kondisional dengan&nbsp;<code>if \/ else if \/ else<\/code>&nbsp;<\/h1>\r\n<ul>\r\n<li>Contoh 1 :<br \/>Menjalankan kode jika premis bernilai&nbsp;<code>true<\/code>\r\n<pre class=\"wp-block-preformatted\"><code>if ( true ) {<\/code><br \/><code>    console.log(\"jalankan code\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<li>Contoh 2:<br \/>Kode tidak dijalankan jika premis bernilai&nbsp;<code>false<\/code>\r\n<pre class=\"wp-block-preformatted\"><code>if ( false ) {<\/code><br \/><code>    console.log(\"code tidak dijalankan\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<li>Contoh 3:<br \/>Premis dengan perbandingan suatu nilai\r\n<pre class=\"wp-block-preformatted\"><code>var mood = \"happy\"<\/code><br \/><code>if ( mood == \"happy\" ) {<\/code><br \/><code>    console.log(\"hari ini aku bahagia!\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<p>Di dalam kondisional dikenal juga dengan istilah branching atau percabangan. Dengan percabangan kita bisa mengecek nilai kebenaran dari berbagai premis yang kita sediakan. cara menambahkan kondisi atau premis lain dari premis pertamanya adalah dengan sintaks&nbsp;<code>else<\/code>&nbsp;. Contohnya ketika kita diminta untuk membeli telur dan buah ke minimarket oleh ibu kita maka akan banyak sekali kondisi atau kemungkinan yang terjadi dalam perjalanan kita membeli barang-barang tersebut di supermarket.<\/p>\r\n<ul>\r\n<li>Contoh 4:<br \/>Branching sederhana\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"open\"<\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarketnya tutup\")<br \/>}<\/code><\/pre>\r\n<p>Kondisi else di atas adalah kondisi selain&nbsp;<code>minimarketStatus == \"open\"<\/code>&nbsp;.<\/p>\r\n<\/li>\r\n<li>Contoh 5:<br \/>Branching dengan kondisi\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"close\"<\/code><br \/><code>var minuteRemainingToOpen = 5<\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>} else if ( minuteRemainingToOpen &lt;= 5 ) {<\/code><br \/><code>    console.log(\"minimarket buka sebentar lagi, saya tungguin\")<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarket tutup, saya pulang lagi\")<br \/>}<\/code><\/pre>\r\n<p>contoh di atas kita memberikan kondisi tambahan yaitu jika minimarket akan buka kurang atau sama dengan 5 menit lagi maka saya akan menunggu.<\/p>\r\n<\/li>\r\n<\/ul>\r\n<p>Selain Branching atau percabangan, kondisional juga dapat memiliki sarang atau tumpukan yaitu terdapat kondisional di dalam sebuah kondisional.<\/p>\r\n<ul>\r\n<li>Contoh 6:<br \/>Kondisional bersarang\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"open\"<\/code><br \/><code>var telur = \"soldout\"<\/code><br \/><code>var buah = \"soldout\" <\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>    if(telur == \"soldout\" || buah == \"soldout\" ) {<\/code><br \/><code>        console.log(\"belanjaan saya tidak lengkap\")    <\/code><br \/><code>    } else if( telur == \"soldout\") {<\/code><br \/><code>        console.log(\"telur habis\")<\/code><br \/><code>    } else if ( buah == \"soldout\" ) {<\/code><br \/><code>        console.log(\"buah habis\")<\/code><br \/><code>    }<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarket tutup, saya pulang lagi\")<\/code><br \/><code>}<\/code><\/pre>\r\n<p>pada kondisi di atas minimarketnya sudah buka lalu cek kondisi selanjutnya cek apakah telur atau buah habis. Karena kondisinya adalah jika telur ATAU buah salah satunya ada yang soldout maka belanjaan saya lengkap. Demikian seterusnya akan mengecek kondisi-kondisi yang disediakan dalam logika program yang dibuat.<\/p>\r\n<\/li>\r\n<\/ul>\r\n<h1 id=\"kondisional-dengan-switch-case\">Kondisional dengan&nbsp;<code>Switch Case<\/code>&nbsp;<\/h1>\r\n<p>Cara lain untuk melakukan pengecekan kondisi atau conditional adalah dengan&nbsp;<code>switch case<\/code>. Penggunaan switch case mirip seperti kita menyalakan tombol switch pada remote. Jika kondisi tombol yang dipijit adalah tombol dengan nomer tertentu maka akan menjalankan prorgram tertentu.<\/p>\r\n<ul>\r\n<li>Contoh 7:<br \/>Kondisional dengan&nbsp;<code>switch case<\/code>\r\n<pre class=\"wp-block-preformatted\"><code>var buttonPushed = 1;<\/code><br \/><code>switch(buttonPushed) {<\/code><br \/><code>  case 1:   { console.log('matikan TV!'); break; }<\/code><br \/><code>  case 2:   { console.log('turunkan volume TV!'); break; }<\/code><br \/><code>  case 3:   { console.log('tingkatkan volume TV!'); break; }<\/code><br \/><code>  case 4:   { console.log('matikan suara TV!'); break; }<\/code><br \/><code>  default:  { console.log('Tidak terjadi apa-apa'); }}<\/code><\/pre>\r\n<p>Pada kode di atas, switch akan mengevaluasi nilai&nbsp;<code>buttonPushed<\/code>&nbsp;jika&nbsp;<code>case<\/code>&nbsp;yang ditemui cocok dengan nilai yang diberikan maka kode pada&nbsp;<code>case<\/code>&nbsp;tersebut akan dijalankan sehingga pada console akan dimunculkan &ldquo;<code>matikan TV!<\/code>&ldquo;. Pada setiap case terdapat&nbsp;<code>break<\/code>&nbsp;yang berfungsi untuk menghentikan proses switch agar tidak menjalankan case yang lain. Juga terdapat&nbsp;<code>default<\/code>&nbsp;yaitu kondisi dimana tidak ditemukan&nbsp;<code>case&nbsp;<\/code>yang sesuai.<\/p>\r\n<\/li>\r\n<\/ul>\r\n<h1>Kondisional dengan&nbsp;<code>Ternary Operator<\/code><\/h1>\r\n<p>Ternary operator adalah operator yang&nbsp;sejenis&nbsp;dengan&nbsp;<strong>if-else<\/strong>, namun dia berfungsi untuk mengembalikan nilai\/variable jika kondisi terpenuhi.<\/p>\r\n<h4>Syntax<\/h4>\r\n<pre><code><em>variablename&nbsp;<\/em>= (<em>condition<\/em>) ?<em> value1 <\/em>: <em>value2<\/em>&nbsp;<\/code>&nbsp;<\/pre>\r\n<h4>Example<\/h4>\r\n<p><code><span class=\"jskeywordcolor\">var<\/span>&nbsp;voteable = (age &lt;&nbsp;<span class=\"jsnumbercolor\">18<\/span>) ?&nbsp;<span class=\"jsstringcolor\">\"Too young\"&nbsp;<\/span>:&nbsp;<span class=\"jsstringcolor\">\"Old enough\"<\/span>;&nbsp;<\/code>&nbsp;<\/p>\r\n<h4>Output<\/h4>\r\n<p>Variable&nbsp;<code>voteable<\/code>&nbsp;akan memiliki nilai&nbsp;<code><span class=\"jsstringcolor\">\"Too young\"<\/span><\/code>&nbsp;jika age yang dimasukkan&nbsp;<em>lebih kecil dari 18<\/em>&nbsp;dan memiliki nilai&nbsp;<code><span class=\"jsstringcolor\">\"Old enough\"<\/span><\/code>&nbsp;jika&nbsp;<em>age bernilai sebaliknya<\/em><\/p>","waktu_publish":"2021-10-26 07:30:00","status_publish":"publish","urutan":3,"created_by":12081,"updated_by":12081,"created_at":"2021-09-20 05:51:49","updated_at":"2021-10-25 07:27:03","waktu_publish_formatted":" Selasa, 26 Oktober 2021. 07:30:00 WIB."},{"id":1391,"uuid":"b89bc3af-af17-4005-b1d3-24c0720de0af","author_user_id":12081,"materi_section_id":378,"judul":"Tugas 2 - String & Conditional","permalink":"tugas-2-string-conditional","konten":"<div class=\"entry-content\">\r\n<p>Pada tugas kali ini buatlah folder baru (Tugas 2 &ndash; String Conditional) yang berisikan dua file dengan nama&nbsp;<strong>string.js<\/strong>&nbsp;(untuk Tugas String) dan&nbsp;<strong>conditional.js<\/strong>&nbsp;(untuk Tugas Conditional). Simpan folder tugas ini di dalam folder repository project yang dikerjakan pada&nbsp;<strong>BootcampReactNative<\/strong>.<\/p>\r\n<h2 id=\"a-string-challenges\">A. Tugas String<\/h2>\r\n<ol>\r\n<li><strong>Soal No. 1 (Membuat kalimat)<\/strong>,<br \/>Terdapat kumpulan variable dengan data string sebagai berikut\r\n<pre class=\"wp-block-preformatted\">var word = 'JavaScript'; <br \/>var second = 'is'; <br \/>var third = 'awesome'; <br \/>var fourth = 'and'; <br \/>var fifth = 'I'; <br \/>var sixth = 'love'; <br \/>var seventh = 'it!';<\/pre>\r\n<p>Buatlah agar kata-kata di atas menjadi satu kalimat . Output:<\/p>\r\n<pre class=\"wp-block-preformatted\">JavaScript is awesome and I love it! <\/pre>\r\n<\/li>\r\n<li><strong>Soal No.2 Mengurai kalimat (Akses karakter dalam string)<\/strong>,<br \/>Terdapat satu kalimat seperti berikut:\r\n<pre class=\"wp-block-preformatted\">var sentence = \"I am going to be React Native Developer\"; <br \/><br \/>var exampleFirstWord = sentence[0] ; <br \/>var exampleSecondWord = sentence[2] + sentence[3]  ; <br \/>var thirdWord; \/\/ lakukan sendiri <br \/>var fourthWord; \/\/ lakukan sendiri <br \/>var fifthWord; \/\/ lakukan sendiri <br \/>var sixthWord; \/\/ lakukan sendiri <br \/>var seventhWord; \/\/ lakukan sendiri <br \/>var eighthWord; \/\/ lakukan sendiri <br \/><br \/>console.log('First Word: ' + exampleFirstWord); <br \/>console.log('Second Word: ' + secondWord); <br \/>console.log('Third Word: ' + thirdWord); <br \/>console.log('Fourth Word: ' + fourthWord); <br \/>console.log('Fifth Word: ' + fifthWord); <br \/>console.log('Sixth Word: ' + sixthWord); <br \/>console.log('Seventh Word: ' + seventhWord); <br \/>console.log('Eighth Word: ' + eighthWord)<\/pre>\r\n<p>Buat menjadi Output berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">First word: I <br \/>Second word: am <br \/>Third word: going <br \/>Fourth word: to <br \/>Fifth word: be <br \/>Sixth word: React <br \/>Seventh word: Native <br \/>Eighth word: Developer<\/pre>\r\n<\/li>\r\n<li><strong>Soal No. 3 Mengurai Kalimat (Substring)<\/strong>\r\n<pre class=\"wp-block-preformatted\">var sentence2 = 'wow JavaScript is so cool'; <br \/><br \/>var exampleFirstWord2 = sentence2.substring(0, 3); <br \/>var secondWord2; \/\/ do your own! <br \/>var thirdWord2; \/\/ do your own! <br \/>var fourthWord2; \/\/ do your own! <br \/>var fifthWord2; \/\/ do your own! <br \/><br \/>console.log('First Word: ' + exampleFirstWord2); <br \/>console.log('Second Word: ' + secondWord2); <br \/>console.log('Third Word: ' + thirdWord2); <br \/>console.log('Fourth Word: ' + fourthWord2); <br \/>console.log('Fifth Word: ' + fifthWord2);<\/pre>\r\n<p>Uraikan lah kalimat&nbsp;<code>sentence2<\/code>&nbsp;di atas menjadi kata-kata penyusunnya. Output:<\/p>\r\n<pre class=\"wp-block-preformatted\">First Word: wow <br \/>Second Word: JavaScript <br \/>Third Word: is <br \/>Fourth Word: so <br \/>Fifth Word: cool <\/pre>\r\n<\/li>\r\n<li><strong>Soal No. 4 Mengurai Kalimat dan Menentukan Panjang String<\/strong>\r\n<pre class=\"wp-block-preformatted\">var sentence3 = 'wow JavaScript is so cool'; <br \/><br \/>var exampleFirstWord3 = sentence3.substring(0, 3); <br \/>var secondWord3; \/\/ do your own! <br \/>var thirdWord3; \/\/ do your own! <br \/>var fourthWord3; \/\/ do your own! <br \/>var fifthWord3; \/\/ do your own! <br \/><br \/>var firstWordLength = exampleFirstWord3.length  <br \/>\/\/ lanjutkan buat variable lagi di bawah ini <br \/>console.log('First Word: ' + exampleFirstWord3 + ', with length: ' + firstWordLength); <br \/>console.log('Second Word: ' + secondWord3); <br \/>console.log('Third Word: ' + thirdWord3); <br \/>console.log('Fourth Word: ' + fourthWord3); <br \/>console.log('Fifth Word: ' + fifthWord3); <\/pre>\r\n<p>Output:<\/p>\r\n<pre class=\"wp-block-preformatted\">First Word: wow, with length: 3 <br \/>Second Word: JavaScript, with length: 10 <br \/>Third Word: is, with length: 2 <br \/>Fourth Word: so, with length: 2 <br \/>Fifth Word: cool, with length: 4<\/pre>\r\n<\/li>\r\n<\/ol>\r\n<h2 id=\"b-conditional-challenges\">B. Tugas Conditional<\/h2>\r\n<ul>\r\n<li>If-else<\/li>\r\n<\/ul>\r\n<p>Petunjuk : Kita akan memasuki dunia game werewolf. Pada saat akan bermain kamu diminta memasukkan nama dan peran . Untuk memulai game pemain harus memasukkan variable&nbsp;<code>nama<\/code>&nbsp;dan&nbsp;<code>peran<\/code>. Jika pemain tidak memasukkan nama maka game akan mengeluarkan warning &ldquo;<code>Nama harus diisi!<\/code>&ldquo;. Jika pemain memasukkan nama tapi tidak memasukkan peran maka game akan mengeluarkan warning &ldquo;<code>Pilih Peranmu untuk memulai game<\/code>&ldquo;. Terdapat tiga peran yaitu penyihir, guard, dan werewolf. Tugas kamu adalah membuat program untuk mengecek input dari pemain dan hasil response dari game sesuai input yang dikirimkan.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Petunjuk:<\/p>\r\n<ul>\r\n<li>Nama dan peran diisi manual dan bisa diisi apa saja<\/li>\r\n<li>Nama tidak perlu dicek persis sesuai dengan input\/output<\/li>\r\n<li>Buat kondisi if-else untuk masing-masing peran<\/li>\r\n<\/ul>\r\n<\/blockquote>\r\n<p>Input:<\/p>\r\n<pre class=\"wp-block-preformatted\">var nama = \"John\"\r\nvar peran = \"\"<\/pre>\r\n<p>Output:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Output untuk Input nama = '' dan peran = ''\r\n\"Nama harus diisi!\"\r\n \r\n\/\/Output untuk Input nama = 'John' dan peran = ''\r\n\"Halo John, Pilih peranmu untuk memulai game!\"\r\n \r\n\/\/Output untuk Input nama = 'Jane' dan peran 'Penyihir'\r\n\"Selamat datang di Dunia Werewolf, Jane\"\r\n\"Halo Penyihir Jane, kamu dapat melihat siapa yang menjadi werewolf!\"\r\n \r\n\/\/Output untuk Input nama = 'Jenita' dan peran 'Guard'\r\n\"Selamat datang di Dunia Werewolf, Jenita\"\r\n\"Halo Guard Jenita, kamu akan membantu melindungi temanmu dari serangan werewolf.\"\r\n \r\n\/\/Output untuk Input nama = 'Junaedi' dan peran 'Werewolf'\r\n\"Selamat datang di Dunia Werewolf, Junaedi\"\r\n\"Halo Werewolf Junaedi, Kamu akan memakan mangsa setiap malam!\" <\/pre>\r\n<ul>\r\n<li>Switch Case<\/li>\r\n<\/ul>\r\n<p>Kamu akan diberikan sebuah tanggal dalam tiga variabel, yaitu&nbsp;<code>hari<\/code>,&nbsp;<code>bulan<\/code>, dan&nbsp;<code>tahun<\/code>. Disini kamu diminta untuk membuat format tanggal. Misal tanggal yang diberikan adalah hari 1, bulan 5, dan tahun 1945. Maka, output yang harus kamu proses adalah menjadi 1 Mei 1945.<\/p>\r\n<p>Gunakan&nbsp;<code>switch case<\/code>&nbsp;untuk kasus ini!<\/p>\r\n<p>Contoh:<\/p>\r\n<pre class=\"wp-block-preformatted\">var hari = 21; \r\nvar bulan = 1; \r\nvar tahun = 1945;\r\n\/\/  Maka hasil yang akan tampil di console adalah: '21 Januari 1945'; <\/pre>\r\n<p><strong>Skeleton Code (Contohkan Struktur Kode yang perlu diikuti dan dimodifikasi)<\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">var tanggal; \/\/ assign nilai variabel tanggal disini! (dengan angka antara 1 - 31)\r\nvar bulan; \/\/ assign nilai variabel bulan disini! (dengan angka antara 1 - 12)\r\nvar tahun; \/\/ assign nilai variabel tahun disini! (dengan angka antara 1900 - 2200)<\/pre>\r\n<p>Jika sudah selesai, silahkan push (<code>git add<\/code>,&nbsp;<code>git commit<\/code>, dan&nbsp;<code>git push<\/code>) hasil pekerjaan Anda ke repository Gitlab masing-masing (gunakan repository project&nbsp;<strong>BootcampReactNative<\/strong>). Jangan lupa submit link commit Anda ke member area sanbercode.com<\/p>\r\n<\/div>","waktu_publish":"2021-10-26 07:30:00","status_publish":"publish","urutan":4,"created_by":12081,"updated_by":12081,"created_at":"2021-09-20 05:52:26","updated_at":"2021-10-25 07:27:10","waktu_publish_formatted":" Selasa, 26 Oktober 2021. 07:30:00 WIB."}]},{"id":381,"uuid":"c5c2659f-5e4b-46e0-9695-e25ee271d4eb","materi_id":27,"nama":"Hari 3 - JavaScript Looping","permalink":"hari-3-javascript-looping","urutan":4,"created_by":12081,"updated_by":12081,"created_at":"2021-09-22 05:41:18","updated_at":null,"posting":[{"id":1396,"uuid":"17119689-11eb-4934-a5aa-f5ae72f19aa1","author_user_id":12081,"materi_section_id":381,"judul":"JavaScript: Looping","permalink":"javascript-looping","konten":"<h1>Intro<\/h1>\r\n<p>Loop\/Iteration adalah tindakan mengulang \/ merepetisi sebuah proses, dengan tujuan untuk mendapatkan deret hasil, atau dengan tujuan mendapatkan hasil tertentu dengan repetisi. Setiap proses repetisi ini disebut sebagai Iteration atau Looping.<\/p>\r\n<p>Untuk melakukan looping\/iteration, JavaScript menyediakan beberapa jenis iteration, yaitu:<\/p>\r\n<ul>\r\n<li class=\"\">while-loop<\/li>\r\n<li class=\"\">for-loop<\/li>\r\n<\/ul>\r\n<h1 id=\"while-loop\"><strong>While-loop<\/strong><\/h1>\r\n<p>While-loop adalah iterasi yang akan mengulang sebuah proses dengan sebuah kondisi tertentu.<\/p>\r\n<p>Berikut adalah cara atau struktur penulisan while-loop:<\/p>\r\n<pre class=\"wp-block-preformatted\">while([Kondisi]) { \/\/ Kondisi yang menentukan apakah program akan melakukan iterasi. \r\n\/\/ Berupa boolean atau true\/false.\r\n  [Proses] \/\/ Merupakan proses yang akan dijalankan dalam satu iterasi\r\n}<\/pre>\r\n<p>Pada while-loop, statement&nbsp;<code>while<\/code>&nbsp;akan mengambil sebuah nilai&nbsp;<code>true<\/code>&nbsp;atau&nbsp;<code>false<\/code>&nbsp;dari hasil kondisi yang diberikan. Apabila statement&nbsp;<code>while<\/code>&nbsp;mendapatkan nilai&nbsp;<code>true<\/code>, maka proses yang berada didalam curly bracket (<code>{ }<\/code>) akan dijalankan. Looping akan terus dilakukan selama kondisi while-loop masih&nbsp;<code>true<\/code>.<\/p>\r\n<p>Untuk mencegah looping berjalan terus-menerus, dilakukan sebuah proses yang akan mengubah kondisi yang sedemikian rupa yang bertujuan untuk menghentikan looping dengan menghasilkan kondisi yang&nbsp;<code>false<\/code>.<\/p>\r\n<h2><strong>Contoh Looping While-loop 1<\/strong><\/h2>\r\n<p>Looping Angka 1-9 Sederhana<\/p>\r\n<pre class=\"wp-block-preformatted\">var flag = 1;\r\nwhile(flag &lt; 10) { \/\/ Loop akan terus berjalan selama nilai flag masih dibawah 10\r\n  console.log('Iterasi ke-' + flag); \/\/ Menampilkan nilai flag pada iterasi tertentu\r\n  flag++; \/\/ Mengubah nilai flag dengan menambahkan 1\r\n}<\/pre>\r\n<p>Output dari program di atas adalah<\/p>\r\n<p><img src=\"https:\/\/i.imgur.com\/QAU0DbA.png\" width=\"198\" height=\"228\" \/><\/p>\r\n<p>Kamu bisa mencoba kode di atas&nbsp;<a href=\"https:\/\/jsbin.com\/pahure\/1\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<h2><strong>Contoh Looping While-loop 2<\/strong><\/h2>\r\n<p>Looping Mengembalikan Angka Total<\/p>\r\n<pre class=\"wp-block-preformatted\">var deret = 5;\r\nvar jumlah = 0;\r\nwhile(deret &gt; 0) { \/\/ Loop akan terus berjalan selama nilai deret masih di atas 0\r\n  jumlah += deret; \/\/ Menambahkan nilai variable jumlah dengan angka deret\r\n  deret--; \/\/ Mengubah nilai deret dengan mengurangi 1\r\n  console.log('Jumlah saat ini: ' + jumlah)\r\n}\r\n \r\nconsole.log(jumlah);<\/pre>\r\n<p>Hasil output dari program di atas adalah<\/p>\r\n<p><img src=\"https:\/\/i.imgur.com\/2hM0yw7.png\" width=\"328\" height=\"183\" \/><\/p>\r\n<p>Kamu bisa mencoba kode di atas&nbsp;<a href=\"https:\/\/jsbin.com\/nolocam\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<h1 id=\"for-loop\">For-loop<\/h1>\r\n<p>For-loop adalah bentuk lain dari iterasi, dimana statement&nbsp;<code>for<\/code>&nbsp;menjadi kontrol atas loop yang dilakukan. Hal ini yang menjadi pembeda antara for-loop dengan while-loop.<\/p>\r\n<p>Berikut adalah cara atau struktur penulisan for-loop:<\/p>\r\n<pre class=\"wp-block-preformatted\">for([Inisialisasi], [Kondisi], [Incremental\/Decremental]) {\r\n  [Proses] \/\/ Merupakan proses yang akan dijalankan dalam satu iterasi\r\n} <\/pre>\r\n<p>Pada for-loop, statement&nbsp;<code>for<\/code>&nbsp;akan menampung tiga parameter, yaitu sebut saja inisialisasi, kondisi, dan incremental\/decremental. Ketiga parameter ini akan menjadi kontrol kapan loop ini harus berhenti. Pada parameter pertama, yaitu inisialisasi, sebuah variable diberikan nilai awal atau default. Pada parameter kedua, yaitu kondisi, for-loop akan terus berjalan selama kondisi ini masih terpenuhi, dengan kata lain, mengandung nilai&nbsp;<code>true<\/code>. Pada parameter kedua, yaitu incremental\/decremental, variabel yang menjadi kontrol terhadap loop ini akan diubah nilainya.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p><em>Best Practice:<\/em>&nbsp;Walaupun memang for-loop dapat mengubah kondisi di dalam proses, namun best practice dari penggunaan for-loop adalah seluruh kendali atau kontrol dari looping ditentukan oleh variable yang diinisialisasi, di increment\/decrement, dan juga kondisi for-loop pun menggunakan variable tersebut.<\/p>\r\n<\/blockquote>\r\n<p>Untuk memudahkan kamu mendapatkan gambaran jelas tentang penggunaan for-loop, mari kita gunakan kedua contoh while-loop dan kita tulis ulang dalam bentuk for-loop.<\/p>\r\n<h2><strong>Contoh Looping For-loop 1<\/strong><\/h2>\r\n<p>Looping Angka 1-9 Sederhana<\/p>\r\n<pre class=\"wp-block-preformatted\">for(var angka = 1; angka &lt; 10; angka++) {\r\n  console.log('Iterasi ke-' + angka);\r\n} <br \/><br \/><\/pre>\r\n<p>Output dari program di atas adalah<\/p>\r\n<p><img src=\"https:\/\/i.imgur.com\/QAU0DbA.png\" width=\"236\" height=\"272\" \/><\/p>\r\n<p>Kamu bisa mencoba kode di atas&nbsp;<a href=\"https:\/\/jsbin.com\/dijukel\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<h2><strong>Contoh Looping For-loop 2<\/strong><\/h2>\r\n<p>Looping Mengembalikan Angka Total<\/p>\r\n<pre class=\"wp-block-preformatted\">var jumlah = 0;\r\nfor(var deret = 5; deret &gt; 0; deret--) {\r\n  jumlah += deret;\r\n  console.log('Jumlah saat ini: ' + jumlah);\r\n}\r\n \r\nconsole.log('Jumlah terakhir: ' + jumlah);<\/pre>\r\n<p>Output dari program di atas adalah<\/p>\r\n<p><img src=\"https:\/\/i.imgur.com\/2hM0yw7.png\" width=\"255\" height=\"142\" \/><\/p>\r\n<p>Kamu bisa mencoba kode di atas&nbsp;<a href=\"https:\/\/jsbin.com\/xukega\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<h2><strong>Contoh Looping For-loop 3<\/strong><\/h2>\r\n<p>Looping Dengan Increment dan Decrement Lebih dari 1<\/p>\r\n<pre class=\"wp-block-preformatted\">for(var deret = 0; deret &lt; 10; deret += 2) {\r\n  console.log('Iterasi dengan Increment counter 2: ' + deret);\r\n}\r\n \r\nconsole.log('-------------------------------');\r\n \r\nfor(var deret = 15; deret &gt; 0; deret -= 3) {\r\n  console.log('Iterasi dengan Decrement counter : ' + deret);\r\n} <\/pre>\r\n<p>Output dari program di atas adalah<\/p>\r\n<p><img src=\"https:\/\/i.imgur.com\/pTiyLZ5.png\" width=\"499\" height=\"299\" \/><\/p>\r\n<p>Kamu bisa mencoba kode di atas&nbsp;<a href=\"https:\/\/jsbin.com\/xolagamani\/edit?js,console\">di sini<\/a><\/p>\r\n<h1><span style=\"color: #e03e2d;\"><strong>Waspadai Infinite Looping!<\/strong><\/span><\/h1>\r\n<p>Dengan sengaja atau tidak sengaja, kode kamu mungkin dapat menghasilkan infinite looping, atau looping yang tidak akan pernah berhenti. Bila ini terjadi, segera periksa statement kondisi kamu.<\/p>\r\n<pre class=\"wp-block-preformatted\">var flag = 1;\r\nwhile(flag &lt; 10) { \/\/ Loop akan terus berjalan, karena nilai flag tidak pernah berubah\r\n  console.log('Iterasi ke-' + flag);\r\n} <\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Sumber:&nbsp;<a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-first-time.md#loopiteration\" target=\"_blank\" rel=\"noreferrer noopener\">github hacktiv8 phase 0 materials<\/a><\/p>\r\n<p>&nbsp;<\/p>\r\n<\/blockquote>\r\n<p>Selain dua looping utama di atas, juga terdapa looping lainnya yang dapat kalian pelajari di link dibawah ini :<\/p>\r\n<ul>\r\n<li>For in :&nbsp;<a href=\"https:\/\/www.w3schools.com\/js\/js_loop_forin.asp\">https:\/\/www.w3schools.com\/js\/js_loop_forin.asp<\/a><\/li>\r\n<li>For of :&nbsp;<a href=\"https:\/\/www.w3schools.com\/js\/js_loop_forof.asp\" target=\"_blank\" rel=\"noopener\">https:\/\/www.w3schools.com\/js\/js_loop_forof.asp<\/a><\/li>\r\n<li>Do While :&nbsp;<a href=\"https:\/\/www.w3schools.com\/js\/js_loop_while.asp\" target=\"_blank\" rel=\"noopener\">https:\/\/www.w3schools.com\/js\/js_loop_while.asp<\/a><\/li>\r\n<li>Break :&nbsp;<a href=\"https:\/\/www.w3schools.com\/js\/js_break.asp\" target=\"_blank\" rel=\"noopener\">https:\/\/www.w3schools.com\/js\/js_break.asp<\/a><\/li>\r\n<\/ul>","waktu_publish":"2021-10-27 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-09-22 05:47:38","updated_at":"2021-10-25 07:27:38","waktu_publish_formatted":" Rabu, 27 Oktober 2021. 07:30:00 WIB."},{"id":1397,"uuid":"8aa31d58-3e05-44b3-b59e-85a33f42add7","author_user_id":12081,"materi_section_id":381,"judul":"Tugas 3 - Looping","permalink":"tugas-3-looping","konten":"<p>Pada tugas kali ini buatlah folder baru (Tugas 3 &ndash; Looping) yang berisikan file dengan nama&nbsp;<strong>looping.js<\/strong>&nbsp;. Simpan folder tugas ini di dalam folder repository project yang dikerjakan pada&nbsp;<strong>BootcampReactNative<\/strong><\/p>\r\n<h1 id=\"no-1-looping-while\">No. 1 Looping&nbsp;<code>While&nbsp;<\/code><\/h1>\r\n<p>Pada tugas ini kamu diminta untuk melakukan looping dalam JavaScript dengan menggunakan syntax&nbsp;<code>while<\/code>. Untuk membuat tantangan ini lebih menarik, kamu juga diminta untuk membuat suatu looping yang menghitung maju dan menghitung mundur. Jangan lupa tampilkan di console juga judul &lsquo;LOOPING PERTAMA&rsquo; dan &lsquo;LOOPING KEDUA&rsquo;.&rdquo;<\/p>\r\n<p>Output:<\/p>\r\n<pre class=\"wp-block-preformatted\">LOOPING PERTAMA\r\n2 - I love coding\r\n4 - I love coding\r\n6 - I love coding\r\n8 - I love coding\r\n10 - I love coding\r\n12 - I love coding\r\n14 - I love coding\r\n16 - I love coding\r\n18 - I love coding\r\n20 - I love coding\r\nLOOPING KEDUA\r\n20 - I will become a mobile developer\r\n18 - I will become a mobile developer                                                                              \r\n16 - I will become a mobile developer\r\n14 - I will become a mobile developer\r\n12 - I will become a mobile developer\r\n10 - I will become a mobile developer\r\n8 - I will become a mobile developer\r\n6 - I will become a mobile developer\r\n4 - I will become a mobile developer\r\n2 - I will become a mobile developer<\/pre>\r\n<h1 id=\"no-2-looping-menggunakan-for\">No. 2 Looping menggunakan&nbsp;<code>for<\/code><\/h1>\r\n<p>Pada tugas ini kamu diminta untuk melakukan looping dalam JavaScript dengan menggunakan syntax&nbsp;<code>for<\/code>. Untuk membuat tantangan ini lebih menarik, kamu juga diminta untuk memenuhi syarat tertentu yaitu:<\/p>\r\n<p>SYARAT:<br \/>A. Jika angka ganjil maka tampilkan Santai<br \/>B. Jika angka genap maka tampilkan Berkualitas<br \/>C. Jika angka yang sedang ditampilkan adalah&nbsp;<strong>kelipatan 3 dan<\/strong>&nbsp;<strong>angka ganjil<\/strong>&nbsp;maka tampilkan I Love Coding.<\/p>\r\n<pre class=\"wp-block-preformatted\">OUTPUT \r\n1 - Santai\r\n2 - Berkualitas\r\n3 - I Love Coding \r\n4 - Berkualitas\r\n5 - Santai\r\n6 - Berkualitas\r\n7 - Santai\r\n8 - Berkualitas\r\n9 - I Love Coding\r\n10 - Berkualitas\r\n11 - Santai\r\n12 - Berkualitas\r\n13 - Santai\r\n14 - Berkualitas\r\n15 - I Love Coding\r\n16 - Berkualitas\r\n17 - Santai\r\n18 - Berkualitas\r\n19 - Santai\r\n20 - Berkualitas<\/pre>\r\n<h1 id=\"no-3-membuat-persegi-panjang\">No. 3 Membuat Persegi Panjang #<\/h1>\r\n<p>Kamu diminta untuk menampilkan persegi dengan dimensi 8&times;4 dengan tanda pagar (#) dengan perulangan atau looping. Looping boleh menggunakan syntax apa pun (<code>while<\/code>,&nbsp;<code>for<\/code>,&nbsp;<code>do while<\/code>).<\/p>\r\n<p>Output:<\/p>\r\n<pre class=\"wp-block-preformatted\">########\r\n########\r\n########\r\n######## <\/pre>\r\n<h1 id=\"no-4-membuat-tangga\">No. 4 Membuat Tangga&nbsp;<\/h1>\r\n<p>Kali ini kamu diminta untuk menampilkan sebuah segitiga dengan tanda pagar (#) dengan dimensi tinggi 7 dan alas 7. Looping boleh menggunakan syntax apa pun (<code>while<\/code>,&nbsp;<code>for<\/code>,&nbsp;<code>do while<\/code>).<\/p>\r\n<p>Output:<\/p>\r\n<pre class=\"wp-block-preformatted\">#\r\n##\r\n###\r\n####\r\n#####\r\n######\r\n#######<\/pre>\r\n<h1 id=\"no-5-membuat-papan-catur\">No. 5 Membuat Papan Catur<\/h1>\r\n<p>Buatlah suatu looping untuk menghasilkan sebuah papan catur dengan ukuran 8 x 8 . Papan berwarna hitam memakai tanda pagar (#) sedangkan papan putih menggunakan spasi. Looping boleh menggunakan syntax apa pun (<code>while<\/code>,&nbsp;<code>for<\/code>,&nbsp;<code>do while<\/code>).<\/p>\r\n<p>Output:<\/p>\r\n<pre class=\"wp-block-preformatted\"> # # # #\r\n# # # # \r\n # # # #\r\n# # # # \r\n # # # #\r\n# # # # \r\n # # # #\r\n# # # # <\/pre>\r\n<p>Jika sudah selesai dikerjakan, silahkan&nbsp;<em>push&nbsp;<\/em>hasil pekerjaan Anda ke repository Gitlab masing-masing (gunakan repository project&nbsp;<strong>BootcampReactNative<\/strong>). Jangan lupa submit link commit Anda ke member area sanbercode.com<\/p>","waktu_publish":"2021-10-27 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-09-22 05:48:05","updated_at":"2021-10-25 07:27:47","waktu_publish_formatted":" Rabu, 27 Oktober 2021. 07:30:00 WIB."}]},{"id":382,"uuid":"c7885dc9-a0a9-4af8-bef8-1a88743517fc","materi_id":27,"nama":"Hari 4 - JavaScript Function","permalink":"hari-4-javascript-function","urutan":5,"created_by":12081,"updated_by":12081,"created_at":"2021-09-23 06:38:50","updated_at":null,"posting":[{"id":1400,"uuid":"e57f0bb3-a53a-4dd1-bde1-7c4abe45cb76","author_user_id":12081,"materi_section_id":382,"judul":"JavaScript - Function","permalink":"javascript-function","konten":"<h1>Intro<\/h1>\r\n<p>Function adalah sebuah blok kode yang disusun sedemikian rupa untuk menjalankan sebuah tindakan. Blok kode ini dibuat untuk dapat bisa digunakan kembali.<\/p>\r\n<h2>Function Structure<\/h2>\r\n<p>Cara atau bentuk penulisan function adalah sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">function nama_function(parameter 1, parameter 2, ...) {\r\n  [Isi dari function berupa tindakan]\r\n  return [expression];\r\n}<\/pre>\r\n<p>Kode di atas tidak dapat kita copy-paste kan langsung, melainkan hanya sebuah bentuk penulisan&nbsp;<code>function<\/code>. Sebuah&nbsp;<code>function<\/code>, umumnya melakukan tindakan dan sebelum&nbsp;<code>function<\/code>&nbsp;berakhir,&nbsp;<code>function<\/code>&nbsp;bisa mengembalikan nilai dengan cara menambahkan sintaks return.<\/p>\r\n<p>Kita juga dapat mengirimkan nilai ke dalam sebuah&nbsp;<code>function<\/code>&nbsp;dengan mencantumkannya ke dalam tanda kurung dalam penulisan&nbsp;<code>function<\/code>. Untuk mengirimkan nilai lebih dari satu, gunakan tanda&nbsp;<code>,<\/code>&nbsp;sebagai pemisah.<\/p>\r\n<p><strong>Contoh Function 1:<\/strong>&nbsp;Function sederhana tanpa return<\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkan() {\r\n  console.log(\"halo!\");\r\n}\r\n \r\ntampilkan(); <\/pre>\r\n<p><strong>Contoh Function 2:<\/strong>&nbsp;Function sederhana dengan return<\/p>\r\n<pre class=\"wp-block-preformatted\">function munculkanAngkaDua() {\r\n  return 2\r\n}\r\n \r\nvar tampung = munculkanAngkaDua();\r\nconsole.log(tampung)<\/pre>\r\n<p><strong>Contoh Function 3:<\/strong>&nbsp;Function dengan parameter<\/p>\r\n<pre class=\"wp-block-preformatted\">function kalikanDua(angka) {\r\n  return angka * 2\r\n}\r\n \r\nvar tampung = kalikanDua(2);\r\nconsole.log(tampung) <\/pre>\r\n<p><strong>Contoh Function 4:<\/strong>&nbsp;Pengiriman parameter lebih dari satu<\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkanAngka(angkaPertama, angkaKedua) {\r\n  return angkaPertama + angkaKedua\r\n}\r\n \r\nconsole.log(tampilkanAngka(5, 3))<\/pre>\r\n<p><strong>Contoh Function 5:<\/strong>&nbsp;Inisialisasi parameter dengan nilai default<\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkanAngka(angka = 1) {\r\n  return angka\r\n}\r\n \r\nconsole.log(tampilkanAngka(5)) \/\/ 5, sesuai dengan nilai parameter yang dikirim\r\nconsole.log(tampilkanAngka()) \/\/ 1, karena default dari parameter adalah 1<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Waspadai pengiriman parameter yang&nbsp;<strong>UNDEFINED!<\/strong><\/p>\r\n<\/blockquote>\r\n<p>Kita juga dapat menampung function sebagai variable dengan sebuah bentuk function yang dinamakan Anonymous Function.<\/p>\r\n<pre class=\"wp-block-preformatted\">var fungsiPerkalian = function(angkaPertama, angkaKedua) {\r\n  return angkaPertama * angkaKedua\r\n}\r\n \r\nconsole.log(fungsiPerkalian(2, 4))<\/pre>\r\n<p class=\"wp-block-preformatted\">Function juga dapat ditulis menggunakan syntax arrow function :<\/p>\r\n<p class=\"wp-block-preformatted\"><code>const nama_function = (parameter 1, parameter 2, ...) =&gt; {<\/code><br \/><code>&nbsp; &nbsp; [Isi dari function berupa tindakan]<\/code><br \/><code>&nbsp; &nbsp; return [expression];<\/code><br \/><code>}<\/code><br \/>yang akan dijelaskan lebih lanjut pada&nbsp;materi Javascript ES6<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Sumber:&nbsp;<a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-first-time.md#loopiteration\" target=\"_blank\" rel=\"noreferrer noopener\">github hacktiv8 phase 0 materials<\/a><\/p>\r\n<\/blockquote>","waktu_publish":"2021-10-28 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-09-23 06:39:15","updated_at":"2021-10-25 07:28:08","waktu_publish_formatted":" Kamis, 28 Oktober 2021. 07:30:00 WIB."},{"id":1401,"uuid":"ce7a157c-aa66-4127-824d-d3274bf0727e","author_user_id":12081,"materi_section_id":382,"judul":"Tugas 4 - Function","permalink":"tugas-4-function","konten":"<p>Pada tugas kali ini buatlah folder baru (Tugas 4 &ndash; Function) yang berisikan file dengan nama&nbsp;<strong>function.js<\/strong>&nbsp;. Simpan folder tugas ini di dalam folder repository project yang dikerjakan pada Folder yang telah di buat kemarin&nbsp;<strong>BootcampReactNative<\/strong>.<\/p>\r\n<h3 id=\"no-1\">No. 1&nbsp;<\/h3>\r\n<p>Tulislah sebuah function dengan nama teriak() yang mengembalikan nilai &ldquo;Halo Sanbers!&rdquo; yang kemudian dapat ditampilkan di console.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/*\r\n    Tulis code function di sini\r\n*\/\r\n \r\nconsole.log(teriak()); \/\/ \"Halo Sanbers!\" <\/pre>\r\n<h3 id=\"no-2\">No. 2&nbsp;<\/h3>\r\n<p>Tulislah sebuah function dengan nama kalikan() yang mengembalikan hasil perkalian dua parameter yang di kirim.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/*\r\n    Tulis code function di sini\r\n*\/\r\n \r\nvar num1 = 12;\r\nvar num2 = 4;\r\n \r\nvar hasilKali = kalikan(num1, num2);\r\nconsole.log(hasilKali); \/\/ 48<\/pre>\r\n<h3 id=\"no-3\">No. 3&nbsp;<\/h3>\r\n<p>Tulislah sebuah function dengan nama introduce() yang memproses paramater yang dikirim menjadi sebuah kalimat perkenalan seperti berikut: &ldquo;Nama saya [name], umur saya [age] tahun, alamat saya di [address], dan saya punya hobby yaitu [hobby]!&rdquo;<\/p>\r\n<pre class=\"wp-block-preformatted\">\/* \r\n    Tulis kode function di sini\r\n*\/\r\n \r\nvar name = \"Agus\";\r\nvar age = 30;\r\nvar address = \"Jln. Malioboro, Yogyakarta\";\r\nvar hobby = \"Gaming\";\r\n \r\nvar perkenalan = introduce(name, age, address, hobby);\r\nconsole.log(perkenalan); \/\/ Menampilkan \"Nama saya Agus, umur saya 30 tahun, alamat saya di Jln. Malioboro, Yogyakarta, dan saya punya hobby yaitu Gaming!\" <\/pre>\r\n<p>Jika sudah selesai dikerjakan, silahkan&nbsp;<em>push&nbsp;<\/em>hasil pekerjaan Anda ke&nbsp;<em>repository&nbsp;<\/em>Gitlab masing-masing (gunakan&nbsp;<em>repository project<\/em>&nbsp;<strong>BootcampReactNative<\/strong>). Jangan lupa&nbsp;<em>submit link commit<\/em> Anda ke member area pada sanbercode.com<\/p>","waktu_publish":"2021-10-28 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-09-23 06:39:40","updated_at":"2021-10-25 07:28:15","waktu_publish_formatted":" Kamis, 28 Oktober 2021. 07:30:00 WIB."}]},{"id":383,"uuid":"baff4a83-4131-4cbf-a772-5c74a6959413","materi_id":27,"nama":"Hari 5 - JavaScript: Array","permalink":"hari-5-javascript-array","urutan":6,"created_by":12081,"updated_by":12081,"created_at":"2021-09-24 07:25:13","updated_at":"2021-09-24 07:25:57","posting":[{"id":1406,"uuid":"3c10527d-40b1-4303-bd24-dc78be000ee2","author_user_id":12081,"materi_section_id":383,"judul":"JavaScript: Array","permalink":"javascript-array","konten":"<div class=\"entry-content\">\r\n<p>Array adalah kumpulan atau tumpukan berbagai data. Cara menuliskan array yaitu dengan kurung siku (<code>[]<\/code>) dan elemen-elemen nya dipisah menggunakan tanda koma (<code>,<\/code>). Setiap elemen dari array memiliki indeks yang dimulai dari 0, 1, 2, dst. Kita dapat memanipulasi array dengan berbagai cara seperti menambahkan dan mengeluarkan elemen dalam array, menggabungkan array, atau bahkan menghapus seluruh elemen Array nya. Kita bisa memasukkan beberapa tipe data yang berbeda ke dalam Array bahkan memasukkan Array ke dalam Array.<\/p>\r\n<p>Array juga memiliki property&nbsp;<code>.length<\/code>&nbsp;seperti pada string yang berarti panjang dari sebuah array.<\/p>\r\n<pre class=\"wp-block-preformatted\">var hobbies = [\"coding\", \"cycling\", \"climbing\", \"skateboarding\"] \r\nconsole.log(hobbies) \/\/ [ 'coding', 'cycling', 'climbing', 'skateboarding' ]\r\nconsole.log(hobbies.length) \/\/ 4 \r\n \r\nconsole.log(hobbies[0]) \/\/ coding\r\nconsole.log(hobbies[2]) \/\/ climbing\r\n\/\/ Mengakses elemen terakhir dari array\r\nconsole.log(hobbies[hobbies.length -1]) \/\/ skateboarding<\/pre>\r\n<h2 id=\"metode-array\">Metode Array&nbsp;<\/h2>\r\n<p>Berikut ini adalah beberapa metode atau built-in functions yang dimiliki oleh tipe data array:<\/p>\r\n<ul>\r\n<li class=\"\">push: menambah 1 nilai ke array ke index paling belakang<\/li>\r\n<li class=\"\">pop: menghapus 1 nilai dari array index paling belakang<\/li>\r\n<li class=\"\">unshift: menambah 1 nilai ke array index paling depan (index 0)<\/li>\r\n<li class=\"\">shift: menghapus 1 nilai dari array index paling depan (index 0)<\/li>\r\n<li class=\"\">join: menggabungkan seluruh element array menjadi sebuah string dan mengambil parameter sebagai simbol penyambung antar elemen<\/li>\r\n<li class=\"\">sort: mengurutkan elemen di dalam array sesuai alphabet<\/li>\r\n<li class=\"\">slice: mengambil beberapa lapis data<\/li>\r\n<li class=\"\">splice: mengubah nilai array dengan menghapus dan\/atau menambah nilai baru ke array<\/li>\r\n<li class=\"\">split: memecah string dan mengembalikan array sesuai dengan separator \/ pemisah yang didefinisikan<\/li>\r\n<\/ul>\r\n<p>Cara menggunakan metode array adalah dengan menggunakan tanda dot (<code>.<\/code>) contohnya sbb:<\/p>\r\n<pre class=\"wp-block-preformatted\">var feeling = [\"dag\", \"dig\"]\r\nfeeling.push(\"dug\") \/\/ menambahkan nilai \"dug\" ke index paling belakang\r\nfeeling.pop() \/\/ menghapus nilai pada elemen terakhir array<\/pre>\r\n<p>Beberapa metode array ada yang mengembalikan nilai array lama yang sudah diperbarui (array lama di-update) dengan metode tersebut , dan ada pula metode array yang mengembalikan sebuah array baru dan tidak mengubah data pada array yang lama (array baru yang serupa dengan array lama). Sifat seperti ini disebut mutable atau immutable.<\/p>\r\n<h3 id=\"push\"><code><strong>.push()<\/strong><\/code><\/h3>\r\n<p><em>Push&nbsp;<\/em>adalah metode array untuk menambahkan nilai di belakang elemen terakhir di array. metode push menerima sebuah parameter yaitu nilai yang ingin kita tambahkan ke dalam array.<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2]\r\nnumbers.push(3)\r\nconsole.log(numbers) \/\/ [0, 1, 2, 3]\r\n\/\/ Bisa juga memasukkan lebih dari satu nilai menggunakan metode push\r\nnumbers.push(4, 5)\r\nconsole.log(numbers) \/\/ [0, 1, 2, 3, 4, 5] <\/pre>\r\n<h3 id=\"pop\"><code><strong>.pop()<\/strong><\/code><\/h3>\r\n<p>Pop adalah kebalikan dari push yaitu menghapus nilai elemen paling terakhir dari sebuah array. metode Pop tidak menerima parameter apapun sehingga metode pop hanya bisa mengeluarkan satu elemen saja yaitu yang paling terakhir dari sebuah array.<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2, 3, 4, 5]\r\nnumbers.pop() \r\nconsole.log(numbers) \/\/ [0, 1, 2, 3, 4] <\/pre>\r\n<h3 id=\"unshift\"><code><strong>.unshift()<\/strong><\/code><\/h3>\r\n<p>Unshift yaitu menambahkan nilai pada index ke-0 sehingga elemen-elemen sebelumnya bergeser.<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2, 3]\r\nnumbers.unshift(-1) \r\nconsole.log(numbers) \/\/ [-1, 0, 1, 2, 3]<\/pre>\r\n<h3 id=\"shift\"><code><strong>.shift()<\/strong><\/code><\/h3>\r\n<p>Shift kebalikan dari unshift yaitu menghapus nilai pada elemen terdepan dari sebuah array. metode Shift tidak menerima parameter apapun.<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [ 0, 1, 2, 3]\r\nnumbers.shift()\r\nconsole.log(numbers) \/\/ [1, 2, 3] <\/pre>\r\n<h3 id=\"sort\"><code><strong>.sort()<\/strong><\/code><\/h3>\r\n<p>Sort adalah metode untuk mengurutkan nilai pada array. Secara otomatis, sort akan mengurutkan secara ascending (dari rendah ke tinggi) dan diurutkan berdasarkan unicode dari karakter. Urutan unicode artinya ada karakter yang secara nilai lebih besar dibandingkan dengan karakter yang lainnya. contohnya adalah karakter &ldquo;b&rdquo; akan lebih besar daripada &ldquo;a&rdquo;, karakter &ldquo;c&rdquo; lebih besar daripada karakter &ldquo;b&rdquo;, dst.<\/p>\r\n<pre class=\"wp-block-preformatted\">var animals = [\"kera\", \"gajah\", \"musang\"] \r\nanimals.sort()\r\nconsole.log(animals) \/\/ [\"gajah\", \"kera\", \"musang\"]<\/pre>\r\n<p>Hal ini akan bermasalah jika kita ingin mengurutkan angka. Secara otomatis metode sort akan membandingkan karakter terdepan dari sebuah angka.<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [12, 1, 3]\r\nnumbers.sort()\r\nconsole.log(numbers) \/\/ [1, 12, 3] <\/pre>\r\n<p>Untuk mengatasi masalah tersebut, metode sort dapat menerima sebuah parameter berupa function untuk membandingkan value dari elemen yang akan diurutkan. contohnya sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [12, 1, 3]\r\n\/\/ Mengurutkan secara Ascending\r\nnumbers.sort(function (value1, value2) { return value1 - value2 } ) ; \r\nconsole.log(numbers) \/\/ [1, 3, 12]\r\n \r\n\/\/ Mengurutkan secara Descending\r\nnumbers.sort(function (value1, value2) { return value2 - value1 } ) ;\r\nconsole.log(numbers) \/\/ [12, 3, 1] <\/pre>\r\n<h3 id=\"slice\"><code><strong>.slice()<\/strong><\/code><\/h3>\r\n<p>slice adalah metode untuk mengambil irisan dari sebuah array. Metode slice bisa menerima satu atau dua parameter. Parameter pertama adalah nomer index pertama yang akan kita ambil sebagai irisan, sedangkan parameter kedua adalah nomer index terakhir yang ingin kita ambil sebagai irisan.<\/p>\r\n<pre class=\"wp-block-preformatted\">var angka = [0, 1, 2, 3]\r\nvar irisan1 = angka.slice(1,3) \r\nconsole.log(irisan1) \/\/[1, 2, 3]\r\nvar irisan2 = angka.slice(0,2)\r\nconsole.log(irisan2) \/\/[0, 1, 2] <\/pre>\r\n<p>Jika parameter kedua tidak diisi maka secara otomatis slice akan mengiris array dari indeks di paramer pertama sampai ke indeks terakhir array tersebut.<\/p>\r\n<pre class=\"wp-block-preformatted\">var angka = [0, 1, 2, 3]\r\nvar irisan3 = angka.slice(2)\r\nconsole.log(irisan3) \/\/ [2, 3] <\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Jika diperhatikan, metode slice tidak mengubah Array yang awal dan hasil irisan array dapat kita tampung kembali ke variable yang baru. Oleh karena itu metode Slice juga berfungsi untuk membuat salinan atau &ldquo;shallow copy&rdquo; dari sebuah array. Cara membuat shallow copy dengan metode slice yaitu dengan tanpa memberikan parameter apapun pada metode slice.<\/p>\r\n<pre class=\"wp-block-preformatted\"><code>var angka = [0, 1, 2, 3]<\/code><br \/><code>var salinAngka = angka.slice()<\/code><br \/><code>console.log(salingAngka) \/\/ [0, 1, 2, 3]<\/code><\/pre>\r\n<\/blockquote>\r\n<h3 id=\"splice\"><code><strong>.splice()<\/strong><\/code><\/h3>\r\n<p>Splice yaitu metode untuk menghapus dan\/atau menambahkan nilai elemen pada array. Metode splice bisa menerima parameter sebanyak dua atau lebih parameter. Jika ingin menggunakan splice untuk menghapus elemen pada index tertentu maka digunakan 2 paramater. Jika ingin menggunakan splice untuk menambahkan elemen pada index tertentu maka digunakan tiga parameter.<\/p>\r\n<pre class=\"wp-block-preformatted\">array.splice([IndexMulai], [JumlahNilaiYangDihapus], [NilaiYangDitambahkan1], [NilaiYangDitambahkan2], ...);<\/pre>\r\n<p>Berikut contoh penggunaan metode&nbsp;<code>splice()<\/code><\/p>\r\n<pre class=\"wp-block-preformatted\">var fruits = [ \"banana\", \"orange\", \"grape\"]\r\nfruits.splice(1, 0, \"watermelon\") \r\nconsole.log(fruits) \/\/ [ \"banana\", \"watermelon\", \"orange\", \"grape\"]<\/pre>\r\n<p>Contoh di atas berarti kita mulai mengubah array fruits dari indeks no 1, dan melakukan penghapusan nilai sebanyak 0 (yang berarti tidak menghapus apapun), dan menambahkan nilai &ldquo;watermelon&rdquo; pada indeks tersebut.<\/p>\r\n<pre class=\"wp-block-preformatted\">var fruits = [ \"banana\", \"orange\", \"grape\"]\r\nfruits.splice(0, 2)\r\nconsole.log(fruits) \/\/ [\"grape\"]<\/pre>\r\n<p>Contoh di atas berarti kita mulai mengubah array fruits dari indeks ke-0 dan melakukan penghapusan data sebanyak 2 elemen.<\/p>\r\n<h3 id=\"split-dan-join\"><code><strong>.split()<\/strong><\/code>&nbsp;dan&nbsp;<code><strong>.join()<\/strong><\/code><\/h3>\r\n<p>Metode split yaitu memecah sebuah string sehingga menjadi sebuah array. Split menerima sebuah parameter berupa karakter yang menjadi separator untuk memecah string.<\/p>\r\n<pre class=\"wp-block-preformatted\">var biodata = \"name:john,doe\" \r\nvar name = biodata.split(\":\")\r\nconsole.log(name) \/\/ [ \"name\", \"john,doe\"] <\/pre>\r\n<p>Metode join yaitu kebalikan dari split yaitu mengubah sebuah array menjadi string dengan cara menggabungkan (join) seluruh elemen array menjadi satu dengan sebuah karakter pemisah yang dikirim melalui parameter. contohnya sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">var title = [\"my\", \"first\", \"experience\", \"as\", \"programmer\"] \r\nvar slug = title.join(\"-\")\r\nconsole.log(slug) \/\/ \"my-first-experience-as-programmer\"<\/pre>\r\n<h2 id=\"multidimensional-array\">Multidimensional Array<\/h2>\r\n<p>Multidimensional array atau array multidimensi adalah array yang berisi array di dalamnya. Jumlah dimensi bergantung seberapa dalam array tersebut memiliki array di dalamnya. Cara akses nilai dari array multidimensi sama seperti array satu dimensi seperti biasa namun jumlah indeksnya terdapat sebanyak dimensi nya.<\/p>\r\n<pre class=\"wp-block-preformatted\"> var arrayMulti = [ \r\n    [1, 2, 3],\r\n    [4, 5, 6],\r\n    [7, 8, 9]\r\n]\r\n\/\/ Maka sebagai gambaran, indeks dari array tersebut adalah \r\n\/*\r\n    [\r\n        [(0,0), (0,1), (0,2)],\r\n        [(1,0), (1,1), (1,2)],\r\n        [(2,0), (2,1), (2,2)]\r\n    ] \r\n*\/\r\nconsole.log(arrayMulti[0][0]) \/\/ 1 \r\nconsole.log(arrayMulti[1][0]) \/\/ 4\r\nconsole.log(arrayMulti[2][1]) \/\/ 8<\/pre>\r\n<\/div>\r\n<div id=\"gtx-trans\" style=\"position: absolute; left: -60px; top: 65.4375px;\">\r\n<div class=\"gtx-trans-icon\">&nbsp;<\/div>\r\n<\/div>","waktu_publish":"2021-10-29 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-09-24 07:25:41","updated_at":"2021-10-25 07:28:30","waktu_publish_formatted":" Jumat, 29 Oktober 2021. 07:30:00 WIB."},{"id":1407,"uuid":"37a1342e-d2b2-4b2a-a113-1ec6a2cac9a5","author_user_id":12081,"materi_section_id":383,"judul":"Tugas 5 - Array","permalink":"tugas-5-array","konten":"<p>Pada tugas kali ini buatlah folder baru (Tugas 5 &ndash; Array) yang berisikan file dengan nama&nbsp;<strong>array.js<\/strong>&nbsp;. Simpan folder tugas ini di dalam folder repository project yang dikerjakan kemarin&nbsp;<strong>BootcampReactNative<\/strong><\/p>\r\n<h2 id=\"soal-no-1-range\">Soal No. 1 (Range)&nbsp;<\/h2>\r\n<p>Buatlah sebuah function dengan nama range() yang menerima dua parameter berupa number. Function mengembalikan sebuah array yang berisi angka-angka mulai dari angka parameter pertama hingga angka pada parameter kedua. Jika parameter pertama lebih besar dibandingkan parameter kedua maka angka-angka tersusun secara menurun (descending).<\/p>\r\n<p>struktur fungsinya seperti berikut&nbsp;<code>range(startNum, finishNum) {}<\/code><br \/>Jika parameter pertama atau kedua tidak diisi maka function akan menghasilkan nilai&nbsp;<code>-1<\/code><\/p>\r\n<pre class=\"wp-block-preformatted\">function range(startNum, finishNum) {<br \/>    \/\/ Code di sini<br \/><br \/>}\r\n \r\nconsole.log(range(1, 10)) \/\/[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nconsole.log(range(1)) \/\/ -1\r\nconsole.log(range(11,18)) \/\/ [11, 12, 13, 14, 15, 16, 17, 18]\r\nconsole.log(range(54, 50)) \/\/ [54, 53, 52, 51, 50]\r\nconsole.log(range()) \/\/ -1 <\/pre>\r\n<h2 id=\"soal-no-2-range-with-step\">Soal No. 2 (Range with Step)<\/h2>\r\n<p>Pada soal kali ini kamu diminta membuat function rangeWithStep yang mirip dengan function range di soal sebelumnya namun parameternya ditambah dengan parameter ketiga yaitu angka step yang menyatakan selisih atau beda dari setiap angka pada array. Jika parameter pertama lebih besar dibandingkan parameter kedua maka angka-angka tersusun secara menurun (descending) dengan step sebesar parameter ketiga.<\/p>\r\n<p>struktur fungsinya seperti berikut&nbsp;<code>rangeWithStep(startNum, finishNum, step) {}<\/code><\/p>\r\n<pre class=\"wp-block-preformatted\">function rangeWithStep(startNum, finishNum, step) {<br \/>    \/\/ Code di sini<br \/><br \/>}<br \/><br \/>console.log(rangeWithStep(1, 10, 2)) \/\/ [1, 3, 5, 7, 9]\r\nconsole.log(rangeWithStep(11, 23, 3)) \/\/ [11, 14, 17, 20, 23]\r\nconsole.log(rangeWithStep(5, 2, 1)) \/\/ [5, 4, 3, 2]\r\nconsole.log(rangeWithStep(29, 2, 4)) \/\/ [29, 25, 21, 17, 13, 9, 5] <\/pre>\r\n<h2 id=\"soal-no-3-sum-of-range\">Soal No. 3 (Sum of Range)<\/h2>\r\n<p>Kali ini kamu akan menjumlahkan sebuah range (Deret) yang diperoleh dari function range di soal-soal sebelumnya. Kamu boleh menggunakan function range dan rangeWithStep pada soal sebelumnya untuk menjalankan soal ini.<\/p>\r\n<p>Buatlah sebuah function dengan nama&nbsp;<code>sum()<\/code>&nbsp;yang menerima tiga parameter yaitu angka awal deret, angka akhir deret, dan beda jarak (step). Function akan mengembalikan nilai jumlah (sum) dari deret angka. contohnya&nbsp;<code>sum(1,10,1)&nbsp;<\/code>akan menghasilkan nilai 55.<\/p>\r\n<p>ATURAN: Jika parameter ke-3 tidak diisi maka stepnya adalah 1.<\/p>\r\n<pre class=\"wp-block-preformatted\"><br \/>function sum(startNum, finishNum, step) {<br \/>    \/\/ Modifikasi fungsi ini<br \/><br \/>}<br \/><br \/>console.log(sum(1,10)) \/\/ 55\r\nconsole.log(sum(5, 50, 2)) \/\/ 621\r\nconsole.log(sum(15,10)) \/\/ 75\r\nconsole.log(sum(20, 10, 2)) \/\/ 90\r\nconsole.log(sum(1)) \/\/ 1\r\nconsole.log(sum()) \/\/ 0 <\/pre>\r\n<h2 id=\"soal-no-4-array-multidimensi\">Soal No. 4 (Array Multidimensi)<\/h2>\r\n<p>Sering kali data yang diterima dari database adalah array yang multidimensi (array di dalam array). Sebagai developer, tugas kita adalah mengolah data tersebut agar dapat menampilkan informasi yang diinginkan.<\/p>\r\n<p>Buatlah sebuah fungsi dengan nama&nbsp;<code>dataHandling<\/code>&nbsp;dengan sebuah parameter untuk menerima argumen. Argumen yang akan diterima adalah sebuah array yang berisi beberapa array sejumlah&nbsp;<strong>n<\/strong>. Contoh input dapat dilihat dibawah:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/contoh input\r\nvar input = [\r\n                [\"0001\", \"Roman Alamsyah\", \"Bandar Lampung\", \"21\/05\/1989\", \"Membaca\"],\r\n                [\"0002\", \"Dika Sembiring\", \"Medan\", \"10\/10\/1992\", \"Bermain Gitar\"],\r\n                [\"0003\", \"Winona\", \"Ambon\", \"25\/12\/1965\", \"Memasak\"],\r\n                [\"0004\", \"Bintang Senjaya\", \"Martapura\", \"6\/4\/1970\", \"Berkebun\"]\r\n            ] <\/pre>\r\n<p>Tugas kamu adalah mengimplementasikan fungsi&nbsp;<code>dataHandling()<\/code>&nbsp;agar dapat menampilkan data-data pada dari argumen seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-preformatted\">Nomor ID:  0001\r\nNama Lengkap:  Roman Alamsyah\r\nTTL:  Bandar Lampung 21\/05\/1989\r\nHobi:  Membaca\r\n \r\nNomor ID:  0002\r\nNama Lengkap:  Dika Sembiring\r\nTTL:  Medan 10\/10\/1992\r\nHobi:  Bermain Gitar\r\n \r\nNomor ID:  0003\r\nNama Lengkap:  Winona\r\nTTL:  Ambon 25\/12\/1965\r\nHobi:  Memasak\r\n \r\nNomor ID:  0004\r\nNama Lengkap:  Bintang Senjaya\r\nTTL:  Martapura 6\/4\/1970\r\nHobi:  Berkebun <\/pre>\r\n<h2 id=\"soal-no-5-balik-kata\">Soal No. 5 (Balik Kata)<\/h2>\r\n<p>Kamu telah mempelajari beberapa method yang dimiliki oleh String dan Array. String sebetulnya adalah sebuah array karena kita dapat mengakses karakter karakter pada sebuah string layaknya mengakses elemen pada array.<\/p>\r\n<p>Buatlah sebuah function&nbsp;<code>balikKata()<\/code>&nbsp;yang menerima sebuah parameter berupa string dan mengembalikan kebalikan dari string tersebut.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Code di sini\r\n \r\nconsole.log(balikKata(\"Kasur Rusak\")) \/\/ kasuR rusaK\r\nconsole.log(balikKata(\"SanberCode\")) \/\/ edoCrebnaS\r\nconsole.log(balikKata(\"Haji Ijah\")) \/\/ hajI ijaH\r\nconsole.log(balikKata(\"racecar\")) \/\/ racecar\r\nconsole.log(balikKata(\"I am Sanbers\")) \/\/ srebnaS ma I <\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Dilarang menggunakan sintaks&nbsp;<code>.split&nbsp;<\/code>,<code>&nbsp;.join&nbsp;<\/code>,<code>&nbsp;.reverse()&nbsp;<\/code>, hanya gunakan looping!<\/p>\r\n<\/blockquote>\r\n<h2 id=\"soal-no-6-metode-array\">Soal No. 6 (Metode Array)<\/h2>\r\n<p>Array pada JavaScript memiliki sekumpulan&nbsp;<em>built-in function<\/em>&nbsp;yang digunakan untuk mempermudah developer untuk mengolah data di dalamnya. Beberapa fungsi yang sering digunakan antara lain&nbsp;<code>join<\/code>,&nbsp;<code>split<\/code>,&nbsp;<code>slice<\/code>,&nbsp;<code>splice<\/code>, dan&nbsp;<code>sort<\/code>. Kerjakanlah tantangan ini untuk memperkuat pengertian kamu tentang&nbsp;<em>built-in function<\/em>&nbsp;tersebut.<\/p>\r\n<p><strong>Tujuan<\/strong><\/p>\r\n<ul>\r\n<li>Mengerti Kegunaan dari&nbsp;<em>Built-in Function<\/em>&nbsp;yang dimiliki Array<\/li>\r\n<li>Mampu Menggunakan&nbsp;<em>Built-in Function<\/em>&nbsp;yang dimiliki Array<\/li>\r\n<\/ul>\r\n<p><strong>Petunjuk<\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/contoh input\r\n[\"0001\", \"Roman Alamsyah\", \"Bandar Lampung\", \"21\/05\/1989\", \"Membaca\"]  <\/pre>\r\n<ul>\r\n<li>Buatlah sebuah&nbsp;<em>function<\/em>&nbsp;dengan nama&nbsp;<code>dataHandling2<\/code>&nbsp;yang akan menerima input array seperti di atas.<\/li>\r\n<li>Gunakan fungsi&nbsp;<code>splice<\/code>&nbsp;untuk memodifikasi variabel tersebut agar menjadi seperti array dibawah. Lalu&nbsp;<code>console.log<\/code>&nbsp;array yang baru seperti di bawah.<\/li>\r\n<\/ul>\r\n<pre class=\"wp-block-preformatted\">[\"0001\", \"Roman Alamsyah Elsharawy\", \"Provinsi Bandar Lampung\", \"21\/05\/1989\", \"Pria\", \"SMA Internasional Metro\"] <\/pre>\r\n<ul>\r\n<li class=\"\">Berdasarkan elemen yang berisikan tanggal\/bulan\/tahun (elemen ke-4), ambil angka bulan dan&nbsp;<code>console.log<\/code>&nbsp;nama bulan sesuai dengan angka tersebut.\r\n<ul>\r\n<li class=\"\">Gunakan&nbsp;<code>split<\/code>&nbsp;untuk memisahkan antara tanggal, bulan, dan tahun.<\/li>\r\n<li class=\"\">Format tanggal pada data adalah&nbsp;<strong>dd-mm-YYYY<\/strong><\/li>\r\n<li class=\"\">Misal angka bulan 01, tuliskan &ldquo;Januari&rdquo;<\/li>\r\n<li class=\"\">Gunakan&nbsp;<code>switch case<\/code>&nbsp;untuk menuliskan bulan di atas.<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li class=\"\">Pada array hasil&nbsp;<code>split<\/code>&nbsp;dari tanggal\/bulan\/tahun, lakukan&nbsp;<em>sorting<\/em>&nbsp;secara&nbsp;<em>descending<\/em>&nbsp;dan&nbsp;<code>console.log<\/code>&nbsp;array yang sudah di-sort.<\/li>\r\n<li class=\"\">Masih pada array hasil&nbsp;<code>split<\/code>&nbsp;dari elemen tanggal\/bulan\/tahun, gabungkan semua elemen menggunakan&nbsp;<code>join<\/code>&nbsp;dan pisahkan dengan karakter strip (-) lalu&nbsp;<code>console.log<\/code>&nbsp;hasilnya.<\/li>\r\n<li class=\"\">Nama (elemen ke-2), harus dibatasi sebanyak 15 karakter saja. Gunakan&nbsp;<code>slice<\/code>&nbsp;untuk menghapus kelebihan karakter dan&nbsp;<code>console.log<\/code>&nbsp;nama yang sudah di-slice, sebelum di-slice pastikan Nama (elemen ke-2) sudah dalam bentuk&nbsp;<code>String<\/code>&nbsp;agar bisa di-slice.<\/li>\r\n<\/ul>\r\n<p><strong>Test-case<\/strong><\/p>\r\n<p>Untuk memastikan program kamu sudah bekerja dengan benar, gunakan&nbsp;<em>test-case<\/em>&nbsp;dibawah.<\/p>\r\n<pre class=\"wp-block-preformatted\">var input = [\"0001\", \"Roman Alamsyah \", \"Bandar Lampung\", \"21\/05\/1989\", \"Membaca\"];\r\ndataHandling2(input);\r\n \r\n\/**\r\n * keluaran yang diharapkan (pada console)\r\n *\r\n * [\"0001\", \"Roman Alamsyah Elsharawy\", \"Provinsi Bandar Lampung\", \"21\/05\/1989\", \"Pria\", \"SMA Internasional Metro\"]\r\n * Mei\r\n * [\"1989\", \"21\", \"05\"]\r\n * 21-05-1989\r\n * Roman Alamsyah\r\n *\/ <\/pre>\r\n<p>Jika sudah selesai dikerjakan, silahkan&nbsp;<em>push&nbsp;<\/em>hasil pekerjaan Anda ke&nbsp;<em>repository&nbsp;<\/em>Gitlab masing-masing (gunakan&nbsp;<em>repository project<\/em>&nbsp;yang yang kemarin&nbsp;<strong>BootcampReactNative&nbsp;<\/strong>gunakan folder Tugas 5). Jangan lupa&nbsp;<em>submit link commit<\/em> Anda ke member area sanbercode.com<\/p>","waktu_publish":"2021-10-29 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-09-24 07:26:17","updated_at":"2021-10-25 07:28:38","waktu_publish_formatted":" Jumat, 29 Oktober 2021. 07:30:00 WIB."}]},{"id":384,"uuid":"25f5da32-edb4-4a31-bc0d-c8dd94227f00","materi_id":27,"nama":"Hari 6 - JavaScript: Object","permalink":"hari-6-javascript-object","urutan":7,"created_by":12081,"updated_by":12081,"created_at":"2021-09-27 05:23:07","updated_at":"2021-09-27 05:24:09","posting":[{"id":1408,"uuid":"f7980680-a739-4b1f-90da-cca3094330c9","author_user_id":12081,"materi_section_id":384,"judul":"JavaScript: Object","permalink":"javascript-object","konten":"<h1>What is Object ?<\/h1>\r\n<div class=\"entry-content\">\r\n<p>Object adalah kumpulan data tidak berurut yang berisikan pasangan property (key) dan value . Jika kita ingat pada tipe data Array yang merupakan kumpulan data yang berurut sesuai indeks, sedangkan Object mirip dengan Array tapi kini kita memberikan property atau key sendiri.<\/p>\r\n<h1>Why Object ?<\/h1>\r\n<p>Property atau key pada Object itu dapat kita umpamakan indeks pada Array. Bedanya indeks pada Array langsung diberikan secara otomatis mulai dari indeks 0 dst, sedangkan property pada Object dapat kita namai sesuka kita.<\/p>\r\n<p>Bandingkan kedua variable berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">var personArr = [\"John\", \"Doe\", \"male\", 27]\r\nvar personObj = {\r\n    firstName : \"John\",\r\n    lastName: \"Doe\",\r\n    gender: \"male\",\r\n    age: 27\r\n} <\/pre>\r\n<p>contoh di atas kita ingin mendeklarasikan variable person dalam Array dan Object. Jika pada Array kita mengakses nama depan dengan cara&nbsp;<code>personArr[0]<\/code>&nbsp;, sedangkan jika kita ingin mengakses nama depan pada Object kita dapat melakukannya dengan&nbsp;<code>personObj.firstName<\/code>&nbsp;. Keduanya memberikan value yang sama namun pemanggilan value dengan cara Object lebih kita senangi karena kita bisa mendefinisikan bahwa seseorang &ldquo;Person&rdquo; itu pasti memiliki nama depan (<code>firstName<\/code>), nama belakang (<code>lastName<\/code>), (<code>gender<\/code>), dan umur (<code>age<\/code>).<\/p>\r\n<pre class=\"wp-block-preformatted\">var personArr = [\"John\", \"Doe\", \"male\", 27]\r\nvar personObj = {\r\n    firstName : \"John\",\r\n    lastName: \"Doe\",\r\n    gender: \"male\",\r\n    age: 27\r\n}\r\n \r\nconsole.log(personArr[0]) \/\/ John\r\nconsole.log(personObj.firstName) \/\/ John <\/pre>\r\n<h2 id=\"deklarasi-object\">Deklarasi Object&nbsp;<\/h2>\r\n<p>Cara untuk mendeklarasi sebuah object yaitu dengan memberikan curly brackets (<code>{}<\/code>) lalu buat pasangan&nbsp;<code>key: value<\/code>&nbsp;di dalamnya. Jika ingin menambahkan pasangan key dan value maka dipisah dengan tanda koma. contohnya:<\/p>\r\n<pre class=\"wp-block-preformatted\">var object = {\r\n    [key]: [value]\r\n}\r\n \r\nvar car = {\r\n    brand: \"Ferrari\",\r\n    type: \"Sports Car\",\r\n    price: 50000000,\r\n    \"horse power\": 986\r\n}<\/pre>\r\n<p>Jika diperhatikan pada contoh object&nbsp;<code>car<\/code>&nbsp;di atas terdapat key dengan nama &ldquo;<code>horse power<\/code>&rdquo; yang penulisannya berbeda dengan key yang lain. Hal ini karena jika nama key dari Object lebih dari satu kata atau dipisah dengan spasi kita bisa deklarasikan dengan memberikan tanda petik (<code>\"\"<\/code>).<\/p>\r\n<p>Cara lainnya untuk membuat object adalah dengan mendeklarasikan terlebih dahulu variable sebagai Object kosong lalu melakukan assign property dan valuenya ke varible tersebut. Contohnya sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">var car2 = {}\r\n\/\/ meng-assign key:value dari object car2\r\ncar2.brand = \"Lamborghini\"\r\ncar2.brand = \"Sports Car\"\r\ncar2.price = 100000000 <\/pre>\r\n<p>Jika ingin memberikan nama key yang lebih dari satu kata dan dipisah dengan spasi maka kita dapat menulis key nya dengan menggunakan tanda petik (<code>\"\"<\/code>) di dalam kurung siku (<code>[]<\/code>).<\/p>\r\n<pre class=\"wp-block-preformatted\">car2[\"horse power\"] = 730 <\/pre>\r\n<p>Value yang kita assign pada object tidak terbatas hanya string atau number saja tapi bisa juga Array, boolean, bahkan Object lagi di dalamnya.<\/p>\r\n<h2 id=\"mengakses-nilai-pada-object\">Mengakses Nilai pada Object<\/h2>\r\n<p>Untuk mengakses nilai pada Object bisa dengan cara memanggil object nya lalu tanda titik (dot) dan nama property\/key nya. contohnya seperti berikut<\/p>\r\n<pre class=\"wp-block-preformatted\">var motorcycle1 = {    \r\n    brand: \"Handa\",\r\n    type: \"CUB\",\r\n    price: 1000\r\n}\r\nconsole.log(motorcycle1.brand) \/\/ \"Handa\"\r\nconsole.log(motorcycle1.type) \/\/ \"CUB\"<\/pre>\r\n<p>Cara lain untuk mengakses nilai, yaitu cara yang mirip dengan mengakses nilai suatu elemen pada Array, menggunakan tanda kurung siku, dan di dalam kurung siku tersebut kita sebutkan nama property nya.<\/p>\r\n<pre class=\"wp-block-preformatted\">console.log(motorcycle1[\"price\"])<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Tipe data Array technically adalah sebuah Object tetapi Array memiliki sifat khusus. Array secara otomatis memberikan indeks yang analogi dengan key pada Object. Coba kamu cek di console menggunakan&nbsp;<code>typeof<\/code><\/p>\r\n<pre class=\"wp-block-preformatted\"><code>var array = [ 1, 2, 3 ] <br \/>console.log(typeof array) \/\/ object<\/code><\/pre>\r\n<\/blockquote>\r\n<\/div>","waktu_publish":"2021-11-01 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-09-27 05:24:00","updated_at":"2021-10-25 07:29:06","waktu_publish_formatted":" Senin, 01 November 2021. 07:30:00 WIB."},{"id":1409,"uuid":"7a771c64-e2fd-4040-97ea-72bb2d729f53","author_user_id":12081,"materi_section_id":384,"judul":"Tugas 6 - Object","permalink":"tugas-6-object","konten":"<p>Pada tugas kali ini buatlah folder baru (Tugas 6 &ndash; Object) yang berisikan file dengan nama&nbsp;<strong>object.js<\/strong>&nbsp;. Simpan folder tugas ini di dalam folder repository project&nbsp;<span class=\"breadcrumb-item-text js-breadcrumb-item-text\">BootcampReactNative<\/span>&nbsp;yang dikerjakan pada folder kemarin .<\/p>\r\n<h2 id=\"soal-no-1-array-to-object\">Soal No. 1 (Array to Object)<\/h2>\r\n<p>Buatlah function dengan nama&nbsp;<code>arrayToObject()<\/code>&nbsp;yang menerima sebuah parameter berupa array multidimensi. Dalam array tersebut berisi value berupa First Name, Last Name, Gender, dan Birthyear. Data di dalam array dimensi tersebut ingin kita ubah ke dalam bentuk Object dengan key bernama : firstName, lastName, gender, dan age. Untuk key age ambillah selisih tahun yang ditulis di data dengan tahun sekarang. Jika tahun tidak terdefinisi atau tahunnya lebih besar dibandingkan dengan tahun sekarang maka kembalikan nilai : &ldquo;Invalid birth year&rdquo;.<\/p>\r\n<p>Contoh: jika input nya adalah&nbsp;<code>[[\"Abduh\", \"Muhamad\", \"male\", 1992], [\"Ahmad\", \"Taufik\", \"male\", 1985]]<\/code><\/p>\r\n<p>maka outputnya di console seperti berikut :<\/p>\r\n<pre class=\"wp-block-preformatted\">1. Abduh Muhamad : { firstName: \"Abduh\", lastName: \"Muhamad\", gender: \"male\", age: 28}\r\n2. Ahmad Taufik : { firstName: \"Ahmad\", lastName: \"Taufik\", gender: \"male\", age: 35} <\/pre>\r\n<p>Untuk mendapatkan tahun sekarang secara otomatis bisa gunakan Class&nbsp;<code>Date<\/code>&nbsp;dari Javascript.<\/p>\r\n<pre class=\"wp-block-preformatted\">var now = new Date()\r\nvar thisYear = now.getFullYear() \/\/ 2021 (tahun sekarang)<\/pre>\r\n<p><strong>Code<\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">function arrayToObject(arr) {\r\n    \/\/ Code di sini \r\n}\r\n \r\n\/\/ Driver Code\r\nvar people = [ [\"Bruce\", \"Banner\", \"male\", 1975], [\"Natasha\", \"Romanoff\", \"female\"] ]\r\narrayToObject(people) \r\n\/*<br \/>{<br \/>&nbsp; '1. Bruce Banner': { <br \/>    firstName: 'Bruce', <br \/>    lastName: 'Banner', <br \/>    gender: 'male', <br \/>    age: 45 <br \/>  },<br \/>&nbsp; '2. Natasha Romanoff': {<br \/>&nbsp; &nbsp; firstName: 'Natasha',<br \/>&nbsp; &nbsp; lastName: 'Romanoff',<br \/>&nbsp; &nbsp; gender: 'female',<br \/>&nbsp; &nbsp; age: 'Invalid Birth Year'<br \/>&nbsp; }<br \/>} <br \/>*\/\r\n \r\nvar people2 = [ [\"Tony\", \"Stark\", \"male\", 1980], [\"Pepper\", \"Pots\", \"female\", 2023] ]\r\narrayToObject(people2) \r\n\/* <br \/>{<br \/>&nbsp; '1. Tony Stark': {<br \/>    firstName: 'Tony', <br \/>    lastName: 'Stark', <br \/>    gender: 'male', <br \/>    age: 40 <br \/>  },<br \/>&nbsp; '2. Pepper Pots': {<br \/>&nbsp; &nbsp; firstName: 'Pepper',<br \/>&nbsp; &nbsp; lastName: 'Pots',<br \/>&nbsp; &nbsp; gender: 'female',<br \/>&nbsp; &nbsp; age: 'Invalid Birth Year'<br \/>&nbsp; }<br \/>} <br \/>*\/\r\n \r\n\/\/ Error case \r\narrayToObject([]) \/\/ \"{}\"<\/pre>\r\n<h1 id=\"soal-no-2-shopping-time\">Soal No. 2 (Shopping Time)<\/h1>\r\n<p><strong>Problem<\/strong><\/p>\r\n<p>Diberikan sebuah function&nbsp;<code>shoppingTime(memberId, money)<\/code>&nbsp;yang menerima dua parameter berupa string dan number. Parameter pertama merupakan&nbsp;<code>memberId<\/code>dan parameter ke-2 merupakan value uang (<code>money<\/code>) yang dibawa oleh member tersebut.<\/p>\r\n<p>Toko X sedang melakukan SALE untuk beberapa barang, yaitu:<\/p>\r\n<ul>\r\n<li class=\"\">Sepatu brand Stacattu seharga 1500000<\/li>\r\n<li class=\"\">Baju brand Zoro seharga 500000<\/li>\r\n<li class=\"\">Baju brand H&amp;N seharga 250000<\/li>\r\n<li class=\"\">Sweater brand Uniklooh seharga 175000<\/li>\r\n<li class=\"\">Casing Handphone seharga 50000<\/li>\r\n<\/ul>\r\n<p>Buatlah function yang akan mengembalikan sebuah object dimana object tersebut berisikan informasi memberId, money, listPurchased dan changeMoney.<\/p>\r\n<ul>\r\n<li class=\"\">Jika memberId kosong maka tampilkan &ldquo;Mohon maaf, toko X hanya berlaku untuk member saja&rdquo;<\/li>\r\n<li class=\"\">Jika uang yang dimiliki kurang dari 50000 maka tampilkan &ldquo;Mohon maaf, uang tidak cukup&rdquo;<\/li>\r\n<li class=\"\">Member yang berbelanja di toko X akan membeli barang yang paling mahal terlebih dahulu dan akan membeli barang-barang yang sedang SALE masing-masing 1 jika uang yang dimilikinya masih cukup.<\/li>\r\n<\/ul>\r\n<p>Contoh jika inputan memberId: &lsquo;324193hDew2&rsquo; dan money: 700000<\/p>\r\n<p>maka output:<\/p>\r\n<p>{ memberId: &lsquo;324193hDew2&rsquo;, money: 700000, listPurchased: [ &lsquo;Baju Zoro&rsquo;, &lsquo;Sweater Uniklooh&rsquo; ], changeMoney: 25000 }<\/p>\r\n<p><strong>Code<\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">function shoppingTime(memberId, money) {\r\n  \/\/ you can only write your code here!\r\n}\r\n \r\n\/\/ TEST CASES\r\nconsole.log(shoppingTime('1820RzKrnWn08', 2475000));\r\n  \/\/{ memberId: '1820RzKrnWn08',\r\n  \/\/ money: 2475000,\r\n  \/\/ listPurchased:\r\n  \/\/  [ 'Sepatu Stacattu',\r\n  \/\/    'Baju Zoro',\r\n  \/\/    'Baju H&amp;N',\r\n  \/\/    'Sweater Uniklooh',\r\n  \/\/    'Casing Handphone' ],\r\n  \/\/ changeMoney: 0 }\r\nconsole.log(shoppingTime('82Ku8Ma742', 170000));\r\n\/\/{ memberId: '82Ku8Ma742',\r\n\/\/ money: 170000,\r\n\/\/ listPurchased:\r\n\/\/  [ 'Casing Handphone' ],\r\n\/\/ changeMoney: 120000 }\r\nconsole.log(shoppingTime('', 2475000)); \/\/Mohon maaf, toko X hanya berlaku untuk member saja\r\nconsole.log(shoppingTime('234JdhweRxa53', 15000)); \/\/Mohon maaf, uang tidak cukup\r\nconsole.log(shoppingTime()); \/\/\/\/Mohon maaf, toko X hanya berlaku untuk member saja<\/pre>\r\n<h1 id=\"soal-no-3-naik-angkot\">Soal No. 3 (Naik Angkot)<\/h1>\r\n<p><strong>Problem<\/strong><\/p>\r\n<p>Diberikan function&nbsp;<code>naikAngkot(listPenumpang)<\/code>&nbsp;yang akan menerima satu parameter berupa array dua dimensi. Function akan me-return array of object.<\/p>\r\n<p>Diberikan sebuah rute, dari A &ndash; F. Penumpang diwajibkan membayar Rp2000 setiap melewati satu rute.<\/p>\r\n<p>Contoh: input: [ [&lsquo;Dimitri&rsquo;, &lsquo;B&rsquo;, &lsquo;F&rsquo;] ] output: [{ penumpang: &lsquo;Dimitri&rsquo;, naikDari: &lsquo;B&rsquo;, tujuan: &lsquo;F&rsquo;, bayar: 8000 }]<\/p>\r\n<p><strong>Code<\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">function naikAngkot(arrPenumpang) {\r\n  rute = ['A', 'B', 'C', 'D', 'E', 'F'];\r\n  \/\/your code here\r\n}\r\n \r\n\/\/TEST CASE\r\nconsole.log(naikAngkot([['Dimitri', 'B', 'F'], ['Icha', 'A', 'B']]));\r\n\/\/ [ { penumpang: 'Dimitri', naikDari: 'B', tujuan: 'F', bayar: 8000 },\r\n\/\/   { penumpang: 'Icha', naikDari: 'A', tujuan: 'B', bayar: 2000 } ]\r\n \r\nconsole.log(naikAngkot([])); \/\/[]<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Sumber soal:&nbsp;<a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/README-WEEK-4.md\" target=\"_blank\" rel=\"noreferrer noopener\">github hacktiv8 phase 0 exercises<\/a><\/p>\r\n<\/blockquote>\r\n<p>Jika sudah selesai dikerjakan, silahkan&nbsp;<em>push&nbsp;<\/em>hasil pekerjaan Anda ke&nbsp;<em>repository&nbsp;<\/em>Gitlab masing-masing (gunakan&nbsp;<em>repository project&nbsp;<a href=\"https:\/\/gitlab.com\/hanautasancho\/bootcampreactnative\"><span class=\"breadcrumb-item-text js-breadcrumb-item-text\">BootcampReactNative<\/span><\/a><\/em>&nbsp;yang digunakan kemarin). Jangan lupa&nbsp;<em>submit link commit<\/em> Anda ke member area sanbercode.com.<\/p>","waktu_publish":"2021-11-01 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-09-27 05:24:30","updated_at":"2021-10-25 07:29:15","waktu_publish_formatted":" Senin, 01 November 2021. 07:30:00 WIB."}]},{"id":387,"uuid":"c50bdd1c-4b92-4128-a5f9-a451fca8bdd9","materi_id":27,"nama":"Hari 7 - JavaScript: ES6","permalink":"hari-7-javascript-es6","urutan":8,"created_by":12081,"updated_by":12081,"created_at":"2021-09-28 06:33:56","updated_at":null,"posting":[{"id":1414,"uuid":"918c4991-b9d8-431b-b8c7-99b390441f3b","author_user_id":12081,"materi_section_id":387,"judul":"JavaScript: ES6","permalink":"javascript-es6","konten":"<p>ES6 adalah fitur bahasa pada pemrograman Javascript modern.<\/p>\r\n<h2 id=\"daftar-fitur-es6\">Daftar Fitur ES6<\/h2>\r\n<ul>\r\n<li class=\"\">Arrows Function<\/li>\r\n<li class=\"\">Classes<\/li>\r\n<li class=\"\">Enchanced object literals<\/li>\r\n<li class=\"\">Template strings<\/li>\r\n<li class=\"\">Destructuring<\/li>\r\n<li class=\"\">Default + rest + spread<\/li>\r\n<li class=\"\">Let + const<\/li>\r\n<li class=\"\">Iterators + for..of<\/li>\r\n<li class=\"\">Generators<\/li>\r\n<li class=\"\">Unicode<\/li>\r\n<li class=\"\">Modules<\/li>\r\n<li class=\"\">Modules loaders<\/li>\r\n<li class=\"\">Map +set + weakmap + weakset<\/li>\r\n<li class=\"\">Proxies<\/li>\r\n<li class=\"\">Symbols<\/li>\r\n<li class=\"\">Subclassable built-ins<\/li>\r\n<li class=\"\">Promises<\/li>\r\n<li class=\"\">Math + number + string + array + object apis<\/li>\r\n<li class=\"\">Binary dan octal literals<\/li>\r\n<li class=\"\">Reflect API<\/li>\r\n<li class=\"\">Tail calls<\/li>\r\n<\/ul>\r\n<p>Tidak perlu menguasai seluruh fitur diatas. Diharuskan menguasai 8 fitur, diantaranya :<\/p>\r\n<ol>\r\n<li class=\"\">Let + Const<\/li>\r\n<li class=\"\">Arrow Functions<\/li>\r\n<li class=\"\">Default Parameters<\/li>\r\n<li class=\"\">Destructuring<\/li>\r\n<li class=\"\">Rest Parameters + Spread Operator<\/li>\r\n<li class=\"\">Enhanced object literals<\/li>\r\n<li class=\"\">Template literals<\/li>\r\n<li class=\"\">Promises<\/li>\r\n<\/ol>\r\n<h2 id=\"let-const\">1. Let + Const<\/h2>\r\n<h4>Scope<\/h4>\r\n<p><code>Let<\/code>&nbsp;dan&nbsp;<code>Const<\/code>&nbsp;membuat&nbsp;<strong>scope&nbsp;<\/strong>atau wilayah akses variable hanya sebatas di dalam suatu blok&nbsp;<code>{&nbsp; &nbsp;}<\/code>&nbsp;saja, sehingga apabila kita<\/p>\r\n<ul>\r\n<li>Mendeklarasikan variable&nbsp;didalam&nbsp;blok dan mencoba mengaksesnya&nbsp;diluar&nbsp;blok maka hasilnya akan&nbsp;<strong>undifined<\/strong>,<\/li>\r\n<li>Mendeklarasikan variable X diluar blok memiliki nilai 1 dan mendeklarasikan lagi variable X di dalam blok dengan nilai 2, maka ketika variable X diakses di dalam blok variable bernilai 2 dan ketika diliuar bernilai 1.<\/li>\r\n<\/ul>\r\n<h4>Immutability<\/h4>\r\n<p><code>Const<\/code>&nbsp;bersifat seperti variable biasa, bedannya adalah kita&nbsp;<strong>tidak dapat<\/strong>&nbsp;melakukan&nbsp;<strong>reassign<\/strong>\/memberikan nilai baru ke variable tersebut, misalnya ketika kita telah mendeklarasikan variable&nbsp;<code>const X = 42<\/code>&nbsp;dan ingin mengubah nilainya dengan cara&nbsp;<code>X = 100<\/code>&nbsp;maka akan muncul error.<\/p>\r\n<p>Immutability&nbsp;<code>const<\/code>&nbsp;tidak berlaku pada obyek, karena di javascript object bersifat muteable<\/p>\r\n<p><strong>Normal Javascript:<\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">var x = 1;\r\n \r\nif (x === 1) {\r\nvar x = 2;\r\n \r\nconsole.log(x);\r\n\/\/ expected output: 2\r\n}\r\n \r\nconsole.log(x); \/\/ 2 <\/pre>\r\n<p><strong>ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">let x = 1;\r\n \r\nif (x === 1) {\r\n  let x = 2;\r\n \r\n  console.log(x);\r\n  \/\/ expected output: 2\r\n}\r\n \r\nconsole.log(x); \/\/ 1 \r\n\r\nconst number = 42;\r\nnumber = 100; \/\/ Uncaught TypeError: Assignment to constant variable.  <br \/><br \/><\/pre>\r\n<blockquote>\r\n<div>BEST PRACTICE : Selalu gunakan const untuk deklarasi variable, apabila kemungkinan variable tidak akan berubah<\/div>\r\n<\/blockquote>\r\n<div><strong>Bacaan tambahan :<\/strong><\/div>\r\n<div><a href=\"https:\/\/www.w3schools.com\/js\/js_let.asp\">https:\/\/www.w3schools.com\/js\/js_let.asp<\/a><\/div>\r\n<div><a href=\"https:\/\/www.w3schools.com\/js\/js_const.asp\">https:\/\/www.w3schools.com\/js\/js_const.asp<\/a><\/div>\r\n<h2 id=\"arrow-functions\">2. Arrow Functions<\/h2>\r\n<p>Arrow function berfungsi seperfi function biasa hanya saja dengan&nbsp;<strong>dekalarasi yang lebih pendek<\/strong>, selain itu apabila hanya satu statement kita dapat langsung mengembalikan nilai dari statement tanpa perlu menambahkan perintah return<\/p>\r\n<p><strong>Normal Javascript:<\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">const appFunction = function(){\r\n    \/\/ isi Function\r\n}\r\n \r\nappFunction();<\/pre>\r\n<p><strong>ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">const appFunction = () =&gt; {\r\n    \/\/isi function\r\n} \r\n\r\nappFunction();<\/pre>\r\n<div><strong>Bacaan tambahan :<\/strong>&nbsp;<a href=\"https:\/\/www.w3schools.com\/js\/js_arrow_function.asp\">https:\/\/www.w3schools.com\/js\/js_arrow_function.asp<\/a><\/div>\r\n<h2 id=\"default-parameters\">3. Default Parameters<\/h2>\r\n<p>Berfungsi untuk memberikan nilai default pada parameter fungsi, sehingga ketika kita memanggil fungsi dan tidak memberikan nilai di parameternya, maka secara otomatis nilai default yang akan dipakai.<\/p>\r\n<p>Pemanggilan fungsi tanpa memberikan seluruh nilai parameternya bisanya digunakan dalam pembuatan&nbsp;<strong>komponen&nbsp;<\/strong>atau pada fungsi yang memiliki banyak nilai parameter.<\/p>\r\n<pre class=\"wp-block-preformatted\"><code>function multiply(a, b = 1) {\r\n  return a * b;\r\n}\r\n \r\nconsole.log(multiply(5, 2));\r\n\/\/ expected output: 10\r\n \r\nconsole.log(multiply(5));\r\n\/\/ expected output: 5 <\/code><\/pre>\r\n<h2 id=\"destructuring\">4. Destructuring<\/h2>\r\n<p>Desctructuring adalah teknik mengambil nilai dari properties objek secara langsung, sehingga dalam penggunaannya&nbsp;<strong>penulisan menjadi lebih pendek<\/strong>&nbsp;karena dapat langsung menggunakan nama properti dari objek tanpa perlu menulis nama object tersebut.<\/p>\r\n<p><strong>Normal Javascript:<\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">let studentName = {\r\n    firstName: 'Peter',\r\n    lastName: 'Parker'\r\n};\r\n \r\nconst firstName = studentName.firstName;\r\nconst lastName = studentName.lastName; <\/pre>\r\n<p><strong>ES6:<\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">let studentName = {\r\n    firstName: 'Peter',\r\n    lastName: 'Parker'\r\n};\r\n \r\nconst { firstName, lastName } = studentName; \/\/Dapat langsung mengambil value firstName dan lastName\r\n \r\nconsole.log(firstName); \/\/ Peter\r\nconsole.log(lastName); \/\/ Parker <\/pre>\r\n<h2 id=\"rest-parameters-spread-operator\">5. Rest Parameters + Spread Operator<\/h2>\r\n<h3>Rest Parameters<\/h3>\r\n<p>Memungkingkan kita mengambil nilai dari parameter dan memperlakukannya seperti array. Biasanya digunakan di fungsi yang memilki overload parameter dimana kita tidak menuliskan semua parameter fungsi tersebut atau fungsi tersebut tidak memilki jumlah argumen yang pasti.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Rest Parameters\r\n \r\nlet scores = ['98', '95', '93', '90', '87', '85']\r\nlet [first, second, third, ...restOfScores] = scores;\r\n \r\nconsole.log(first) \/\/ 98\r\nconsole.log(second) \/\/ 95\r\nconsole.log(third) \/\/ 93\r\nconsole.log(restOfScores) \/\/ [90, 87, 85]\r\n<\/pre>\r\n<h3>Spread Operator<\/h3>\r\n<p>Merupakan kebalikan dari Rest Parameter, spread operator akan menyebarkan key dan value dari variable dan memberikan nilainya sesuai dengan key atau urutan ke variable penerima.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/spread operator\r\nlet array1 = ['one', 'two']\r\nlet array2 = ['three', 'four']\r\nlet array3 = ['five', 'six']\r\n \r\n\/\/ ES5 Way \/ Normal Javascript\r\n \r\nvar combinedArray = array1.concat(array2).concat(array3)\r\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six']\r\n \r\n\/\/ ES6 Way \r\n \r\nlet combinedArray = [...array1, ...array2, ...array3]\r\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six'] <\/pre>\r\n<h2 id=\"enhanced-object-literals\">6. Shorthand object literals<\/h2>\r\n<p>Deklarasi object menggunakan&nbsp;<em>object literals<\/em>&nbsp;memerlukan kita menuliskan pasangan&nbsp;<em>key : value<\/em>&nbsp;secara spesifik. Tapi di ES6 apabila nama&nbsp;<em>key<\/em>&nbsp;yang kita inginkan sama dengan nama variable untuk&nbsp;<em>value<\/em>&nbsp;key tersebut. Maka kita cukup menulis&nbsp;<strong>nama variable nya saja<\/strong>&nbsp;dan key akan&nbsp;<strong>mengikuti dari nama variable<\/strong>&nbsp;tersebut.<\/p>\r\n<p><strong>Before ES6 Javascript:<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>const fullName = 'John Doe'\r\n \r\nconst john = {\r\n  fullName: fullName\r\n}<\/code><\/pre>\r\n<p><strong>After Es6<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>const fullName = 'John Doe'\r\n \r\nconst john = {fullName}<\/code><\/pre>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<h2>7. Template Literal<\/h2>\r\n<p>Template literlal digunakan dalam pembuatan string yang didalamnya diperlukan nilai dari suatu variable.<\/p>\r\n<div>\r\n<pre>const firstName = \"Zell\";<br \/>const lastName = \"Liew\";<br \/>const&nbsp;teamName&nbsp;=&nbsp;\"unaffiliated\";<br \/><br \/>const&nbsp;theString&nbsp;=&nbsp;`${firstName}&nbsp;${lastName},&nbsp;${teamName}`;<br \/><br \/>console.log(theString); \/\/ Zell Liew, unaffiliated<\/pre>\r\n<\/div>\r\n<p>Jika tanpa menggunakan Template Literals maka untuk menghasilkan keluaran yang sama programnya adalah seperti ini :<\/p>\r\n<p><code>const theString = firstName + ' ' + lastName + ', ' + teamName<\/code><\/p>","waktu_publish":"2021-11-02 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-09-28 06:34:40","updated_at":"2021-10-25 07:29:38","waktu_publish_formatted":" Selasa, 02 November 2021. 07:30:00 WIB."},{"id":1415,"uuid":"4ed5a87f-ff88-4903-bc4e-60ddf5b66f07","author_user_id":12081,"materi_section_id":387,"judul":"Tugas 7 - ES6","permalink":"tugas-7-es6","konten":"<div class=\"entry-content\">\r\n<p>Pada tugas kali ini buatlah folder baru (Tugas 7 &ndash; ES6) yang berisikan file dengan nama&nbsp;<strong>es6.js<\/strong>&nbsp;. Simpan folder tugas ini di dalam folder repository project yang dikerjakan di folder kemarin.<\/p>\r\n<p><strong>Petunjuk<\/strong><\/p>\r\n<p>Ubahlah Code berikut dari ES5 ke ES6:<\/p>\r\n<h3 id=\"1-mengubah-fungsi-menjadi-fungsi-arrow\">1. Mengubah fungsi menjadi fungsi arrow<\/h3>\r\n<pre class=\"wp-block-preformatted\">const golden = function goldenFunction(){\r\n  console.log(\"this is golden!!\")\r\n}\r\n \r\ngolden()<\/pre>\r\n<h3 id=\"2-sederhanakan-menjadi-object-literal-di-es6\">2. Sederhanakan menjadi Object literal di ES6<\/h3>\r\n<p>return dalam fungsi di bawah ini masih menggunakan object literal dalam ES5, ubahlah menjadi bentuk yang lebih sederhana di ES6.<\/p>\r\n<pre class=\"wp-block-preformatted\">const newFunction = function literal(firstName, lastName){\r\n  return {\r\n    firstName: firstName,\r\n    lastName: lastName,\r\n    fullName: function(){\r\n      console.log(firstName + \" \" + lastName)\r\n      return \r\n    }\r\n  }\r\n}\r\n \r\n\/\/Driver Code<br \/>const person = newFunction(\"William\", \"Imoh\");<br \/>console.log(person);<br \/>person.fullName(); &nbsp;<br \/><br \/>\/\/Output<br \/>{<br \/>&nbsp; firstName: 'William',<br \/>&nbsp; lastName: 'Imoh',<br \/>&nbsp; fullName: [Function: fullName]<br \/>}<br \/>William Imoh <\/pre>\r\n<h3 id=\"3-destructuring\">3. Destructuring<\/h3>\r\n<p>Diberikan sebuah objek sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">const newObject = {\r\n  firstName: \"Harry\",\r\n  lastName: \"Potter Holt\",\r\n  destination: \"Hogwarts React Conf\",\r\n  occupation: \"Deve-wizard Avocado\",\r\n  spell: \"Vimulus Renderus!!!\"\r\n}<\/pre>\r\n<p>dalam ES5 untuk mendapatkan semua nilai dari object tersebut kita harus tampung satu per satu:<\/p>\r\n<pre class=\"wp-block-preformatted\">const firstName = newObject.firstName;\r\nconst lastName = newObject.lastName;\r\nconst destination = newObject.destination;\r\nconst occupation = newObject.occupation;<\/pre>\r\n<p>Gunakan metode destructuring dalam ES6 untuk mendapatkan semua nilai dalam object dengan lebih singkat (1 line saja)<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Driver code\r\nconsole.log(firstName, lastName, destination, occupation)<\/pre>\r\n<h3 id=\"4-array-spreading\">4. Array Spreading<\/h3>\r\n<p>Kombinasikan dua array berikut menggunakan array spreading ES6<\/p>\r\n<pre class=\"wp-block-preformatted\">const west = [\"Will\", \"Chris\", \"Sam\", \"Holly\"]\r\nconst east = [\"Gill\", \"Brian\", \"Noel\", \"Maggie\"]\r\nconst combined = west.concat(east)\r\n\/\/Driver Code\r\nconsole.log(combined)<\/pre>\r\n<h3 id=\"5-template-literals\">5. Template Literals<\/h3>\r\n<p>sederhanakan string berikut agar menjadi lebih sederhana menggunakan template literals ES6:<\/p>\r\n<pre class=\"wp-block-preformatted\">const planet = \"earth\"\r\nconst view = \"glass\"\r\nvar before = 'Lorem ' + view + ' dolor sit amet, ' +  \r\n    'consectetur adipiscing elit, ' + planet + ' do eiusmod tempor ' +\r\n    'incididunt ut labore et dolore magna aliqua. Ut enim' +\r\n    ' ad minim veniam'\r\n \r\n\/\/ Driver Code\r\nconsole.log(before) <\/pre>\r\n<p>Jika sudah selesai dikerjakan, silahkan&nbsp;<em>push&nbsp;<\/em>hasil pekerjaan Anda ke&nbsp;<em>repository&nbsp;<\/em>Gitlab masing-masing (gunakan&nbsp;<em>repository project<\/em>&nbsp;yang sama&nbsp;<strong>&nbsp;<\/strong>yang digunakan folder Tugas 7). Jangan lupa&nbsp;<em>submit link commit<\/em> Anda ke member area sanbercode.com.<\/p>\r\n<\/div>","waktu_publish":"2021-11-02 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-09-28 06:35:29","updated_at":"2021-10-25 07:29:46","waktu_publish_formatted":" Selasa, 02 November 2021. 07:30:00 WIB."}]},{"id":389,"uuid":"dda81ec6-c4a4-4e95-a484-edc5ff5c04c7","materi_id":27,"nama":"Hari 8 - JavaScript: Asynchronous","permalink":"hari-8-javascript-asynchronous","urutan":9,"created_by":12081,"updated_by":12081,"created_at":"2021-09-29 07:34:41","updated_at":null,"posting":[{"id":1420,"uuid":"5b58427b-3f6e-452a-baeb-a4901600b5fd","author_user_id":12081,"materi_section_id":389,"judul":"JavaScript: Asynchronous","permalink":"javascript-asynchronous","konten":"<p>Berkenalan dengan callback dan promise untuk mengatasi asynchronous di Javascript.<\/p>\r\n<p>Di dalam dunia pemrograman terdapat dua cara dalam menjalankan program: Synchronous dan Asynchronous. Synchronous artinya program berjalan secara berurutan sedangkan Asynchronous artinya program berjalan bersama-sama.<\/p>\r\n<p>Terkadang di dalam program yang kita buat terdapat suatu sintaks yang mengharuskan code pada baris tersebut untuk dijalankan terlebih dahulu sebelum menjalankan sintaks pada baris selanjutnya. Hal ini dikenal dengan istilah&nbsp;<strong>blocking<\/strong>. Sebaliknya&nbsp;<strong>non-blocking<\/strong>&nbsp;artinya program berjalan dengan mengeksekusi sintaks dari baris ke baris secara paralel (bersama-sama) .<\/p>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter size-large\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LmaxxI-WCdSbno_EMIf%2F-Lmb1Y86xkSMjjQR9D_D%2Fcontrol-io.svg?alt=media&amp;token=28454ce2-c28b-4149-bd72-7fa57d83737c\" alt=\"\" \/><\/figure>\r\n<\/div>\r\n<p>Perhatikan contoh program di bawah ini:<\/p>\r\n<pre class=\"wp-block-preformatted\">setTimeout(function() {\r\n  console.log(\"saya dijalankan belakangan\")\r\n}, 3000)\r\n \r\nconsole.log(\"saya dijalankan pertama\") <\/pre>\r\n<p>Jika kita jalankan program di atas, maka yang akan tampil terlebih dahulu di console adalah &ldquo;saya dijalankan pertama&rdquo; walaupun sintaksnya ditulis belakangan setelah function setTimeout. Function setTimeout di atas merupakan salah satu contoh function asynchronous di Javascript.<\/p>\r\n<p>Cara untuk mengatasi Asynchronous seperti function setTimeout adalah dengan&nbsp;<strong>Callback<\/strong>&nbsp;atau dengan&nbsp;<strong>Promise<\/strong>.<\/p>\r\n<h2 id=\"callback\">Callback&nbsp;<\/h2>\r\n<h3 id=\"membuat-callback\">Membuat Callback&nbsp;<\/h3>\r\n<p>Callback adalah function yang dipanggil ketika function lain selesai menjalankan programnya. Contoh sederhana Callback adalah pada function setTimeout di atas. function setTimeout menerima dua parameter yaitu callback dan waktu tunggu (timeout). function tersebut menjalankan timeout terlebih dahulu lalu ketika waktu yang diset sudah dilewati maka function callback akan dipanggil.<\/p>\r\n<p>Contoh untuk membuat callback seperti berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Deklarasi function yang memilik callback sebagai parameter\r\nfunction periksaDokter(nomerAntri, callback) {\r\n    if(nomerAntri &gt; 50 ) {\r\n        callback(false)\r\n    } else if(nomerAntri &lt; 10) {\r\n        callback(true)\r\n    }    \r\n} <\/pre>\r\n<p>Misalkan kita ingin periksa ke dokter yang antriannya sering panjang dan memakai nomer antri melalui pemesanan online. Setelah registrasi online lalu kita melakukan pemesanan dan menunggu nomer antrian. Function di atas menerima parameter nomer antri dan sebuah callback. Dilakukan pengecekan kondisi jika nomor antriannya lebih dari 50 maka lebih baik jalan-jalan dulu daripada menunggu, tapi jika nomor antriannya kurang dari 10 tentunya kita harus standby lagi di klinik untuk dipanggil.<\/p>\r\n<h3 id=\"menjalankan-callback\">Menjalankan Callback<\/h3>\r\n<p>Setelah dideklarasi function yang memiliki callback, kini kita jalankan function tersebut.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Menjalankan function periksaDokter yang sebelumnya sudah dideklarasi\r\nperiksaDokter(65, function(check) {\r\n    if(check) {\r\n        console.log(\"sebentar lagi giliran saya\")\r\n    } else {\r\n        console.log(\"saya jalan-jalan dulu\")\r\n    }\r\n}) <\/pre>\r\n<p>Karena kita tidak ingin menunggu maka kita gunakan callback untuk mengecek apakah nomer antriannya masih lama atau tidak. Jadi ketika dicek ternyata nomer antriannya masih lama maka hasil return (callback) dari function periksaDokter bernilai false (check = false), sebaliknya jika sudah sebentar lagi akan diberikan callback dengan nilai true (check = true) .<\/p>\r\n<p>Ketika menjalankan function periksaDokter, diberikan parameter pertama yaitu nomer antrian 65 dan parameter kedua adalah sebuah deklarasi function yang merupakan callback. Seperti sudah dideklarasikan di periksaDokter bahwa callback dipanggil dengan satu parameter bernilai boolean.<\/p>\r\n<h2 id=\"promise\">Promise&nbsp;<\/h2>\r\n<p>Sesuai dengan namanya, Promise berarti janji. Seperti janji yang biasanya memakan waktu dan janji bisa ditepati (resolve) atau diingkari (reject). Misalkan pada contoh di bawah ini seorang anak dijanjikan mendapatkan sebuah handphone baru oleh Ibunya. Jika Ibunya sedang bahagia maka janji sebuah handphone baru ditepati, selain itu jika ibunya sedang marah maka janji diingkari.<\/p>\r\n<h3 id=\"membuat-promise\">Membuat Promise<\/h3>\r\n<p>Cara membuat promise adalah dengan menginstance sebuah class Promise. class Promise tersebut sudah disediakan di Javascript. Parameter yang dikirim ketika melakukan instance class Promise yaitu sebuah function yang menerima dua parameter yaitu resolve dan reject.<\/p>\r\n<pre class=\"wp-block-preformatted\">var isMomHappy = false;\r\n \r\n\/\/ Promise\r\nlet willIGetNewPhone = new Promise(\r\n    function (resolve, reject) {\r\n        if (isMomHappy) {\r\n            let phone = {\r\n                brand: 'Samsung',\r\n                color: 'black'\r\n            };\r\n            resolve(phone); \/\/ fulfilled atau janji dipenuhi\r\n        } else {\r\n            let reason = new Error('mom is not happy');\r\n            reject(reason); \/\/ reject (ingkar)\r\n        }\r\n \r\n    }\r\n); <\/pre>\r\n<h3 id=\"menjalankan-promise\">Menjalankan Promise&nbsp;<\/h3>\r\n<p>Menjalankan promise seperti kita menagih janji yang sudah dibuat.<\/p>\r\n<pre class=\"wp-block-preformatted\">function askMom() {\r\n    willIGetNewPhone\r\n        .then(function (fulfilled) {\r\n            \/\/ yay, you got a new phone\r\n            console.log(fulfilled);\r\n         \/\/ output: { brand: 'Samsung', color: 'black' }\r\n        })\r\n        .catch(function (error) {\r\n            \/\/ oops, mom don't buy it\r\n            console.log(error.message);\r\n         \/\/ output: 'mom is not happy'\r\n        });\r\n}\r\n \r\n\/\/ Tanya Mom untuk menagih janji\r\naskMom() <\/pre>\r\n<p>Untuk menagih janji dibuat sebuah function dengan nama askMom yang isinya adalah menagih janji willIGetNewPhone. Ketika anak menagih janji menggunakan function askMom() maka promise willIGetNewPhone dipanggil dan terdapat dua methods yaitu&nbsp;<code>then<\/code>&nbsp;dan&nbsp;<code>catch<\/code>&nbsp;. Method .then() dan .catch() keduanya menerima parameter function. Resolve yang dijalankan di pendeklarasian promise akan mengirim handphone baru dan ditangkap di method&nbsp;<code>.then()<\/code>. Sedangkan reject pada pendeklarasian promise akan mengirim pesan error atau alasan kenapa janji diingkari dan ditangkap di method&nbsp;<code>.catch()<\/code>.<\/p>\r\n<div id=\"gtx-trans\" style=\"position: absolute; left: -45px; top: -6.5625px;\">\r\n<div class=\"gtx-trans-icon\">&nbsp;<\/div>\r\n<\/div>","waktu_publish":"2021-11-03 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-09-29 07:35:12","updated_at":"2021-10-25 07:29:57","waktu_publish_formatted":" Rabu, 03 November 2021. 07:30:00 WIB."},{"id":1421,"uuid":"98aadec3-5e68-403b-93ad-b35460b05898","author_user_id":12081,"materi_section_id":389,"judul":"Tugas 8 - Asynchronous","permalink":"tugas-8-asynchronous","konten":"<blockquote class=\"wp-block-quote\">\r\n<p>Menggunakan callback dan promise<\/p>\r\n<\/blockquote>\r\n<p>Pada tugas kali ini buatlah folder baru (Tugas 8 &ndash; Asynchronous) yang berisikan 4 file dengan nama&nbsp;<code>index.js<\/code>,&nbsp;<code>callback.js<\/code>,&nbsp;<code>index2.js<\/code>&nbsp;dan&nbsp;<code>promise.js<\/code>. Simpan folder tugas ini di dalam folder repository project yang dikerjakan pada Folder&nbsp;<strong>BootcampReactNative&nbsp;<\/strong>kemarin.<\/p>\r\n<h2 id=\"soal-no-1-callback-baca-buku\">Soal No. 1 (Callback Baca Buku)<\/h2>\r\n<p>Kita mempunyai tumpukan buku untuk dibaca. Setiap buku memiliki waktu yang dibutuhkan untuk menghabiskan buku tersebut. Sudah disediakan function readBooks yang menerima tiga parameter: waktu, buku yang dibaca, dan sebuah callback. Salin code berikut ke dalam sebuah file bernama&nbsp;<code>callback.js<\/code>&nbsp;.<\/p>\r\n<p><img style=\"height: 80%; width: 80%; object-fit: contain;\" src=\"https:\/\/dl.dropboxusercontent.com\/s\/xbq5y65qdyo7ffr\/8.1.png\" \/><\/p>\r\n<p>Masih satu folder dengan file&nbsp;<code>callback.js<\/code>, buatlah sebuah file dengan nama&nbsp;<code>index.js<\/code>&nbsp;lalu tuliskan code seperti berikut.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ di index.js\r\nconst readBooks = require('.\/callback.js')\r\n \r\nconst books = [\r\n    {name: 'LOTR', timeSpent: 3000}, \r\n    {name: 'Fidas', timeSpent: 2000}, \r\n    {name: 'Kalkulus', timeSpent: 4000}\r\n]\r\n \r\n\/\/ Tulis code untuk memanggil function readBooks di sini<\/pre>\r\n<p>lanjutkan code pada&nbsp;<code>index.js<\/code>&nbsp;untuk memanggil function readBooks. Buku yang akan dihabiskan adalah buku-buku di dalam array&nbsp;<code>books<\/code>. Pertama function readBooks menerima input waktu yang dimiliki yaitu 10000 ms (10 detik) dan books pada indeks ke-0. Setelah mendapatkan callback sisa waktu yang dikirim lewat callback, sisa waktu tersebut dipakai untuk membaca buku pada indeks ke-1. Begitu seterusnya sampai waktu habis atau semua buku sudah terbaca. Untuk melihat output, jalankan file&nbsp;<code>index.js<\/code>&nbsp;dengan node js :<\/p>\r\n<pre class=\"wp-block-preformatted\"> $ node index.js<\/pre>\r\n<p>Output yang diharapkan dari program adalah seperti pada gambar berikut<\/p>\r\n<p><img src=\"https:\/\/dl.dropboxusercontent.com\/s\/gqd1hcpkzl91ot9\/8.2_Callback.gif\" \/><\/p>\r\n<h2 id=\"soal-no-2-promise-baca-buku\">Soal No. 2 (Promise Baca Buku)<\/h2>\r\n<p>Setelah no.1 berhasil, implementasikan function readBooks yang menggunakan callback di atas namun sekarang menggunakan Promise. Buatlah sebuah file dengan nama&nbsp;<code>promise.js<\/code>. Tulislah sebuah function dengan nama readBooksPromise yang me-return sebuah promise seperti berikut:<\/p>\r\n<p><img style=\"height: 80%; width: 80%; object-fit: contain;\" src=\"https:\/\/dl.dropboxusercontent.com\/s\/fwctc03vygnktgx\/8.2.png\" \/><\/p>\r\n<p>Masih di folder yang sama dengan promise.js, buatlah sebuah file dengan nama&nbsp;<code>index2.js<\/code>. Tuliskan code sebagai berikut<\/p>\r\n<pre class=\"wp-block-preformatted\">const readBooksPromise = require('.\/promise.js')\r\n \r\nconst books = [\r\n    {name: 'LOTR', timeSpent: 3000}, \r\n    {name: 'Fidas', timeSpent: 2000}, \r\n    {name: 'Kalkulus', timeSpent: 4000}\r\n]\r\n \r\n\/\/ Lanjutkan code untuk menjalankan function readBooksPromise <\/pre>\r\n<p>Lakukan hal yang sama dengan soal no.1, habiskan waktu selama 10000 ms (10 detik) untuk membaca semua buku dalam array books.!<\/p>\r\n<p>Output yang diharapkan dari program adalah seperti pada gambar berikut<\/p>\r\n<p><img src=\"https:\/\/dl.dropboxusercontent.com\/s\/sa7j0kx512ltc5w\/8.1_Promise.gif\" \/><\/p>\r\n<p>Jika sudah selesai dikerjakan, silahkan&nbsp;<em>push&nbsp;<\/em>hasil pekerjaan Anda ke&nbsp;<em>repository&nbsp;<\/em>Gitlab masing-masing (gunakan&nbsp;<em>repository project<\/em>&nbsp;yang sama&nbsp;<strong>BootcampReactNative&nbsp;<\/strong>yang digunakan folder Tugas 8). Jangan lupa&nbsp;<em>submit link commit<\/em> Anda ke member area sanbercode.com<\/p>","waktu_publish":"2021-11-03 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-09-29 07:35:23","updated_at":"2021-11-02 23:38:48","waktu_publish_formatted":" Rabu, 03 November 2021. 07:30:00 WIB."}]},{"id":390,"uuid":"2037c3ea-e3c3-4e2b-97cf-e987d5ca7513","materi_id":27,"nama":"Hari 9 - JavaScript: Class","permalink":"hari-9-javascript-class","urutan":10,"created_by":12081,"updated_by":12081,"created_at":"2021-09-30 07:43:47","updated_at":null,"posting":[{"id":1424,"uuid":"7f047bba-0701-4ed7-a71b-965c29d55dd5","author_user_id":12081,"materi_section_id":390,"judul":"JavaScript: Class","permalink":"javascript-class","konten":"<p>Belajar mengenai Class dan penggunaannya di Javascript.<\/p>\r\n<p>Pada materi sebelumnya, telah dipelajari tentang Object Literals di Javascript. Dengan Object kita dapat merepresentasikan segala hal termasuk program yang akan kita buat dengan Javascript. Materi kali ini akan mempelajari object dalam bentuk Class.<\/p>\r\n<p>Di dalam dunia pemrograman dikenal sebuah konsep dengan nama OOP atau Object Oriented Programming. Secara sederhana, dengan konsep OOP maka segala sesuatu dapat kita anggap sebagai sebuah Object atau cetakan (Blueprint). Contohnya terdapat Object Class bernama &ldquo;Car&rdquo; yang berarti mobil. Suatu (cetakan) mobil biasanya memiliki nama dan dibuat oleh sebuah pabrikan otomotif (factory). Selain itu mobil dapat memiliki fungsi untuk berjalan, mengerem, membunyikan klakson, dll.<\/p>\r\n<h2 id=\"mendefinisikan-sebuah-class\" style=\"color: #23b2e7;\" data-darkreader-inline-color=\"\">Mendefinisikan Sebuah Class&nbsp;<\/h2>\r\n<p>Class sebetulnya adalah sebuah functions yang spesial, dan seperti function yang kita ketahui sebelumnya bahwa functions dapat dideklarasikan dan dipanggil begitu pula dengan Class.<\/p>\r\n<h3 id=\"deklarasi-class\" style=\"color: #23b2e7;\" data-darkreader-inline-color=\"\">Deklarasi Class<\/h3>\r\n<p>Cara yang pertama untuk membuat sebuah class yaitu dengan mendeklarasikannya. Caranya adalah tuliskan &ldquo;Class&rdquo; diikuti dengan nama class-nya.<\/p>\r\n<pre class=\"wp-block-preformatted\">class Car {\r\n    constructor(brand,factory) {\r\n        this.brand = brand\r\n        this.factory = factory\r\n        this.sound = \"honk! honk!vroomvroom\"\r\n    }\r\n}<\/pre>\r\n<h3 id=\"ekspresi-class\" style=\"color: #23b2e7;\" data-darkreader-inline-color=\"\">Ekspresi Class<\/h3>\r\n<p>Cara lain untuk membuat sebuah class yaitu dengan cara membuat sebuah variabel. Class tersebut boleh diberikan nama atau tidak diberi nama. contohnya sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Tidak diberi nama \r\nvar Car = class {\r\n    constructor(brand, factory) {\r\n        this.brand = brand\r\n        this.factory = factory\r\n    }\r\n}\r\n \r\nconsole.log(Car.name) \/\/ Car\r\n \r\n\/\/ Diberi nama\r\nvar Car = class Car2 {\r\n    constructor(brand, factory) {\r\n        this.brand = brand\r\n        this.factory = factory\r\n    }\r\n}\r\nconsole.log(Car.name) \/\/ Car2<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Nama sebuah Class biasanya menggunakan kapital pada huruf pertama nya. Jika terdapat dua kata atau lebih maka huruf pertama pada kata yang selanjutnya harus kapital.<\/p>\r\n<pre class=\"wp-block-preformatted\"><code>class Car{} \/\/ BENAR<\/code><br \/><code>class car{} \/\/ SALAH<\/code><br \/><code>class SportsCar {} \/\/ BENAR<\/code><br \/><code>class sportscar {} \/\/ SALAH <\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<\/blockquote>\r\n<h2 id=\"method\" style=\"color: #23b2e7;\" data-darkreader-inline-color=\"\">Method<\/h2>\r\n<p>Sintaks constructor pada class merupakan method khusus, dimana dilakukan inisialisasi properties, yang akan dieksekusi secara otomatis ketika class dibuat, dan ia harus memiliki nama &ldquo;constructor&rdquo;. (Jika tidak dituliskan, maka Javascript akan menambahkan method constructor kosong secara otomatis).<\/p>\r\n<p>Kita juga dapat membuat method sendiri, dengan sintaks yang sudah biasa kita gunakan:<\/p>\r\n<pre class=\"wp-block-preformatted\">class&nbsp;Car {\r\n&nbsp;&nbsp;constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= brand;\r\n&nbsp;&nbsp;}\r\n&nbsp; present() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"I have a \"&nbsp;+&nbsp;this.carname;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nconsole.log(mycar.present()) \/\/ I have a Ford<\/pre>\r\n<p>Seperti yang terlihat pada contoh di atas, method dapat digunakan dengan cara memanggil nama class dan method nya ditambah dengan kurung buka dan kurung tutup. Parameter bisa dimasukan di dalam tanda kurung jika diperlukan, seperti pada contoh di bawah.<\/p>\r\n<pre class=\"wp-block-preformatted\">class&nbsp;Car {\r\n&nbsp;&nbsp;constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= brand;\r\n&nbsp;&nbsp;}\r\n&nbsp; present(x) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x +&nbsp;\", I have a \"&nbsp;+&nbsp;this.carname;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nconsole.log(mycar.present(\"Hello\"));<\/pre>\r\n<h2 id=\"static-method\" style=\"color: #23b2e7;\" data-darkreader-inline-color=\"\">Static Method<\/h2>\r\n<p>Static methods didefinisikan hanya untuk class itu sendiri. sehingga, jika melihat pada contoh sebelumnya static method hanya bisa diakses melalui Car, dan tidak bisa melalui mycar:<\/p>\r\n<pre class=\"wp-block-preformatted\"> class&nbsp;Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;=&nbsp;brand;\r\n&nbsp;&nbsp;}\r\n&nbsp;&nbsp;static&nbsp;hello() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"Hello!!\";\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\n\r\n\/\/ memanggil 'hello()' pada class Car:\r\nconsole.log(Car.hello());\r\n\r\n\/\/ dan tidak bisa pada 'mycar':\r\n\/\/ console.log(mycar.hello());\r\n\/\/ jika menggunakan sintaks tersebut akan memunculkan error.<\/pre>\r\n<h2 id=\"inheritance\" style=\"color: #23b2e7;\" data-darkreader-inline-color=\"\">Inheritance<\/h2>\r\n<p>Untuk membuat inheritance dari suatu class, gunakan keyword&nbsp;<code>extends<\/code>. Class yang dibuat dengan metode inheritance, akan memiliki method yang sama dengan class asalnya. Contoh berikut adalah class Model yang merupakan inheritance dari class Car:<\/p>\r\n<pre class=\"wp-block-preformatted\"> class&nbsp;Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;=&nbsp;brand;\r\n&nbsp;&nbsp;}\r\n&nbsp; present() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;'I have a '&nbsp;+&nbsp;this.carname;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nclass&nbsp;Model&nbsp;extends&nbsp;Car {\r\n&nbsp;&nbsp;constructor(brand, mod) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;super(brand);\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.model&nbsp;= mod;\r\n&nbsp;&nbsp;}\r\n&nbsp; show() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.present() +&nbsp;', it is a '&nbsp;+&nbsp;this.model;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Model(\"Ford\",&nbsp;\"Mustang\");\r\nconsole.log(mycar.show());<\/pre>\r\n<p>Method&nbsp;<code>super()<\/code>&nbsp;mengacu pada class asalnya, dimana dengan menggunakan method&nbsp;<code>super()<\/code>&nbsp; di dalam method constructor, kita dapat memanggil constructor class asalnya dan mengakses property dan method nya.<\/p>\r\n<h2 id=\"getters-dan-setters\" style=\"color: #23b2e7;\" data-darkreader-inline-color=\"\">Getters dan Setters<\/h2>\r\n<p>Pada class juga kita dapat menggunakan getter dan setter. getter dan setter dapat digunakan untuk melakukan proses tertentu pada suatu property, sebelum property tersebut digunakan. Untuk menambahak getter dan setter pada class, gunakan keyword&nbsp;<code>get<\/code>&nbsp;dan&nbsp;<code>set<\/code>. (Meskipun getter merupakan sebuah method, namun dalam menggunakannya tidak digunakan &ldquo;( )&rdquo; setelah memanggil method tersebut, seperti pada contoh di bawah).<\/p>\r\n<pre class=\"wp-block-preformatted\"> class&nbsp;Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= brand;\r\n&nbsp; }\r\n&nbsp; get cnam() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.carname;\r\n&nbsp; }\r\n&nbsp; set cnam(x) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= x;\r\n&nbsp; }\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nconsole.log(mycar.cnam); \/\/ Ford\r\n\/\/ getter cnam digunakan tanpa \"()\"<\/pre>\r\n<p>Biasanya untuk membedakan method dengan property, property ditulis dengan menggunakan &ldquo;_&rdquo; di depan namanya, sementara method (termasuk getter dan setter) tidak.<\/p>\r\n<pre class=\"wp-block-preformatted\">class&nbsp;Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this._carname&nbsp;= brand;\r\n&nbsp; }\r\n&nbsp; get carname() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this._carname;\r\n&nbsp; }\r\n&nbsp; set carname(x) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this._carname&nbsp;= x;\r\n&nbsp; }\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nmycar.carname&nbsp;=&nbsp;\"Volvo\"; \/\/ memanggil setter, mengubah Ford menjadi Volvo\r\nconsole.log(mycar.carname); \/\/ Volvo<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>sumber:&nbsp;<a href=\"https:\/\/www.w3schools.com\/js\/js_classes.asp\">w3schools.com<\/a><\/p>\r\n<\/blockquote>\r\n<div id=\"gtx-trans\" style=\"position: absolute; left: -38px; top: 65.4375px;\">\r\n<div class=\"gtx-trans-icon\">&nbsp;<\/div>\r\n<\/div>","waktu_publish":"2021-11-04 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-09-30 07:44:09","updated_at":"2021-10-25 07:30:42","waktu_publish_formatted":" Kamis, 04 November 2021. 07:30:00 WIB."},{"id":1425,"uuid":"d13d502d-5bb2-4f33-bfc6-f26c03deb4b7","author_user_id":12081,"materi_section_id":390,"judul":"Tugas 9 - Class","permalink":"tugas-9-class","konten":"<p>Pada tugas kali ini buatlah folder baru (Tugas 9 &ndash; Class) yang berisikan file dengan nama <strong>class.js<\/strong>&nbsp;. Simpan folder tugas ini di dalam folder repository project yang dikerjakan pada Folder Kemarin.<\/p>\r\n<h2 id=\"1-animal-class\" style=\"color: #23b2e7;\" data-darkreader-inline-color=\"\">1. Animal Class&nbsp;<\/h2>\r\n<p>Terdapat sebuah class Animal yang memiliki sebuah constructor name, default property legs = 4 dan cold_blooded = false.<\/p>\r\n<h3 id=\"release-0\" style=\"color: #23b2e7;\" data-darkreader-inline-color=\"\"><strong>Release 0<\/strong><\/h3>\r\n<p>Buatlah class Animal yang menerima satu parameter constructor berupa name. Secara default class Animal akan memiliki property yaitu legs (jumlah kaki) yang bernilai 4 dan cold_blooded bernilai false.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Gunakan method getter untuk mengakses property di dalam class<\/p>\r\n<\/blockquote>\r\n<pre class=\"wp-block-preformatted\">class Animal {\r\n    \/\/ Code class di sini\r\n}\r\n \r\nconst sheep = new Animal(\"shaun\");\r\n \r\nconsole.log(sheep.name) \/\/ \"shaun\"\r\nconsole.log(sheep.legs) \/\/ 4\r\nconsole.log(sheep.cold_blooded) \/\/ false<\/pre>\r\n<h3 id=\"release-1\" style=\"color: #23b2e7;\" data-darkreader-inline-color=\"\"><strong>Release 1<\/strong><\/h3>\r\n<p>Buatlah class Frog dan class Ape yang merupakan inheritance dari class Animal. Perhatikan bahwa&nbsp;<strong>Ape (Kera)<\/strong>&nbsp;merupakan&nbsp;<strong>hewan berkaki 2<\/strong>, hingga dia tidak menurunkan sifat jumlah kaki 4 dari class Animal. class<strong>&nbsp;Ape&nbsp;<\/strong>memiliki<strong>&nbsp;function yell()&nbsp;<\/strong>yang&nbsp;<strong>menampilkan &ldquo;Auooo&rdquo;<\/strong>&nbsp;dan class&nbsp;<strong>Frog<\/strong>&nbsp;yang merupakan hewan berdarah dingin sehingga memiliki property&nbsp;<strong>cold_blooded true<\/strong>&nbsp;serta memiliki&nbsp;<strong>function jump()<\/strong>&nbsp;yang akan&nbsp;<strong>menampilkan &ldquo;hop hop&rdquo;<\/strong>.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Code class Ape dan class Frog di sini &nbsp;<\/pre>\r\n<pre>const sungokong = new Ape(\"kera sakti\");<br \/>console.log(sungokong.name); \/\/ \"kera sakti\"<br \/>console.log(sungokong.legs); \/\/ 2<br \/>console.log(sungokong.cold_blooded); \/\/ false<br \/>sungokong.yell(); \/\/ \"Auooo\"<br \/><br \/>const kodok = new Frog(\"buduk\");<br \/>console.log(kodok.name); \/\/ \"buduk\"<br \/>console.log(kodok.legs); \/\/ 4<br \/>console.log(kodok.cold_blooded); \/\/ true<br \/>kodok.jump(); \/\/ \"hop hop\"<\/pre>\r\n<h2 id=\"2-function-to-class\" style=\"color: #23b2e7;\" data-darkreader-inline-color=\"\">2. Function to Class<\/h2>\r\n<p>Terdapat sebuah class dengan nama&nbsp;<code>Clock<\/code>&nbsp;yang ditulis seperti penulisan pada function, ubahlah fungsi tersebut menjadi class dan pastikan fungsi tersebut tetap berjalan dengan baik. Jalankan fungsi di terminal\/console Anda untuk melihat hasilnya. (tekan tombol Ctrl + C pada terminal untuk menghentikan method clock.start())<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Hint: Fokus soal ini hanya pada kegiatan mengubah struktur function&nbsp;<code>Clock&nbsp;<\/code>menjadi class. Jangan lupa menambahkan constructor di dalam class, dan ubah function di dalam&nbsp;<code>Clock&nbsp;<\/code>menjadi method pada class.<\/p>\r\n<\/blockquote>\r\n<pre class=\"wp-block-preformatted\">function&nbsp;Clock({&nbsp;template&nbsp;})&nbsp;{\r\n&nbsp;&nbsp;\r\n&nbsp;&nbsp;var&nbsp;timer;\r\n\r\n&nbsp;&nbsp;function&nbsp;render()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;date&nbsp;=&nbsp;new&nbsp;Date();\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;hours&nbsp;=&nbsp;date.getHours();\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(hours&nbsp;&lt;&nbsp;10)&nbsp;hours&nbsp;=&nbsp;'0'&nbsp;+&nbsp;hours;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;mins&nbsp;=&nbsp;date.getMinutes();\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mins&nbsp;&lt;&nbsp;10)&nbsp;mins&nbsp;=&nbsp;'0'&nbsp;+&nbsp;mins;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;secs&nbsp;=&nbsp;date.getSeconds();\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(secs&nbsp;&lt;&nbsp;10)&nbsp;secs&nbsp;=&nbsp;'0'&nbsp;+&nbsp;secs;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;output&nbsp;=&nbsp;template\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace('h',&nbsp;hours)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace('m',&nbsp;mins)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace('s',&nbsp;secs);\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(output);\r\n&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;this.stop&nbsp;=&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;clearInterval(timer);\r\n&nbsp;&nbsp;};\r\n\r\n&nbsp;&nbsp;this.start&nbsp;=&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;render();\r\n&nbsp;&nbsp;&nbsp;&nbsp;timer&nbsp;=&nbsp;setInterval(render,&nbsp;1000);\r\n&nbsp;&nbsp;};\r\n\r\n}\r\n\r\nvar&nbsp;clock&nbsp;=&nbsp;new&nbsp;Clock({template:&nbsp;'h:m:s'});\r\nclock.start(); <\/pre>\r\n<p>function di atas diubah menjadi struktur class seperti berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">class Clock {\r\n    \/\/ Code di sini\r\n}\r\n\r\nvar&nbsp;clock&nbsp;=&nbsp;new&nbsp;Clock({template:&nbsp;'h:m:s'});\r\nclock.start();  <\/pre>\r\n<p>Jika sudah selesai dikerjakan, silahkan&nbsp;<em>push&nbsp;<\/em>hasil pekerjaan Anda ke&nbsp;<em>repository&nbsp;<\/em>Gitlab masing-masing (gunakan&nbsp;<em>repository project<\/em>&nbsp;yang sama&nbsp;<strong>BootcampReactNative&nbsp;<\/strong>yang digunakan folder Tugas 12). Jangan lupa <em>submit link commit<\/em> Anda ke member area sanbercode.com<\/p>","waktu_publish":"2021-11-04 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-09-30 07:44:20","updated_at":"2021-10-25 07:30:48","waktu_publish_formatted":" Kamis, 04 November 2021. 07:30:00 WIB."}]},{"id":391,"uuid":"ca6982bf-98a4-4e02-9c36-ad8a13645825","materi_id":27,"nama":"Hari 10 - React Native: Intro Expo & React Thinking","permalink":"hari-10-react-native-intro-expo-react-thinking","urutan":11,"created_by":12081,"updated_by":12081,"created_at":"2021-10-01 06:16:06","updated_at":null,"posting":[{"id":1426,"uuid":"a1d2f645-10f0-4758-a044-5ae9e5b87538","author_user_id":12081,"materi_section_id":391,"judul":"React Native: Intro React Thinking","permalink":"react-native-intro-react-thinking","konten":"<div class=\"entry-content\">\r\n<p>Akhirnya mulai kita mengenal React Native secara langsung. Namun sebelum mulai ngoding menggunakan React Native, terlebih dahulu kita pelajari algoritma data cara berpikir dalam mengembangkan aplikasi berbasis React (termasuk React Native) yang disebut React Thinking.<\/p>\r\n<figure class=\"wp-block-image\"><img class=\"wp-image-3255\" style=\"height: 80%; width: 80%; object-fit: contain;\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking1-1024x576.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking1-1024x576.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking1-300x169.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking1-768x432.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking1.png 1366w\" alt=\"\" width=\"1024\" height=\"576\" \/>\r\n<figcaption>Gambaran Umum React Thinking<\/figcaption>\r\n<\/figure>\r\n<h2 id=\"react-thinking\" style=\"color: #23b2e7;\">React Thinking<\/h2>\r\n<p>Salah satu kelebihan dari React adalah, kita bisa membangun aplikasi sambil merancangnya secara langsung \/ real-time. Untuk itu langsung kita mulai mempelajari bagaimana tahapan suatu aplikasi React dibuat.<\/p>\r\n<figure class=\"wp-block-image\"><img class=\"wp-image-3256\" style=\"height: 80%; width: 80%; object-fit: contain;\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking2-1024x576.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking2-1024x576.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking2-300x169.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking2-768x432.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking2.png 1366w\" alt=\"\" width=\"1024\" height=\"576\" \/>\r\n<figcaption>React Thinking (Bagian 1)<\/figcaption>\r\n<\/figure>\r\n<h3 id=\"1-memiliki-merancang-mockup-&ndash;-user-interface\" style=\"color: #23b2e7;\">1. Memiliki \/ Merancang Mockup &ndash; User Interface<\/h3>\r\n<p>Sebelum mulai mengoding terlebih dahulu dilakukan perancangan\/desain aplikasi yang akan dibuat, contoh seperti di bawah ini:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img style=\"height: 80%; width: 80%; object-fit: contain;\" src=\"https:\/\/reactjs.org\/static\/1071fbcc9eed01fddc115b41e193ec11\/d4770\/thinking-in-react-mock.png\" alt=\"\" \/><\/figure>\r\n<p>Aplikasi tersebut menggunakan API yang diperoleh dalam format JSON berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">[\r\n&nbsp;&nbsp;{category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\"},\r\n&nbsp;&nbsp;{category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\"},\r\n&nbsp;&nbsp;{category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\"},\r\n&nbsp;&nbsp;{category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\"},\r\n&nbsp;&nbsp;{category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\"},\r\n&nbsp;&nbsp;{category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\"}\r\n];<\/pre>\r\n<h3 id=\"2-membagi-ui-menjadi-hirarki-komponen\" style=\"color: #23b2e7;\">2. Membagi UI menjadi Hirarki Komponen<\/h3>\r\n<p>Selanjutnya rancangan tersebut kita bagi menjadi beberapa bagian\/komponen. Cara membagi rancangan tersebut seperti ketika kita membagi\/mengelompokkan suatu function atau object. Bisa juga dibagi dengan menggunakan prinsip&nbsp;<em>single responsibility principle<\/em>, dimana setiap komponen\/fungsi\/objek sebaiknya hanya memiliki 1 pekerjaan atau output, sehingga rancangan sebelumnya dapat dibagi menjadi seperti berikut:&nbsp;<\/p>\r\n<p><img style=\"height: 80%; width: 80%; object-fit: contain;\" src=\"https:\/\/reactjs.org\/static\/9381f09e609723a8bb6e4ba1a7713b46\/90cbd\/thinking-in-react-components.png\" alt=\"Diagram showing nesting of components\" \/><\/p>\r\n<ol>\r\n<li>Container (orange): meliputi semua bagian aplikasi<\/li>\r\n<li>SearchBar (blue): fungsi cari yang menerima input dari user<\/li>\r\n<li>ProductTable (green): menampilkan data dan hasil filter dari SearchBar<\/li>\r\n<li>ProductCategoryRow (turquoise): menampilkan kelompok kategori produk<\/li>\r\n<li>ProductRow (red): menampilkan data produk (nama dan harga)<\/li>\r\n<\/ol>\r\n<p>Berdasarkan pengelompokkan tersebut, dapat disusun hirarki komponen sebagai berikut:<\/p>\r\n<ul>\r\n<li>Container\r\n<ul>\r\n<li>SearchBar<\/li>\r\n<li>ProductTable\r\n<ul>\r\n<li>ProductCategoryRow<\/li>\r\n<li>ProductRow<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<figure class=\"wp-block-image\"><img class=\"wp-image-3257\" style=\"height: 80%; width: 80%; object-fit: contain;\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking3-1024x576.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking3-1024x576.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking3-300x169.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking3-768x432.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/React_Thinking3.png 1366w\" alt=\"\" width=\"1024\" height=\"576\" \/>\r\n<figcaption>React Thinking (Bagian 2)<\/figcaption>\r\n<\/figure>\r\n<h3 id=\"3-membangun-ui-statis-tanpa-state\" style=\"color: #23b2e7;\">3. Membangun UI Statis (tanpa state)&nbsp;<\/h3>\r\n<p>Setelah memiliki hirarki komponen, selanjutnya kita bisa mulai ngoding tampilan UI. Pada aplikasi sederhana ini, lebih mudah memulai dari komponen pada hirarki tertinggi ke hirarki terendah, sementara pada aplikasi yang kompleks akan cenderung lebih mudah memulai dari hirarki terendah ke komponen hirarki tertinggi.&nbsp;<\/p>\r\n<p>Pada tahap ini sebaiknya tidak menggunakan&nbsp;<em>state&nbsp;<\/em>(data dapat berubah yang dimiliki komponen terkait) dan hanya menggunakan&nbsp;<em>props<\/em>, dimana&nbsp;<em>props&nbsp;<\/em>akan mentransfer data dari komponen hirarki atas (<em>parent<\/em>) ke komponen hirarki bawah (<em>children<\/em>).<\/p>\r\n<p>Untuk memahami props dan state bisa melihat dokumentasi Reactjs:<br \/>https:\/\/reactjs.org\/docs\/state-and-lifecycle.html<br \/>https:\/\/reactjs.org\/docs\/faq-state.html#what-is-the-difference-between-state-and-props<\/p>\r\n<h3 id=\"4-identifikasi-kebutuhan-state-minimal-yang-dibutuhkan-ui\" style=\"color: #23b2e7;\">4. Identifikasi Kebutuhan State Minimal yang Dibutuhkan UI<\/h3>\r\n<p>Untuk membuat UI menjadi interaktif, diperlukan cara untuk mengubah data yang dapat dilakukan menggunakan state. Dan pastikan jumlah state yang digunakan se-minimal mungkin. Beberapa data yang terdapat &amp; dibutuhkan pada aplikasi ini antara lain:<\/p>\r\n<ul>\r\n<li>Daftar produk awal (dari API)<\/li>\r\n<li>Teks masukkan user di SearchBar<\/li>\r\n<li>Nilai dari&nbsp;<em>checkbox<\/em><\/li>\r\n<li>Daftar produk yang telah di-<em>filter<\/em><\/li>\r\n<\/ul>\r\n<p>Untuk menentukan apakah suatu data ditetapkan sebagai state atau tidak, dapat menggunakan pertanyaan berikut untuk masing-masing data yang ada:<\/p>\r\n<ol>\r\n<li>Apakah data tersebut berasal dari komponen&nbsp;<em>parent<\/em>?<\/li>\r\n<li>Apakah data tersebut bersifat tetap dan tidak berubah?<\/li>\r\n<li>Dapatkah data tersebut diperoleh dari data lain yang ada di dalam komponen?<\/li>\r\n<\/ol>\r\n<p>Jika terdapat jawaban Ya, maka data tersebut tidak ditetapkan sebagai state. Sehingga state pada aplikasi ini antara lain:<\/p>\r\n<ul>\r\n<li>Teks masukkan user di SearchBar<\/li>\r\n<li>Nilai dari&nbsp;<em>checkbox<\/em><\/li>\r\n<\/ul>\r\n<h3 id=\"5-identifikasi-komponen-yang-membutuhkan-state\" style=\"color: #23b2e7;\">5. Identifikasi Komponen yang Membutuhkan State<\/h3>\r\n<p>Lakukan tahapan berikut pada masing-masing state yang telah teridentifikasi ada di dalam aplikasi:<\/p>\r\n<ul>\r\n<li>Identifikasi komponen yang me-render suatu data yang bergantung pada state tersebut.<\/li>\r\n<li>Cari komponen yang mirip\/sejenis (satu komponen di hirarki yang lebih tinggi yang memerlukan state tersebut)<\/li>\r\n<li>State sebaiknya disimpan pada komponen tersebut atau komponen yang berada di atasnya (<em>parent<\/em>)<\/li>\r\n<li>Jika komponen seperti itu tidak ditemukan, maka buat komponen baru di atasnya (sebagai&nbsp;<em>parent<\/em>) untuk menyimpan state yang diperlukan.<\/li>\r\n<\/ul>\r\n<h3 id=\"6-tambahkan-aliran-data-terbalik-inverse-data-flow\" style=\"color: #23b2e7;\">6. Tambahkan Aliran Data Terbalik (Inverse Data Flow)<\/h3>\r\n<p>Setelah membuat rancangan aliran data dengan baik, menggunakan props dan state, selanjutnya adalah memastikan bahwa aliran data dapat berfungsi sesuai kebutuhan. Contohnya adalah ketika melakukan input pada SearchBar maka terjadi filter data. Dan ketika input tersebut dihapus maka data kembali menjadi seperti data awal sebelum di filter.&nbsp;<\/p>\r\n<p>Pada aplikasi ini, fungsi tersebut dapat dicapai dengan cara Container mengirimkan fungsi update kepada SearchBar (sebagai props) sehingga ketika melakukan input, fungsi tersebut menerimanya dan melakukan update kepada ProductTable dan menampilkan hasil search\/filter dari input tersebut.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Sumber:&nbsp;<a href=\"https:\/\/reactjs.org\/docs\/thinking-in-react.html\">https:\/\/reactjs.org\/docs\/thinking-in-react.html<\/a><\/p>\r\n<\/blockquote>\r\n<h2 id=\"persiapan-dan-membuat-proyek-react-native-menggunakan-expo\" style=\"color: #23b2e7;\">Persiapan dan Membuat Proyek React Native menggunakan Expo<\/h2>\r\n<p>Selanjutnya kita akan melakukan persiapan dalam membuat proyek React Native menggunakan Expo. Anda dapat mengikuti tahap-tahap persiapan dan pembuatan proyek ini dengan membaca dokumentasi pada tugas.&nbsp;<\/p>\r\n<\/div>","waktu_publish":"2021-11-05 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-10-01 06:16:51","updated_at":"2021-10-25 07:31:10","waktu_publish_formatted":" Jumat, 05 November 2021. 07:30:00 WIB."},{"id":1427,"uuid":"68432d1e-958b-453b-bd0b-c2a00a7a23ea","author_user_id":12081,"materi_section_id":391,"judul":"Tugas 10 - React Native Intro","permalink":"tugas-10-react-native-intro","konten":"<p>Pada tugas kali ini Anda diminta untuk membuat project Expo bernama SanberApp. Lakukan proses pembuatan project baru di dalam folder repository project yang dikerjakan pada tugas 1. Setelah berhasil, lakukan push ke repo di Gitlab Anda. (Jika Anda tidak ingin menggunakan Expo, diperbolehkan untuk membuat project menggunakan React Native CLI)<\/p>\r\n<p>Anda bisa mengikuti langkah-langkah yang terdapat pada artikel ini, dan jika diperlukan, maka Anda dapat mengikuti langkah-langkah pada video berikut:<\/p>\r\n<figure class=\"wp-block-embed-youtube aligncenter wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\">\r\n<div class=\"wp-block-embed__wrapper\"><iframe title=\"Memulai React Native Project dengan Menggunakan Expo CLI\" src=\"https:\/\/www.youtube.com\/embed\/Bq9I2FNyC-k?feature=oembed\" width=\"500\" height=\"281\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/div>\r\n<\/figure>\r\n<h2 id=\"install-expo-cli\" style=\"color: #23b2e7;\">Install Expo CLI<\/h2>\r\n<p>Pada tugas kali ini, teman-teman bisa mencoba untuk melakukan instalasi expo CLI di PC\/Laptop masing-masing. Pastikan sudah terinstall nodeJs sebelumnya. (Jika belum install nodeJs bisa menuju&nbsp;<a href=\"https:\/\/nodejs.org\/en\/download\/\">https:\/\/nodejs.org\/en\/download\/<\/a>&nbsp;dan pilih&nbsp;<strong>versi LTS<\/strong>&nbsp;dan pilih sesuai OS yang digunakan). Jalankan command berikut di terminal\/command prompt, untuk memastikan nodeJs sudah ter install.<\/p>\r\n<pre class=\"wp-block-preformatted\">$ node --version\r\nv12.18.1 \r\n$ npm --version\r\nv6.14.5 \r\n\/\/sudah terinstall node versi 12.18.1 dan npm versi 6.14.5 <\/pre>\r\n<p>Setelah memastikan nodeJS sudah terinstall selanjutnya adalah meng-install expo-CLI. Perlu diperhatikan bahwa pada proses ini akan dilakukan proses download, sehingga kecepatan proses ini bergantung pada kecepatan dan sinyal internet yang digunakan.<\/p>\r\n<pre class=\"wp-block-preformatted\"> $ npm install --global expo-cli  <\/pre>\r\n<p>Jika sudah selesai, bisa menjalankan perintah berikut untuk mengetahui apakah expo-cli sudah terinstall<\/p>\r\n<pre class=\"wp-block-preformatted\">$ expo --version\r\n3.21.10\r\n\/\/ sudah terinstal expo-cli versi 3.21.10<\/pre>\r\n<h2 id=\"membuat-project-react-native-menggunakan-expo\" style=\"color: #23b2e7;\">Membuat project React Native menggunakan Expo<\/h2>\r\n<p>Sebelum membuat project baru, silahkan untuk terlebih dahulu&nbsp;<strong>mendaftarkan akun di expo.io<\/strong>&nbsp;(&nbsp;<a href=\"https:\/\/expo.io\/signup\">https:\/\/expo.io\/signup<\/a>&nbsp;). Akun ini akan berguna ketika hendak melakukan <strong>build<\/strong> APK\/IPA, mengelola <strong>update aplikasi secara OTA (Over The Air)<\/strong>, dan beberapa fitur lainnya.<\/p>\r\n<p>Jika sudah mendaftar, masuk ke dalam folder project BootcampReactNative\/ boleh buat nama baru, dan jalankan perintah berikut di terminal:<\/p>\r\n<pre class=\"wp-block-preformatted\">$ cd BootcampReactNative    \/\/ pindah ke folder repo project\r\n\r\n$ expo init SanberApp    \/\/ membuat project dengan nama aplikasi SanberApp<\/pre>\r\n<p>Selanjutnya Anda akan diminta untuk memilih template. Pilih pada bagian &ldquo;Managed Workflow&rdquo; dan &ldquo;blank&rdquo;.<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-4513\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/template_expo.png\" sizes=\"(max-width: 660px) 100vw, 660px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/template_expo.png 660w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/template_expo-300x62.png 300w\" alt=\"\" width=\"660\" height=\"136\" \/>\r\n<figcaption>Pilihan template pada project expo<\/figcaption>\r\n<\/figure>\r\n<p>Selanjutnya tinggal menunggu project Expo dibuat. Jika ditemukan beberapa pesan warn bisa diabaikan selama pada akhir prosesnya Anda diminta untuk menjalankan perintah&nbsp;<code>cd SanberApp<\/code>&nbsp;dan&nbsp;<code>npm start<\/code>&nbsp;(atau&nbsp;<code>yarn start<\/code>, jika telah meng-install yarn di PC\/Laptop Anda).<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-4515\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/init_finish_npm.png\" sizes=\"(max-width: 868px) 100vw, 868px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/init_finish_npm.png 868w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/init_finish_npm-300x76.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/init_finish_npm-768x196.png 768w\" alt=\"\" width=\"868\" height=\"221\" \/>\r\n<figcaption>Contoh tampilan setelah berhasil membuat project expo baru<\/figcaption>\r\n<\/figure>\r\n<h2 id=\"mempersiapkan-smartphone-emulator\" style=\"color: #23b2e7;\">Mempersiapkan Smartphone \/ Emulator<\/h2>\r\n<p>Sebelum mulai menjalankan project yang telah dibuat, terlebih dahulu perlu kita siapkan device atau perangkat untuk proses simulasi\/debugging. Jika Anda memiliki perangkat Android dengan versi OS minimal 5.0 Lollipop, maka disarankan untuk menggunakannya dalam tahap ini.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Jika Anda sedang tidak memiliki perangkat Android tersebut, maka Anda bisa menggunakan Emulator (bisa mencoba AVD dari Android Studio atau emulator lain). Jika tidak bisa menggunakan emulator, maka bisa menjalankan project expo di web\/browser melalui perintah di terminal (<code>npm run web<\/code>) atau bisa juga menggunakan&nbsp;<a href=\"https:\/\/snack.expo.io\/\">snack.expo.io<\/a>&nbsp;(hanya saja, memiliki banyak keterbatasan).<\/p>\r\n<\/blockquote>\r\n<p>Pastikan perangkat Android Anda sudah mengaktifkan Developer Mode atau Mode Pengembang. Caranya dengan menuju halaman Settings\/Setelan, kemudian About Phone\/Tentang Ponsel, dan tekan bagian Version Number\/Nomor Versi, beberapa kali sampai muncul pop up bahwa Anda telah mengaktifkan Developer Mode (atau Anda bisa mencari di web tentang &ldquo;cara mengaktifkan developer mode smartphone android samsung&rdquo;, karena beberapa model\/merek terkadang memiliki cara yang sedikit berbeda).<\/p>\r\n<p>Setelah Developer Mode tersebut aktif, masuk ke menu Developer Options, dan Anda bisa mengaktifkan USB Debugging. Jika sudah, maka selanjutnya adalah meng-<strong>install aplikasi<\/strong>&nbsp;<a href=\"https:\/\/play.google.com\/store\/apps\/details?id=host.exp.exponent&amp;hl=en\">Expo dari Google Play Store<\/a>. Setelah aplikasi tersebut terinstall di smartphone, Anda bisa login menggunakan akun Expo yang sudah didaftarkan sebelumnya.<\/p>\r\n<h2 id=\"menjalankan-project-expo\" style=\"color: #23b2e7;\">Menjalankan Project Expo<\/h2>\r\n<p>Jika Anda memiliki kabel data, Anda bisa mengubungkan PC\/Laptop dengan smartphone Anda (atau bisa juga menjalankan project Expo menggunakan LAN atau WiFi). Pastikan Anda sudah masuk ke dalam folder project Expo. Kemudian jalankan perintah berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">$ cd SanberApp    \/\/ masuk ke folder project Expo yang baru dibuat\r\n\r\n$ npm start    \/\/ atau expo start, untuk menjalankan project Expo <\/pre>\r\n<p>Setelah muncul QR Code, baik pada terminal maupun web browser, buka aplikasi Expo di smartphone Anda gunakan tools &ldquo;Scan QR Code&rdquo; dan arahkan pada QR Code yang muncul. (aktifkan &ldquo;Allow display over the apps&rdquo; dan tekan tombol back smartphone Anda &mdash; bukan back pada aplikasi).<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Terkadang terjadi error dikarenakan smartphone dan nodeJs di blok oleh sistem atau anti virus. Pastikan sistem Anda (termasuk anti virus) mengijinkan akses smartphone dan nodeJs.<\/p>\r\n<\/blockquote>\r\n<p>Jika berhasil, maka akan muncul di layar smartphone Anda tulisan &ldquo;Open up App.js to start working on your app!&rdquo; dengan background putih.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p><strong>Penting:<\/strong><\/p>\r\n<p>Jika Anda menyimpan proyek Expo di folder repository Gitlab dari&nbsp;<strong>BootcampReactNative<\/strong>, maka sebelum melakukan push ke repository di Gitlab, terlebih dahulu&nbsp;<strong>hapus folder .git<\/strong>&nbsp;pada folder proyek expo Anda (folder ini biasanya dalam kondisi hidden).<\/p>\r\n<p>Jika sudah selesai dikerjakan, silahkan&nbsp;<em>push&nbsp;<\/em>hasil pekerjaan Anda ke&nbsp;<em>repository&nbsp;<\/em>Gitlab masing-masing (gunakan&nbsp;<em>repository project<\/em>&nbsp;yang sama&nbsp;<strong>BootcampReactNative&nbsp;&nbsp;<\/strong>yang digunakan folder SanberApp). Jangan lupa&nbsp;<em>submit link commit<\/em>&nbsp;Anda ke sanbercode.com.<\/p>\r\n<p>untuk proses pengumpulan dapat di lihat di materi di sanbercode.com<\/p>\r\n<\/blockquote>\r\n<h2 style=\"color: #23b2e7;\">Screen Mirroring<\/h2>\r\n<p>Kebanyakan developers memilih menggunakan smartphonenya sebagai debugging device karena lebih ringan untuk PC. Kita akan menggunakan aplikasi Vysor untuk melakukan mirrorring device ke PC agar proses development menjadi lebih seamless<\/p>\r\n<h3 style=\"color: #23b2e7;\">Instalasi<\/h3>\r\n<ul>\r\n<li>Buka&nbsp;<a href=\"https:\/\/www.vysor.io\/\">https:\/\/www.vysor.io\/<\/a>&nbsp;dan download aplikasi desktop, kemudian buka file instalasi.<br \/>Apabila sudah terinstall maka tampilan awal adalah seperti ini<\/li>\r\n<\/ul>\r\n<p><img src=\"https:\/\/dl.dropboxusercontent.com\/s\/2jx1pz82c2hdvlz\/12.1.png?dl=0\" width=\"472\" height=\"406\" \/><\/p>\r\n<ul>\r\n<li>Di ponsel Android, buka PlayStore dan cari&nbsp;<a href=\"https:\/\/play.google.com\/store\/apps\/details?id=com.koushikdutta.vysor&amp;hl=in&amp;gl=US\">Vysor&nbsp;<\/a>kemudian install<\/li>\r\n<li>Enable opsi USB Debugging pada menu Developer Options di pengaturan<\/li>\r\n<\/ul>\r\n<h3 style=\"color: #23b2e7;\">Penggunaan<\/h3>\r\n<ul>\r\n<li>Hubungkan handphone anda ke PC menggunakan kabel USB, jika USB debugging telah dinyalakan maka akan terdeteksi di aplikasi Vysor.<\/li>\r\n<\/ul>\r\n<p><img src=\"https:\/\/dl.dropboxusercontent.com\/s\/knzmtjy399i4q5v\/12.2.png?dl=0\" width=\"553\" height=\"163\" \/><\/p>\r\n<ul>\r\n<li>Kemudian tekan tombol play button pada device yang sesuai dan accept permintaan debugging di handphone anda.<\/li>\r\n<\/ul>\r\n<p><img src=\"https:\/\/dl.dropboxusercontent.com\/s\/ah6rquabyuy6sjp\/12.3.jpg?dl=0\" width=\"345\" height=\"221\" \/><\/p>\r\n<p>Sekarang anda dapat menulis kode di vscode dan menampilkan apa yang terjadi pada layar HP anda secara bersamaan di layar komputer anda.<\/p>","waktu_publish":"2021-11-05 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-10-01 06:17:15","updated_at":"2021-11-05 20:33:06","waktu_publish_formatted":" Jumat, 05 November 2021. 07:30:00 WIB."}]},{"id":394,"uuid":"3ed5cf2d-7d07-40c7-a913-b84d1f46c536","materi_id":27,"nama":"Hari 11 - Mockup Figma","permalink":"hari-11-mockup-figma","urutan":12,"created_by":12081,"updated_by":12081,"created_at":"2021-10-04 07:23:13","updated_at":null,"posting":[{"id":1433,"uuid":"c703ea28-0da3-4ab1-97db-7c23c94e41a3","author_user_id":12081,"materi_section_id":394,"judul":"Mockup Figma","permalink":"mockup-figma","konten":"<div class=\"entry-content\">\r\n<p>Sebelum membuat aplikasi baik itu web based atau mobile biasanya akan dibuat terlebih dahulu sebuah prototipe atau desain mockup. Secara umum proses desain melingkupi : sketsa (level konsep) -&gt; Wireframe (level komponen) -&gt; Mockup\/Prototype (level menghias\/interaktif).<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/qVXeMRO7Eys\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>\r\n<p>Tools untuk membuat Mockup yang direkomendasikan adalah&nbsp;<a href=\"https:\/\/www.figma.com\/\" target=\"_blank\" rel=\"noreferrer noopener\">Figma<\/a>&nbsp;(Silahkan sign up \/ buat akun figma).<\/p>\r\n<h2 id=\"tahap-sketsa-konsep\">Tahap Sketsa (Konsep)<\/h2>\r\n<p>Tahap yang penting sebelum mendesain wireframe atau bahkan mockup adalah riset user. Pada bagian ini kita diminta untuk memetakan proses bisnis menjadi halaman-halaman (screens) yang dibutuhkan untuk mencapai tujuan (goals) tertentu.<\/p>\r\n<p>Cara memetakan proses bisnis tersebut salah satunya dengan menggambar diagram alir (flow chart). Contohnya sebuah aplikasi untuk pemesanan makanan seperti berikut:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img style=\"height: 80%; width: 80%; object-fit: contain;\" src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LwhGr1COan0ubgdHP7O%2F-LwiIK3G1bWDmNobGc6h%2F0_5OwU4KmsV9tQt2e5.png?alt=media&amp;token=80357f8d-8ba2-4848-88ee-df258938b1e0\" alt=\"\" \/><\/figure>\r\n<h3 id=\"membuat-sketsa\">Membuat sketsa&nbsp;<\/h3>\r\n<p>Tahap selanjutnya adalah mulai menggambar sketsa berdasarkan satu per satu step yang ada pada diagram alir menjadi sebuah sketsa kasar. Sketsa bisa dibuat dengan coretan di atas kertas atau bisa menggunakan tools sketsa sederhana di komputer.<\/p>\r\n<p>Setiap sketsa harus berpedoman pada dua pertanyaan dasar:<\/p>\r\n<ul>\r\n<li class=\"\">Apa tujuan dari halaman\/screen tersebut dibuat?<\/li>\r\n<li class=\"\">Bagaimana halaman\/screen tersebut dapat membantu user mencapai tujuan(goal)?<\/li>\r\n<\/ul>\r\n<p>Berikut ini contoh sebuah sketsa dari halaman Home aplikasi pemesanan makanan:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LwiJ_ohbzQ9BOlF375a%2F-LwiMvtV4UPXLLnDaowi%2F0_Pn4SiOYlxofkC2Cp.png?alt=media&amp;token=e827e9bc-44db-4a34-b2c8-b63092024229\" alt=\"\" \/><\/figure>\r\n<p>Jika diperhatikan sketsa di atas hanya digambarkan dengan blok-blok komponen berbentuk persegi sederhana saja.<\/p>\r\n<h2 id=\"tahap-wireframe\">Tahap Wireframe<\/h2>\r\n<p>Tahap selanjutnya setelah membuat sketsa adalah menggambar wireframe berdasarkan sketsa yang sudah dibuat pada tahap konsep. Membuat wireframe artinya menggambarkan komponen-komponen pada sketsa dengan komponen yang lebih detail misalkan : komponen input (form), komponen button, komponen text, atau komponen gambar dan lain-lain.<\/p>\r\n<h3 id=\"memilih-frame\">Memilih Frame&nbsp;<\/h3>\r\n<p>Agar lebih aktual dengan ukuran sebenarnya, gunakanlah frame sesuai dengan yang diinginkan. Misalkan pilihlah device Android atau iPhone.<\/p>\r\n<h3 id=\"referensi\">Referensi:<\/h3>\r\n<ul>\r\n<li><a href=\"https:\/\/uxplanet.org\/a-step-by-step-guide-to-creating-mobile-app-wireframes-ede2e5c53a75\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/uxplanet.org\/a-step-by-step-guide-to-creating-mobile-app-wireframes-ede2e5c53a75<\/a><\/li>\r\n<\/ul>\r\n<h2 id=\"figma\">Figma<\/h2>\r\n<p>Pada tahap membuat Mockup diperlukan aplikasi yang dapat membantu komunikasi antara Client, Designer, dan Developer. Salah satu tools yang bisa digunakan adalah Figma (tools lain yang umum digunakan adalah Sketch, Adobe XD, Adobe Ilustrator, dan lain-lain).<\/p>\r\n<p>Terdapat beberapa kelebihan dari Figma dibandingkan dengan aplikasi\/tools lainnya, antara lain:<\/p>\r\n<ul>\r\n<li>Salah satunya adalah kemampuannya dalam melakukan kolaborasi antar desainer. Figma memungkinkan 2 atau lebih UI Designer untuk berkerja sama secara langsung dalam satu waktu.<\/li>\r\n<li>Dan karena figma berbasis web, sehingga user dari figma tidak harus melakukan proses instalasi aplikasinya.<\/li>\r\n<li>Terlebih, figma cenderung memiliki banyak fitur yang dapat digunakan secara gratis.<\/li>\r\n<\/ul>\r\n<p>Untuk mengetahui bagaimana cara menggunakan Figma terutama dalam membangun suatu desain aplikasi mobile, dapat langsung mengunjungi bagian Tugas 14 Mockup.<\/p>\r\n<\/div>","waktu_publish":"2021-11-08 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-10-04 07:23:35","updated_at":"2021-10-29 21:05:38","waktu_publish_formatted":" Senin, 08 November 2021. 07:30:00 WIB."},{"id":1434,"uuid":"0711aebb-8e41-4e3e-b384-278632eeeeeb","author_user_id":12081,"materi_section_id":394,"judul":"Tugas 11 - Mockup Figma","permalink":"tugas-11-mockup-figma","konten":"<p id=\"block-366e3881-9013-4fb5-80ef-dab82ab3a4cf\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"366e3881-9013-4fb5-80ef-dab82ab3a4cf\" data-type=\"core\/paragraph\" data-title=\"Paragraf\">Sebelum masuk membahas tugas hari ini, Anda dapat terlebih dahulu melihat video berikut, untuk dapat mengetahui sedikit cara menggunakan figma.<\/p>\r\n<p class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"366e3881-9013-4fb5-80ef-dab82ab3a4cf\" data-type=\"core\/paragraph\" data-title=\"Paragraf\"><iframe src=\"https:\/\/www.youtube.com\/embed\/2HQb_9CI7fs?feature=youtu\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>\r\n<div id=\"block-3313ee0a-27ca-44ca-95cd-b8eadf39f752\" class=\"wp-block-embed wp-embed-aspect-16-9 wp-has-aspect-ratio block-editor-block-list__block wp-block\" tabindex=\"0\" role=\"group\" aria-label=\"Blok: Sematan\" data-block=\"3313ee0a-27ca-44ca-95cd-b8eadf39f752\" data-type=\"core\/embed\" data-title=\"Sematan\"><\/div>\r\n<p id=\"block-0455e8dd-3e20-483a-b50d-dcd12cc4dc6d\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"0455e8dd-3e20-483a-b50d-dcd12cc4dc6d\" data-type=\"core\/paragraph\" data-title=\"Paragraf\">Sebagaimana pada materi 10, sebelum memulai membangun suatu aplikasi diperlukan mockup atau desain dari aplikasi yang akan dibangun. Pada tugas kali ini, Anda diminta untuk membuat mockup dari suatu aplikasi mobile yang menampilkan daftar skill dan project dari seorang developer\/programmer. (Anda dapat mencari inspirasi di&nbsp;<a href=\"https:\/\/www.behance.net\/\">behance.net<\/a>,&nbsp;<a href=\"https:\/\/dribbble.com\/\">dribbble.com<\/a>,&nbsp;<a href=\"https:\/\/www.pinterest.com\/\">pinterest.com<\/a>, dan berbagai situs lainnya)<\/p>\r\n<blockquote id=\"block-c5030f79-afe2-4c38-b0ca-57c72f6c4e21\" class=\"wp-block-quote block-editor-block-list__block wp-block\" tabindex=\"0\" role=\"group\" aria-label=\"Blok: Kutip\" data-block=\"c5030f79-afe2-4c38-b0ca-57c72f6c4e21\" data-type=\"core\/quote\" data-title=\"Kutip\">\r\n<div class=\"block-editor-rich-text__editable rich-text\" role=\"textbox\" aria-multiline=\"true\" aria-label=\"Tulis kutipan...\">\r\n<p>Hal yang perlu diperhatikan:<\/p>\r\n<p>Fokus tugas ini adalah pada&nbsp;<strong>Bagaimana membuat mockup yang user-friendly&nbsp;<\/strong>dan&nbsp;<strong>Bagaimana membagi komponen-komponen yang terdapat pada suatu desain UI aplikasi mobile<\/strong>, bukan pada aspek bagaimana membuat desain bertaraf internasional dan dapat dijual (tentu boleh membuat desain yang indah dan semenarik mungkin).<\/p>\r\n<\/div>\r\n<\/blockquote>\r\n<p id=\"block-f3d59575-bcc2-4308-87f9-a9fdc7451b5b\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"f3d59575-bcc2-4308-87f9-a9fdc7451b5b\" data-type=\"core\/paragraph\" data-title=\"Paragraf\">Catatan terkait aplikasi yang akan dibuat, antara lain:<\/p>\r\n<ul id=\"block-3f8cdd9d-b988-4600-bf6d-e51439f26237\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok: Senarai\" data-block=\"3f8cdd9d-b988-4600-bf6d-e51439f26237\" data-type=\"core\/list\" data-title=\"Senarai\">\r\n<li>Target user dari aplikasi ini adalah seorang developer\/programmer, dari berbagai usia, yang ingin memperlihatkan keahliannya (show-off)<\/li>\r\n<li>Keahlian yang ditampilkan berupa skill programming (mulai dari bahasa pemrograman, framework, library dan lainnya) dan real life project pribadinya.<\/li>\r\n<li>Tujuan aplikasi ini adalah agar user dilirik oleh perusahaan, start up, atau client untuk diajak bergabung\/bekerja sama dalam mengerjakan suatu proyek.<\/li>\r\n<\/ul>\r\n<p id=\"block-a45a5250-d65e-408d-b00e-b74a9b440264\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"a45a5250-d65e-408d-b00e-b74a9b440264\" data-type=\"core\/paragraph\" data-title=\"Paragraf\">Mockup aplikasi ini terdiri dari (minimal) 3 halaman. Kriteria dari masing-masing halaman adalah sebagai berikut:<\/p>\r\n<h3 id=\"block-c94e43cc-4197-4f78-a8fc-02975ea53828\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok: Tajuk\" data-block=\"c94e43cc-4197-4f78-a8fc-02975ea53828\" data-type=\"core\/heading\" data-title=\"Tajuk\">1. Halaman Login\/Register<\/h3>\r\n<p id=\"block-a9f23ec8-91ba-4a67-b05c-4ccd8033ecaa\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"a9f23ec8-91ba-4a67-b05c-4ccd8033ecaa\" data-type=\"core\/paragraph\" data-title=\"Paragraf\">Sesuai namanya, halaman ini merupakan halaman yang akan digunakan untuk melakukan kegiatan login\/masuk ke aplikasi atau register\/mendaftar ke aplikasi. Minimal 1 halaman (Halaman Login saja atau Halaman Register saja). Beberapa komponen yang harus ada pada halaman ini adalah:<\/p>\r\n<ul id=\"block-1fb9fe8e-692e-4ad9-8b9c-1d6a236c8c57\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok: Senarai\" data-block=\"1fb9fe8e-692e-4ad9-8b9c-1d6a236c8c57\" data-type=\"core\/list\" data-title=\"Senarai\">\r\n<li>Nama Aplikasi (bebas, boleh menggunakan Sanber App)<\/li>\r\n<li>Logo\/Icon Aplikasi (bebas, boleh hanya berupa bentuk kotak\/lingkaran dengan background, atau bentuk lain yang dapat merepresentasikan logo)<\/li>\r\n<li>Kotak input nama user \/ email<\/li>\r\n<li>Kotak input password<\/li>\r\n<li>Kotak input konfirmasi password (hanya untuk halaman register)<\/li>\r\n<li>Tombol untuk login\/register<\/li>\r\n<\/ul>\r\n<p id=\"block-190782bf-d8bf-4520-a13d-a0e301286345\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"190782bf-d8bf-4520-a13d-a0e301286345\" data-type=\"core\/paragraph\" data-title=\"Paragraf\">Anda diperbolehkan menambahkan fitur atau komponen lain sesuai keinginan Anda.<\/p>\r\n<h3 id=\"block-ea084a8f-e080-43c7-a808-a547a189a502\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok: Tajuk\" data-block=\"ea084a8f-e080-43c7-a808-a547a189a502\" data-type=\"core\/heading\" data-title=\"Tajuk\">2. Halaman About\/Tentang Saya<\/h3>\r\n<p id=\"block-b96e94f3-0112-4eff-abc4-a74e9165c64a\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"b96e94f3-0112-4eff-abc4-a74e9165c64a\" data-type=\"core\/paragraph\" data-title=\"Paragraf\">Halaman ini berisikan informasi identitas atau profil Anda sebagai developer atau pembuat aplikasi (bukan untuk user). Data atau informasi yang digunakan pada halaman ini boleh bersifat fiktif (seperti pada data akun media sosial dan portofolio). Komponen yang harus ada dalam halaman ini adalah:<\/p>\r\n<ul id=\"block-b70f4f10-a20b-4a0b-8de7-a391b5f82b5f\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok: Senarai\" data-block=\"b70f4f10-a20b-4a0b-8de7-a391b5f82b5f\" data-type=\"core\/list\" data-title=\"Senarai\">\r\n<li>Foto<\/li>\r\n<li>Nama Lengkap<\/li>\r\n<li>Akun media sosial (minimal terdapat akun facebook, twitter, dan instagram)<\/li>\r\n<li>Link portofolio (misal Github, Gitlab, atau project lain yang telah dikerjakan)<\/li>\r\n<\/ul>\r\n<p id=\"block-07da36fd-2f1f-4cce-be1b-3d9fce5db7b4\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"07da36fd-2f1f-4cce-be1b-3d9fce5db7b4\" data-type=\"core\/paragraph\" data-title=\"Paragraf\">Anda boleh menambahkan fitur atau komponen lain yang Anda inginkan.<\/p>\r\n<h3 id=\"block-73d11378-e5a5-4db3-8d61-e8945af07d72\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok: Tajuk\" data-block=\"73d11378-e5a5-4db3-8d61-e8945af07d72\" data-type=\"core\/heading\" data-title=\"Tajuk\">3. Halaman Daftar Skill Programming<\/h3>\r\n<p id=\"block-d12c0607-8b74-4fe0-aeb1-64002f894b0e\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"d12c0607-8b74-4fe0-aeb1-64002f894b0e\" data-type=\"core\/paragraph\" data-title=\"Paragraf\">Halaman ini berisi daftar skill pemrograman dari user, seperti bahasa pemrograman, framework \/ library, atau teknologi yang sudah dikuasai. Halaman ini akan menjadi halaman beranda\/home dari aplikasi. Komponen yang harus ada dari halaman ini adalah:<\/p>\r\n<ul id=\"block-018c2465-656a-46bb-a601-99212de17bc4\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok: Senarai\" data-block=\"018c2465-656a-46bb-a601-99212de17bc4\" data-type=\"core\/list\" data-title=\"Senarai\">\r\n<li>Nama user<\/li>\r\n<li>Daftar skill, yang dapat dibagi menjadi:\r\n<ul>\r\n<li>Bahasa Pemrograman (misal JavaScript, yang dibagi menjadi 3 tingkatan yaitu Basic, Intermediate, dan Advance)<\/li>\r\n<li>Framework\/Library (misal React Native, yang dibagi menjadi 3 tingkatan yaitu Basic, Intermediate, dan Advance)<\/li>\r\n<li>Teknologi (misal Git, Github, Gitlab, Android Studio, dan tools lainnya yang umum digunakan oleh seorang developer)<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Pada setiap skill di dalam daftar, memiliki informasi yang terdiri dari:\r\n<ul>\r\n<li>Nama skill dan tingkatannya (misal Basic JavaScript, Advance Java, Basic React Native, dll) .<\/li>\r\n<li>Kategori (misal, Bahasa Pemrograman, Framework\/Library, Technology)<\/li>\r\n<li>Foto\/Logo skill (gambar yang berhubungan dengan skill terkait)<\/li>\r\n<li>Tingkat penguasaan skill (bisa ditunjukkan dalam persentase, mulai 0%-100%)<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<p id=\"block-f7241f74-c802-428f-93fb-2ffcbaf47cda\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"f7241f74-c802-428f-93fb-2ffcbaf47cda\" data-type=\"core\/paragraph\" data-title=\"Paragraf\">Anda boleh menambahkan fitur atau komponen lain yang Anda inginkan.<\/p>\r\n<p id=\"block-70064f60-0f93-4fba-944c-ed577a255da2\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"70064f60-0f93-4fba-944c-ed577a255da2\" data-type=\"core\/paragraph\" data-title=\"Paragraf\">Jika sudah selesai mengerjakan, silahkan mengirimkan link share file figma Anda ke sanbercode.com. Link share tersebut dapat ditemukan pada bagian kanan atas, dengan menekan tombol \"Share\" dan klik pada bagian \"copy link\". Pastikan link dapat diakses oleh semua yang memiliki link (set \"Anyone with link\" dan \"can view\").<\/p>\r\n<p id=\"block-b1f073a1-e4df-4260-a0ce-99f9187a97e2\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"b1f073a1-e4df-4260-a0ce-99f9187a97e2\" data-type=\"core\/paragraph\" data-title=\"Paragraf\">Apabila butuh inspirasi silahkan lihat halaman berikut ini :<\/p>\r\n<p id=\"block-c7d7a562-0459-4cee-8eee-43b77e8e4cfd\" class=\"block-editor-rich-text__editable block-editor-block-list__block wp-block rich-text\" tabindex=\"0\" role=\"group\" aria-multiline=\"true\" aria-label=\"Blok paragraf\" data-block=\"c7d7a562-0459-4cee-8eee-43b77e8e4cfd\" data-type=\"core\/paragraph\" data-title=\"Paragraf\">Example mockup<\/p>\r\n<div class=\"block-list-appender wp-block\" tabindex=\"-1\"><img src=\"https:\/\/dl.dropboxusercontent.com\/s\/kmjrgw3aamk61lx\/11.1.png\" \/><\/div>","waktu_publish":"2021-11-08 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-10-04 07:24:31","updated_at":"2021-10-29 21:05:46","waktu_publish_formatted":" Senin, 08 November 2021. 07:30:00 WIB."}]},{"id":395,"uuid":"f46eb68f-424b-490a-a369-35893bde463d","materi_id":27,"nama":"Hari 12 - React Native Core Component & Props","permalink":"hari-12-react-native-core-component-props","urutan":13,"created_by":12081,"updated_by":12081,"created_at":"2021-10-05 07:32:43","updated_at":null,"posting":[{"id":1436,"uuid":"660b8626-27f4-4b1a-8f1a-0cae782d7221","author_user_id":12081,"materi_section_id":395,"judul":"React Native Component","permalink":"react-native-component","konten":"<h2 style=\"color: #23b2e7;\">Import dan Export<\/h2>\r\n<p>Sebelum membahas lebih mendalam terkait component dalam react native, ada sedikit materi tambahan yang perlu dibahas terlebih dahulu, yaitu terkait import dan export.&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Import merupakan sintaks yang digunakan untuk memanggil suatu modul (bisa berupa object, variable, function, atau class) atau komponen sehingga dapat digunakan pada modul\/file yang sedang berjalan. Contoh penulisannya antara lain:<\/p>\r\n<pre class=\"wp-block-preformatted\">Import React from &ldquo;react&rdquo;;<br \/>Import { View, Text, StyleSheet } from &ldquo;react-native&rdquo;;<br \/>Import defaultComponent from &ldquo;module\/file&rdquo;;<br \/>Import NamaFunction from &ldquo;..\/path\/to\/module\/file&rdquo;;<br \/>Import {namaVariable} from &ldquo;..\/path\/to\/module\/file&rdquo;;<\/pre>\r\n<p>&nbsp;<\/p>\r\n<p>Export adalah sintaks yang digunakan untuk membuat suatu object, variable, function, maupun class bisa digunakan pada modul\/file lainnya dengan menggunakan sintaks Import. Contoh penulisannya:<\/p>\r\n<pre class=\"wp-block-preformatted\">Export default class NamaClass extends React.Component{};\r\nExport default function NamaFunction{};\r\nExport const namaVariabel = &ldquo;value&rdquo;; <\/pre>\r\n<p>&nbsp;<\/p>\r\n<h2 style=\"color: #23b2e7;\">Core Components<\/h2>\r\n<p>React Native memiliki berbagai komponen inti (Core Components) yang bisa digunakan secara langsung (tanpa install package tambahan). Berbagai komponen yang lebih kompleks dapat dibangun dari komponen inti dengan cara\/metode yang unik.<\/p>\r\n<p>Hampir semua komponen merupakan bagian dari komponen &ldquo;<code>&lt;View&gt;<\/code>&rdquo; yang memiliki prop &ldquo;<code>style<\/code>&rdquo; masing-masing. Prop &ldquo;<code>style<\/code>&rdquo; dapat mengatur tampilan komponen seperti warna, border, dan konfigurasi layout. Dalam melakukan konfigurasi layout dapat menggunakan pendekatan \/ algoritma flexbox yang akan dibahas nanti.<\/p>\r\n<h3 style=\"color: #23b2e7;\">View<\/h3>\r\n<p>Komponen View merupakan blok dasar dalam pembangunan aplikasi React Native, seperti tag&nbsp;<code>&lt;div&gt;<\/code>&nbsp;dalam HTML. Dalam implementasinya,&nbsp;<code>View&nbsp;<\/code>merupakan lapisan\/komponen dengan hirarki tertinggi yang dapat mengatur style dan layout dari komponen di bawahnya (children-nya). Umumnya props yang digunakan dari komponen View ini adalah &ldquo;<code>style<\/code>&rdquo;. Selengkapnya, props yang terdapat pada komponen View dapat dilihat pada dokumentasi React Native (<a href=\"https:\/\/reactnative.dev\/docs\/view\">https:\/\/reactnative.dev\/docs\/view<\/a>).<\/p>\r\n<p>Contoh:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from \"react\";\r\nimport { View, Text } from \"react-native\";\r\n\r\nconst App = () =&gt; {\r\n  return (\r\n    &lt;View\r\n      style={{\r\n        flexDirection: \"row\",\r\n        height: 100,\r\n        padding: 20\r\n      }}\r\n    &gt;\r\n      &lt;View style={{ backgroundColor: \"blue\", flex: 0.3 }} \/&gt;\r\n      &lt;View style={{ backgroundColor: \"red\", flex: 0.5 }} \/&gt;\r\n      &lt;Text&gt;Hello World!&lt;\/Text&gt;\r\n    &lt;\/View&gt;\r\n  );\r\n};\r\n\r\nexport default App;<\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<h3 style=\"color: #23b2e7;\">Text<\/h3>\r\n<p>Sesuai namanya, komponen&nbsp;<code>Text&nbsp;<\/code>digunakan untuk menampilkan teks, dimana teks yang ingin ditampilkan harus berada dalam tag Text (contoh:&nbsp;<code>&lt;Text&gt;Nama User&lt;\/Text&gt;<\/code>). Text juga memiliki beberapa property, termasuk style yang dapat mengubah ukuran teks, warna, dekorasi, dan lainnya. Property Text yang lebih lengkap dapat dilihat pada dokumen React Native (<a href=\"https:\/\/reactnative.dev\/docs\/text-style-props#docsNav\">https:\/\/reactnative.dev\/docs\/text-style-props<\/a>).<\/p>\r\n<p>Contoh:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, { useState } from \"react\";\r\nimport { Text, StyleSheet } from \"react-native\";\r\n\r\nconst onPressTitle = () =&gt; {\r\n  console.log(\"title pressed\");\r\n};\r\n\r\nconst App= () =&gt; {\r\n  const titleText = useState(\"Bird's Nest\");\r\n  const bodyText = useState(\"This is not really a bird nest.\");\r\n\r\n  return (\r\n    &lt;Text style={styles.baseText}&gt;\r\n      &lt;Text style={styles.titleText} onPress={onPressTitle}&gt;\r\n        {titleText}\r\n        {\"\\n\"}\r\n        {\"\\n\"}\r\n      &lt;\/Text&gt;\r\n      &lt;Text numberOfLines={5}&gt;{bodyText}&lt;\/Text&gt;\r\n    &lt;\/Text&gt;\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  baseText: {\r\n    fontFamily: \"Cochin\"\r\n  },\r\n  titleText: {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\"\r\n  }\r\n});\r\n\r\nexport default App;<\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<h3 style=\"color: #23b2e7;\">Image<\/h3>\r\n<p>Komponen Image digunakan untuk menampilkan gambar, baik dari dalam aplikasi (asset) maupun yang diambil dari web\/API.<\/p>\r\n<p>Untuk gambar yang berasal dari dalam aplikasi (bagian dari bundle aplikasi), digunakan prop&nbsp;<code>source = {require(&ldquo;.\/path&rdquo;)}<\/code>. Sementara untuk gambar yang berasal dari web\/API digunakan&nbsp;<code>source ={{uri(&ldquo;https:\/\/url\/path&rdquo;)}}<\/code>. Setiap komponen Image mendefinisikan ukuran gambar yang akan ditampilkan dengan menambahkan atribut height dan width pada prop style-nya, misal&nbsp;<code>style={{width: &lsquo;100&rsquo;, height: &lsquo;100&rsquo;}}<\/code>.<\/p>\r\n<p>Contoh:<\/p>\r\n<p>&nbsp;<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from 'react';\r\nimport { View, Image, StyleSheet } from 'react-native';\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    paddingTop: 50,\r\n  },\r\n  tinyLogo: {\r\n    width: 50,\r\n    height: 50,\r\n  },\r\n  logo: {\r\n    width: 66,\r\n    height: 58,\r\n  },\r\n});\r\n\r\nconst App = () =&gt; {\r\n  return (\r\n    &lt;View style={styles.container}&gt;\r\n      &lt;Image\r\n        style={styles.tinyLogo}\r\n        source={require('@expo\/snack-static\/react-native-logo.png')}\r\n      \/&gt;\r\n      &lt;Image\r\n        style={styles.tinyLogo}\r\n        source={{\r\n          uri: 'https:\/\/reactnative.dev\/img\/tiny_logo.png',\r\n        }}\r\n      \/&gt;\r\n      &lt;Image\r\n        style={styles.logo}\r\n        source={{\r\n          uri:\r\n            'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAADMAAAAzCAYAAAA6oTAqAAAAEXRFWHRTb2Z0d2FyZQBwbmdjcnVzaEB1SfMAAABQSURBVGje7dSxCQBACARB+2\/ab8BEeQNhFi6WSYzYLYudDQYGBgYGBgYGBgYGBgYGBgZmcvDqYGBgmhivGQYGBgYGBgYGBgYGBgYGBgbmQw+P\/eMrC5UTVAAAAABJRU5ErkJggg==',\r\n        }}\r\n      \/&gt;\r\n    &lt;\/View&gt;\r\n  );\r\n}\r\n\r\nexport default App;<\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<h3 style=\"color: #23b2e7;\">ScrollView<\/h3>\r\n<p>Komponen ScrollView digunakan pada konten yang dapat digeser. Cocok digunakan untuk jumlah konten yang sedikit (&lt;30 konten). Dan dapat disusun secara vertikal (default) dan horizontal. Pada jumlah konten yang banyak, disarankan menggunakan FlatList agar performa aplikasi menjadi lebih baik.<\/p>\r\n<p>Cara menggunakan ScrollView adalah dengan menjadikan konten sebagai children. Setiap menampilkan konten yang berulang memerlukan key di setiap kontennya. Jika konten tersebut dibungkus oleh komponen View, maka key dapat disimpan dalam View tersebut dengan menambahkan prop &ldquo;key&rdquo;.<\/p>\r\n<p>Contoh:&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from 'react';\r\nimport { StyleSheet, Text, SafeAreaView, ScrollView } from 'react-native';\r\nimport Constants from 'expo-constants';\r\n\r\nconst App = () =&gt; {\r\n  return (\r\n    &lt;SafeAreaView style={styles.container}&gt;\r\n      &lt;ScrollView style={styles.scrollView}&gt;\r\n        &lt;Text style={styles.text}&gt;\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\r\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\r\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\r\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\r\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\r\n          culpa qui officia deserunt mollit anim id est laborum.\r\n        &lt;\/Text&gt;\r\n      &lt;\/ScrollView&gt;\r\n    &lt;\/SafeAreaView&gt;\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    marginTop: Constants.statusBarHeight,\r\n  },\r\n  scrollView: {\r\n    backgroundColor: 'pink',\r\n    marginHorizontal: 20,\r\n  },\r\n  text: {\r\n    fontSize: 42,\r\n  },\r\n});\r\n\r\nexport default App;<\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<h3 style=\"color: #23b2e7;\">FlatList<\/h3>\r\n<p>Komponen FlatList digunakan untuk menampilkan sejumlah konten dalam jumlah yang banyak dan dapat digeser. Komponen ini memiliki fungsi yang menyerupai ScrollView tetapi dengan performa yang lebih baik, yaitu dengan menampilkan konten sebatas ukuran layar atau dibatasi per jumlah tertentu (misal dari 100 konten yang dimiliki, hanya menampilkan per 10 konten, sementara konten yang lain baru muncul ketika layar digeser). Sama seperti ScrollView, FlatList juga dapat disusun secara vertikal (default) dan horizontal.<\/p>\r\n<p>Dalam menampilkan konten, FlatList hanya membutuhkan data array dari sekumpulan object dan dimasukkan dalam prop &ldquo;<code>data<\/code>&rdquo;, kemudian tampilan dari konten dapat diatur dalam prop &ldquo;<code>renderItem<\/code>&rdquo;. Dan dalam setiap menampilkan konten yang berulang selalu dibutuhkan &ldquo;<code>key<\/code>&rdquo; untuk membedakan konten yang satu dengan konten yang lain (menghindari terjadi duplikasi konten) yang dapat diatur dalam prop &ldquo;<code>keyExtractor<\/code>&rdquo;.<\/p>\r\n<p>Contoh:<\/p>\r\n<p>&nbsp;<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from 'react';\r\nimport { SafeAreaView, View, FlatList, StyleSheet, Text, StatusBar } from 'react-native';\r\n\r\nconst DATA = [\r\n  {\r\n    id: 'bd7acbea-c1b1-46c2-aed5-3ad53abb28ba',\r\n    title: 'First Item',\r\n  },\r\n  {\r\n    id: '3ac68afc-c605-48d3-a4f8-fbd91aa97f63',\r\n    title: 'Second Item',\r\n  },\r\n  {\r\n    id: '58694a0f-3da1-471f-bd96-145571e29d72',\r\n    title: 'Third Item',\r\n  },\r\n];\r\n\r\nconst Item = ({ title }) =&gt; (\r\n  &lt;View style={styles.item}&gt;\r\n    &lt;Text style={styles.title}&gt;{title}&lt;\/Text&gt;\r\n  &lt;\/View&gt;\r\n);\r\n\r\nconst App = () =&gt; {\r\n  const renderItem = ({ item }) =&gt; (\r\n    &lt;Item title={item.title} \/&gt;\r\n  );\r\n\r\n  return (\r\n    &lt;SafeAreaView style={styles.container}&gt;\r\n      &lt;FlatList\r\n        data={DATA}\r\n        renderItem={renderItem}\r\n        keyExtractor={item =&gt; item.id}\r\n      \/&gt;\r\n    &lt;\/SafeAreaView&gt;\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    marginTop: StatusBar.currentHeight || 0,\r\n  },\r\n  item: {\r\n    backgroundColor: '#f9c2ff',\r\n    padding: 20,\r\n    marginVertical: 8,\r\n    marginHorizontal: 16,\r\n  },\r\n  title: {\r\n    fontSize: 32,\r\n  },\r\n});\r\n\r\nexport default App;<\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<h3 style=\"color: #23b2e7;\">TouchableOpacity<\/h3>\r\n<p>Pada React Native terdapat komponen Button yang merupakan komponen tombol dasar yang dapat tampil dengan baik pada berbagai platform. Namun komponen ini hanya didukung oleh tingkat kustomisasi yang minimal. Seringkali Button ini dirasa tidak tampil dengan cukup baik pada aplikasi, sehingga disarankan untuk membuat\/desain tombol sendiri menggunakan TouchableOpacity atau TouchableNativeFeedback.<\/p>\r\n<p>TouchableOpacity merupakan pembungkus dari suatu komponen View, yang dapat merespon ketika dilakukan sentuhan oleh user. Ketika komponen ini disentuh, maka opacity pada komponen tersebut akan berkurang, atau terlihat menjadi semakin samar.<\/p>\r\n<p>Contoh:<\/p>\r\n<p>&nbsp;<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, { useState } from \"react\";\r\nimport { StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\r\n\r\nconst App = () =&gt; {\r\n  const [count, setCount] = useState(0);\r\n  const onPress = () =&gt; setCount(prevCount =&gt; prevCount + 1);\r\n\r\n  return (\r\n    &lt;View style={styles.container}&gt;\r\n      &lt;View style={styles.countContainer}&gt;\r\n        &lt;Text&gt;Count: {count}&lt;\/Text&gt;\r\n      &lt;\/View&gt;\r\n      &lt;TouchableOpacity\r\n        style={styles.button}\r\n        onPress={onPress}\r\n      &gt;\r\n        &lt;Text&gt;Press Here&lt;\/Text&gt;\r\n      &lt;\/TouchableOpacity&gt;\r\n    &lt;\/View&gt;\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    paddingHorizontal: 10\r\n  },\r\n  button: {\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#DDDDDD\",\r\n    padding: 10\r\n  },\r\n  countContainer: {\r\n    alignItems: \"center\",\r\n    padding: 10\r\n  }\r\n});\r\n\r\nexport default App;<\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<h3 style=\"color: #23b2e7;\">TextInput<\/h3>\r\n<p>Merupakan komponen dasar dalam melakukan input teks pada aplikasi menggunakan keyboard. Props pada komponen ini memiliki berbagai fitur yang dapat diatur, seperti auto-correction, auto-capitalization, placeholder, dan memilih tipe keyboard tertentu, seperti numeric keypad.<\/p>\r\n<p>Contoh paling dasar dalam penggunaan komponen ini adalah dengan memperhatikan event onChangeText dalam membaca input dari user. Terdapat juga beberapa event lain, seperti onSubmitEditing dan onFocus yang dapat kita konfigurasikan.<\/p>\r\n<p>&nbsp;<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from 'react';\r\nimport { TextInput } from 'react-native';\r\n\r\nconst App = () =&gt; {\r\n  const [value, onChangeText] = React.useState('Useless Placeholder');\r\n\r\n  return (\r\n    &lt;TextInput\r\n      style={{ height: 40, borderColor: 'gray', borderWidth: 1 }}\r\n      onChangeText={text =&gt; onChangeText(text)}\r\n      value={value}\r\n    \/&gt;\r\n  );\r\n}\r\n\r\nexport default App;<\/code><\/pre>","waktu_publish":"2021-11-09 21:06:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-10-05 07:33:03","updated_at":"2021-10-29 21:06:13","waktu_publish_formatted":" Selasa, 09 November 2021. 21:06:00 WIB."},{"id":1437,"uuid":"7a42ea42-1e52-451a-8b51-739690c4d145","author_user_id":12081,"materi_section_id":395,"judul":"Tugas 12 - React Native Component","permalink":"tugas-12-react-native-component","konten":"<p>Sebelum tugas mulai dikerjakan, berikut video briefing materi Component.<\/p>\r\n<figure class=\"wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\">\r\n<div class=\"wp-block-embed__wrapper\"><iframe title=\"Briefing Materi React Native - Component\" src=\"https:\/\/www.youtube.com\/embed\/laAL-z6F_9U?feature=oembed\" width=\"500\" height=\"281\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/div>\r\n<\/figure>\r\n<p>&nbsp;<\/p>\r\n<p>Pada tugas kali ini, Anda diminta untuk mulai membiasakan diri melakukan coding menggunakan sintaks-sintaks React Native. Untuk itu, kali ini Anda bisa mengikuti sebuah video tutorial untuk dapat membangun tampilan\/UI sederhana dari aplikasi Youtube. Sebelum mulai mengikuti tutorial tersebut, ada beberapa tahapan yang perlu dipersiapkan, antara lain:<\/p>\r\n<p>&nbsp;<\/p>\r\n<h3 style=\"color: #23b2e7;\">1. Mempersiapkan folder<\/h3>\r\n<p>Dalam mengerjakan tugas ini, silahkan membuat folder \"Tugas\" terlebih dahulu di dalam folder proyek Expo\/React Native yang telah dibuat. Dan di dalam folder \"Tugas\" buatlah folder \"Tugas12\". Dan di dalam folder \"Tugas12\", Anda bisa membuat file App.js dimana file ini sama dengan file App.js yang digunakan pada video tutorial tersebut. Selanjutnya Anda bisa melanjutkan ke tahap berikutnya.<\/p>\r\n<p>&nbsp;<\/p>\r\n<h3 style=\"color: #23b2e7;\">2. Mendownload data yang diperlukan<\/h3>\r\n<p>Pada tutorial tersebut, terdapat 3 data yang digunakan, yaitu asset,&nbsp; dummy.js dan Telegram.js. untuk asset untuk menyimpan semua bahan dari gambar dan lain lain, untuk dummy.js merupakan data api yang telah disusun sesuai dengan keperluan mockup, dan semua akan dipanggil ke file Telegram.js jadi file silahkan didownload dan dimasukan kedalam project teman teman&nbsp;&nbsp;<a href=\"https:\/\/drive.google.com\/drive\/folders\/1Fk4PvOjNvbZM26OIR8TzPxZcdHy-f-m8?usp=sharing\">https:\/\/drive.google.com\/drive\/folders\/1Fk4PvOjNvbZM26OIR8TzPxZcdHy-f-m8?usp=sharing<\/a>.<\/p>\r\n<p>&nbsp;<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-14986\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/02\/image-5.png\" alt=\"\" \/><\/figure>\r\n<p>&nbsp;<\/p>\r\n<h3 style=\"color: #23b2e7;\">4. Mockup figma&nbsp;<\/h3>\r\n<p>bagi teman teman yang ingin tau file figma silahkan akses link ini : https:\/\/www.figma.com\/file\/OPieK4UIhVfHMuioqIEDPx\/Telegram-clone?node-id=0%3A1<\/p>\r\n<h3 style=\"color: #23b2e7;\">Tutorial Membuat UI Aplikasi Telegram<\/h3>\r\n<p>&nbsp;<\/p>\r\n<p>Berikut tutorial membangun UI aplikasi mobile Telegram. Ikuti langkah-langkah yang digunakan di video tersebut dan pastikan code yang diikuti dapat dijalankan pada perangkat Android Anda.<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/EeqyarCd3MM?feature=youtu\" width=\"594\" height=\"333\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>\r\n<p>&nbsp;<\/p>\r\n<figure class=\"wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><\/figure>\r\n<p>Jika tutorial tersebut sudah diikuti sampai selesai, selanjutnya silahkan push hasil pekerjaan Anda ke Gitlab. Dan jangan lupa untuk mengumpulkan link commit hasil pekerjaan Anda ke sanbercode.com.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Dan Bagi teman-teman yang tidak bisa mengikuti video bisa lihat screenshoot coding berikut ini: pastikan dilihat index nomor angka nya, agar tetap dalam jalur<\/p>\r\n<p>App.js<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-14993\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/02\/image-6.png\" alt=\"\" \/><\/figure>\r\n<p>&nbsp;<\/p>\r\n<p>Telegram.js<\/p>\r\n<p><img src=\"https:\/\/dl.dropboxusercontent.com\/s\/oddq096z04fg9qk\/12.1.png\" width=\"855\" height=\"3522\" \/><\/p>","waktu_publish":"2021-11-09 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-10-05 07:33:21","updated_at":"2021-10-29 21:06:18","waktu_publish_formatted":" Selasa, 09 November 2021. 07:30:00 WIB."}]},{"id":396,"uuid":"56e20887-4916-4ddc-9158-8a624aba2e59","materi_id":27,"nama":"Hari 13 - React Native: Styling & Flexbox Layouting","permalink":"hari-13-react-native-styling-flexbox-layouting","urutan":14,"created_by":12081,"updated_by":12081,"created_at":"2021-10-06 07:57:05","updated_at":null,"posting":[{"id":1442,"uuid":"7bea3ffb-749f-42c5-bd9c-d20b80dea24b","author_user_id":12081,"materi_section_id":396,"judul":"Styling & Layouting","permalink":"styling-layouting","konten":"<p>Dengan React Native, kita tidak perlu menggunakan bahasa lain yang khusus untuk melakukan&nbsp;<em>styling.&nbsp;<\/em>Cukup menggunakan Javascript. Hampir semua Component bawaan dari React Native menerima&nbsp;<strong>prop<\/strong>&nbsp;yang bernama&nbsp;<strong>style<\/strong>. Cara kerja dan kegunaannya mirip dengan CSS yang ada pada web, yaitu untuk melakukan&nbsp;<em>styling<\/em>. Beberapa sintaks yang digunakan di CSS untuk styling dapat dilihat pada&nbsp;<a href=\"https:\/\/www.w3schools.com\/css\/\">w3school.com<\/a>.<\/p>\r\n<p>Namun ada sedikit perbedaan pada penulisannya, contoh pada CSS untuk mengatur warna latar suatu elemen, bisa menggunakan sintaks&nbsp;<code>background-color<\/code>, sementara di JavaScript\/React Native dituliskan dengan&nbsp;<code>backgroundColor&nbsp;<\/code>(menghilangkan &ldquo;-&rdquo; dan menjadikan huruf pertama pada kata berikutnya sebagai huruf kapital). Begitu juga pada property lainnya, mengikuti cara penulisan khusus untuk JavaScript.<\/p>\r\n<p>Untuk melakukan&nbsp;<em>styling<\/em>&nbsp;pada React Native kita bisa langsung mendefenisikannya dalam bentuk POJO (Plain old javascript object). Atau kita dapat menjadikan satu semua&nbsp;<em>style&nbsp;<\/em>ke dalam bentuk&nbsp;<em>array&nbsp;<\/em>untuk kemudian dapat kita panggil satu per satu.<\/p>\r\n<p>Dengan&nbsp;<em>style<\/em>&nbsp;kita bisa melakukan banyak perubahan tampilan pada setiap Component yang ada pada aplikasi yang kita bangun. Misalnya, merubah warna, background, padding, margin dsb.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Sumber:&nbsp;<a href=\"https:\/\/www.galihlprakoso.com\/2019\/02\/tutorial-react-native-indonesia-7-style.html\">https:\/\/www.galihlprakoso.com\/2019\/02\/tutorial-react-native-indonesia-7-style.html<\/a><\/p>\r\n<\/blockquote>\r\n<h3 id=\"box-model\" style=\"color: #23b2e7;\">Box Model<\/h3>\r\n<p>Semua elemen dapat dianggap sebagai box. Pada CSS istilah &ldquo;box model&rdquo; digunakan ketika berbicara tentang desain dan layout. Box model pada dasarnya merupakan kotak yang mengelilingi setiap elemen\/komponen. Hal ini terdiri dari margin, border, padding, dan konten\/komponen itu sendiri. Contoh gambaran dari box model, adalah sebagai berikut:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-4943\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/BoxModel.png\" sizes=\"(max-width: 889px) 100vw, 889px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/BoxModel.png 889w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/BoxModel-300x136.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/BoxModel-768x348.png 768w\" alt=\"\" width=\"889\" height=\"403\" \/>\r\n<figcaption>sumber: w3schools.com<\/figcaption>\r\n<\/figure>\r\n<p>Penjelasan:<\/p>\r\n<ul>\r\n<li>Content: Konten\/isi dari box, bisa berupa teks atau gambar yang muncul.<\/li>\r\n<li>Padding: Memberi jarak di sekitar content. Padding ini bersifat transparan.<\/li>\r\n<li>Border: Garis batas yang mengelilingi padding dan content.<\/li>\r\n<li>Margin: Memberi jarak pada area di luar border. Margin bersifat transparan.<\/li>\r\n<\/ul>\r\n<p>Box model membuat kita dapat menambahkan border yang mengelilingi elemen\/komponen, dan memberikan jarak antar elemen\/komponen.<\/p>\r\n<h2 id=\"flexbox\" style=\"color: #23b2e7;\">Flexbox<\/h2>\r\n<p>Untuk mengatur layout dari komponen children, dapat menggunakan pendekatan\/algoritma flexbox. Algoritma ini memungkinkan suatu layout mengembang atau mengecil sesuai dengan dimensi perangkat yang digunakan. Secara umum terdapat 3 property\/props yang perlu diperhatikan, antara lain:<\/p>\r\n<h3 id=\"flexdirection\" style=\"color: #23b2e7;\">flexDirection&nbsp;<\/h3>\r\n<p>flexDirection, mengatur arah urutan penyusunan komponen children, terdapat 2 pilihan yaitu &ldquo;column&rdquo; (default) dan &ldquo;row&rdquo;. &ldquo;Column&rdquo; menjadikan komponen children tersusun secara vertikal, sementara &ldquo;row&rdquo; membuat komponen children tersusun secara horizontal. Property ini menentukan arah sumbu utama (primary axis) yang akan mempengaruhi property lainnya<\/p>\r\n<h3 id=\"justifycontent\" style=\"color: #23b2e7;\">justifyContent<\/h3>\r\n<p>justifyContent, mengatur posisi children sepanjang sumbu utama (primary axis). Terdapat beberapa pilihan, antara lain:<\/p>\r\n<ul>\r\n<li>Flex-start, mengumpulkan komponen children pada posisi paling awal, tergantung jenis flexDirection yang dipilih, yaitu posisi paling atas untuk &ldquo;column&rdquo; dan posisi paling kiri untuk &ldquo;row&rdquo;.<\/li>\r\n<li>Flex-end, mengumpulkan komponen children pada posisi paling akhir, tergantung jenis flexDirection yang dipilih, yaitu posisi paling bawah untuk &ldquo;column&rdquo; dan posisi paling kanan untuk &ldquo;row&rdquo;.<\/li>\r\n<li>Center, mengumpulkan komponen children pada posisi tengah sesuai sumbu utamanya.<\/li>\r\n<li>Space-around, memberikan jeda\/whitespace antar komponen termasuk jarak terhadap ujung layout.<\/li>\r\n<li>Space-between, memberikan jeda\/whitespace antar komponen dimana komponen awal berada di pojok kiri\/atas dan komponen akhir berada di pojok kanan\/bawah, tergantung flexDirection yang digunakan.<\/li>\r\n<li>Space-evenly, membagi sama rata seluruh jeda\/whitespace pada masing-masing komponen.<\/li>\r\n<\/ul>\r\n<h3 id=\"alignitems\" style=\"color: #23b2e7;\">alignItems<\/h3>\r\n<p>alignItems, mengatur posisi children pada arah tegak lurus terhadap sumbu utama (atau disebut secondary axis). Terdapat beberapa pilihan, antara lain:<\/p>\r\n<ul>\r\n<li>Flex-start, seperti pada justifyContent namun children dikumpulkan pada posisi paling kiri untuk &ldquo;column&rdquo;, dan posisi paling atas untuk &ldquo;row&rdquo;.<\/li>\r\n<li>Flex-end, seperti pada justifyContent namun children dikumpulkan pada posisi paling kanan untuk &ldquo;column&rdquo;, dan posisi paling bawah untuk &ldquo;row&rdquo;.<\/li>\r\n<li>Center, seperti pada justifyContent dimana children dikumpulkan pada posisi tengah sesuai secondary axis-nya.<\/li>\r\n<li>Stretch, membuat container komponen children memenuhi\/memanjang sesuai secondary axis-nya.<\/li>\r\n<li>Baseline, membuat komponen children berada pada &ldquo;alas&rdquo; yang sama sesuai secondary axis-nya.<\/li>\r\n<\/ul>\r\n<p>Contoh, buatlah 2 file,&nbsp;<code>Flexbox.js<\/code>&nbsp;dan&nbsp;<code>Toggle.js<\/code>&nbsp;dalam satu folder<\/p>\r\n<p>Isi dari file&nbsp;<code>Flexbox.js<\/code>:<\/p>\r\n<div>\r\n<pre>&nbsp;<\/pre>\r\n<pre>import React, { useState } from \"react\";<br \/>import { View, StyleSheet } from \"react-native\";<br \/><br \/>import Toggle from \".\/Toggle\";<br \/><br \/>export default function Flexbox() {<br \/>&nbsp; const [flexDirection, setflexDirection] = useState(\"row\");<br \/>&nbsp; const [justifyContent, setjustifyContent] = useState(\"center\");<br \/>&nbsp; const [alignItems, setalignItems] = useState(\"center\");<br \/><br \/>&nbsp; const layoutStyle = { flexDirection, justifyContent, alignItems };<br \/><br \/>&nbsp; const primaryAxis = flexDirection === \"row\" ? \"Horizontal\" : \"Vertical\";<br \/>&nbsp; const secondaryAxis = flexDirection === \"row\" ? \"Vertical\" : \"Horizontal\";<br \/><br \/>&nbsp; return (<br \/>&nbsp; &nbsp; &lt;View style={styles.container}&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;Toggle<br \/>&nbsp; &nbsp; &nbsp; &nbsp; label={\"Primary axis (flexDirection)\"}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; value={flexDirection}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; options={[\"row\", \"column\"]}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; onChange={(option) =&gt; setflexDirection(option)}<br \/>&nbsp; &nbsp; &nbsp; \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;Toggle<br \/>&nbsp; &nbsp; &nbsp; &nbsp; label={primaryAxis + \" distribution (justifyContent)\"}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; value={justifyContent}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; options={[<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"flex-start\",<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"center\",<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"flex-end\",<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"space-around\",<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"space-between\",<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"space-evenly\",<br \/>&nbsp; &nbsp; &nbsp; &nbsp; ]}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; onChange={(option) =&gt; setjustifyContent(option)}<br \/>&nbsp; &nbsp; &nbsp; \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;Toggle<br \/>&nbsp; &nbsp; &nbsp; &nbsp; label={secondaryAxis + \" alignment (alignItems)\"}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; value={alignItems}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; options={[\"flex-start\", \"center\", \"flex-end\", \"stretch\", \"baseline\"]}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; onChange={(option) =&gt; setalignItems(option)}<br \/>&nbsp; &nbsp; &nbsp; \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;View style={[styles.layout, layoutStyle]}&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;View style={styles.box} \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;View style={styles.box} \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;View style={styles.box} \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;\/View&gt;<br \/>&nbsp; &nbsp; &lt;\/View&gt;<br \/>&nbsp; );<br \/>}<br \/><br \/>const styles = StyleSheet.create({<br \/>&nbsp; container: {<br \/>&nbsp; &nbsp; flex: 1,<br \/>&nbsp; },<br \/>&nbsp; layout: {<br \/>&nbsp; &nbsp; flex: 1,<br \/>&nbsp; &nbsp; backgroundColor: \"rgba(0,0,0,0.05)\",<br \/>&nbsp; },<br \/>&nbsp; box: {<br \/>&nbsp; &nbsp; padding: 25,<br \/>&nbsp; &nbsp; backgroundColor: \"steelblue\",<br \/>&nbsp; &nbsp; margin: 5,<br \/>&nbsp; },<br \/>});<\/pre>\r\n<\/div>\r\n<p>&nbsp;<\/p>\r\n<p>Dan isi dari&nbsp;<code>Toggle.js<\/code>:<\/p>\r\n<div>\r\n<div>\r\n<pre>import React from \"react\";<br \/>import { View, Text, TouchableOpacity, StyleSheet } from \"react-native\";<br \/><br \/>export default function Toggle({ label, options, value, onChange }) {<br \/>&nbsp; const onPress = (option) =&gt; {<br \/>&nbsp; &nbsp; onChange(option);<br \/>&nbsp; };<br \/><br \/>&nbsp; const renderOption = (option, i) =&gt; {<br \/>&nbsp; &nbsp; return (<br \/>&nbsp; &nbsp; &nbsp; &lt;TouchableOpacity<br \/>&nbsp; &nbsp; &nbsp; &nbsp; style={[styles.option, option === value &amp;&amp; styles.activeOption]}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; onPress={() =&gt; onPress(option)}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; key={i}<br \/>&nbsp; &nbsp; &nbsp; &gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;Text style={styles.text}&gt;{option}&lt;\/Text&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;\/TouchableOpacity&gt;<br \/>&nbsp; &nbsp; );<br \/>&nbsp; };<br \/><br \/>&nbsp; return (<br \/>&nbsp; &nbsp; &lt;View style={styles.container}&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;Text style={[styles.text, styles.label]}&gt;{label}&lt;\/Text&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;View style={styles.optionsContainer}&gt;{options.map(renderOption)}&lt;\/View&gt;<br \/>&nbsp; &nbsp; &lt;\/View&gt;<br \/>&nbsp; );<br \/>}<br \/><br \/>const styles = StyleSheet.create({<br \/>&nbsp; container: {<br \/>&nbsp; &nbsp; flexDirection: \"column\",<br \/>&nbsp; &nbsp; paddingBottom: 20,<br \/>&nbsp; },<br \/>&nbsp; text: {<br \/>&nbsp; &nbsp; fontSize: 14,<br \/>&nbsp; },<br \/>&nbsp; label: {<br \/>&nbsp; &nbsp; padding: 4,<br \/>&nbsp; },<br \/>&nbsp; optionsContainer: {<br \/>&nbsp; &nbsp; flexDirection: \"row\",<br \/>&nbsp; &nbsp; flexWrap: \"wrap\",<br \/>&nbsp; },<br \/>&nbsp; option: {<br \/>&nbsp; &nbsp; padding: 4,<br \/>&nbsp; &nbsp; backgroundColor: \"whitesmoke\",<br \/>&nbsp; },<br \/>&nbsp; activeOption: {<br \/>&nbsp; &nbsp; backgroundColor: \"skyblue\",<br \/>&nbsp; },<br \/>});<\/pre>\r\n<\/div>\r\n<\/div>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Sumber:&nbsp;<a href=\"http:\/\/www.reactnativeexpress.com\/flexbox\">http:\/\/www.reactnativeexpress.com\/flexbox<\/a><\/p>\r\n<\/blockquote>\r\n<p>Referensi lainnya yang bisa digunakan untuk mempelajari Flexbox ini dapat mengakses&nbsp;<a href=\"https:\/\/css-tricks.com\/snippets\/css\/a-guide-to-flexbox\/\">css-tricks.com<\/a>&nbsp;atau&nbsp;<a href=\"https:\/\/www.w3schools.com\/css\/css3_flexbox.asp\">w3schools.com<\/a>.<\/p>\r\n<p><strong>Props<\/strong><\/p>\r\n<p>Menghubungkan data dari parent component ke children component. Pada Class component, props dapat dipanggil menggunakan this.props. Meskipun props dapat diakses pada children component, namun props tidak dapat diubah di dalam komponen yang menggunakannya. Jika ingin mengubah isi data pada props hanya bisa dilakukan pada parent component.<\/p>\r\n<p><strong>Contoh Props<\/strong><\/p>\r\n<p>Buat file&nbsp;<strong>Props.js<\/strong>&nbsp;di Tugas 13 pada folder Tugas di folder SanberApps<\/p>\r\n<div>\r\n<pre>import React from \"react\";<br \/>import { StyleSheet, Text, TouchableOpacity, View } from \"react-native\";<br \/>const Card = ({ title }) =&gt; {<br \/> &nbsp;return&nbsp;(<br \/> &nbsp;&nbsp;&nbsp;&lt;TouchableOpacity&nbsp;style={styles.Button2}&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Text&gt;{title}&lt;\/Text&gt;<br \/> &nbsp;&nbsp;&nbsp;&lt;\/TouchableOpacity&gt;<br \/> &nbsp;);<br \/>};<br \/><br \/>export default function Props() {<br \/> &nbsp;return&nbsp;(<br \/> &nbsp;&nbsp;&nbsp;&lt;View&nbsp;style={styles.container}&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Card&nbsp;title=\"monkey\"&nbsp;\/&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Card&nbsp;title=\"One&nbsp;Piece\"&nbsp;\/&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Card&nbsp;title=\"Naruto\"&nbsp;\/&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Card&nbsp;title=\"Saitama\"&nbsp;\/&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Card&nbsp;title=\"Dragon&nbsp;ball\"&nbsp;\/&gt;<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Card&nbsp;title=\"Boku&nbsp;No&nbsp;Hero\"&nbsp;\/&gt;<br \/>&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/View&gt;<br \/><br \/> &nbsp;);<br \/>}<br \/><br \/>const styles = StyleSheet.create({<br \/> &nbsp;Button2:&nbsp;{<br \/> &nbsp;&nbsp;&nbsp;width:&nbsp;300,<br \/> &nbsp;&nbsp;&nbsp;height:&nbsp;30,<br \/> &nbsp;&nbsp;&nbsp;backgroundColor:&nbsp;\"skyblue\",<br \/> &nbsp;&nbsp;&nbsp;justifyContent:&nbsp;\"center\",<br \/> &nbsp;&nbsp;&nbsp;alignItems:&nbsp;\"center\",<br \/> &nbsp;},<br \/> &nbsp;container:&nbsp;{<br \/> &nbsp;&nbsp;&nbsp;padding:&nbsp;16,<br \/> &nbsp;},<br \/>});<\/pre>\r\n<\/div>\r\n<pre class=\"wp-block-preformatted\">&nbsp;<\/pre>\r\n<p>Kemudian tambahkan kode ini di app.js agar bisa dijalankan komponen tersebut<\/p>\r\n<p><img src=\"https:\/\/dl.dropboxusercontent.com\/s\/pux733p2hqzfz77\/13.1.png\" \/><\/p>\r\n<div id=\"gtx-trans\" style=\"position: absolute; left: 15px; top: -6.5625px;\">\r\n<div class=\"gtx-trans-icon\">&nbsp;<\/div>\r\n<\/div>","waktu_publish":"2021-11-10 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-10-06 07:58:02","updated_at":"2021-10-29 21:06:30","waktu_publish_formatted":" Rabu, 10 November 2021. 07:30:00 WIB."},{"id":1443,"uuid":"5e6e06d6-ac02-4858-8e2c-35014fe183f1","author_user_id":12081,"materi_section_id":396,"judul":"Tugas 13 - Styling & Flex","permalink":"tugas-13-styling-flex","konten":"<h2 style=\"color: #23b2e7;\">Membuat Layout Aplikasi<\/h2>\r\n<p>&nbsp;<\/p>\r\n<p>Pada tugas kali ini, buatlah folder \"Tugas13\" di dalam folder \"Tugas\", kemudian buatlah (minimal) 2 file yaitu <code>LoginScreen.js<\/code>&nbsp;dan&nbsp;<code>AboutScreen.js<\/code> di dalam folder \"Tugas13\" tersebut. Tambahkan folder <code>images&nbsp;<\/code>atau&nbsp;<code>assets<\/code> di dalam folder \"Tugas13\" tersebut jika diperlukan.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Yup, sesuai dengan apa yang ada di pikiran Anda, tugas kali ini adalah membangun layout aplikasi dari tugas Mockup yang telah dikumpulkan. Buatlah Halaman Login dan Halaman About dari mockup yang Anda buat.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Fokus pada tugas ini adalah mengatur layout dan styling dasar, tanpa harus menambahkan library baru. Jadi bagi Anda yang membuat mockup dengan desain yang dirasa sulit untuk diimplementasikan pada React Native\/Expo kali ini, dapat lebih fokus pada hal-hal yang sederhana, diantaranya:<\/p>\r\n<p>&nbsp;<\/p>\r\n<ul>\r\n<li>Styling dasar: backgroundColor, padding, margin, borderWidth, borderColor, borderRadius.<\/li>\r\n<li>Styling teks: color, fontSize, fontWeight.<\/li>\r\n<li>Styling gambar: height, width, resizeMode.<\/li>\r\n<li>Styling flexbox: flex, flexDirection, alignItems, justifyContent.<\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<p>Anda juga boleh menambahkan styling property lainnya sesuai kebutuhan pada desain mockup Anda.<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Atau Anda dapat juga mengerjakan tugas ini dengan menggunakan desain mockup berikut (identitas di halaman Tentang Saya bisa diubah menggunakan identitas Anda ataupun fiktif):<\/p>\r\n<p>&nbsp;<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-14089\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/halaman-contoh.png\" alt=\"\" \/><\/figure>\r\n<p>&nbsp;<\/p>\r\n<p>catatan asset dari mockup ini:<\/p>\r\n<p>&nbsp;<\/p>\r\n<ul>\r\n<li>Logo, bisa di&nbsp;<a href=\"https:\/\/drive.google.com\/drive\/folders\/1YBbEA7vN8KR8b0DSaKCVjyVXHiZpQZfi?usp=sharing\">download di sini<\/a>.<\/li>\r\n<li>Warna utama:\r\n<ul>\r\n<li>lightBlue: \"#3EC6FF\"<\/li>\r\n<li>darkBlue: \"#003366\"<\/li>\r\n<li>grayBackground: \"#EFEFEF\"<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Logo menggunakan icon \"Ionicons\"\r\n<ul>\r\n<li>Untuk meng-install react-native-vector-icon (khusus yang menggunakan React Native CLI), bisa menggunakan command berikut:<br \/><code>$ npm install --save react-native-vector-icons<\/code><br \/>dan melakukan konfigurasi seperti yang diperintahkan pada link berikut:&nbsp;<a href=\"https:\/\/github.com\/oblador\/react-native-vector-icons#installation\">https:\/\/github.com\/oblador\/react-native-vector-icons#installation<\/a><\/li>\r\n<li>Untuk bisa cepat mencari nama icon yang digunakan, dapat menuju link berikut:<br \/>Expo:&nbsp;<a href=\"https:\/\/icons.expo.fyi\/\">https:\/\/icons.expo.fyi\/<\/a><br \/>React Native:&nbsp;<a href=\"https:\/\/oblador.github.io\/react-native-vector-icons\/\">https:\/\/oblador.github.io\/react-native-vector-icons\/<\/a><\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<p>Mockup ini dapat diakses dengan menggunakan link figma berikut:<\/p>\r\n<p><br \/><a href=\"https:\/\/www.figma.com\/file\/yirpO6Kleq3fNGK3OKflNK\/Tugas-Layout?node-id=0%3A1\">https:\/\/www.figma.com\/file\/BaMBijbHJ6ZkbLb8J4txyE\/Tugas-Layout?node-id=0%3A1https:\/\/www.figma.com\/file\/Tugas-Styling<\/a><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Jika tugas sudah selesai dikerjakan, selanjutnya silahkan push hasil pekerjaan Anda ke Gitlab. Dan jangan lupa untuk mengumpulkan link commit hasil pekerjaan Anda ke member area sanbercode.com<\/p>","waktu_publish":"2021-11-10 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-10-06 07:58:30","updated_at":"2021-10-29 21:06:35","waktu_publish_formatted":" Rabu, 10 November 2021. 07:30:00 WIB."}]},{"id":397,"uuid":"cfcdb558-ebe2-4228-9248-e825b552c76e","materi_id":27,"nama":"Hari 14 - React Native: Component Lifecyle & Hooks API, REST API","permalink":"hari-14-react-native-component-lifecyle-hooks-api-rest-api","urutan":15,"created_by":12081,"updated_by":12081,"created_at":"2021-10-07 07:13:23","updated_at":null,"posting":[{"id":1446,"uuid":"4302ebda-4a5c-4b4d-9f26-5e6c1b64aae2","author_user_id":12081,"materi_section_id":397,"judul":"Component Lifecycle & Hooks API","permalink":"component-lifecycle-hooks-api","konten":"<h2 style=\"color: #23b2e7;\">Component<\/h2>\r\n<p>Komponen (Components) merupakan blok pembangun dari suatu UI (User Interface). React Native akan melakukan konversi komponen JavaScript menjadi komponen native (Android\/IOS) sehingga dapat muncul pada aplikasi. Komponen dalam React Native dapat dibentuk menggunakan <strong>Class <\/strong>atau <strong>Function<\/strong>.<\/p>\r\n<p>Tampilan UI dari aplikasi merupakan kumpulan komponen yang dideklarasikan dalam kode untuk dimunculkan dengan urutan yang telah ditetapkan. Komponen biasanya bersarang (nested) dari satu komponen ke komponen lainnya, membentuk struktur pohon\/hirarki. Komponen paling atas dikenal sebagai root component \/ parent sementara komponen di bawahnya dikenal sebagai children component.<\/p>\r\n<h2 style=\"color: #23b2e7;\">Statefull Functional Component<\/h2>\r\n<p><em><strong>Functional Component<\/strong>&nbsp;<\/em>adalah component yang didefinisikan menggunakan function sehingga lebih sederhana, tanpa harus belajar class,&nbsp;<code>this<\/code>&nbsp;context, state, dan lain sebagainya. Syaratnya hanya cukup mengerti bagaimana function javascript bekerja.<\/p>\r\n<pre class=\"wp-block-code\"><code>import * as React from 'react';\r\nimport { View, Text, TouchableOpacity } from 'react-native';\r\n\r\nconst Button =({title})=&gt;{\r\nreturn (\r\n &lt;TouchableOpacity&gt;\r\n  &lt;Text&gt;{title}&lt;\/Text&gt;\r\n&lt;\/TouchableOpacity&gt;\r\n)\r\n}\r\n\r\nfunction Hello() {\r\n    return (\r\n        &lt;View&gt;\r\n            &lt;Text&gt;Hello world&lt;\/Text&gt;\r\n             &lt;Button title=\"Hello\"\/&gt;\r\n        &lt;\/View&gt;\r\n    )\r\n}\r\n\r\nexport default Hello;<\/code><\/pre>\r\n<h2 id=\"components-api\" style=\"color: #23b2e7;\">Components API<\/h2>\r\n<p>Terdapat beberapa API yang dapat diakses di dalam sebuah component diantaranya adalah state dan Lifecycle API<\/p>\r\n<h3 id=\"state\" style=\"color: #23b2e7;\"><strong>State<\/strong><\/h3>\r\n<p>Merupakan data yang dapat berubah di dalam suatu komponen. Namun state tidak dapat diakses oleh parent component. State dapat dipanggil atau digunakan dengan menggunakan state. State tidak dapat diubah secara langsung dengan operator assignment (=), jika ingin merubah <strong>state<\/strong>, maka digunakan <strong>setState<\/strong>({namaState: nilai}).<\/p>\r\n<h3 id=\"lifecycle-api\" style=\"color: #23b2e7;\">Lifecycle API<\/h3>\r\n<p>Pada React Native, setiap komponen memiliki siklus atau lebih dikenal sebagai lifecycle. Lifecycle dapat mempermudah proses eksekusi suatu method atau function sehingga performa proses rendering menjadi lebih baik. Secara umum ada 3 kelompok Lifecycle, yaitu <strong>Mounting cycle<\/strong>, <strong>Updating cycle<\/strong>, dan <strong>Unmounting cycle<\/strong>.<\/p>\r\n<p><img src=\"https:\/\/dl.dropboxusercontent.com\/s\/oicnjjxj47d1qtz\/14.1.jpg\" alt=\"\" width=\"1064\" height=\"562\" \/><\/p>\r\n<p>sumber :&nbsp;<a href=\"https:\/\/twitter.com\/dan_abramov\/status\/981712092611989509\">https:\/\/twitter.com\/dan_abramov\/status\/981712092611989509<\/a><\/p>\r\n<h4 style=\"color: #23b2e7;\">Mounting cycle&nbsp;<\/h4>\r\n<p><strong>componentDidMount()<\/strong>, Method yang hanya dipanggil satu kali setelah proses render. Pada tahap ini UI untuk komponen ini telah selesai di render, dan komponen UI dapat diakses menggunakan this.ref untuk dimanipulasi lebih lanjut. Umumnya jika ingin mengeksekusi fungsi asynchronous dipanggil pada method ini.<\/p>\r\n<h4 style=\"color: #23b2e7;\">Updating cycle<\/h4>\r\n<p><strong>componentDidUpdate(prevProps prevState)<\/strong>, method ini dipanggil setelah terjadi perubahan pada state atau props yang ditetapkan dalam method ini. Pada tahap ini terjadi render ulang terhadap komponen UI.<\/p>\r\n<h4 style=\"color: #23b2e7;\">Unmounting<\/h4>\r\n<p><strong>componentWillUnmount()<\/strong>, method ini dipanggil tepat sebelum komponen dilepas dan dihapus. Pada tahap ini disarankan untuk menghentikan timer, membatalkan network request (seperti memanggil API dari web), dan menghentikan listener\/subscription yang dibuat pada method componentDidMount(), jika ada.<\/p>\r\n<p><span style=\"text-decoration: underline;\">Contoh aplikasi Lifecycle menggunakan <em>Class Component<\/em> :<\/span><\/p>\r\n<pre class=\"wp-block-preformatted\">import React, { Component } from 'react'\r\nimport { View, Text, StyleSheet } from 'react-native'\r\n\r\nclass Counter extends Component {\r\n\r\n&nbsp;&nbsp;state = {count: 0}\r\n\r\n&nbsp;&nbsp;componentDidMount() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;setInterval(() =&gt; {\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.setState({count: this.state.count + 1})\r\n&nbsp;&nbsp;&nbsp;&nbsp;}, 1000)\r\n&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;render() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;const {count} = this.state\r\n&nbsp;&nbsp;&nbsp;&nbsp;const {color, size} = this.props\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;return (\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Text style={{color, fontSize: size}}&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{count}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/Text&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;)\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nexport default class App extends Component {\r\n&nbsp;&nbsp;render() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return (\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;View style={styles.container}&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Counter color={'lightblue'} size={16} \/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Counter color={'skyblue'} size={32} \/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Counter color={'steelblue'} size={80} \/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Counter color={'darkblue'} size={140} \/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/View&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;)\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n&nbsp;&nbsp;container: {\r\n&nbsp;&nbsp;&nbsp;&nbsp;flex: 1,\r\n&nbsp;&nbsp;&nbsp;&nbsp;justifyContent: 'center',\r\n&nbsp;&nbsp;&nbsp;&nbsp;alignItems: 'center',\r\n&nbsp;&nbsp;},\r\n})<\/pre>\r\n<h2 id=\"hooks\" class=\"has-text-align-center\" style=\"color: #23b2e7;\">Hooks<\/h2>\r\n<p><strong>Hooks&nbsp;<\/strong>merupakan fitur baru di React 16.8 atau versi lebih baru dari itu. Dengan Hooks, kita dapat menggunakan state dan fitur React yang lain tanpa perlu menulis sebuah kelas baru. Hooks merupakan fungsi yang memungkinkan Anda untuk &ldquo;mengaitkan&rdquo; state dan fitur-fitur lifecycle React dari function component. Hooks tidak dapat berfungsi didalam kelas dan Hooks memungkinkan menggunakan React tanpa kelas<\/p>\r\n<p><strong>Function Component dengan hooks<\/strong><\/p>\r\n<p>Seperti yang sudah kita ketahui bahwa component dapat dibuat dengan dua cara yaitu menggunakan react subclass component atau dengan function component. sebelum React versi 16.8 beberapa frontend developer cenderung menggunakan class component karena di dalamnya kita bisa menggunakan state, namun permasalahan tersebut sudah ada solusinya yaitu hooks<\/p>\r\n<p>berikut ini contoh penggunaan&nbsp;<strong>hooks<\/strong>:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, { useState } from 'react';\r\nimport { Button, View, Text } from 'react-native';\r\n\r\nconst App = () =&gt; {\r\n  \/\/ Deklarasi variabel state baru yang kita sebut \"count\"\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    &lt;View style={{justifyContent:\"center\", flex:1, paddingHorizontal:16}}&gt;\r\n      &lt;Button onPress={() =&gt; setCount(value =&gt; (value + 1))} title=\"Tambah\"\/&gt;\r\n      &lt;Text style={{alignItems:'center'}}&gt;Anda menekan sebanyak {count} kali&lt;\/Text&gt;\r\n      &lt;Button onPress={() =&gt; setCount(value =&gt; (value - 1))} title=\"Kurang\"\/&gt;\r\n    &lt;\/View&gt;\r\n  );\r\n}\r\n\r\nexport default App<\/code><\/pre>\r\n<h2 id=\"implementasi-lifecycle-hooks-useeffect\" style=\"color: #23b2e7;\">Implementasi Lifecycle Hooks (UseEffect)<\/h2>\r\n<p>useEffect adalah salah satu bagian dari hook yang berfungsi <span style=\"text-decoration: underline;\">menggantikan lifecycle method yang ada dalam class component<\/span>, useEffect memungkinkan Anda melakukan efek samping (side effects) didalam function component<\/p>\r\n<p>Jika Anda familiar dengan React class lifecycle methods, Anda dapat menganggap Hook useEffect sebagaicomponentDidMount, componentDidUpdate, dan componentWillUnmount yang disatukan<\/p>\r\n<p>berikut ini contoh penerapan useEffect:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, { useEffect, useState } from 'react';\r\nimport { Button, View, Text } from 'react-native';\r\n\r\nconst App = () =&gt; {\r\n  \/\/ Deklarasi variabel state baru yang kita sebut \"count\"\r\n  const [count, setCount] = useState(0);\r\n  useEffect(()=&gt;{\r\n    setInterval(() =&gt; {\r\n      setCount(count + 1);\r\n    },3000);\r\n  });\r\n\r\n  return (\r\n    &lt;View style={{justifyContent:\"center\", flex:1, paddingHorizontal:16}}&gt;\r\n      &lt;Text&gt;Count Increment {count} times&lt;\/Text&gt;        \r\n    &lt;\/View&gt;\r\n  );\r\n}\r\n\r\nexport default App<\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<p>Untuk lebih detailnya tentang hooks dalam function component , bisa dilihat dalam video berikut ini<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/R2XtyeiQXdA\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>","waktu_publish":"2021-11-11 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-10-07 07:13:37","updated_at":"2021-10-29 21:06:49","waktu_publish_formatted":" Kamis, 11 November 2021. 07:30:00 WIB."},{"id":1447,"uuid":"9f78df0c-4850-4ae3-b1a5-ec1bb7e1aa31","author_user_id":12081,"materi_section_id":397,"judul":"Restful API","permalink":"restful-api","konten":"<div class=\"entry-content\">\r\n<h1 id=\"restful-api\" style=\"color: #23b2e7;\">RESTful API<\/h1>\r\n<p>API (Application Program Interface) merupakan metode interaksi\/komunikasi antar aplikasi\/program dalam bentuk request dan response, dimana response yang diberikan bergantung pada isi request nya.<\/p>\r\n<p>REST (Representional State Transfer) adalah suatu arsitektur metode komunikasi untuk pertukaran data yang umumnya menggunakan protokol HTTP. REST menjadikan objek\/data pada server sebagai sumber data yang dapat ditambah, diubah atau dihapus oleh client. Umumnya REST dapat digunakan di berbagai bahasa pemrograman.<\/p>\r\n<p>Kalian dapat melihat video materi REST API pada video berikut ini<br \/><iframe src=\"https:\/\/www.youtube.com\/embed\/1VVy8h_tp1M\" width=\"737\" height=\"413\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>\r\n<p>Berdasarkan pada definisi keduanya, maka RESTful API merupakan bentuk komunikasi antar program (API) dengan menggunakan arsitektur REST, yang diantaranya menggunakan protokol HTTP. Beberapa metode HTTP yang umum digunakan, antara lain:<\/p>\r\n<ul>\r\n<li><strong>GET<\/strong>, kegiatan menerima data.<br \/>contoh:&nbsp;<code>GET https:\/\/situsweb\/api\/users\/detail\/1<\/code>&nbsp;=&gt; mengambil data detail user dengan id = 1.<\/li>\r\n<li><strong>POST<\/strong>, kegiatan pengiriman\/input data untuk diproses selanjutnya.<br \/>contoh:&nbsp;<code>POST https:\/\/situsweb\/api\/users<\/code>&nbsp;=&gt; mengirim data user.<\/li>\r\n<li><strong>PUT<\/strong>, kegiatan mengubah data.<br \/>contoh&nbsp;<code>PUT https:\/\/situsweb\/api\/users\/update\/1<\/code>&nbsp;=&gt; melakukan update pada data user dengan id = 1.<\/li>\r\n<li><strong>DELETE<\/strong>, kegiatan menghapus data.<br \/>contoh:&nbsp;<code>DELETE https:\/\/situsweb\/api\/users\/delete\/1<\/code>&nbsp;=&gt; menghapus data user dengan id = 1.<\/li>\r\n<\/ul>\r\n<p>Perlu diperhatikan bahwa tidak semua API dapat diakses secara langsung, dan memerlukan Authentication. Dalam hal ini terkadang perlu dilakukan registrasi\/pendaftaran pada situs penyedia API tersebut. Setelah proses pendaftaran, biasanya akan diperoleh kode seperti API key, atau OAUTH token, atau bisa juga dalam bentuk client_id dan client_secret. Kode tersebut harus disertakan setiap kali melakukan request pada situs penyedia API tersebut.<\/p>\r\n<h1 id=\"postman\" style=\"color: #23b2e7;\">Postman<\/h1>\r\n<p>Postman merupakan salah satu platform kolaborasi untuk pengembangan API yang populer. Proses pembuatan API kita dapat lebih sederhana sehingga waktu pengembangan lebih cepat.<\/p>\r\n<p>Postman memiliki beberapa fitur yakni :<\/p>\r\n<ul>\r\n<li><strong>API Client<br \/><\/strong>Dapat digunakan untuk mengirim request REST, SOAP, dan GraphQL dengan memberikan beberapa parameter<\/li>\r\n<li><strong>Automated Testing<\/strong><\/li>\r\n<li><strong>Design &amp; Mock<\/strong><\/li>\r\n<li><strong>Documentation<br \/><\/strong>Membuat dan membagikan dokumentasi sehingga API lebih mudah digunakan dan dipelajari<\/li>\r\n<li><strong>Monitors<\/strong><\/li>\r\n<li><strong>Workspaces<\/strong><\/li>\r\n<\/ul>\r\n<p>Pada materi ini kita akan menggunakan fitur Client Postman untuk mencoba request ke REST API. Untuk dokumentasi memulai dengan Postan yang lebih lengkap dapat dilihat di :&nbsp;<a href=\"https:\/\/learning.postman.com\/docs\/getting-started\/introduction\/\">https:\/\/learning.postman.com\/docs\/getting-started\/introduction\/<\/a><\/p>\r\n<h2 style=\"color: #23b2e7;\">Instalasi<\/h2>\r\n<ol>\r\n<li>Buat akun di webiste :<br \/><a href=\"https:\/\/www.postman.com\/\">https:\/\/www.postman.com\/<\/a><\/li>\r\n<li>Download dan install postman dari link berikut :&nbsp;<br \/><a href=\"https:\/\/www.postman.com\/downloads\/\">https:\/\/www.postman.com\/downloads\/<\/a><\/li>\r\n<li>Buka postman dan login menggunakan akun anda.<br \/>Berikut adalah tampilan aplikasi postman<\/li>\r\n<\/ol>\r\n<p><img src=\"https:\/\/assets.postman.com\/postman-docs\/postman-app-default-v8.jpg\" alt=\"Postman\" width=\"537\" height=\"336\" \/><\/p>\r\n<h2 style=\"color: #23b2e7;\">Collection<\/h2>\r\n<p>Collection adalah kumpulan dari request untuk menjadikan workspace lebih rapi dan mudah digunakan. Lokasi collection berada di&nbsp;sidebar kiri&nbsp;&gt; pilih&nbsp;<strong>Collections<\/strong>. Umumnya satu collection digunakan untuk mengelompokkan request dengan endpoint atau object yang sama, misalnya&nbsp;<code>users, account, carts, dsb<\/code><\/p>\r\n<p>Kita dapat membuat sebuah collection baru dengan cara memilih tab&nbsp;<strong>Collection<\/strong>&nbsp;pada sidebar kiri dan klik&nbsp;<strong>+<\/strong>&nbsp;\"Create new Collection&rdquo; kemudian memasukkan nama Collection tersebut, bisa menggunakan nama Project maupun nama web \/ sumber API nya.<\/p>\r\n<p><img src=\"https:\/\/assets.postman.com\/postman-docs\/new-collection-v8.jpg\" alt=\"New collection\" width=\"414\" height=\"415\" \/><\/p>\r\n<p>Sumber :&nbsp;<a href=\"https:\/\/learning.postman.com\/docs\/sending-requests\/intro-to-collections\/\">https:\/\/learning.postman.com\/docs\/sending-requests\/intro-to-collections\/<\/a><\/p>\r\n<h2 style=\"color: #23b2e7;\">Request<\/h2>\r\n<p>Kita dapat mengirim request menggunakan Postman ke API tujuan kita untuk menerima, menambah, menghapus, dan memperbarui data di server. Request ditampilkan di tab bagian atas seperti pada browser<\/p>\r\n<p>Kita dapat menambahkan sebuah requst baru dengan cara click tombol&nbsp;<strong>+<\/strong>&nbsp;untuk membuka tab baru, kemudian anda dapat memasukkan URL detail request serta mengatur tipe request nya.<\/p>\r\n<p><img src=\"https:\/\/assets.postman.com\/postman-docs\/empty-request-v8.jpg\" alt=\"New Request\" width=\"663\" height=\"268\" \/><\/p>\r\n<p>Sumber :&nbsp;<a href=\"https:\/\/learning.postman.com\/docs\/sending-requests\/requests\/\">https:\/\/learning.postman.com\/docs\/sending-requests\/requests\/<\/a><\/p>\r\n<h3 style=\"color: #23b2e7;\">Request Details<\/h3>\r\n<p>Dibawah kolom input URL, Anda akan menemukan menu\/tab &ldquo;Params&rdquo;, &ldquo;Authentication&rdquo;, &ldquo;Header&rdquo;, &ldquo;Body&rdquo;, dan lainnya.<\/p>\r\n<ul>\r\n<li><strong>Params<\/strong>&nbsp;digunakan untuk menambah Query params. Kita dapat langsung memasukkan Key dan Value&nbsp;<strong>melalui tabel<\/strong>&nbsp;atau dengan&nbsp;<strong>menambahkan ke URL<\/strong>&nbsp;menggunakan sintaks&nbsp;<code class=\"language-text\">?id=1&amp;type=new<\/code>.<\/li>\r\n<li><strong>Body<\/strong>&nbsp;biasanya berisi data form yang akan dikirim kepada back-end\/server menggunakan method&nbsp;<code class=\"language-text\">PUT<\/code>,&nbsp;<code class=\"language-text\">POST<\/code>, atau&nbsp;<code class=\"language-text\">PATCH<\/code>, data dapat berupa &nbsp;<code class=\"language-text\">form-data<\/code>,&nbsp;<code class=\"language-text\">x-www-form-urlencoded<\/code><strong>&nbsp;,<\/strong>&nbsp;RAW Data (<strong>Text, JSON, XML<\/strong>)<\/li>\r\n<li><strong>Authorization&nbsp;<\/strong>digunakan untuk mengakses API yang memerlukan otentikasi, umumnya menggunakan API Key, Bearer Token, atau OAuth tergantung sumber\/penyedia API.<\/li>\r\n<li><strong>Header<\/strong>, Pada bagian ini biasanya dimasukkan informasi tambahan yang digunakan oleh back-end\/server untuk mengatur bagaimana cara response akan diberikan. Seperti Authentication dengan menggunakan key &ldquo;Authentication&rdquo; dan value dari Authentication yang diperlukan (misal bearer {token}). .<\/li>\r\n<\/ul>\r\n<h1 style=\"color: #23b2e7;\">AXIOS<\/h1>\r\n<p>Axios adalah HTTP client sederhada yang berdasarkan promise pada node.js. Berfungsi untuk melakukan request pada server untuk meminta atau mengirim data.<\/p>\r\n<h4 style=\"color: #23b2e7;\">Instalasi dan Import<\/h4>\r\nUntuk menginstall axios kita jalankan perintah :<\/div>\r\n<pre class=\"entry-content\"><span class=\"token function\">npm<\/span> <span class=\"token function\">install<\/span> axios<\/pre>\r\n<div class=\"entry-content\">Dan untuk menggunakannya kita harus melakukan import sebagai berikut agar fitur intellisense bekerja<\/div>\r\n<pre class=\"entry-content\"><span class=\"token punctuation\">import axios from 'axios';<\/span><\/pre>\r\n<h4 style=\"color: #23b2e7;\">Axios REST API<\/h4>\r\n<p class=\"entry-content\">Axios menyediakan API untuk beberapa metode REST<\/p>\r\n<ul>\r\n<li id=\"axiosgeturl-config\">axios.get(url[, config])<\/li>\r\n<li id=\"axiosdeleteurl-config\">axios.delete(url[, config])<\/li>\r\n<li id=\"axiosheadurl-config\">axios.head(url[, config])<\/li>\r\n<li id=\"axiosoptionsurl-config\">axios.options(url[, config])<\/li>\r\n<li id=\"axiosposturl-data-config\">axios.post(url[, data[, config]])<\/li>\r\n<li id=\"axiosputurl-data-config\">axios.put(url[, data[, config]])<\/li>\r\n<li id=\"axiospatchurl-data-config\">axios.patch(url[, data[, config]])<\/li>\r\n<\/ul>\r\n<h4 style=\"color: #23b2e7;\">Example<\/h4>\r\n<p>Berikut adalah beberapa contoh penggunaan axios untuk metode GET dan POST<\/p>\r\n<pre><span class=\"token comment\">\/\/ Make a request<\/span> <br \/>axios<span class=\"token punctuation\">.<\/span><span class=\"token function\">get<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'https:\/\/achmadhilmy-sanbercode.my.id\/api\/v1\/news'<\/span><span class=\"token punctuation\">)<br \/><\/span>  <span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">response<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<br \/><\/span>    <span class=\"token comment\">\/\/ handle success<br \/><\/span>    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>response<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<br \/><\/span>  <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<br \/><\/span>  <span class=\"token punctuation\">.<\/span><span class=\"token function\">catch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">error<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<br \/><\/span>    <span class=\"token comment\">\/\/ handle error<br \/><\/span>    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>error<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<br \/><\/span>  <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<br \/><\/span>  <span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<br \/><\/span>    <span class=\"token comment\">\/\/ always executed<\/span> <br \/><span class=\"token punctuation\">  }<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span> <br \/><br \/><span class=\"token comment\">\/\/ Send data to server <\/span> <br \/>axios<span class=\"token punctuation\">.<\/span><span class=\"token function\">post<\/span><span class=\"token punctuation\">(<\/span><span class=\"token string\">'https:\/\/achmadhilmy-sanbercode.my.id\/api\/v1\/news'<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">{<br \/><\/span>    title<span class=\"token operator\">:<\/span> <span class=\"token string\">'Indonesia Mengoding'<\/span><span class=\"token punctuation\">,<br \/><\/span>    value<span class=\"token operator\">:<\/span> <span class=\"token string\">'Bootcamp React Native'<br \/><\/span>  <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<br \/><\/span>  <span class=\"token punctuation\">.<\/span><span class=\"token function\">then<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">response<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<br \/><\/span>    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>response<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<br \/><\/span>  <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<br \/><\/span>  <span class=\"token punctuation\">.<\/span><span class=\"token function\">catch<\/span><span class=\"token punctuation\">(<\/span><span class=\"token keyword\">function<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token parameter\">error<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<br \/><\/span>    console<span class=\"token punctuation\">.<\/span><span class=\"token function\">log<\/span><span class=\"token punctuation\">(<\/span>error<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<br \/><\/span>  <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span><\/pre>","waktu_publish":"2021-11-11 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-10-07 07:13:45","updated_at":"2021-10-29 21:06:53","waktu_publish_formatted":" Kamis, 11 November 2021. 07:30:00 WIB."},{"id":1448,"uuid":"218637d0-4006-463c-bd11-75c617026228","author_user_id":12081,"materi_section_id":397,"judul":"Tugas 14 - Component Lifecycle, Hooks, and RESTful API","permalink":"tugas-14-component-lifecycle-hooks-and-restful-api","konten":"<h2 style=\"color: #23b2e7;\">Petunjuk Pengerjaan<\/h2>\r\n<p>&nbsp;<\/p>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<p>&nbsp;<\/p>\r\n<h3 style=\"color: #23b2e7;\">1. Menambahkan folder baru di dalam folder Tugas<\/h3>\r\n<p>&nbsp;<\/p>\r\n<p>buatlah folder baru dengan nama \"Tugas14\" di dalam folder Tugas di dalam project SanberApps di repository bootcampreactnative<\/p>\r\n<p>&nbsp;<\/p>\r\n<h3 style=\"color: #23b2e7;\">2. kerjakan implementasi rest api di bawah ini<\/h3>\r\n<p>&nbsp;<\/p>\r\n<p>implementasi kan REST API di dalamnya dengan menggunakan untuk di video menggunakan rest api local tpi untuk hari ini kita gunakan api dari online untuk method nya ada 4 berikut link untuk implementasinya&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>1. Get untuk meminta data dari server<\/strong><\/p>\r\n<p><strong>GET:&nbsp;<\/strong>https:\/\/sanbers-news-api.herokuapp.com\/api\/news<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>2. Post untuk mengembalikan data dari local ke server<\/strong><\/p>\r\n<p><strong>POST:&nbsp;<\/strong>&nbsp;https:\/\/sanbers-news-api.herokuapp.com\/api\/news<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>3.Put untuk meng edit data&nbsp;<\/strong><\/p>\r\n<p><strong>PUT:&nbsp;&nbsp;<\/strong>https:\/\/sanbers-news-api.herokuapp.com\/api\/news\/{id_news}<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>4. Delete untuk menghapus data&nbsp;<\/strong><\/p>\r\n<p><strong>DELETE:&nbsp;<\/strong>&nbsp;https:\/\/sanbers-news-api.herokuapp.com\/api\/news\/{id_news}<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>lalu pada app.js bagian Tugas13 yang menampilkan tugas sebelumnya di comment. lalu ganti dengan Tugas-14-RestApi<\/p>\r\n<p><strong>Tambahan<\/strong><\/p>\r\n<p>untuk aplikasi untuk mencoba rest api yaitu dengan postman: dapat di download di link berikut ini&nbsp;<a href=\"https:\/\/www.postman.com\/downloads\/\">https:\/\/www.postman.com\/downloads\/<\/a><\/p>\r\n<p>dan untuk value object di dalam rest api ada 2 yaitu title dan value<\/p>\r\n<p>link install axios :&nbsp;<a href=\"https:\/\/www.npmjs.com\/package\/react-native-axios\">https:\/\/www.npmjs.com\/package\/react-native-axios<\/a><\/p>\r\n<p>Untuk dokumentasi API, Anda bisa lihat pada link berikut ini :&nbsp;<a href=\"https:\/\/documenter.getpostman.com\/view\/3620561\/Tz5iALbR\">https:\/\/documenter.getpostman.com\/view\/3620561\/Tz5iALbR<\/a><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>Untuk ui\/ux boleh mengikuti di tutorial atau bisa buat sendiri<\/p>\r\n<p><strong>3. Untuk tutorial bisa mengikuti video in<\/strong>i :&nbsp;<\/p>\r\n<p>Method&nbsp;<strong>POST&nbsp;<\/strong>:&nbsp;<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/aD6Jhs3CMuc?list=PLU4DS8KR-LJ3SP3PpRb870UoT_0_rjLpV&amp;index=34\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>\r\n<p>method GET:&nbsp;<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/LVNxKZxYOD0?list=PLU4DS8KR-LJ3SP3PpRb870UoT_0_rjLpV&amp;index=35\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>\r\n<p>Method PUT :&nbsp;<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/w6hI0RF9MG4?list=PLU4DS8KR-LJ3SP3PpRb870UoT_0_rjLpV&amp;index=36\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>\r\n<p>Method Delete :&nbsp;<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/IWpIrboBu9g?list=PLU4DS8KR-LJ3SP3PpRb870UoT_0_rjLpV&amp;index=37\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>\r\n<p>Bagi teman teman yang tidak bisa mengikuti video silahkan di lihat untuk coding gambar berikut ini tetapi syaratnya harus sudah install axios<\/p>\r\n<p><img src=\"https:\/\/dl.dropboxusercontent.com\/s\/084xax81t592kvx\/14.1.png\" width=\"874\" height=\"4854\" \/><\/p>\r\n<p>setelah selesai masukan ke dalam SanberApp lalu commit ke gitlab dan kumpulkan lagi di member sanbercode.com sebagai tugas 14<\/p>","waktu_publish":"2021-11-11 09:30:00","status_publish":"publish","urutan":3,"created_by":12081,"updated_by":12081,"created_at":"2021-10-07 07:13:59","updated_at":"2021-10-29 21:06:56","waktu_publish_formatted":" Kamis, 11 November 2021. 09:30:00 WIB."}]},{"id":398,"uuid":"484affa8-7fb4-491c-a16c-1e770908163c","materi_id":27,"nama":"Hari 15 - React Navigation","permalink":"hari-15-react-navigation","urutan":16,"created_by":12081,"updated_by":12081,"created_at":"2021-10-08 08:09:58","updated_at":null,"posting":[{"id":1451,"uuid":"c707f422-c899-45c2-8d5f-aeb71ae5fb31","author_user_id":12081,"materi_section_id":398,"judul":"React Navigation","permalink":"react-navigation","konten":"<p>Pada materi kali ini kita akan membahas navigasi di React Native. Navigasi adalah cara berpindah halaman\/screen pada React Native. Di sini kita akan menggunakan versi React Navigation terbaru yaitu versi 6.x yang merupakan versi terbaru. Kita akan mempelajari bagaimana cara berpindah halaman\/screen di React Native.<\/p>\r\n<p>tutorail video: https:\/\/youtu.be\/F7fX2cf4JvY<\/p>\r\n<h2 id=\"instalasi-react-navigation\">Instalasi React Navigation<\/h2>\r\n<p>Sebelum memulai project, pertama install React Navigation dan Library lainnya yang di butuhkan dari folder project Expo\/React Native Anda:<\/p>\r\n<pre class=\"wp-block-preformatted\">npm install @react-navigation\/native\r\n\/\/ atau\r\nyarn add @react-navigation\/native <\/pre>\r\n<p>Selanjutnya instalasi dependencies yang diperlukan, tergantung metode init project yang digunakan:<\/p>\r\n<p><strong>Expo<\/strong>:<\/p>\r\n<pre class=\"wp-block-preformatted\">expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community\/masked-view <\/pre>\r\n<p><span style=\"color: #e03e2d;\"><strong>untuk expo, step instalasi cukup sampai disini.<\/strong><\/span><\/p>\r\n<p><strong>React Native CLI<\/strong>:<\/p>\r\n<pre class=\"wp-block-preformatted\">npm install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community\/masked-view\r\n\/\/ atau\r\nyarn add react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community\/masked-view<\/pre>\r\n<p>jika menggunakan Mac dan mengembangkan aplikasi iOS, diperlukan install pods (melalui Cocoapods) jalankan perintah berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">$ npx pod-install ios\r\n\/\/ atau\r\n$ cd ios &amp;&amp; pod install<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>jika menggunakan React Native dibawah versi 0.60 maka diperlukan konfigurasi tambahan. dapat dilihat pada web&nbsp;<a href=\"https:\/\/reactnavigation.org\/docs\/getting-started\/\">reactnavigation.org<\/a>.<\/p>\r\n<\/blockquote>\r\n<p>instalasi react navigation pada React Native CLI cukup sampai di sini.<\/p>\r\n<h2 id=\"setup-awal\">Setup Awal<\/h2>\r\n<p>Selanjutnya lakukan instalasi package Navigator yang akan digunakan, misal Stack Navigator:<\/p>\r\n<pre class=\"wp-block-preformatted\">$ npm install @react-navigation\/native-stack<br \/> \/\/ atau\r\n$ yarn add @react-navigation\/native-stack<\/pre>\r\n<p>Selanjutnya masuk ke root folder project cari&nbsp;<code>App.js<\/code>, dan tambahakan<\/p>\r\n<pre>import 'react-native-gesture-handler';<\/pre>\r\n<p>Kemudian buat file baru dengan nama&nbsp;<code>index.js<\/code>, di Tugas\/Tugas15, yang nantinya akan dipanggil ke&nbsp;<code>App.js<\/code>&nbsp;di root folder project. (File ini akan menjadi tempat utama dalam melakukan konfigurasi sistem navigasi pada aplikasi yang dibuat). Pada file tersebut tambahkan sintaks berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">import * as React from 'react';\r\nimport { NavigationContainer } from '@react-navigation\/native';<\/pre>\r\n<p>Sampai pada tahap ini Anda siap menggunakan React Navigation versi 6.x<\/p>\r\n<p>Contoh aplikasi:<\/p>\r\n<pre class=\"wp-block-preformatted\">import * as React from 'react';\r\nimport { Button, View, Text } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation\/native';\r\nimport { createNativeStackNavigator } from '@react-navigation\/native-stack';\r\n\r\n\/\/ Screen Home\r\nfunction HomeScreen({ navigation }) {\r\n  return (\r\n    &lt;View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}&gt;\r\n      &lt;Text&gt;Home Screen&lt;\/Text&gt;\r\n      &lt;Button\r\n        title=\"Go to Details\"\r\n        onPress={() =&gt; navigation.navigate('Details')}\r\n      \/&gt;\r\n\r\n      &lt;Button\r\n        color=\"red\"\r\n        title=\"Go to Profile\"\r\n        onPress={() =&gt; navigation.navigate('Profiles')}\r\n      \/&gt;\r\n\r\n    &lt;\/View&gt;\r\n  );\r\n}\r\n\r\n\/\/ Screen Detail\r\nfunction DetailsScreen({ route, navigation }) {\r\n  return (\r\n    &lt;View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}&gt;\r\n      &lt;Text&gt;Details Screen&lt;\/Text&gt;\r\n      &lt;Button\r\n        title=\"Go to Details... again\"\r\n        onPress={() =&gt; navigation.push('Details')}\r\n      \/&gt;\r\n      &lt;Button title=\"Go to Home\" onPress={() =&gt; navigation.navigate('Home')} \/&gt;\r\n      &lt;Button title=\"Go back\" onPress={() =&gt; navigation.goBack()} \/&gt;\r\n      &lt;Button\r\n        title=\"Go back to first screen in stack\"\r\n        onPress={() =&gt; navigation.popToTop()}\r\n      \/&gt;\r\n    &lt;\/View&gt;\r\n  );\r\n}\r\n\r\n\/\/ Screen Profile\r\nfunction ProfilesScreen({ route, navigation }) {\r\n  return (\r\n    &lt;View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}&gt;\r\n      &lt;Text&gt;Profile Screen&lt;\/Text&gt;\r\n      &lt;Button\r\n        color=\"black\"\r\n        title=\"Go to Home\"\r\n        onPress={() =&gt; navigation.navigate('Home')}\r\n      \/&gt;\r\n      &lt;Button title=\"Go back\" onPress={() =&gt; navigation.goBack()} \/&gt;\r\n      &lt;Button\r\n        color=\"green\"\r\n        title=\"Go back to first screen in stack\"\r\n        onPress={() =&gt; navigation.popToTop()}\r\n      \/&gt;\r\n    &lt;\/View&gt;\r\n  );\r\n}\r\n\r\n\/\/ Stack berguna untuk routing aplikasi\r\nconst Stack = createNativeStackNavigator();\r\n\r\nfunction StackNavigation() {\r\n  return (\r\n    &lt;NavigationContainer&gt;\r\n      &lt;Stack.Navigator initialRouteName=\"Home\"&gt;<br \/>     {\/* &lt;Stack.Screen name=\"NamaRute\" component={NamaRuteComponent} \/&gt; *\/}<br \/> &nbsp; &nbsp; &nbsp; &nbsp; &lt;Stack.Screen name=\"Home\" component={HomeScreen} \/&gt;\r\n        &lt;Stack.Screen name=\"Details\" component={DetailsScreen} \/&gt;\r\n        &lt;Stack.Screen name=\"Profiles\" component={ProfilesScreen} \/&gt;\r\n      &lt;\/Stack.Navigator&gt;\r\n    &lt;\/NavigationContainer&gt;\r\n  );\r\n}\r\n\r\nexport default StackNavigation;<\/pre>\r\n<p>Kemudian import pada&nbsp;<code>App.js<\/code>&nbsp;dan return komponennya<\/p>\r\n<pre>import Tugas15 from '.\/Tugas\/Tugas15';<br \/><br \/>export default function App() {<br \/>&nbsp; return (<br \/>&nbsp; &nbsp; &nbsp; &lt;Tugas15 \/&gt;<br \/>&nbsp; );<br \/>}<\/pre>\r\n<h2 id=\"berpindah-dan-mengirimkan-data-antar-halaman\">Berpindah dan Mengirimkan Data antar Halaman<\/h2>\r\n<p>Untuk melakukan kegiatan pindah antar halaman yang terdapat dalam aplikasi, diperlukan suatu fungsi. Pada Class based component, fungsi yang digunakan sedikit berbeda dengan Function based component:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ pada function component:\r\n export default function App ({route, navigation}) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return (\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;View&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Button\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title=\"Menuju Screen Lain\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onPress={() =&gt; navigation.navigate('NamaRute')}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/&gt;\r\n        &lt;Button\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title=\"Menuju Screen Lain\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onPress={() =&gt; navigation.navigate('NamaRute', {key:'value'})}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/&gt;\r\n        &lt;Text&gt;{route.params.key}&lt;\/Text&gt; \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;\/View&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;)\r\n}  <\/pre>\r\n<p>React Navigation versi 6.x memang dibuat agar bisa digunakan secara optimal dengan menggunakan Function based Component dan Hooks.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Sumber:<br \/><a href=\"https:\/\/reactnavigation.org\/docs\/getting-started\/\">https:\/\/reactnavigation.org\/docs\/getting-started\/<\/a><br \/><a href=\"https:\/\/www.konsepkoding.com\/2020\/03\/tutorial-react-native-react-navigation.html\">https:\/\/www.konsepkoding.com\/2020\/03\/tutorial-react-native-react-navigation.html<\/a><\/p>\r\n<\/blockquote>","waktu_publish":"2021-11-12 08:13:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-10-08 08:10:11","updated_at":"2021-11-04 10:21:22","waktu_publish_formatted":" Jumat, 12 November 2021. 08:13:00 WIB."},{"id":1452,"uuid":"ef68ba60-2770-4055-ba0c-effa4f37335b","author_user_id":12081,"materi_section_id":398,"judul":"Tugas 15 - React Navigation","permalink":"tugas-15-react-navigation","konten":"<p>Pada tugas kali ini silahkan membuat folder &ldquo;Tugas15&rdquo; dan disimpan pada folder Tugas Anda yang berada di folder project Expo\/React Native. Selanjutnya silahkan mengikuti instruksi yang telah diberikan.<\/p>\r\n<h2 id=\"1-tutorial-react-navigation-5-x\">1. Tugas -15<\/h2>\r\n<p>Pada bagian ini, Anda diminta untuk kembali mengikuti tutorial pada video berikut,<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/yr7DDjwZI3k\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>\r\n<p>Jangan lupa tambahkan kode screen option di bawah ini pada router <strong>Stack dan Tab Navigator <\/strong>agar header yang muncul hanya 1 saja :<\/p>\r\n<div>\r\n<pre>screenOptions={{ headerShown: false }}<\/pre>\r\n<\/div>\r\n<p>Jika tugas sudah selesai dikerjakan, selanjutnya silahkan push hasil pekerjaan Anda ke Gitlab. Dan jangan lupa untuk mengumpulkan link commit hasil pekerjaan Anda ke sanbercode.com.<\/p>\r\n<p>untuk file silahkan download disini : https:\/\/drive.google.com\/drive\/folders\/1UqGKkhOb22U08erW4zRq4em7O9Yw-fG9?usp=sharing<\/p>\r\n<p><strong>2. Latihan React navigation(Implementasi pada Tugas15)<\/strong><\/p>\r\n<p>Untuk menambah pengetahuan teman-teman tentang react navigation, silahkan aplikasikan react navigation pada page yang telah teman-teman buat pada tugas 15, <strong>latihan ini tidak dikumpukan<\/strong>&nbsp;<strong>tetapi&nbsp;<\/strong>untuk kebaikan teman-teman diharap untuk mengerjakan dan mencobanya agar lebih terasah lagi untuk materi react-navigation, untuk navigation yang telah diajarkan ada&nbsp;<\/p>\r\n<ol>\r\n<li>React-navigation\/stack<\/li>\r\n<li>React-navigation\/bottomTabNavigator<\/li>\r\n<li>React-navigation\/DrawwerNavigator&nbsp;&nbsp;<\/li>\r\n<\/ol>\r\n<p>untuk tambahan halaman teman teman dapat membuat dummy seperti yang ada pada tugas 15 diatas.<\/p>","waktu_publish":"2021-11-12 08:14:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-10-08 08:10:24","updated_at":"2021-10-29 21:07:13","waktu_publish_formatted":" Jumat, 12 November 2021. 08:14:00 WIB."}]},{"id":399,"uuid":"38e5328c-ba76-4281-b356-f9b24b27f246","materi_id":27,"nama":"Hari 16 - State Sharing & Management with Redux & Context","permalink":"hari-16-state-sharing-management-with-redux-context","urutan":17,"created_by":12081,"updated_by":12081,"created_at":"2021-10-11 00:43:57","updated_at":null,"posting":[{"id":1453,"uuid":"413d9744-e72b-4555-b282-6ebc362435e5","author_user_id":12081,"materi_section_id":399,"judul":"State Management with Redux","permalink":"state-management-with-redux","konten":"<h1>Why State Management ?<\/h1>\r\n<div class=\"entry-content\">\r\n<p>Sebelumnya, telah dipelajari tentang state dan props, termasuk bagaimana cara mengirim data dari suatu komponen ke komponen lainnya dengan menggunakan props.<\/p>\r\n<p>Namun bagaimana caranya memperoleh data yang sama pada komponen yang berbeda, misal data user yang diperoleh dari komponen Login dibutuhkan oleh komponen Checkout pada suatu aplikasi ecommerce?<\/p>\r\n<p>Salah satunya adalah dengan props drilling, yaitu mengirimkan data tersebut melalui props. Namun melihat kompleksnya aplikasi ecommerce, cara tersebut sangat tidak efisien.<\/p>\r\n<p>Untuk itulah diperlukan suatu komponen khusus yang dapat menyimpan data untuk bisa diakses oleh seluruh komponen pada aplikasi yang dikenal dengan istilah State Management.<\/p>\r\n<p>Pada pengembangan aplikasi React Native, terdapat beberapa pilihan library untuk state management, mulai dari Redux, MobX, dan Context. Khusus Context, ia sudah terpasang langsung pada setiap project React Native yang baru. Sementara Redux dan MobX memerlukan proses instalasi dan konfigurasi sebelum dapat menggunakannya.<\/p>\r\n<h1>What is REDUX ?<\/h1>\r\n<p>Pada materi kali ini kita akan membahas tentang Redux. Redux merupakan library yang umum digunakan untuk mengelola state dan data pada aplikasi skala menengah sampai besar. Komponen utama dari Redux dapat dikelompokkan menjadi beberapa bagian:<\/p>\r\n<ul>\r\n<li>Store<br \/>merupakan tempat disimpannya data atau state dari aplikasi, atau gudangnya state. Isi dari store bisa didapat menggunakan store.getState(). State dari store tidak boleh diubah secara langsung namun bisa dilakukan melalui method dispatch, misal store.dispatch(action).<\/li>\r\n<li>Actions<br \/>merupakan komponen object yang umumnya memiliki key &lsquo;<code>type<\/code>&lsquo; (misal {<code>type: 'INCREMENT}<\/code>). kita bisa menambahkan key lainnya, termasuk diantaranya &lsquo;<code>payload<\/code>&lsquo; yang biasa digunakan sebagai data tambahan di dalam actions (misal,&nbsp;<code>{type: 'INCREMENT', payload: 42}<\/code>).<\/li>\r\n<li>Action Creator<br \/>Merupakan fungsi yang menerima parameter dan akan menggenerate objek action yang akan kita gunakan<\/li>\r\n<li>Reducers<br \/>merupakan suatu fungsi yang akan menerima action dan mengubah state dalam store. Proses perubahan state tersebut didefinisikan pada fungsi ini sesuai dengan jenis action yang dipanggil sampai mengembalikan suatu state baru :&nbsp;<code>(state, action) =&gt; newState<\/code>.<\/li>\r\n<\/ul>\r\n<h1>Instalasi<\/h1>\r\n<p>Sebelum menggunakan Redux, Anda perlu melakukan proses instalasi berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">$ npm install @reduxjs\/toolkit react-redux<\/pre>\r\n<h1 id=\"contoh-redux\">Contoh Struktur Kode Redux<\/h1>\r\n<p>Contoh aplikasi sederhana menggunakan Redux, buat folder baru Tugas19 :<\/p>\r\n<h4>1. Membuat Store REDUX<\/h4>\r\n<p>Buat file bernama <code>Tugas19\/redux\/store.js<\/code>. Import fungsi <code>configureStore<\/code> API dari Redux Toolkit. Kita mulai dengan membuat sebuat Redux store kosong, dan kita exporting store kita:<\/p>\r\n<pre><span class=\"token-line\"><span class=\"token keyword module\">import<\/span> <span class=\"token imports punctuation\">{<\/span><span class=\"token imports\"> configureStore <\/span><span class=\"token imports punctuation\">}<\/span> <span class=\"token keyword module\">from<\/span> <span class=\"token string\">'@reduxjs\/toolkit'<\/span><\/span> <br \/><br \/><span class=\"token-line\"><span class=\"token keyword module\">export<\/span> <span class=\"token keyword\">const<\/span><span class=\"token plain\"> store <\/span><span class=\"token operator\">=<\/span> <span class=\"token function\">configureStore<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">{<\/span><\/span><span class=\"token-line\"><span class=\"token plain\"> reducer<\/span><span class=\"token operator\">:<\/span> <span class=\"token punctuation\">{<\/span><span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">,<\/span><\/span><span class=\"token-line\"><span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">)<\/span><\/span><\/pre>\r\n<h4>2. Menghubungkan Provider dengan Store<\/h4>\r\n<p>Setelah Store dibuat, kita mengkonfigurasi Provider agar Store dapat diakses oleh seluruh React components kita dengan cara memasukkan aplikasi kita pada React-Redux <code>&lt;Provider&gt;<\/code> di <code>Tugas19\/index.js<\/code>.<\/p>\r\n<p>Import Redux store yang barusaja kita buat dan tambahkan komponen <code>&lt;Provider&gt;<\/code> yang akan membungkus aplikasi utama kita <code>&lt;App&gt;<\/code>, dan kirimkan objek store yang sudah kita buat sebagai props :<\/p>\r\n<pre><code>\/\/file: Tugas19\/index.js<br \/><\/code>import React from \"react\";<br \/><br \/>import store from \".\/app\/store\";<br \/>import { Provider } from \"react-redux\";<br \/><br \/>import CounterScreen from \".\/screens\/CounterScreen\";<br \/><br \/>export default function Tugas19() {<br \/>&nbsp; &nbsp; return (<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;Provider store={store}&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;CounterScreen \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;\/Provider&gt;<br \/>&nbsp; &nbsp; );<br \/>}<\/pre>\r\n<h4>3. Membuat REDUX Slice<\/h4>\r\n<p>Tambahkan file baru bernama <code>Tugas19\/redux\/counterSlice.js<\/code>. Pada file tersebut, import <code>createSlice<\/code> API dari Redux Toolkit.<\/p>\r\n<p>Slice merupakan gabungan dari reducer, action, dan action creator. Di dalam slice, kita memerlukan<\/p>\r\n<ul>\r\n<li><strong>Nama<\/strong> berupa string untuk mengidentifikasi jenis slice<\/li>\r\n<li><strong>Initial state<\/strong> value,<\/li>\r\n<li><strong>reducer<\/strong> functions untuk mendefinisikan fungsi apasaja yang dapat kita lakukan pada state.<\/li>\r\n<\/ul>\r\n<p>Setelah Slice dibuat, kita dapat export Redux action creators dan fungsi reducer yang secara otomatis di generate oleh slice.&nbsp;<\/p>\r\n<blockquote>\r\n<p>Redux memerlukan kita untuk <a href=\"https:\/\/redux.js.org\/tutorials\/fundamentals\/part-2-concepts-data-flow#immutability\" target=\"_blank\" rel=\"noopener noreferrer\">menulis seluruh perubahan state secara immutable, dengan cara membuat salinan dari data dan memperbaharui salinan tersebut<\/a>. Tetapi, Redux Toolkit's <code>createSlice<\/code> dan <code>createReducer<\/code> APIs menggunakan library <a href=\"https:\/\/immerjs.github.io\/immer\/\" target=\"_blank\" rel=\"noopener noreferrer\">Immer<\/a> didalamnya, sehingga memperbolehkan kita untuk <a href=\"https:\/\/redux.js.org\/tutorials\/fundamentals\/part-8-modern-redux#immutable-updates-with-immer\" target=\"_blank\" rel=\"noopener noreferrer\">menulis \"mutating\" update logic dan akan dikonversi menjadi immutable updates yang sesuai<\/a>.<\/p>\r\n<\/blockquote>\r\n<\/div>\r\n<pre><code>\/\/file: Tugas19\/redux\/counterSlice.js<\/code><br \/>import { createSlice } from \"@reduxjs\/toolkit\";<br \/><br \/>const initialState = {<br \/>&nbsp; &nbsp; value: 0,<br \/>};<br \/><br \/>export const counterSlice = createSlice({<br \/>&nbsp; &nbsp; name: \"counter\",<br \/>&nbsp; &nbsp; initialState,<br \/>&nbsp; &nbsp; reducers: {<br \/>&nbsp; &nbsp; &nbsp; &nbsp; increment: (state) =&gt; {<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \/\/ Redux Toolkit allows us to write \"mutating\" logic in reducers. It<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \/\/ doesn't actually mutate the state because it uses the Immer library,<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \/\/ which detects changes to a \"draft state\" and produces a brand new<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \/\/ immutable state based off those changes<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; state.value += 1;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; },<br \/>&nbsp; &nbsp; &nbsp; &nbsp; decrement: (state) =&gt; {<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; state.value -= 1;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; },<br \/>&nbsp; &nbsp; &nbsp; &nbsp; incrementByAmount: (state, action) =&gt; {<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; state.value += action.payload;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; },<br \/>&nbsp; &nbsp; },<br \/>});<br \/><br \/>\/\/ Action creators are generated for each case reducer function<br \/>export const { increment, decrement, incrementByAmount } = counterSlice.actions;<br \/><br \/>export default counterSlice.reducer;<\/pre>\r\n<h4>4. Menambahkan Reducer ke Store<\/h4>\r\n<p>Selanjutkan, kita harus import fungsi reducer dari counter slice dan menambahkannya ke store kita di <code>Tugas19\/redux\/store.js<\/code>.<\/p>\r\n<p>Definisikan sebuah objek didalam <code>reducer<\/code> parameter, dan atur agar store menggunakan fungsi dari slice reducer.<\/p>\r\n<div>\r\n<pre><code>\/\/file: Tugas19\/redux\/store.js<\/code><br \/>import { configureStore } from \"@reduxjs\/toolkit\";<br \/>import counterReducer from \"..\/redux\/CounterSlice\";<br \/><br \/>export default configureStore({<br \/>&nbsp; reducer: {<br \/>&nbsp; &nbsp; counter: counterReducer,<br \/>&nbsp; },<br \/>});<\/pre>\r\n<\/div>\r\n<div class=\"entry-content\">\r\n<div>\r\n<h4>4. Menggunakan Redux State dan Action pada Komponen Screen<\/h4>\r\n<p>Sekarang kita dapat menggunakan React-Redux hooks agar React components dapat berinteraksi dengan Redux store. Kita dapat membaca data pada store menggunakan <code>useSelector<\/code>, dan mengirimkan actions menggunakan <code>useDispatch<\/code>.<\/p>\r\n<p>Buat sebuah file&nbsp; <code>Tugas19\/screens\/CounterScreen.js<\/code> file yang berisi tombol dan teks. kemudian import komponen tersebut ke file <code>index.js<\/code> and render it inside of&nbsp;<code>App.js<\/code>.<\/p>\r\n<pre><code>\/\/file: Tugas19\/screens\/CounterScreen.js<\/code><br \/>import React from \"react\";<br \/>import { Button, StyleSheet, Text, View } from \"react-native\";<br \/>import { useSelector, useDispatch } from \"react-redux\";<br \/>import { decrement, increment } from \"..\/redux\/counterSlice\";<br \/><br \/>export default function CounterScreen() {<br \/>&nbsp; &nbsp; const count = useSelector((state) =&gt; state.counter.value);<br \/>&nbsp; &nbsp; const dispatch = useDispatch();<br \/><br \/>&nbsp; &nbsp; return (<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;View&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;View&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;Button title=\"Increment\" onPress={() =&gt; dispatch(increment())} \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;Text&gt;{count}&lt;\/Text&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;Button title=\"Decrement\" onPress={() =&gt; dispatch(decrement())} \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;\/View&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;\/View&gt;<br \/>&nbsp; &nbsp; );<br \/>}<br \/><br \/>const styles = StyleSheet.create({});<\/pre>\r\n<blockquote>\r\n<p>Sumber : https:\/\/redux-toolkit.js.org\/tutorials\/quick-start<\/p>\r\n<\/blockquote>\r\n<\/div>\r\n<\/div>","waktu_publish":"2021-11-15 07:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-10-11 00:45:29","updated_at":"2021-10-29 21:07:34","waktu_publish_formatted":" Senin, 15 November 2021. 07:30:00 WIB."},{"id":1454,"uuid":"dcb02b47-0f06-4c13-840e-57f14b1df37f","author_user_id":12081,"materi_section_id":399,"judul":"State Management with Context","permalink":"state-management-with-context","konten":"<header class=\"entry-header\"><\/header>\r\n<div class=\"entry-content\">\r\n<p>Sebelumnya, telah dipelajari tentang state dan props, termasuk bagaimana cara mengirim data dari suatu komponen ke komponen lainnya dengan menggunakan props.<\/p>\r\n<p>Namun bagaimana caranya memperoleh data yang sama pada komponen yang berbeda, misal data user yang diperoleh dari komponen Login dibutuhkan oleh komponen Checkout pada suatu aplikasi ecommerce?<\/p>\r\n<p>Salah satunya adalah dengan props drilling, yaitu mengirimkan data tersebut melalui props. Namun melihat kompleksnya aplikasi ecommerce, cara tersebut sangat tidak efisien.<\/p>\r\n<p>Untuk itulah diperlukan suatu komponen khusus yang dapat menyimpan data untuk bisa diakses oleh seluruh komponen pada aplikasi yang dikenal dengan istilah State Management.<\/p>\r\n<p>Pada pengembangan aplikasi React Native, terdapat beberapa pilihan library untuk state management, mulai dari Redux, MobX, dan Context. Khusus Context, ia sudah terpasang langsung pada setiap project React Native yang baru. Sementara Redux dan MobX memerlukan proses instalasi dan konfigurasi sebelum dapat menggunakannya.<\/p>\r\n<p>Pada meteri kali ini kita akan membahas tentang Context. Disini kita menggunakan beberapa fitur dari context, yaitu useContext, context provider, create context. lalu dalam pengimplementasian componentnya kita menggunakan hooks. Berikut ilustrasi dalam penggunaan context provider<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/Screenshot_26-1024x581.png\" alt=\"Gambar ini memiliki atribut alt yang kosong; nama berkasnya adalah Screenshot_26-1024x581.png\" width=\"679\" height=\"385\" \/><\/p>\r\n<h2>Implementasi Context<\/h2>\r\n<p>Apabila kita mempunyai data seperti ini dan ingin menggunakannya, maka biasanya kita gunakan state dalam komponen.<\/p>\r\n<p>let movie = [<br data-rich-text-line-break=\"true\" \/>{ name: \"Harry Potter\", lengthOfTime: 120},<br data-rich-text-line-break=\"true\" \/>{ name: \"Sherlock Holmes\", lengthOfTime: 125},<br data-rich-text-line-break=\"true\" \/>{ name: \"Avengers\", lengthOfTime: 130},<br data-rich-text-line-break=\"true\" \/>{ name: \"Spiderman\", lengthOfTime: 124},<br data-rich-text-line-break=\"true\" \/>]<\/p>\r\n<p>Tapi jika kita menggunakan context, kita pindahkan inisialisasinya di dalam file JS terpisah, yaitu di dalam file&nbsp;<code>MovieContext.js<\/code>&nbsp;pada&nbsp;<strong>folder context<\/strong>, yang akan menggunakan context provider, dan createContext<\/p>\r\n<div>\r\n<pre>import React, { useState, createContext } from 'react';<br \/><br \/>export const MovieContext = createContext();<br \/><br \/>export const MovieProvider = ({ children }) =&gt; {<br \/>&nbsp; const [movie, setMovie] = useState([<br \/>&nbsp; &nbsp; { name: 'Harry Potter', lengthOfTime: 120 },<br \/>&nbsp; &nbsp; { name: 'Sherlock Holmes', lengthOfTime: 125 },<br \/>&nbsp; &nbsp; { name: 'Avengers', lengthOfTime: 130 },<br \/>&nbsp; &nbsp; { name: 'Spiderman', lengthOfTime: 124 },<br \/>&nbsp; ]);<br \/><br \/><br \/>&nbsp; return (<br \/>&nbsp; &nbsp; &lt;MovieContext.Provider value={[movie, setMovie]}&gt;<br \/>&nbsp; &nbsp; &nbsp; {children}<br \/>&nbsp; &nbsp; &lt;\/MovieContext.Provider&gt;<br \/>&nbsp; );<br \/>};<\/pre>\r\n<p><br \/>Lalu bagaimanakah kita menggunakan context diatas, disini kita akan membuat file baru yang bernama MovieScreen.js pada folder screens yang berisi movie provider dan dan component movie list dan movie form<\/p>\r\n<pre>import React from 'react';<br \/>import { MovieProvider } from '..\/context\/MovieContext';<br \/>import MovieList from '..\/components\/MovieList';<br \/>import MovieForm from '..\/components\/MovieForm';<br \/><br \/>const MovieScreen = () =&gt; {<br \/>&nbsp; return (<br \/>&nbsp; &nbsp; &lt;MovieProvider&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;MovieList \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;MovieForm \/&gt;<br \/>&nbsp; &nbsp; &lt;\/MovieProvider&gt;<br \/>&nbsp; );<br \/>};<br \/><br \/>export default MovieScreen;<\/pre>\r\n<\/div>\r\n<div>\r\n<div>&nbsp;<\/div>\r\n<div>kenapa movie list dan movie form component harus berada di dalam movie provider itu karena kita akan menggunakan state yang ada di dalam movie provider<\/div>\r\n<div>&nbsp;<\/div>\r\n<div>lalu kita isi MovieList.js pada folder components dengan kode seperti di bawah ini:<\/div>\r\n<div>&nbsp;<\/div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<pre>import React, { useContext } from 'react';<br \/>import { FlatList, StyleSheet, Text, View } from 'react-native';<br \/>import { MovieContext } from '..\/context\/MovieContext';<br \/><br \/>const MovieList = () =&gt; {<br \/>&nbsp; const [movie] = useContext(MovieContext);<br \/><br \/>&nbsp; return (<br \/>&nbsp; &nbsp; &lt;FlatList<br \/>&nbsp; &nbsp; &nbsp; data={movie}<br \/>&nbsp; &nbsp; &nbsp; renderItem={({ item }) =&gt; (<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;View style={styles.listContainer}&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;Text&gt;Name : {item.name}&lt;\/Text&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;Text&gt;Lengtho of Time : {item.lengthOfTime}&lt;\/Text&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;\/View&gt;<br \/>&nbsp; &nbsp; &nbsp; )}<br \/>&nbsp; &nbsp; \/&gt;<br \/>&nbsp; );<br \/>};<br \/><br \/>const styles = StyleSheet.create({<br \/>&nbsp; listContainer: {<br \/>&nbsp; &nbsp; borderWidth: 1,<br \/>&nbsp; &nbsp; borderRadius: 8,<br \/>&nbsp; &nbsp; borderColor: '#eaeaea',<br \/>&nbsp; &nbsp; padding: 10,<br \/>&nbsp; &nbsp; marginHorizontal: 10,<br \/>&nbsp; &nbsp; marginVertical: 5,<br \/>&nbsp; },<br \/>});<br \/><br \/>export default MovieList;<\/pre>\r\n<\/div>\r\n<div>&nbsp;<\/div>\r\n<\/div>\r\n<\/div>\r\n<\/div>\r\n<div>\r\n<p>disini kita menggunakan state di dalam context provider yang berisi data film lalu kita munculkan isi data, dari sini terlihat tidak berbeda dari kode useState biasa tapi jika di kita lihat lebih teliti lagi, disini kita tidak menginisialisasi lagi karna data sudah kita tampung di provider<br \/><br \/>dan untuk MovieForm.js pada folder components kita tulis kode seperti di bawah ini<\/p>\r\n<div>\r\n<div>\r\n<pre>import React, { useContext, useState } from 'react';<br \/>import { Button, StyleSheet, TextInput, View } from 'react-native';<br \/>import { MovieContext } from '..\/context\/MovieContext';<br \/><br \/>const MovieForm = () =&gt; {<br \/>&nbsp; const [name, setName] = useState('');<br \/>&nbsp; const [lengthOfTime, setLengthOfTime] = useState(0);<br \/>&nbsp; const [movie, setMovie] = useContext(MovieContext);<br \/><br \/>&nbsp; const handleSubmit = () =&gt; {<br \/>&nbsp; &nbsp; setMovie([...movie, { id: Math.random(), name, lengthOfTime }]);<br \/>&nbsp; &nbsp; setName('');<br \/>&nbsp; &nbsp; setLengthOfTime('');<br \/>&nbsp; };<br \/>&nbsp; const handleChangeName = (text) =&gt; {<br \/>&nbsp; &nbsp; setName(text);<br \/>&nbsp; };<br \/><br \/>&nbsp; const handleChangeTime = (text) =&gt; {<br \/>&nbsp; &nbsp; setLengthOfTime(text);<br \/>&nbsp; };<br \/><br \/>&nbsp; return (<br \/>&nbsp; &nbsp; &lt;View&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;TextInput<br \/>&nbsp; &nbsp; &nbsp; &nbsp; style={styles.formInputText}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; value={name}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; onChangeText={handleChangeName}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; placeholder=\"Input Movie Title\"<br \/>&nbsp; &nbsp; &nbsp; \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;TextInput<br \/>&nbsp; &nbsp; &nbsp; &nbsp; style={styles.formInputText}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; keyboardType=\"numeric\"<br \/>&nbsp; &nbsp; &nbsp; &nbsp; value={lengthOfTime}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; onChangeText={handleChangeTime}<br \/>&nbsp; &nbsp; &nbsp; &nbsp; placeholder=\"Input Movie Length\"<br \/>&nbsp; &nbsp; &nbsp; \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;Button title=\"Submit\" onPress={handleSubmit} \/&gt;<br \/>&nbsp; &nbsp; &lt;\/View&gt;<br \/>&nbsp; );<br \/>};<br \/><br \/>const styles = StyleSheet.create({<br \/>&nbsp; formInputText: {<br \/>&nbsp; &nbsp; alignItems: 'center',<br \/>&nbsp; &nbsp; borderColor: '#eaeaea',<br \/>&nbsp; &nbsp; borderRadius: 4,<br \/>&nbsp; &nbsp; borderWidth: 1,<br \/>&nbsp; &nbsp; color: '#7d7d7d',<br \/>&nbsp; &nbsp; flexDirection: 'row',<br \/>&nbsp; &nbsp; fontSize: 18,<br \/>&nbsp; &nbsp; height: 54,<br \/>&nbsp; &nbsp; justifyContent: 'center',<br \/>&nbsp; &nbsp; marginVertical: 8,<br \/>&nbsp; &nbsp; paddingHorizontal: 10,<br \/>&nbsp; },<br \/>});<br \/><br \/>export default MovieForm;<\/pre>\r\n<\/div>\r\n<\/div>\r\n<div>Form disini menggunakan setState yang sudah kita definisikan di dalam provider sehingga permasalahan sebelumnya yang setState selalu harus dalam satu component menjadi lebih mudah karena bisa berbeda component.<\/div>\r\n<div>&nbsp;<\/div>\r\n<div>Dari sini kita dapat menyimpulkan bahwa penggunaan context sangat berguna untuk proses development react native.<\/div>\r\n<\/div>\r\n<\/div>\r\n<\/div>\r\n<\/div>","waktu_publish":"2021-11-15 07:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-10-11 00:45:43","updated_at":"2021-10-29 21:07:38","waktu_publish_formatted":" Senin, 15 November 2021. 07:30:00 WIB."},{"id":1455,"uuid":"297d59ec-5457-4a48-a1a7-d57837c5c398","author_user_id":12081,"materi_section_id":399,"judul":"Latihan State Management (Redux & Context)","permalink":"latihan-state-management-redux-context-","konten":"<header class=\"entry-header\">\r\n<h1 class=\"entry-title\" style=\"text-align: justify;\">1. Gunakan Screen Login\/Register dan About Me<\/h1>\r\n<\/header>\r\n<div class=\"entry-content\">\r\n<p>Pada latihan ini kalian akan menggunakan komponen Screen Login\/Register dan About Me yang kalian buat pada tugas sebelumnya. Kalian akan membuat AuthContext(untuk latihan context).<\/p>\r\n<p>State management akan menerima data email dari laman Login\/Register dan menampilkannya pada laman About Me. Pada tugas ini kalian akan meniru bagaimana alur autentikasi pada aplikasi React Native.<br \/>Referensi alur autentikasi menggunakan react navigation dapat dilihat pada link di bawah ini :<br \/><a href=\"https:\/\/reactnavigation.org\/docs\/auth-flow\/\">https:\/\/reactnavigation.org\/docs\/auth-flow\/<\/a>&nbsp;<\/p>\r\n<h1>2. Tambahkan Tombol Keluar<\/h1>\r\n<p>Tambahkan tombol keluar pada Screen About Me, sehingga apabila ditekan, tombol akan menghapus object user pada context sehingga aplikasi akan kembali halaman Login\/Register<\/p>\r\n<h1>3. Menampilkan Data User Object pada Halaman About Me<\/h1>\r\n<p>Setelah menekan tombol Login\/Register kalian akan menyimpan data user tersebut dan menampilkannya pada halaman Screen sehingga alur aplikasi akan seperti ini<\/p>\r\n<p style=\"text-align: center;\"><strong><img src=\"https:\/\/dl.dropboxusercontent.com\/s\/0ynxjw7imo7hawr\/16.0.png\" \/><\/strong><\/p>\r\n<p style=\"text-align: left;\">Untuk navigasi antar halaman Login dan AboutMe usahakan hanya menggunakan context saja, <strong>tidak menggunakan fungsi react navigator<\/strong>.<\/p>\r\n<h1 style=\"text-align: left;\">4. Ganti dengan Redux<\/h1>\r\n<p>Setelah sukses implementasi menggunakan context, kumudian gunakan redux berdasarkan pattern yang telah kalian pejarai pada materi<\/p>\r\n<\/div>","waktu_publish":"2021-11-15 07:30:00","status_publish":"publish","urutan":3,"created_by":12081,"updated_by":12081,"created_at":"2021-10-11 00:46:08","updated_at":"2021-10-29 21:07:42","waktu_publish_formatted":" Senin, 15 November 2021. 07:30:00 WIB."}]},{"id":402,"uuid":"5f9b5fcf-0976-46a0-a618-6a51d78fe437","materi_id":27,"nama":"Hari 17 - Firebase Authentication & Database","permalink":"hari-17-firebase-authentication-database","urutan":18,"created_by":12081,"updated_by":12081,"created_at":"2021-10-11 20:01:23","updated_at":null,"posting":[{"id":1458,"uuid":"c3ada601-753d-4d05-be23-9ddeed3c63a3","author_user_id":12081,"materi_section_id":402,"judul":"Firebase Authentication","permalink":"firebase-authentication","konten":"<header class=\"entry-header\"><\/header>\r\n<div class=\"entry-content\">\r\n<h2 id=\"firebase-data-storage\">Firebase Authentication<\/h2>\r\n<p>Selain menggunakan API yang telah disediakan back-end developer maupun oleh pihak ketiga (third party), Anda juga dapat membuat API sendiri, misalnya dalam bentuk database dengan menggunakan Firebase. Authentication adalah metode keamanan yang diterapkan saat pengguna akan memasuki sebuah sistem atau aplikasi dengan cara harus memasukan email\/username dan password untuk memastikan bahwa pengguna memang memiliki hak akses ke sebuah sistem.<\/p>\r\n<p>Untuk mulai menggunakannya Anda cukup menuju&nbsp;<a href=\"https:\/\/firebase.google.com\/\">https:\/\/firebase.google.com\/<\/a>&nbsp;dan login menggunakan akun Google Anda. Langkah-langkah yang diperlukan selanjutnya adalah sebagai berikut:<\/p>\r\n<ul>\r\n<li>Klik &ldquo;Go to Console&rdquo; yang berada pada bagian kanan atas.<\/li>\r\n<li>Buat Project baru dengan klik &ldquo;Create Project&rdquo; atau &ldquo;Add Project&rdquo; jika sudah pernah membuat project sebelumnya.<\/li>\r\n<li>Masukkan nama project Anda dan klik &ldquo;Continue&rdquo;.<\/li>\r\n<li>Anda bisa meng-enable &ldquo;Google Analytics&rdquo; dan klik &ldquo;Continue&rdquo;.<\/li>\r\n<li>Kemudian Anda akan diminta untuk memilih akun yang digunakan untuk menerima data dari Google Analytics, pilih &ldquo;Default Account for Firebase&rdquo; saja, selanjutnya klik &ldquo;Create Project&rdquo;.<\/li>\r\n<li>Atau Anda bisa meng-disable &ldquo;Google Analytic&rdquo; dan klik &ldquo;Create Project&rdquo;.<\/li>\r\n<li>Selanjutnya Anda tinggal menunggu project selesai dibuat.<\/li>\r\n<\/ul>\r\n<h2>Firebase + Expo<\/h2>\r\n<p>Jika Anda menggunakan Expo, Anda perlu menginstall library dibawah ini<\/p>\r\n<p><code>npm istall @react-native-firebase\/app @react-native-firebase\/auth<\/code><\/p>\r\n<p>atau jika menggunakan yarn<\/p>\r\n<p><code>yarn add @react-native-firebase\/app @react-native-firebase\/auth<\/code><\/p>\r\n<p>kemudian agar package yang diinstall sesuai dengan dependency expo kita jalankan<\/p>\r\n<p><code>expo install firebase<\/code><code><\/code><code><\/code><\/p>\r\n<p>Untuk dokumentasi lebih lanjut mengenai Expo dan Firebase ini Anda bisa lihat pada halaman&nbsp;<a href=\"https:\/\/docs.expo.io\/guides\/using-firebase\/\">https:\/\/docs.expo.io\/guides\/using-firebase\/<\/a><\/p>\r\n<p>dan juga dapat mengikuti tutorial lebih lengkap di video di bawah ini<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/upVdQN69Y-w\" width=\"621\" height=\"348\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>\r\n<p><a href=\"https:\/\/drive.google.com\/file\/d\/1cluDzciQK6d71WNflZUCXC7yBrZ6wDRK\/view?usp=sharing\">https:\/\/drive.google.com\/file\/d\/1cluDzciQK6d71WNflZUCXC7yBrZ6wDRK\/view?usp=sharing<\/a>&nbsp;untuk file react native expo dilahkan download<\/p>\r\n<h2>Firebase + React Native CLI<\/h2>\r\n<p>Jika Anda menggunakan React Native CLI, untuk mengikuti materi kali ini Anda perlu menginstall library tambahan, untuk library yang digunakan adalah React Native Firebase. Anda bisa gunakan perintah dibawah ini untuk install react native firebase :<\/p>\r\n<p><code>npm install --save @react-native-firebase\/app<\/code><\/p>\r\n<p>atau<\/p>\r\n<p><code>yarn add @react-native-firebase\/app<\/code><\/p>\r\n<p>Untuk dokumentasi dari React Native Firebase Anda bisa lihat pada link\/halaman berikut ini&nbsp;<a href=\"https:\/\/rnfirebase.io\/\">https:\/\/rnfirebase.io<\/a><\/p>\r\n<p>Untuk lebih detail cara membuat project di firebase dan konfigurasi firebase dengan React Native CLI, Anda bisa lihat dalam video berikut ini :<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/oeJ5Wz06R8w\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>\r\n<h2 id=\"mengakses-api-menggunakan-axios\">Firebase Authentication + React Native CLI<\/h2>\r\n<p>Jika Anda sudah melakukan konfigurasi antara Firebase dan React Native CLI, maka selanjutnya kita akan belajar Autentikasi menggunakan Firebase dan React Native CLI. Sebelum ke langkah implementasi, disini kita perlu menambahkan library tambahan lagi, yaitu react native firebase auth, dan untuk perintah yg bisa digunakan untuk installasinya Anda bisa gunakan perintah dibawah ini :<\/p>\r\n<p><code>npm install --save @react-native-firebase\/auth<\/code><\/p>\r\n<p>atau<\/p>\r\n<p><code>yard add @react-native-firebase\/auth<\/code><\/p>\r\n<p>Selanjutnya, jika Anda sudah melakukan installasi library nya, Anda bisa simak video berikut ini :<\/p>\r\n<p><iframe src=\"https:\/\/www.youtube.com\/embed\/R1lSt7rHD5s\" width=\"560\" height=\"314\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/p>\r\n<p>Untuk dokumentasi react native firebase auth, Anda bisa lihat pada halaman berikut ini&nbsp;<a href=\"https:\/\/rnfirebase.io\/auth\/usage\">https:\/\/rnfirebase.io\/auth\/usage<\/a><\/p>\r\n<\/div>","waktu_publish":"2021-11-16 19:30:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-10-11 20:01:44","updated_at":"2021-10-29 21:07:52","waktu_publish_formatted":" Selasa, 16 November 2021. 19:30:00 WIB."},{"id":1459,"uuid":"fcb54413-21b8-47eb-96c4-2c58f1746a2c","author_user_id":12081,"materi_section_id":402,"judul":"Latihan Otentikasi","permalink":"latihan-otentikasi","konten":"<header class=\"entry-header\">\r\n<h1 class=\"entry-title\">Latihan &ndash; Authentikasi firebase<\/h1>\r\n<\/header>\r\n<div class=\"entry-content\">\r\n<p>&nbsp;<\/p>\r\n<h2 id=\"restful-api-postman\">Authentikasi firebase<\/h2>\r\n<p>Silahkan tambah folder di dalam sanberApp yaitu folder Latihan yang letaknya di dalam folder Tugas dan beri nama Latihan Authentikasi selanjutnya ikuti tutorial yang ada di materi dan gabungkan authentikasi + halaman tugas 13 + react navigation + tugas 14 rest api&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>setelah selesai commit tugas nya ke gitlab masing masing sebagai sarana latihan dan mengasah diri<\/p>\r\n<\/div>","waktu_publish":"2021-11-16 19:30:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-10-11 20:01:58","updated_at":"2021-10-29 21:07:59","waktu_publish_formatted":" Selasa, 16 November 2021. 19:30:00 WIB."}]},{"id":403,"uuid":"bfb5ef0b-115a-49f3-84f6-585c120bda00","materi_id":27,"nama":"Hari 18 - Build APK, Expo OTA & Final Project","permalink":"hari-18-build-apk-expo-ota-final-project","urutan":19,"created_by":12081,"updated_by":12081,"created_at":"2021-10-12 19:52:24","updated_at":null,"posting":[{"id":1464,"uuid":"e6877178-7fc0-4cc7-940d-30a1a9c1e952","author_user_id":12081,"materi_section_id":403,"judul":"Final Project","permalink":"final-project","konten":"<h1>React Native &ndash; Build &amp; Release APK<\/h1>\r\n<div class=\"entry-content\">\r\n<p>&nbsp;<\/p>\r\n<h2 id=\"expo\">Expo<\/h2>\r\n<p>Proses untuk membuat APK (Android) atau IPA (iOS) pada expo cukup sederhana. Secara umum hanya diperlukan beberapa langkah:<\/p>\r\n<h3 id=\"publish\">Publish<\/h3>\r\n<p>Pada tahap ini Anda cukup mengunakan command berikut pada terminal di folder project Expo Anda:<\/p>\r\n<pre class=\"wp-block-preformatted\">$ expo publish<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Pastikan sebelum melakukan publish ini, Anda sudah mendaftar di expo.io karena Anda akan diminta untuk login terlebih dahulu menggunakan akun expo Anda.<\/p>\r\n<\/blockquote>\r\n<p>Atau Anda juga bisa klik &ldquo;Publish or republish project&hellip;&rdquo; pada halaman yang muncul ketika running aplikasi expo atau npm start. Kemudian klik &ldquo;Publish project&rdquo;. Setelah proses publish selesai, Anda dapat melihat aplikasi Expo yang dipublish di dashboard expo.io.<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-5353\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/expo-publish3-1024x491.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/expo-publish3-1024x491.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/expo-publish3-300x144.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/expo-publish3-768x368.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/expo-publish3.png 1364w\" alt=\"\" width=\"1024\" height=\"491\" \/>\r\n<figcaption>Melakukan publish aplikasi Expo di melalui browser<\/figcaption>\r\n<\/figure>\r\n<h3 id=\"build\">Build<\/h3>\r\n<p>Setelah melakukan publish, selanjutnya untuk membuat APK atau IPA, Anda perlu melakukan build, berikut beberapa tahapannya:<\/p>\r\n<h4>1. Setting app.json<\/h4>\r\n<p>Bukalah file app.json yang terdapat di folder project expo Anda, dan tambahkan &ldquo;bundleIdentifier&rdquo; dan &ldquo;buildNumber&rdquo; pada object &ldquo;ios&rdquo; (untuk build IPA) dan &ldquo;package&rdquo; dan &ldquo;versionCode&rdquo; pada object &ldquo;android&rdquo; (untuk build APK\/AAB) di dalam object &ldquo;expo&rdquo;.<\/p>\r\n<p>Pada &ldquo;bundleIdentifier&rdquo; dan &ldquo;package&rdquo; boleh diisi dengan format &ldquo;com.mycompany.myapp&rdquo; dengan teks bebas, tanpa harus memiliki domain yang dimasukkan.<\/p>\r\n<p>Perlu diperhatikan pada &ldquo;buildNumber&rdquo; dan &ldquo;versionCode&rdquo; agar setiap melakukan publish\/build baru nilainya ditambahkan 1, misal pada &ldquo;buildNumber&rdquo; setiap publish baru maka diubah dari 1.0.0 menjadi 1.0.1 dan seterusnya, sementara pada&rdquo;versionCode&rdquo; ditambahkan dari 1 menjadi 2 dan seterusnya.<\/p>\r\n<p>Contoh:<\/p>\r\n<pre class=\"wp-block-preformatted\"> &nbsp;&nbsp;&nbsp;&nbsp;\"ios\":&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"supportsTablet\":&nbsp;true,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"bundleIdentifier\":&nbsp;\"com.sanbercode.sanberapp\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"buildNumber\":&nbsp;\"1.0.0\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;},\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"android\":&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"package\":&nbsp;\"com.sanbercode.sanberapp\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"versionCode\":&nbsp;1\r\n&nbsp;&nbsp;&nbsp;&nbsp;}, <\/pre>\r\n<p>Selain itu, Anda juga dapat mengubah nama, icon, splash screen, dan konfigurasi lainnya di app.json. Contoh konfigurasi akhir dari app.json sebelum melakukan build:<\/p>\r\n<pre class=\"wp-block-preformatted\"> {\r\n&nbsp;&nbsp;\"expo\":&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"name\":&nbsp;\"SanberApp\",          \/\/ nama aplikasi\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"slug\":&nbsp;\"SanberApp\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"platforms\":&nbsp;[\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"ios\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"android\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"web\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;],\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"version\":&nbsp;\"1.0.0\",          \/\/ update version setiap build\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"orientation\":&nbsp;\"portrait\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"icon\":&nbsp;\".\/assets\/icon.png\", \/\/ ganti icon di sini\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"splash\":&nbsp;{                  \/\/ ganti splash screen disini\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"image\":&nbsp;\".\/assets\/splash.png\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"resizeMode\":&nbsp;\"contain\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"backgroundColor\":&nbsp;\"#ffffff\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;},\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"updates\":&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"fallbackToCacheTimeout\":&nbsp;0\r\n&nbsp;&nbsp;&nbsp;&nbsp;},\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"assetBundlePatterns\":&nbsp;[\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"**\/*\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;],\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"ios\":&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"supportsTablet\":&nbsp;true,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"bundleIdentifier\":&nbsp;\"com.sanbercode.sanberapp\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"buildNumber\":&nbsp;\"1.0.0\"\r\n&nbsp;&nbsp;&nbsp;&nbsp;},\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"android\":&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"package\":&nbsp;\"com.sanbercode.sanberapp\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"versionCode\":&nbsp;1\r\n&nbsp;&nbsp;&nbsp;&nbsp;},\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\":&nbsp;\"\"\r\n&nbsp;&nbsp;}\r\n}\r\n<\/pre>\r\n<h4>2. Build APK\/IPA<\/h4>\r\n<p>Selanjutnya Anda bisa melakukan build menggunakan terminal. Masuk ke folder project expo Anda dan tuliskan command berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ untuk build android:\r\n$ expo build:android\r\n\r\n\/\/ atau untuk generate apk: \r\n$ expo build:android -t apk \r\n\r\n\/\/ atau untuk generate aab: \r\n$ expo build:android -t app-bundle\r\n\r\n\/\/ atau untuk build ios:\r\n$ expo build:ios<\/pre>\r\n<p>Jika Anda menggunakan command&nbsp;<code>expo build:android<\/code>, maka Anda akan diminta untuk memilih apakah build dalam bentuk APK atau AAB.<\/p>\r\n<p>Selanjutnya Anda akan diminta untuk memilih keystore yang akan digunakan pada aplikasi, anda bisa memilih untuk membiarkan Expo mengatur keystore aplikasi Anda (keystore dapat di backup kemudian) atau Anda bisa menggunakan keystore Anda sendiri dan Anda akan diminta untuk melakukan input path dari keystore aplikasi Anda.<\/p>\r\n<p>Selanjutnya proses build akan berlangsung, tunggu sampai muncul tulisan berikut di terminal:&nbsp;<code>You can press Ctrl+C to exit. It won't cancel the build, you'll be able to monitor it at the printed URL&nbsp;<\/code>. Tekan Ctrl + C, kemudian Anda dapat melihat proses build selanjutnya di URL yang muncul di terminal Anda atau melalui dashboard akun expo.io Anda. (Setelah tahap ini, Anda bisa meninggalkan atau mematikan PC\/Laptop selama proses build karena akan dilanjutkan oleh Expo secara otomatis).<\/p>\r\n<p>Jika proses build sudah selesai Anda bisa mendownload APK dari aplikasi Anda di dashboard expo.io.<\/p>\r\n<p>Contoh cara melakukan build project Expo dapat dilihat pada video berikut (Catatan: Pada video diperlihatkan bagaimana cara build menggunakan keystore sendiri):<\/p>\r\n<figure class=\"wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\">\r\n<div class=\"wp-block-embed__wrapper\"><iframe title=\"#17  Building Standalone Apps | generate apk using React Native expo | YouTube clone in React Native\" src=\"https:\/\/www.youtube.com\/embed\/SzwTGDDXTAE?feature=oembed\" width=\"500\" height=\"281\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\" data-mce-fragment=\"1\"><\/iframe><\/div>\r\n<\/figure>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Lebih lengkapnya Anda bisa mengunjungi dokumentasi Expo berikut:&nbsp;<a href=\"https:\/\/docs.expo.io\/distribution\/building-standalone-apps\/\">https:\/\/docs.expo.io\/distribution\/building-standalone-apps\/<\/a><\/p>\r\n<\/blockquote>\r\n<h2 id=\"react-native-cli\">React Native CLI<\/h2>\r\n<p>Sebelum melakukan build, pastikan Anda sudah mengikuti tahapan dalam setting environment React Native di&nbsp;<a href=\"https:\/\/reactnative.dev\/docs\/environment-setup\">https:\/\/reactnative.dev\/docs\/environment-setup<\/a>.<\/p>\r\n<p>Untuk melakukan build menggunakan React Native CLI terdapat beberapa tahapan yang diperlukan:<\/p>\r\n<h4>1. Membuat Keystore (Upload Key)<\/h4>\r\n<p>Pada tahap ini dilakukan pembuatan keystore. Pada OS Windows proses ini harus dilakukan dari lokasi C:\\Program Files\\Java\\jdkx.x.x_x\\bin. Jadi buka terminal\/command prompt (sebagai administrator) dan arahkan ke lokasi tersebut. Lalu ketikkan perintah berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">$ keytool -genkeypair -v -keystore my-upload-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000 <\/pre>\r\n<p><code>my-upload-key<\/code>&nbsp;pada&nbsp;<code>my-upload-key.keystore<\/code>&nbsp;dan&nbsp;<code>my-key-alias<\/code>&nbsp;dapat diubah sesuai dengan nama yang diinginkan.<\/p>\r\n<p>Selanjutnya Anda akan diminta memasukkan password keystore dan key (2 password) dan beberapa isian lainnya. Kemudian akan dibuatkan file dengan nama&nbsp;<code>my-upload-key.keystore<\/code>&nbsp;(atau sesuai nama yang diinputkan). Pastikan Anda hafal nama alias dan password yang telah diinputkan.<\/p>\r\n<p>Pada MacOs, jika tidak mengetahui lokasi folder JDK bin, gunakan command berikut<\/p>\r\n<pre class=\"wp-block-preformatted\">$ \/usr\/libexec\/java_home\r\n\r\n\/\/ akan menampilkan output:\r\n\/Library\/Java\/JavaVirtualMachines\/jdkX.X.X_XXX.jdk\/Contents\/Home<\/pre>\r\n<p>Arahkan ke lokasi folder tersebut (pada terminal) menggunakan command:&nbsp;<code>$ cd \/your\/jdk\/path<\/code>&nbsp;dan gunakan command keytool yang sama dengan menambahkan sudo di depannya, contoh:<\/p>\r\n<pre class=\"wp-block-preformatted\">$ sudo keytool -genkey -v -keystore my-upload-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Keystore ini bersifat private, sehingga informasi dan datanya perlu dijaga dengan baik.<\/p>\r\n<\/blockquote>\r\n<h4>2. Konfigurasi Gradle variables<\/h4>\r\n<p>Simpan keystore yang telah dibuat ke dalam folder project React Native, di dalam folder&nbsp;<code>android\/app<\/code>. Edit file pada lokasi&nbsp;<code>~\/.gradle\/gradle.properties<\/code>&nbsp;atau&nbsp;<code>android\/gradle.properties<\/code>&nbsp;dan tambahkan kode berikut (sesuaikan nama keystore, alias, keystore password dan key password), bisa disimpan dilokasi paling bawah:<\/p>\r\n<pre class=\"wp-block-preformatted\">MYAPP_UPLOAD_STORE_FILE=my-upload-key.keystore\r\nMYAPP_UPLOAD_KEY_ALIAS=my-key-alias\r\nMYAPP_UPLOAD_STORE_PASSWORD=**** \r\nMYAPP_UPLOAD_KEY_PASSWORD=****<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Atau Anda dapat mengikuti contoh berikut untuk menggunakan cara yang lebih aman:&nbsp;<a href=\"https:\/\/pilloxa.gitlab.io\/posts\/safer-passwords-in-gradle\/\">https:\/\/pilloxa.gitlab.io\/posts\/safer-passwords-in-gradle\/<\/a><\/p>\r\n<\/blockquote>\r\n<h4>3. Menambahkan signing config pada Gradle config di aplikasi<\/h4>\r\n<p>Tahap akhir yang perlu dilakukan adalah melakukan setup release build. Edit file android\/app\/build.gradle dan tambahkan signing config (sekitar line 146),<\/p>\r\n<pre class=\"wp-block-preformatted\">&hellip;\r\nandroid {\r\n  &hellip;\r\n  defaultConfig { &hellip; }\r\n  signingConfigs {\r\n           debug {\r\n               storeFile file('debug.keystore')\r\n               storePassword 'android'\r\n               keyAlias 'androiddebugkey'\r\n               keyPassword 'android'\r\n           } \r\n\/\/ tambahkan bagian di bawah ini\r\n           release {\r\n               if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {\r\n                   storeFile file(MYAPP_UPLOAD_STORE_FILE)\r\n                   storePassword MYAPP_UPLOAD_STORE_PASSWORD\r\n                   keyAlias MYAPP_UPLOAD_KEY_ALIAS\r\n                   keyPassword MYAPP_UPLOAD_KEY_PASSWORD\r\n               }\r\n           }\r\n       }\r\n       buildTypes {\r\n           debug {\r\n               signingConfig signingConfigs.debug\r\n           }\r\n           release { \r\n\/\/ tambahkan\/edit bagian ini dari .debug menjadi .release\r\n             signingConfig signingConfigs.release \r\n         }\r\n     }<\/pre>\r\n<h4>4. Merilis APK<\/h4>\r\n<p>Selanjutnya jalankan command berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ untuk merilis APK gunakan command berikut:\r\n$ gradlew  assembleRelease \/\/ untuk Windows\r\n$ .\/gradlew assembleRelease \/\/ untuk MacOs dan Linux? \r\n\r\n\/\/ atau untuk merilis AAB gunakan command berikut: \r\n$ cd android \/\/ masuk ke folder android di dalam project\r\n$ gradlew bundleRelease   \/\/ untuk Windows\r\n$ .\/gradlew bundleRelease \/\/ untuk MacOS dan Linux?<\/pre>\r\n<p>Anda akan menemukan file APK di lokasi berikut&nbsp;<code>android\/app\/build\/outputs\/bundle\/release\/apk-release.apk<\/code><\/p>\r\n<p>Untuk melakukan publish di Google Play Store disarankan oleh Google untuk menggunakan AAB.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Lebih lengkapnya Anda bisa mengunjungi dokumentasi React Native berikut:&nbsp;<a href=\"https:\/\/reactnative.dev\/docs\/signed-apk-android\">https:\/\/reactnative.dev\/docs\/signed-apk-android<\/a><\/p>\r\n<\/blockquote>\r\n<\/div>","waktu_publish":"2021-11-16 19:55:00","status_publish":"publish","urutan":1,"created_by":12081,"updated_by":12081,"created_at":"2021-10-12 19:52:41","updated_at":"2021-10-29 21:08:16","waktu_publish_formatted":" Selasa, 16 November 2021. 19:55:00 WIB."},{"id":1465,"uuid":"9bc70ad6-03f2-4d3e-9323-a8775691be02","author_user_id":12081,"materi_section_id":403,"judul":"Build APK","permalink":"build-apk","konten":"<header class=\"entry-header\">\r\n<h1 class=\"entry-title\">Prasyarat<\/h1>\r\n<\/header>\r\n<div class=\"entry-content\">\r\n<ol>\r\n<li>Aplikasi dibangun menggunakan&nbsp;<strong>Expo CLI<\/strong>&nbsp;atau&nbsp;<strong>React Native CLI<\/strong><\/li>\r\n<li>Aplikasi&nbsp;<strong>terhubung dengan API\/Firebase Database<\/strong>. Boleh menggunakan public apis:&nbsp;<a href=\"https:\/\/github.com\/public-apis\/public-apis\">https:\/\/github.com\/public-apis\/public-apis<\/a>&nbsp;atau sumber API lainnya (misal&nbsp;<a href=\"https:\/\/kawalcorona.com\/api\/\">https:\/\/kawalcorona.com\/api\/<\/a>&nbsp;). Jumlah API yang digunakan bebas, minimal 1 sumber API.<\/li>\r\n<li>Menggunakan&nbsp;<strong>React Navigation 5\/6 <\/strong>untuk navigasi antar Screen.<\/li>\r\n<li>Minimal memiliki 5 Halaman, antara lain:\r\n<ul>\r\n<li>Halaman Login.<\/li>\r\n<li>Halaman Home \/ Utama (misal pada aplikasi e-commerce, halaman ini mencakup daftar barang\/jasa).<\/li>\r\n<li>Halaman Detail (misal pada aplikasi e-commerce, halaman ini mencakup detail produk\/jasa).<\/li>\r\n<li>Halaman Profil \/ About Me \/ About Us.<\/li>\r\n<li>SplashScreen(<strong>optional<\/strong>) boleh ada boleh tidak<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Menggunakan&nbsp;<strong>Redux<\/strong>\/<strong>Context&nbsp;<\/strong>untuk state management(<strong>Optional<\/strong>) nilai plus.<\/li>\r\n<li>Boleh meneruskan project yang di buat dari hari ke 11 yaitu mockup figma dan disesuaikan berdasarkan Spesifikasi yang telah di tentukan di point 2-5 harap di perhatikan untuk identitas harap menggunakn identitas masing masing peserta.<\/li>\r\n<li>Bagi yang belum memiliki ide bisa mengikuti link berikut ini :&nbsp;<br \/><a href=\"https:\/\/www.figma.com\/file\/kLOxOEnz7YaO3HFcksZorb\/Final-Project?node-id=0%3A1\">https:\/\/www.figma.com\/file\/kLOxOEnz7YaO3HFcksZorb\/Final-Project?node-id=0%3A1<\/a><br \/>Dan untuk API yang digunakan bisa menggunakan dari : <br \/><a href=\"https:\/\/fakestoreapi.com\/\">https:\/\/fakestoreapi.com\/<\/a><\/li>\r\n<\/ol>\r\n<h1 id=\"teknis-pengerjaan\">Teknis Pengerjaan<\/h1>\r\n<ol>\r\n<li>Kerjakan individu<\/li>\r\n<li>Pengerjaanya menggunakan&nbsp;<strong>satu repository public<\/strong>&nbsp;di Gitlab.<\/li>\r\n<li>Build APK dari aplikasi yang dibuat, bisa melihat materi berikut: <br \/>\r\n<p>Atau untuk Expo bisa melihat dokumentasi berikut:&nbsp;<a href=\"https:\/\/docs.expo.io\/workflow\/publishing\/#how-to-publish\">https:\/\/docs.expo.io\/workflow\/publishing\/<\/a><\/p>\r\n<p>Sementara untuk React Native CLI, bisa melihat dokumentasi berikut:&nbsp;<a href=\"https:\/\/reactnative.dev\/docs\/signed-apk-android#generating-the-release-apk\">https:\/\/reactnative.dev\/docs\/signed-apk-android#generating-the-release-apk<\/a>.<\/p>\r\n<\/li>\r\n<\/ol>\r\n<h1 id=\"pengumpulan\">Berkas Pengumpulan<\/h1>\r\n<p>Yang perlu Anda kumpulkan adalah:<\/p>\r\n<ol>\r\n<li>Buat petunjuk berisi tentang spesifikasi aplikasi di beri keterangan , menggunakan api apa saja, buat berdasarkan template berikut :<br \/><a href=\"https:\/\/s.id\/RNdesctemp\">https:\/\/s.id\/RNdesctemp<\/a><\/li>\r\n<li><strong>Mockup Figma<\/strong>, konsep atau desain aplikasi final project<\/li>\r\n<li><strong>Link repository Gitlab<\/strong>&nbsp;project Anda, yang digunakan dalam mengerjakan final project ini.<\/li>\r\n<li><strong>File APK<\/strong>&nbsp;dari aplikasi Final Project dimasukan ke Google Drive.<\/li>\r\n<li><strong>Video demo aplikasi<\/strong>, bisa menggunakan screen recorder ketika aplikasi digunakan pada smartphone\/emulator. Harap menampilkan seluruh halaman dan fitur dari aplikasi yang dibuat.<br \/><strong>Catatan<\/strong>: Video demo aplikasi, dikumpulkan dalam bentuk link ke situs penyimpanan Youtube dan beri judul&nbsp;<strong>Final Project React Native<\/strong>&nbsp;dan hastag<strong>&nbsp;#IndonesiaMengoding #Sanbercode #ReactNativeDasa<\/strong>r.<\/li>\r\n<li><strong>Story IG,&nbsp;<\/strong>buat story IG yang berisi sekilas demo atau deskripsi aplikasi anda, dan tag akun <em>@sanbercode<\/em>.<br \/><strong>POIN plus 10<\/strong><\/li>\r\n<li>Batas waktu pengumpulan Final Project kali ini adalah <strong>Ahad, 26 September 2021 jam 23.59 WIB<\/strong>, mohon diperhatikan.<\/li>\r\n<li><strong>Apk<\/strong>&nbsp;dari React Native Cli masukan google drive dan link kumpulkan di form dibawah ini Untuk link file APK Expo bisa memberikan link download dari&nbsp;<strong>expo.io<\/strong>.<\/li>\r\n<\/ol>\r\n<h1 id=\"formulir-pengumpulan\">Progress Harian<\/h1>\r\n<ol>\r\n<li>Silahkan Peserta <strong>membuat file dokumen di google docs <\/strong>yang bersisi deskripsi aplikasi berdasarkan template ini :<br \/><a href=\"https:\/\/s.id\/RNdesctemp\">https:\/\/s.id\/RNdesctemp<\/a><\/li>\r\n<li>Atur konfigurasi sharing agar bisa dilihat oleh semua orang yang memiliki link<br \/><img src=\"https:\/\/dl.dropboxusercontent.com\/s\/ij9po99wb5y2zf4\/18.1.png\" width=\"490\" height=\"302\" \/><\/li>\r\n<li>Kumpulkan link tersebut beserta <strong>update<\/strong> progress <strong>harian <\/strong>pada link berikut<br \/><a href=\"https:\/\/s.id\/RNprogress\">https:\/\/s.id\/RNprogress<\/a><\/li>\r\n<\/ol>\r\n<h1>Pengumpulan Final<\/h1>\r\n<p>Keempatnya dikumpulkan melalui form berikut:<\/p>\r\n<p><a href=\"https:\/\/s.id\/RNsubmission\">https:\/\/s.id\/RNsubmission<\/a><\/p>\r\n<p>Selamat Berkreasi !<\/p>\r\n<\/div>","waktu_publish":"2021-11-16 19:55:00","status_publish":"publish","urutan":2,"created_by":12081,"updated_by":12081,"created_at":"2021-10-12 19:52:48","updated_at":"2021-10-29 21:08:21","waktu_publish_formatted":" Selasa, 16 November 2021. 19:55:00 WIB."}]}],"list_kelas":null,"is_done":0}