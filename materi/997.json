
{
    "nama":"Laravel Web Development Lanjutan",
    "section": [
      {
        "nama": "Pendahuluan",
        "posting": [
            {
              "uuid": "0",
              "judul": "Persiapan Perangkat",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n<blockquote class=\"wp-block-quote\"><p>Selamat datang peserta Bootcamp Sanbercode kelas Laravel Web Development \u2013 Lanjutan. Sebelum masuk ke kelas selama 4 pekan ke depan, terlebih dahulu kami akan membahas berbagai perangkat yang perlu dipersiapkan.<\/p><\/blockquote>\n<h2>Perangkat yang Diperlukan<\/h2>\n<p>Untuk mengikuti  kelas Laravel Web Development \u2013 Lanjutan  ini, diperlukan perangkat utama yaitu <strong>PC\/Laptop<\/strong> yang terhubung dengan <strong>internet<\/strong>. Spesifikasi PC\/Laptop minimal memiliki <strong>RAM 2GB<\/strong>.<\/p>\n<h2>Perangkat Lunak dan Teknologi yang Digunakan<\/h2>\n<h3>1. Terminal atau Console<\/h3>\n<p>Pada Bootcamp kali ini, diperlukan sebuah terminal untuk mengeksekusi berbagai perintah dasar yang berkaitan dengan Git, Composer, dan Command Artisan. Kita bisa menggunakan terminal bawaan dari Sistem Operasi yang digunakan seperti Command Prompt\/Windows PowerShell pada OS Windows dan Terminal pada OS Linux maupun OSX. Dan ketika melakukan proses instalasi Git juga terdapat Git Bash yang memiliki fungsi yang serupa. Selain itu, peserta juga bisa menggunakan <a href=\"https:\/\/cmder.net\/\">cmder<\/a> (terutama yang menggunakan OS Windows) karena cmder memiliki banyak fitur yang tidak dimiliki command prompt atau terminal bawaan. Proses instalasi bisa dilakukan menggunakan konfigurasi default\/recommended<\/p>\n<h3>2. Git<\/h3>\n<p><a href=\"https:\/\/git-scm.com\/\">Git <\/a>merupakan version control yang banyak digunakan oleh para programmer atau software developer. Untuk dapat menggunakannya, download dan install <a href=\"https:\/\/git-scm.com\/\">Git <\/a>sesuai dengan platform OS yang bersangkutan.  Dan jalankan perintah instalasi dengan konfigurasi default\/recommended. <\/p>\n<h3>3. Visual Studio Code<\/h3>\n<p><a href=\"https:\/\/code.visualstudio.com\/\">Visual Studio Code<\/a> adalah salah satu IDE (Integrated Development Environment) yang direkomendasikan untuk digunakan selama bootcamp ini. Salah satu kelebihannya adalah kemudahan pengoperasian dan user inteface yang lebih mudah dipahami oleh orang yang awam dalam pemrograman. Selain itu juga terdapat banyak extension atau plugin yang sangat membantu dalam menuliskan kode selama membangun suatu program\/aplikasi.<\/p>\n<p>IDE lainnya yang juga dapat digunakan adalah <a href=\"https:\/\/www.sublimetext.com\/\">Sublime Text<\/a> atau <a href=\"https:\/\/atom.io\/\">Atom<\/a>. Untuk kemudahan proses pembelajaran kami tidak merekomendasikan Notepad atau Notepad++<\/p>\n<h3>4. Composer<\/h3>\n<p>Composer adalah tools dependency manager pada PHP.  Composer berguna untuk ketika menginstall Laravel dan library-library yang akan kita butuhkan ketika membangun suatu aplikasi. Silakan download <a href=\"https:\/\/getcomposer.org\/download\/\">disini<\/a> , jika belum menginstall composer.<\/p>\n<p><\/p>\n<p><!--EndFragment--><br\/><br\/><\/p> <\/div>\n"
            }
        ]
      },
      {
        "nama": "WEEK 1",
        "posting": [
          
            {
              "uuid": "1",
              "judul": "Hari ke-1 | Pendalaman OOP PHP",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p>Secara singkat, Laravel adalah framework PHP open-source gratis. Di dalam Laravel ini terdapat konsep MVC (Model View Controller). Dan untuk sebagian orang, Laravel ini dianggap memiliki banyak \u201cmagic\u201d, sehingga sulit untuk dipahami. Untuk mempermudah pemebelajaran kedepan, maka diperlukan pemahaman yang mendalam mengenai kosep OOP (<strong>Object-Oriented<\/strong>\u00a0Programming ) di dalam bahasa PHP.<\/p>\n<p>Beberapa tutorial yang dapat kita ikuti bersama untuk mempelajari OOP PHP: <\/p>\n<ul>\n<li>Playlist WPU  OOP Dasar pada PHP  : <a href=\"https:\/\/www.youtube.com\/watch?v=ZKDUFoouyBI&amp;list=PLFIM0718LjIWvxxll-6wLXrC_16h_Bl_p\">link video<\/a><\/li>\n<li>Playlist Sekolah Koding OOP pada PHP : <a href=\"https:\/\/www.youtube.com\/watch?v=PfwkhK0Ev5k&amp;list=PLCZlgfAG0GXAPy7l4Wgwhz11GbuR-h2M6\">link video<\/a><\/li>\n<\/ul>\n<p>Setelah mengikuti seri tutorial di atas, terdapat  konsep yang penting juga untuk dipelajari , yakni \u201cTrait\u201d.  Untuk memhami konsep Trait pada PHP, mari kita ikuti bersama materi dari  khaerodin.id ini : <a href=\"https:\/\/khoerodin.id\/object-oriented-php\/trait-dalam-oop-php\/\">link artikel<\/a><\/p>\n<p>Semangat ^_^<\/p>\n<p>\n<\/p><\/div>\n"
            },
            {
              "uuid": "2",
              "judul": "Hari ke-2 | Memproteksi Route dengan Middleware",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p>Dalam dunia IT, Middleware dikenal sebagai suatu sistem yang berperan sebagai penengah antara satu aplikasi dengan aplikasi yang lain agar mudah diintegrasikan. Pada konteks project Laravel, middleware digunakan untuk memfilter Request yang masuk di aplikasi kita. Biasanya digunakan untuk memproteksi route-route yang ada agar route tersebut benar benar diakses oleh user sesuai dengan privilege-nya. Atau bisa juga digunakan untuk \u201clogging\u201d, atau mencatat semua aktivitas di dalam web kita.<\/p>\n<p>Pada materi kali ini kita akan membahas bagaimana cara membuat middleware, mendaftarkan middleware, dan mengelopokkan middleware.<\/p>\n<p>Untuk memahami konsep Middleware ini, mari kita simak video berikut :  <a href=\"https:\/\/www.youtube.com\/watch?v=-GdKhiv9x1E&amp;list=PL8YCzrSDCR7gt8KPrx7pce8gesEy3onbx\">link video<\/a><\/p>\n<p>\n<\/p><\/div>\n"
            },
            {
              "uuid": "3",
              "judul": "Hari ke-3 | Membuat API menggunakan Laravel",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p>Sebelum kita belajar bagaimana kita membuat REST Server dengan menggunakan Laravel. Langkah baiknya kita terlebih mengetahui apa itu API, REST API, RESTful API<\/p>\n<h4>API (Application Programming Interface) <\/h4>\n<p>Berdasarkan wikipedia, API adalah penerjemah\u00a0komunikasi antara klien dengan server untuk menyederhanakan implementasi dan perbaikan\u00a0<em>software<\/em>. Atau secera sederhana API adalah teknologi yang memungkinkan 2 aplikasi atau lebih dapat berkomunikasi , tanpa melihat bentuk aplikasi tersebut, atau dengan bahasa apa aplikasi tersebut dibuat.<\/p>\n<h4>REST (Representional State Transfer) <\/h4>\n<p>REST adalah suatu arsitektur metode komunikasi untuk pertukaran data yang umumnya menggunakan protokol HTTP. REST menjadikan objek\/data pada server sebagai sumber data yang dapat ditambah, diubah atau dihapus. Dan umumnya REST dapat digunakan di berbagai bahasa pemrograman. <\/p>\n<p>Berdasarkan pada definisi keduanya, maka RESTful API merupakan bentuk komunikasi antar program (API) dengan menggunakan arsitektur REST, yang diantaranya menggunakan protokol HTTP. Beberapa metode HTTP yang umum digunakan, antara lain: <\/p>\n<ul>\n<li>GET, kegiatan menerima data.<br\/>contoh: <code>GET https:\/\/situsweb\/api\/users\/detail\/1<\/code> =&gt; mengambil data detail user dengan id = 1.<\/li>\n<li>POST, kegiatan pengiriman\/input data untuk diproses selanjutnya.<br\/>contoh: <code>POST https:\/\/situsweb\/api\/users<\/code> =&gt; mengirim data user.<\/li>\n<li>PUT, kegiatan mengubah data.<br\/>contoh <code>PUT https:\/\/situsweb\/api\/users\/update\/1<\/code> =&gt; melakukan update pada data user dengan id = 1.<\/li>\n<li>DELETE, kegiatan menghapus data.<br\/>contoh: <code>DELETE https:\/\/situsweb\/api\/users\/delete\/1<\/code> =&gt; menghapus data user dengan id = 1.<\/li>\n<\/ul>\n<p>Pada kesempatan kali ini kita akan mencoba membuat Web API, atau API yang dibangun di atas teknologi web. Web API biasa juga disebut Web Service, REST SERVER.<\/p>\n<p>Sebelum membuat WEB API, marilah kita mengenal tools yang akan membantu kita mebuat WEB API, yaitu POSTMAN<\/p>\n<h4>POSTMAN<\/h4>\n<p>Postman merupakan salah satu aplikasi terpopuler dalam menangani API. Untuk menggunakannya Anda bisa terlebih dahulu mendownload nya di link berikut:  <a href=\"https:\/\/www.postman.com\/downloads\/\">https:\/\/www.postman.com\/downloads\/<\/a>. Setelah mendownload aplikasi Postman tersebut, lakukan instalasi dan kemudian lakukan Sign Up (bisa dilakukan melalui aplikasi atau melalui web berikut:  <a href=\"https:\/\/identity.getpostman.com\/signup\">https:\/\/identity.getpostman.com\/signup<\/a>). <\/p>\n<p>Setelah Sign Up dan berhasil masuk ke dalam aplikasi Postman, berikut tampilan yang akan Anda temukan: <\/p>\n<figure class=\"wp-block-image\"><img alt=\"Gambar ini memiliki atribut alt yang kosong; nama filenya adalah Postman1-1024x549.png\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/Postman1-1024x549.png\"\/><\/figure>\n<p>Collection<\/p>\n<p> Disarankan untuk mengelompokkan API yang akan digunakan pada satu Collection, dengan cara memilih menu \u201cCollection\u201d pada sidebar dan klik \u201c+ New Collection\u201d kemudian memasukkan nama Collection tersebut, bisa menggunakan nama Project maupun nama web \/ sumber API nya. <\/p>\n<figure class=\"wp-block-image\"><img alt=\"Gambar ini memiliki atribut alt yang kosong; nama filenya adalah Postman4-618x1024.png\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/Postman4-618x1024.png\"\/><\/figure>\n<p>REQUEST<\/p>\n<p> Selanjutnya Anda bisa menambahkan request API dengan menekan tombol \u201c+\u201d pada menu yang tersedia (1) . Selanjutnya Anda bisa memasukkan URL yang dituju pada bagian yang telah disediakan (2). Pada Postman telah disediakan berbagai method yang dapat Anda temukan pada sebelah kiri dari kolom input URL, mulai dari GET, POST, PUT, DELETE dan lainnya.   <\/p>\n<figure class=\"wp-block-image\"><img alt=\"Gambar ini memiliki atribut alt yang kosong; nama filenya adalah Postman2-1024x549.png\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/Postman2-1024x549.png\"\/><\/figure>\n<p> Dibawah kolom input URL, Anda akan menemukan menu\/tab \u201cParams\u201d, \u201cAuthentication\u201d, \u201cHeader\u201d, \u201cBody\u201d, dan lainnya.  <\/p>\n<ul>\n<li>Menu \u201cParams\u201d yang dapat digunakan untuk menambah query yang akan membuat URL yang digunakan bertambah panjang (biasanya diawali dengan \u201c?\u201d). <\/li>\n<li>Pada menu \u201cAuthentication\u201d, Anda akan menemukan metode Auth yang terkadang diperlukan untuk dapat mengakses suatu API (umumnya menggunakan API Key, Bearer Token, atau OAuth tergantung sumber\/penyedia API). <\/li>\n<li>Pada menu \u201cHeader\u201d, Anda juga dapat mengatur Authentication dengan menggunakan key \u201cAuthentication\u201d dan value dari Authentication yang diperlukan (misal bearer {token}). Pada bagian ini biasanya dimasukkan informasi tambahan yang digunakan oleh back-end\/server untuk mengatur bagaimana cara response akan diberikan.<\/li>\n<li>Menu \u201cBody\u201d, yang biasa diperlukan ketika menggunakan method \u201cPOST\u201d atau mengirim suatu form kepada back-end\/server.<\/li>\n<\/ul>\n<p>Setelah membaca materi hari ini, silakan lanjutkan membaca materi hari ke-4 tentang otentikasi menggunakan JWT di Laravel.<\/p>\n<p>\n<\/p><\/div>\n"
            },
            {
              "uuid": "4",
              "judul": "Hari ke-4 | Authentication menggunakan JWT",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p>Pada umumnya untuk melakukan proses autentikasi pada sebuah Web itu menggunakan session.  Jadi data user yang sudah login akan disimpan di dalam session. Aplikasi kita akan memeriksa, sessionnya ada atau tidak, jika tidak ada maka apilkasi akan meredirect ke halaman logout, dan jika ada session maka kita bisa mendapatkan data user yang sedang login.<\/p>\n<p>Pada pembuatan API biasanya untuk proses autentikasi tidak menggunakan session, melainkan menggunakan token berbentuk string panjang yang sangat random. Jadi ketika user berhasil melakukan login , maka server akan memberikan token. Nanti token tersebut harus disimpan di local storage atau cookies browser. Dan apabila kita mau mengakses halaman lain yang mengharuskan kita melakukan otentikasi, maka kita harus menyertakan token ini di dalam request.<\/p>\n<p>Mari kita mulai membuat WEB API dengan menggunakan Laravel melalui video yang dibuat oleh channel Parsinta berikut :  <a href=\"https:\/\/www.youtube.com\/watch?v=S6ZUuV-wZtY&amp;list=PLRKMmwY3-5MwqwBGSe4g9qzD7UsOOvbvC&amp;index=1\">link video<\/a><\/p>\n<p>\n<\/p><\/div>\n"
            },
            {
              "uuid": "5",
              "judul": "Hari ke-5 | Laravel Socialite",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p><em>Socialite adalah library laravel yang berfungsi dalam membantu proses OAuth login dengan social media yang tersedia seperti, Facebook, Twitter, Github, Linkedin, Google, dan Bitbucket.<\/em> <\/p>\n<p>Login dengan menggunakan media sosial adalah salah satu fitur yang sangat penting dalam membangaun aplikasi berbasis web saat ini. Karena orang (pengguna) biasanya malas untuk mengisi form registrasi yang sangat panjang. <\/p>\n<p>Dengan adanya libaray Socialite di Laravel ini , implementasi login dengan sosial media menjadi lebih mudah.<\/p>\n<p>Untuk memahami cara menggunakan library Socialite di Laravel, simak video dari Channel IDStack berikut :  <a href=\"https:\/\/www.youtube.com\/watch?v=qT-5a__Ae1g&amp;list=PL1aMeb5UP_PHezGBQvCGDDKNdpcOZdFiJ\">link video.<\/a> <\/p>\n<p>Catatan : pada playlist video di atas, IDStack menggunakan Laravel 5.8. Sedangkan pada pelatihan kali ini, kita menggunakan Laravel 6, ada sedikit penyesuain yang harus diperhatikan ketika membuat otentikasi.<\/p>\n<p>\n<\/p><\/div>\n"
            }
          
        ]
      },
      {
        "nama": "WEEK 2",
        "posting": [
          
            {
              "uuid": "6",
              "judul": "Hari ke-1 | Javascript ES 6",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p>ES6 adalah fitur bahasa pada pemrograman Javascript modern. <\/p>\n<h1 id=\"daftar-fitur-es6\">Daftar Fitur ES6<a href=\"#daftar-fitur-es6\"><\/a><\/h1>\n<ul>\n<li class=\"\">Arrows Function<\/li>\n<li class=\"\">Classes<\/li>\n<li class=\"\">Enchanced object literals<\/li>\n<li class=\"\">Template strings<\/li>\n<li class=\"\">Destructuring<\/li>\n<li class=\"\">Default + rest + spread<\/li>\n<li class=\"\">Let + const<\/li>\n<li class=\"\">Iterators + for..of<\/li>\n<li class=\"\">Generators<\/li>\n<li class=\"\">Unicode<\/li>\n<li class=\"\">Modules<\/li>\n<li class=\"\">Modules loaders<\/li>\n<li class=\"\">Map +set + weakmap + weakset<\/li>\n<li class=\"\">Proxies<\/li>\n<li class=\"\">Symbols<\/li>\n<li class=\"\">Subclassable built-ins<\/li>\n<li class=\"\">Promises<\/li>\n<li class=\"\">Math + number + string + array + object apis<\/li>\n<li class=\"\">Binary dan octal literals<\/li>\n<li class=\"\">Reflect API<\/li>\n<li class=\"\">Tail calls<\/li>\n<\/ul>\n<p>Tidak perlu menguasai seluruh fitur diatas. Diharuskan menguasai 8 fitur, diantaranya :<\/p>\n<ol>\n<li class=\"\">Let + Const<\/li>\n<li class=\"\">Arrow Functions<\/li>\n<li class=\"\">Default Parameters<\/li>\n<li class=\"\">Destructuring<\/li>\n<li class=\"\">Rest Parameters + Spread Operator<\/li>\n<li class=\"\">Enhanced object literals<\/li>\n<li class=\"\">Template literals<\/li>\n<li class=\"\">Promises<\/li>\n<\/ol>\n<h2 id=\"let-const\">Let + Const<a href=\"#let-const\"><\/a><\/h2>\n<p><strong>Normal Javascript:<\/strong><\/p>\n<pre class=\"wp-block-preformatted\">var x = 1;\n \nif (x === 1) {\nvar x = 2;\n \nconsole.log(x);\n\/\/ expected output: 2\n}\n \nconsole.log(x); \/\/ 2 <\/pre>\n<p><strong>ES6 :<\/strong><\/p>\n<pre class=\"wp-block-preformatted\">let x = 1;\n \nif (x === 1) {\n  let x = 2;\n \n  console.log(x);\n  \/\/ expected output: 2\n}\n \nconsole.log(x); \/\/ 1 \n\nconst number = 42;\nnumber = 100; \/\/ Uncaught TypeError: Assignment to constant variable.  <\/pre>\n<h3>Arrow Functions<\/h3>\n<p><strong>Normal Javascript:<\/strong><\/p>\n<pre class=\"wp-block-preformatted\">function f (){\n    \/\/ isi Function\n}\n \nvar f = function(){\n    \/\/ isi function\n} <\/pre>\n<p><strong>ES6 :<\/strong><\/p>\n<pre class=\"wp-block-preformatted\">var f = () =&gt; {\n    \/\/function\n    return () =&gt; {\n        \/\/returning a function\n    }\n} <\/pre>\n<h2 id=\"default-parameters\">Default Parameters<a href=\"#default-parameters\"><\/a><\/h2>\n<pre class=\"wp-block-preformatted\">function multiply(a, b = 1) {\n  return a * b;\n}\n \nconsole.log(multiply(5, 2));\n\/\/ expected output: 10\n \nconsole.log(multiply(5));\n\/\/ expected output: 5 <\/pre>\n<h3>Destructuring <\/h3>\n<p><strong>Normal Javascript:<\/strong><\/p>\n<pre class=\"wp-block-preformatted\">let studentName = {\n    firstName: 'Peter',\n    lastName: 'Parker'\n};\n \nconst firstName = studentName.firstName;\nconst lastName = studentName.lastName; <\/pre>\n<p><strong>ES6:<\/strong><\/p>\n<pre class=\"wp-block-preformatted\">let studentName = {\n    firstName: 'Peter',\n    lastName: 'Parker'\n};\n \nconst { firstName, lastName } = studentName;\n \nconsole.log(firstName); \/\/ Peter\nconsole.log(lastName); \/\/ Parker <\/pre>\n<h1 id=\"rest-parameters-spread-operator\">Rest Parameters + Spread Operator<a href=\"#rest-parameters-spread-operator\"><\/a><\/h1>\n<pre class=\"wp-block-preformatted\">\/\/ Rest Parameters\n \nlet scores = ['98', '95', '93', '90', '87', '85']\nlet [first, second, third, ...restOfScores] = scores;\n \nconsole.log(first) \/\/ 98\nconsole.log(second) \/\/ 95\nconsole.log(third) \/\/ 93\nconsole.log(restOfScores) \/\/ [90, 87, 85] <\/pre>\n<pre class=\"wp-block-preformatted\">let array1 = ['one', 'two']\nlet array2 = ['three', 'four']\nlet array3 = ['five', 'six']\n \n\/\/ ES5 Way \/ Normal Javascript\n \nvar combinedArray = array1.concat(array2).concat(array3)\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six']\n \n\/\/ ES6 Way \n \nlet combinedArray = [...array1, ...array2, ...array3]\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six'] <\/pre>\n<h1 id=\"enhanced-object-literals\">Enhanced object literals<a href=\"#enhanced-object-literals\"><\/a><\/h1>\n<pre class=\"wp-block-preformatted\">const fullName = 'Zell Liew'\n \nconst Zell = {\n  fullName: fullName\n}\n \n\/\/ ES6 way\nconst Zell = {\n  fullName\n}<\/pre>\n<h1 id=\"template-literals\">Template Literals<a href=\"#template-literals\"><\/a><\/h1>\n<pre class=\"wp-block-preformatted\">const firstName = 'Zell'\nconst lastName = 'Liew'\nconst teamName = 'unaffiliated'\n \nconst theString = `${firstName} ${lastName}, ${teamName}`\n \nconsole.log(theString) \/\/ Zell Liew, unaffiliated<\/pre>\n<p>\n<p><!--EndFragment--><\/p> <\/p><\/div>\n"
            },
            {
              "uuid": "7",
              "judul": "Hari ke-2 & Hari ke-3 | Mengenal Vue JS",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p>Bismillaah..<\/p>\n<p>Pada kesempatan kali ini , kita akan mencoba mengenal  salah satu framework Jacascript yang cukup terkenal, yakni Vue JS.  Vue JS adalah framework javascript yang berfungsi untuk membangun antarmuka web yang interaktif.<\/p>\n<p>Di bootcamp kali ini teman-teman tentu tidak dikhususkan agar menjadi expert front-end Developer. Namun nampaknya teman teman perlu untuk mengenal Vue JS sebagai pengganti Jquery yang dikenal memiliki syntax yang cukup ribet (tentu ini relatif). Dan untuk web dengan sekala besar, tentu jquery  tidak direkomendasikan untuk dipakai. <\/p>\n<p>Langsung saja kita mulai mengenal Vue JS, memlalui tutorial dari Mas Hilman Ramadhan dari Sekolah Koding : <a href=\"https:\/\/www.youtube.com\/watch?v=EmCBOtkXxdg&amp;list=PLCZlgfAG0GXCFeOD_wBc9GrYF9pA8loLQ&amp;index=1\">link_video<\/a> <\/p>\n<p>\n<\/p><\/div>\n"
            },
            {
              "uuid": "8",
              "judul": "Hari ke-4 | CRUD Laravel + Vue JS",
              "konten": "Under Maintance | https:\/\/youtu.be/ZQ2AOck5KmU"
            },
            {
              "uuid": "9",
              "judul": "Hari ke-5 | Mengenal Redis",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p>Cache adalah proses penyimpanan sementara data pada sebuah website untuk mengurangi  penggunaan bandwith dan loading  server. Dengan adanya teknologi cache sebuah website akan menampilkan halaman dengan cepat.  Biasanya sebuah website menyimpan data data di dalam sebuah hardisk, sedangakan dengan cache data akan disimpan di dalam sebuah RAM, sehingga akan memakan waktu yang sangat cepat untuk mengaksesnya.<\/p>\n<p>Ada dua kategori cache, yaitu client side caching dan server side caching. Client side caching adalah proses caching yang terjadi di browser pengguna internet. Proses caching ini dapat dikelola oleh pengguna melalui pengaturan di browser. Sedangkan server side caching adalah proses caching yang terjadi di server dan website. <\/p>\n<p>Yang akan kita pelajari saat ini adalah server side caching menggunakan redis.<\/p>\n<p>Apa itu redis ?<\/p>\n<p>Redis adalah tools open source untuk menyimpan data in-memory. Sering di gunakan untuk database dan cache.  Karena keandalan dan kecepatan menulis dan membaca nya yang luar biasa, sangat pantas untuk kita gunakan sebagai tools caching. <\/p>\n<p>Sebagai ilustrasi, bayangkan kita akan membuat website hasil seleksi masuk SMP Sanbersy.  Setiap hari tentunya  data akan selalu masuk ke database. Bayangkan data yang masuk adalah 10.000 data. Ketika user A akan mengakses halaman hasil seleksi tersebut, maka data yang diproses pun 10.000 data. Kemudian user B mengakses lagi halaman tersebut , maka data yang diproses pun 10.000 data. Tentu hal ini akan membuat kinerja website kita menjadi lambat. Oleh karena itu sebaiknya teknologi cache ini digunakan. Ketika user A mengakses data yang pertama (10.000 data), maka server akan mengaksesnya ke dalam hardisk (database, misal mysql). Dan kemudain data tersebut kita akan simpan di dalam cache menggunakan redis. Dan akhirnya ketika user B dan seterusnya mengakses halaman yang sama , server tidak lagi mengakses ke database, melainkan mengakses cache, sehinggal halaman akan sangat cepat dikases. Begitu sederhana.<\/p>\n<p>Pada kesempatan kali ini kita akan mencoba berkenalan dengan Redis.<\/p>\n<p>Ini link video dari sekolah koding:  <a href=\"https:\/\/sekolahkoding.com\/kelas\/cache-redis-di-laravel\/video\/dasar-dasar-redis\">link_video<\/a><br\/>Bagi yang suka membaca , boleh membaca artikel dari codepolitan ini :  <a href=\"https:\/\/www.codepolitan.com\/pdkt-dengan-redis\">link_artikel<\/a><\/p>\n<p><\/p>\n<\/div>\n"
            }
          
        ]
      },
      {
        "nama": "WEEK 3",
        "posting": [
          
            {
              "uuid": "11",
              "judul": "Hari ke-1 | Cache menggunakan Redis di Laravel",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p>Setelah kita mengenal redis. Sekarang saatnya kita belajar bagaimana kita bisa mengimplementasikan caching di project Laravel kita menggunakan Redis.<\/p>\n<p>Perlu diketahui, bahwasanya Laravel mensuport 2 provider untuk teknologi cache ini, yaitu <a href=\"https:\/\/memcached.org\/\">Memcached<\/a>\u00a0and\u00a0<a href=\"https:\/\/redis.io\/\">Redis<\/a>\u00a0. Namun di bootcamp kali ini kita hanya akan mempeljari Redis. Silakan dipelajari secara mandiri jika berminat untuk mempeljari Memcahed.<\/p>\n<p>Langsung saja , kita kunjungi artikel dari kodingin.com :  <a href=\"https:\/\/kodingin.com\/cara-menggunakan-cache-dengan-redis-di-laravel\/\">link artikel<\/a><br\/>Atau bagi yang senang belajar melalui video, bisa mengunjungi tutorial dari Mas Hilman Ramadhan dari sekolahkoding  :  <a href=\"https:\/\/sekolahkoding.com\/kelas\/cache-redis-di-laravel\/video\/perisapan-cache-dengan-redis\">link video 1<\/a> &amp;  <a href=\"https:\/\/sekolahkoding.com\/kelas\/cache-redis-di-laravel\/video\/cache-query-database\">link video 2<\/a> <\/p>\n<p>Selamat mencoba, dan rasakan bedanya.<\/p>\n<p><\/p>\n<\/div>\n"
            },
            {
              "uuid": "12",
              "judul": "Hari ke-2 | Event Listener & Queue – 1",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p>Pada tutorial sebelumnya, di aplikasi pembuatan API, kita membuat sebuah controller , RegisterController , untuk mendaftarkan user yang baru masuk ke aplikasi kita. Di dalam sebuah aplikasi yang baik, ketika user berhasil register, maka biasanya user akan diberi notifikasi baik melalui email, sms, atau WA bahwa user berhasil terdaftar di aplikasi kita. <\/p>\n<p>Sebagian programmer , setelah store ke database untuk mendaftarkan user baru ke table users, kode untuk mengirimkan notifikasi ini , ditulis memanjang ke bawah setelah kode untuk store ke database, bahkan hingga puluhan atau bahkan ratusan baris kode, sehingga controller yang pada awalnya hanya menghandle register user (store ke database) sudah tidak representatif lagi.   <\/p>\n<p>Sebagai programmer yang ingin memiliki kode yang bersih, readble, maintainable, maka implementasi Event Listener di  Laravel sangat perlu dilakukan. Lalu bagaimana cara membuatnya, simak <a href=\"https:\/\/youtu.be\/b8BAcM0hd0c\">video berikut<\/a> .<\/p>\n<p><\/p>\n<\/div>\n"
            },
            {
              "uuid": "13",
              "judul": "Hari ke-3 | Event Listener & Queue – 2",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p>Pada tutorial sebelumnya kita berhasil membuat event ketika user baru berhasil didaftarkan, kemudian kita membuat listener yaitu mengirimkan email ke user baru tersbeut.<\/p>\n<p>Namun perlu teman teman ketahui, bahwa ketika mengirim email, aplikasi Laravel kita akan menunggu email terkirim dulu, baru menjalankan kode selanjutnya, yang dalam hal ini akan me retern response json. <\/p>\n<p>Bayangkan ketika kita memiliki 100 email yang mau dikirim, harus berapa lama kita menunggu? <\/p>\n<p>Maka solusinya adalah dengan menggunakan queue (antrian). Jadi pengiriman email akan dilakukan di background (di balik layar), sehingga aplikasi tidak harus menunggu dulu email terkirim, kemudian menjalankan kode selanjutnya.<\/p>\n<p>Untuk lebih jelasnya, mari kita simak <a href=\"https:\/\/youtu.be\/2PUtnbNzraY\">video berikut <\/a>.<\/p>\n<\/div>\n"
            },
            {
              "uuid": "14",
              "judul": "Hari ke-4 | Laravel Task Scheduling",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p>Pada suatu kasus di project Laravel kita, kita menginginkan menjalankan kode secara otomatis, tanpa harus ada trigger berupa klik button, atau action yang lainnya. Sebagai contoh misalnya, kita ingin menghapus user yang sudah tidak aktif, atau menghapus user yang diblok, dll.<\/p>\n<p>Dalam materi Cache kemarin, kita misalnya dihadapkan dengan route yang memiliki query yang  sangat banyak dan memakan waktu. Dan biasanya kita menggunakan cache untuk persoalan ini, namun seolah olah user yang  pertama mengakses route tersebut dia yang menjadi korban, dia akan menikmati query yang banyak tersebut, dan tentunya  dia akan mengakses halaman tersebut dengan lama. Tentu hal ini tidak kita inginkan, maka kita bisa lakukan task scheduling untuk mendaftarkan cache yang kita inginkan. Dan kita bisa jadwalkan task tersbut di setiap malam jam 00.00 misalnya. Sehingga user yang pertama masuk ke dalam route tersebut bisa langsung menikmati hasil cache, bukan hasil dari query  di database. <\/p>\n<p>Mari kita lihat tutorial<a href=\"https:\/\/youtu.be\/nO54He26ifE\"> berikut.<\/a><\/p>\n<\/div>\n"
            }
          
        ]
      },
      {
        "nama": "WEEK 4",
        "posting": [
          
            {
              "uuid": "16",
              "judul": "Hari ke-1 | Pengenalan UUID",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p>Bismillaah..<\/p>\n<p>Dalam membuat table di aplikasi Laravel, biasanya kita menggunakan id\u00a0<em>auto increment<\/em>\u00a0<em>integer<\/em>\u00a0untuk sebuah\u00a0<em>primary key<\/em>. Dalam aplikasi yang skalanya relatif kecil, mungkin hal ini sah sah saja. Namun untuk aplikasi yang relatif besar, sudah banyak pengunanya, maka penggunaan id\u00a0<em>auto increment<\/em>\u00a0<em>integer<\/em>\u00a0untuk sebuah\u00a0<em>primary key<\/em> sudah semestinya tidak digunakan lagi.<\/p>\n<p><strong>Mengapa<br\/>\ndemikian ? <\/strong><\/p>\n<p>Terdapat beberapa masalah yang mungkin akan dihadapi jika tetap menggunakan id\u00a0<em>auto increment<\/em>\u00a0<em>integer<\/em> , diantaranya :<\/p>\n<p><strong>1.<br\/>\nAplikasi mudah ditebak dan dimanipulasi datanya<\/strong><\/p>\n<p>Biasanya kita menggunakan route seperti ini <a href=\"http:\/\/test-xyx.com\/user\/1\/edit\">http:\/\/test-xyx.com\/user\/1\/edit<\/a> untuk mengubah data di table users kita. Angka 1 adalah parameter dinamis yang biasanya merupakan id\u00a0<em>auto increment<\/em>\u00a0<em>integer<\/em> di table users. <\/p>\n<p> Untuk pengguna yang iseng, biasanya mereka akan coba coba mengganti angka 1 dengan angka yang lainnya, 2,3,4, dst . Untuk aplikasi Laravel yang belum menerapkan middleware untuk meprotect route-route nya, tentu percobaan tersebut akan membuat si pengguna tadi dapat mengubah data user yang lain. <\/p>\n<p><strong>2.<br\/>\nKonflik dan Masalah Skalabilitas <\/strong><\/p>\n<p>Jika kita sudah memiliki aplikasi yang sangat besar (Aplikasi A), katakan saja di dalam table users kita sudah ada 100.000 data. Dan kemudian aplikasi kita akan diintegrasikan dengan aplikasi yang lain (Aplikasi B), dan table users masuk ke dalam table yang harus digabungkan antara aplikasi A dan B. Data-data aplikasi A sudah menggunakan\u00a0Primary Key\u00a0Id auto-increment. Aplikasi B juga menggunakan \u00a0 Primary Key\u00a0Id auto-increment juga. Sampai saat ini tentu tidak ada masalah, karena 2 aplikasi tersebut berjalan sendiri-sendiri. Pertanyaannya, lalu bagaimana menggabungkannya? Apakah sekadar copy\u00a0dan\u00a0paste\u00a0bisa? Jawabannya tentu tidak bisa, karena pasti akan ada data bentrok\/konflik di keduanya, disebabkan\u00a0<em>Primary Key<\/em>\u00a0Id\u00a0banyak yang sama. Padahal sebuah\u00a0<em>Primary Key<\/em>\u00a0harus\u00a0unique. Ini kasus yang pertama.<\/p>\n<p> Kasus yang lain adalah, ketika dalam satu detik aplikasi kita digunakan oleh banyak orang, katakanlah request per detik nya 10.000 request insert data, maka jika kita mengunnakan Id auto-increment akan banyak sekali data yang gagal masuk ke database kita atau fungsi auto-increment kita tidak berfungsi dengan baik<\/p>\n<p><strong>Maka<br\/>\nsolusinya adalah UUID (Universally Unique Identifier)<\/strong><\/p>\n<p>Salah satu solusi dari permasalahan<br\/>\nitu semua\u00a0<strong>UUID<\/strong>. Secara singkat UUID adalah sebuah string yang<br\/>\nteridiri dari 32 karakter. Dibuat secara acak dan kecil kemungkinan<br\/>\nmenghasilkan nilai yang sama. Dan jika kita generate 1000 data untuk UUID ini,<br\/>\nmakan akan kecil kemungkinan ada UUID yang sama. Sehingga lebih cocok untuk<br\/>\ndigunakan sebagai\u00a0<em>Primary Key<\/em>. <\/p>\n<p>Untuk implementasi di project Laravel kita, mari kita ikuti tutorial dari kawan koding <a href=\"https:\/\/www.kawankoding.id\/menggunakan-uuid-di-laravel\/\">berikut <\/a>.<\/p>\n<p>\n<\/p><\/div>\n"
            },
            {
              "uuid": "17",
              "judul": "Hari ke-2 | Laravel Broadcasting",
              "konten": "Under Maintance | https://www.youtube.com/watch?v=7WYIdsubYvo&list=PL8YCzrSDCR7jE2_39tVqsLkJEaKbHdX89"
            },
            {
              "uuid": "18",
              "judul": "Hari ke-3 | Mengenal Unit Testing",
              "konten": "Under Maintance"
            },
            {
              "uuid": "19",
              "judul": "Hari ke-4 | Final Project",
              "konten": "<div class=\"entry-content\" itemprop=\"articleBody\">\n\n<p>Pada final project kali ini, teman teman akan dibagi ke dalam beberapa kelompok untuk  membuat web sederhana.<br\/>Setiap kelompok dibebaskan untuk merancang ide mengenai kegunaan dan fitur apa saja yang ada di dalam web sederhana ini. Intinya terserah mau buat apa di project ini.<\/p>\n<p>Namun web tersebut harus memiliki  fitur fitur sebagai berikut :<\/p>\n<ol>\n<li>fitur authentication<\/li>\n<li>fitur authorization (gunakan middleware untuk membatasi hak akses)<\/li>\n<li>gunakan Vue Js untuk CRUD<\/li>\n<li>Sebisa mungkin gunakan nama variable, method yang deskriptif<\/li>\n<li>Jika menggunakan API, bungkus API menggunakan API Resource<\/li>\n<li>fitur real time (contoh : chat , komentar, atau lelang online, dsb)<\/li>\n<li>gunakan payment gateway untuk sistem pemabyaran online<\/li>\n<li>gunakan UUID di setiap primary key table<\/li>\n<\/ol>\n<p>Cara pengumpulan tugas :<\/p>\n<ol>\n<li>Semua peserta wajib mengumpulkan link repo gitlab <\/li>\n<li>Buat juga 2 video : video demo aplikasi dan video pembahasan mengenai kode yang dibuat (singkat saja). Dan video tersebut simpan juga di dalam repo tersebut<\/li>\n<li>Set juga mubarok.iqbal sebagai maintener di repo tersebut<\/li>\n<li>Terakhir dikumpulkan Jumat  14  Agustus 2020 jam 23.59 WIB<\/li>\n<\/ol>\n<p>\n<p><!--EndFragment--><\/p> <\/p><\/div>\n"
            }
          
        ]
      }
    ]
  }
  