<div class=\"entry-content\" itemprop=\"articleBody\"> <p><\/p><div style=\"height:48px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div><h2 id=\"object-oriented-programming\">Object Oriented Programming<a class=\"anchorjs-link \" href=\"#object-oriented-programming\" aria-label=\"Anchor\" data-anchorjs-icon=\"#\" style=\"padding-left: 0.375em;\"><\/a><\/h2><p>Terdapat dua macam paradigma dalam programming, yaitu Struktural Programming dan Object Oriented Programming. Paradigma disini adalah dasar\/cara berpikir saat seseorang melakukan pemograman. Struktural adalah paradigma dimana program\/kode yang kita buat berjalan sesuai dengan urutan yang sudah ditentukan, pada umumnya menggunakan if-else looping. Ini akan menjadi cukup memusingkan saat kita akan membuat sebuah program yang kompleks. Sedangkan, Object Oriented Programming (OOP) adalah suatu paradigma dimana kode kita dikumpulkan\/dimisalkan menjadi sebuah objek. Contoh paling mudah adalah jika kita ingin membuat sebuah program tentang rumah, maka rumah itu kita misalkan objek yang tentu saja objek tersebut memiliki karakteristik tersendiri, misalkan warna, lokasi, dan harga. Saat kita akan butuh data karakteristik(instance) yang dibutuhkan maka kita tinggal melakukan pemanggilan.<\/p><p>Python sendiri merupakan bahasa pemograman yang dapat menggunakan konsep OOP tapi juga dapat mengimplementasikan konsep Structural Programming.<\/p><h4>Istilah – Istilah Dalam OOP<\/h4><p>Beberapa istilah utama yang terdapat pada OOP diantaranya : <\/p><ul><li><strong>Kelas<\/strong>&nbsp;– Kelas adalah cetak biru atau prototipe dari objek dimana kita mendefinisikan atribut dari suatu objek. Atribut ini terdiri dari data member (variabel) dan fungsi (metode).<\/li><li><strong>Variabel Kelas<\/strong>&nbsp;– Variabel kelas adalah variabel yang di<em>share<\/em>&nbsp;atau dibagi oleh semua instance (turunan) dari kelas. Variabel kelas didefinisikan di dalam kelas, tapi di luar metode-metode yang ada dalam kelas tersebut.<\/li><li><strong>Data member<\/strong>&nbsp;– Data member adalah variabel yang menyimpan data yang berhubungan dengan kelas dan objeknya<\/li><li><strong>Overloading Fungsi<\/strong>&nbsp;– Overloading fungsi adalah fungsi yang memiliki nama yang sama di dalam kelas, tapi dengan jumlah dan tipe argumen yang berbeda sehingga dapat melakukan beberapa hal yang berbeda.<\/li><li><strong>Overloading operator<\/strong>&nbsp;– Overloading operator adalah pembuatan beberapa fungsi atau kegunaan untuk suatu operator. Misalnya operator + dibuat tidak hanya untuk penjumlahan, tapi juga untuk fungsi lain.<\/li><li><strong>Variabel instansiasi<\/strong>&nbsp;– Variabel instansiasi adalah variabel yang didefinisikan di dalam suatu metode dan hanya menjadi milik dari instance kelas.<\/li><li><strong>Pewarisan\/Inheritansi<\/strong>&nbsp;– Inheritansi adalah pewarisan karakteristik sebuah kelas ke kelas lain yang menjadi turunannya.<\/li><li><em><strong>Instance<\/strong><\/em>&nbsp;–&nbsp;<em>Instance<\/em>&nbsp;adalah istilah lain dari objek suatu kelas. Sebuah objek yang dibuat dari prototipe kelas Lingkaran misalnya disebut sebagai instance dari kelas tersebut.<\/li><li><strong>Instansiasi<\/strong>&nbsp;– Instansiasi adalah pembuatan instance\/objek dari suatu kelas<\/li><li><strong>Metode<\/strong>&nbsp;– Metode adalah fungsi yang didefinisikan di dalam suatu kelas<\/li><li><strong>Objek<\/strong>&nbsp;– Objek adalah instansiasi atau perwujudan dari sebuah kelas. Bila kelas adalah prototipenya, dan objek adalah barang jadinya.<\/li><\/ul><div style=\"height:61px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div><p><\/p><h3 id=\"mendefinisikan-class\">Mendefinisikan Class<a class=\"anchorjs-link \" href=\"#mendefinisikan-class\" aria-label=\"Anchor\" data-anchorjs-icon=\"#\" style=\"padding-left: 0.375em;\"><\/a><\/h3><p>Mendefiniskan class sangat mudah, secara sederhana dapat kita tuliskan seperti.<\/p><pre class=\"wp-block-code\"><code>class mobil: pass<\/code><\/pre><p>Seperti definisinya, class diatas akan menjadi cetak biru dari objek\/instance yang akan masukkan pada tahap selanjutnya. Lalu kita inisiasikan objek dari <em>class<\/em> yang telah kita buat.<\/p><pre class=\"wp-block-code\"><code>mobil1=mobil()mobil2=mobil()<\/code><\/pre><p>Kode diatas artinya objek mobil1 dan mobil2 memakai <em>class<\/em> mobil sebagai cetak biru untuk objek tersebut. Artinya semua variabel, atau metode nantinya akan mengikuti <em>class<\/em> mobil. Sekarang kita akan masukan atribut\/variabel dalam objek yang kita buat. kita akan masukkan jenis dan warna dari objek tersebut.<\/p><pre class=\"wp-block-code\"><code>mobil1.jenis=\"Sedan\"mobil1.warna=\"Merah\"mobil2.jenis=\"SUV\"mobil2.warna=\"Hitam\"<\/code><\/pre><p>Jika kita menggunakan metode print() untuk melihat atribut dan objek yang telah kita buat maka kita akan mendapatkan<\/p><pre class=\"wp-block-code\"><code>print(mobil1)print(mobil1.jenis)print(mobil1.__dict__)#&lt;__main__.mobil object at 0x011D36D0&gt;#Sedan#{'jenis': 'Sedan', 'warna': 'Merah'}<\/code><\/pre><p>Pada hasil pertama kita diperlihatkan bahwa mobil satu merupakan sebuah objek. Pada hasil kedua kita diperlihatkan bahwa atribut jenis pada objek mobil1 bernilai “sedan”. Pada hasil terakhir kita ingin melihat atribut apa saja yang dimiliki oleh objek tersebut.<\/p><div style=\"height:61px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div><h3 id=\"mendefinisikan-metode\">Mendefinisikan Metode<a class=\"anchorjs-link \" href=\"#mendefinisikan-metode\" aria-label=\"Anchor\" data-anchorjs-icon=\"#\" style=\"padding-left: 0.375em;\"><\/a><\/h3><p>Metode pertama yang akan kita kenal adalah metode init. Seperti namanya Metode ini digunakan sebagai inisiasi <em>class<\/em> yang kita jalankan jadi saat kita memanggil <em>class<\/em> tersebut sebagai sebuah objek maka metode ini akan dijalankan terlebih dahulu.<\/p><pre class=\"wp-block-code\"><code>class mobil: def __init__(self): print(\"ini mobil saya\")mobil1=mobil()#ini mobil saya<\/code><\/pre><p>Seperti yang terlihat, saat kita menginisiasi pembuatan objek mobil1 maka dengan otomatis print(“ini mobil saya”) terjalankan. Jadi apa gunanya hal ini? dengan melakukan ini maka kita bisa lebih menyederhanakan kode yang kita tulis sehingga lebih mudah dibaca. Kita akan coba masukkan atribut jenis dan warna pada fungsi init tersebut.<\/p><pre class=\"wp-block-code\"><code>class mobil: def __init__(self, jenis, warna): self.jenis=jenis self.warna=warnamobil1=mobil('Sedan', 'Merah')mobil2=mobil('SUV', 'Hitam')<\/code><\/pre><p>Dan jika kita print maka akan menghasilkan,<\/p><pre class=\"wp-block-code\"><code>print(mobil1.__dict__)print(mobil2.__dict__)#{'jenis': 'Sedan', 'warna': 'Merah'}#{'jenis': 'SUV', 'warna': 'Hitam'}<\/code><\/pre><p>Kesederhaan ini akan lebih terlihat lagi jika apa yang kita lakukan menjadi lebih rumit sehingga membutuhkan banyak sekali atribut maka kita hanya membutuhkan satu baris saja untuk menginisiasi sebuah objek.<\/p><h4>Atribut Kelas vs Atribut Objek<\/h4><p>Atribut yang kita buat sebelumnya adalah atribut objek, apa maksudnya? Maksudnya adalah atribut tersebut hanya menjadi miliki objek yang didefinisikan. Misal untuk mobil1 jenisnya adalah sedan sedangkan untuk mobil2 jenisnya adalah SUV. Atribut kelas adalah atribut yang menjadi milik si <em>class<\/em> tersebut artinya nilainya akan sama untuk semua metode di dalam <em>class <\/em>tersebut.<\/p><pre class=\"wp-block-code\"><code>class mobil: benda='Mobil' def __init__(self, jenis, warna): self.jenis=jenis self.warna=warnamobil1=mobil('Sedan', 'Merah')mobil2=mobil('SUV', 'Hitam')print(mobil1.benda)print(mobil2.benda)#Mobil#Mobil<\/code><\/pre><h4>Metode Objek<\/h4><p>Sebuah <em>class<\/em> memliki metode didalamnya yang dapat kita variasikan fungsinya tidak seperti metode init. Kalau kita menggunakan pemisalan sederhana, Jika objek yang kita maksudkan adalah kalkulator maka yang termasuk ke dalam metode yang dimaksud adalah operasi tambah, kurang, bagi, dan kali. Sekarang kita akan mencoba membuat metode pada <em>class<\/em> mobil sebelumnya.<\/p><pre class=\"wp-block-code\"><code>class mobil: def __init__(self, jenis, warna, tangki): self.jenis=jenis self.warna=warna self.tangki=tangki def data_mobil(self): print(\"mobil saya berjenis\",self.jenis,\"dan memiliki warna\",self.warna,\"serta memiliki ukuran tangki\",self.tangki,\"L\")<\/code><\/pre><p>Lalu kita lakukan inisiasi dan pemanggilan maka akan menghasilkan,<\/p><pre class=\"wp-block-code\"><code>mobil1=mobil('Sedan', 'Merah', 40)mobil1.data_mobil()#mobil saya berjenis Sedan dan memiliki warna Merah serta memiliki ukuran tangki 40 L<\/code><\/pre><p>Metode diatas adalah contoh metode yang tanpa argumen, sehingga saat melakukan pemanggilan kita tidak perlu mengisikan argumen ke dalam kurung. Selain metode tersebut, ada juga metode dengan argumen yang akan kita contohkan dengan membuat sebuah fungsi untuk menghitung sisa tangki dari jarak tempuhnya. Sekarang mari kita buat atribut baru, yaitu efisiensi. Efisiensi disini adalah berapa liter bensin yang hilang untuk 10 km.<\/p><pre class=\"wp-block-code\"><code>class mobil: def __init__(self, jenis, warna, tangki, efisiensi): self.jenis=jenis self.warna=warna self.tangki=tangki self.efisiensi=efisiensi<\/code><\/pre><p>Lalu kita buat fungsi untuk menghitung sisa bensin pada tangki<\/p><pre class=\"wp-block-code\"><code>def sisa_bensin(self,jarak): sisa=self.tangki - ((jarak\/10)*self.efisiensi) return print(\"sisa bensin adalah\",sisa)<\/code><\/pre><p>Lalu kita panggil metode tersebut, karena pada fungsinya kita dapat melihat bahwa dibutuhkan argumen jarak maka pemanggilan metodenya akan sedikit berbeda dengan memasukkan satu argumen jarak dalam kilometer.<\/p><pre class=\"wp-block-code\"><code>mobil1=mobil('Sedan', 'Merah', 40, 4)mobil1.sisa_bensin(20)#sisa bensin adalah 32.0<\/code><\/pre><p>Sampai sini kalian sudah bisa mengenal OOP dan memuat <em>class<\/em> sederhana. dengan memanfaatkan atribut\/variabel dan metode\/fungsi yang sesuai. Kita akan mencoba untuk mengaplikasikan hal tersebut pada materi-materi kita kedepannya.<\/p><div style=\"height:50px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div><h2 id=\"json\">JSON<a class=\"anchorjs-link \" href=\"#json\" aria-label=\"Anchor\" data-anchorjs-icon=\"#\" style=\"padding-left: 0.375em;\"><\/a><\/h2><p>JSON adalah singkatan dari <strong>J<\/strong>ava <strong>S<\/strong>cript <strong>O<\/strong>bject <strong>N<\/strong>otation, sebuah format penyimpanan yang ideal untuk data berstruktur hirarki. JSON. Pada python JSON memiliki kemiripan dengan <em>dictionary<\/em> karena memiliki dua parameter utama, yaitu <em>key <\/em>dan <em>value<\/em>.<\/p><p>Struktur dari object JSON adalah<\/p><ul><li>Data berbentuk pasangan <em>key\/value<\/em> dengan menggunakan titik dua (:)<\/li><li>Setiap object data dipisahkan dengan koma<\/li><li>Seluruh object disimpan dalam kurung{}<\/li><li>Jika <em>value<\/em> mengandung array, maka dapat menggunakan kurung []<\/li><li>Semua element data ditutup dengan “” bila string dan tanpa itu bila numerik <\/li><\/ul><p>Contoh penggunaannya:<\/p><pre class=\"wp-block-code\"><code>{\"nama\":\"Budi\"}<\/code><\/pre><p>Contoh bila terdapat banyak data:<\/p><pre class=\"wp-block-code\"><code>{\"nama\":\"Budi\", \"usia\":24, \"kota\":\"Bandung\"}<\/code><\/pre><p>Contoh bila pada nilai berbentuk array:<\/p><pre class=\"wp-block-code\"><code>{\"Karyawan\":[{\"Nama Depan\":\"Budi\", \"Nama Belakang\":\"Kusuma\"},{\"Nama Depan\":\"Susi\", \"Nama Belakang\":\"Miranti\"}]}<\/code><\/pre><p>JSON sendiri dapat menyimpan berbagai macam tipe data, diantaranya:<\/p><ul><li>strings<\/li><li>numbers<\/li><li>objects (<code>JSON<\/code>&nbsp;object)<\/li><li>arrays<\/li><li>booleans (TRUE \/ FALSE)<\/li><li>null<\/li><\/ul><div style=\"height:60px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div><h3 id=\"json-python\">JSON &amp; Python<a class=\"anchorjs-link \" href=\"#json-python\" aria-label=\"Anchor\" data-anchorjs-icon=\"#\" style=\"padding-left: 0.375em;\"><\/a><\/h3><p>Kita dapat mengkonversikan <em>dictionary<\/em> pada Python menjadi JSON object dengan library JSON yang ada di python. Pertama yang kita lakukan adalah dengan <em>import<\/em> library yang kita butuhkan.<\/p><pre class=\"wp-block-code\"><code>import json<\/code><\/pre><p>Kita inisiasikan data <em>dictionary <\/em> kita,<\/p><pre class=\"wp-block-code\"><code>data={}data['nama']='Budi'data['usia']=24data['kota']='Bandungprint (data)##{'nama': 'Budi', 'usia': 24, 'kota': 'Bandung'}<\/code><\/pre><p>Data tersebut dapat kita simpan dalam file berformat JSON dengan memanfaatkan fungsi json.dump()<\/p><pre class=\"wp-block-code\"><code>with open(\"data_file.json\", \"w\") as write_file: json.dump(data, write_file)<\/code><\/pre><p>Jika kita masih ingin menggunakan data json tersebut dalam pekerjaan maka kita dapat menggunakan json.dumps()<\/p><pre class=\"wp-block-code\"><code>json_data=json.dumps(data, ensure_ascii=False)print(json_data)##'{'nama': 'Budi', 'usia': 24, 'kota': 'Bandung'}'<\/code><\/pre><p>Melihat ada perbedaan? ketika yang satu menggunakan dump dan satu lagi menggunakan dumps. Ini bukanlah salah ketik, akan tetapi kedua fungsi tersebut memang memiliki tugas yang berbeda. Json.dump digunakan untuk menyimpan file dalam format JSON sedangkan json.dumps digunakan untuk mengkonversi data menjadi berbentuk JSON. <\/p><div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div><h4>JSON &amp; CSV<\/h4><p>Pada kesempatan kali ini kita akan mencoba untuk mengkonversikan data pada file csv ke json. Data yang akan digunakan adalah data pada file dibawah. pertama kita akan melakukan pembacaan data pada python.<\/p><div class=\"wp-block-file\"><a href=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/data_siswa.csv\">data_siswa<\/a><a href=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/data_siswa.csv\" class=\"wp-block-file__button\" download=\"\">Unduh<\/a><\/div><pre class=\"wp-block-code\"><code>csv_file=open(\"data_siswa.csv\")data=csv.reader(csv_file, delimiter=',')#atau bisa menggunakanwith open('data_siswa') as csv_file: csv_reader=csv.reader(csv_file, delimiter=\",\")<\/code><\/pre><p>Jika kita print maka akan menghasilkan,<\/p><pre class=\"wp-block-code\"><code>print(data)#&lt;_csv.reader object at 0x02A80DB0&gt;<\/code><\/pre><p>ternyata data tersebut berbentuk objek, dan untuk kali ini agar dapat melihat data di dalam objek tersebut kita akan menggunakan perulangan.<\/p><pre class=\"wp-block-code\"><code>for baris in data: print (baris)# ['No', 'Nama', 'kelas', 'nilai']# ['1', 'Budi', '11A', '8']# ['2', 'Sinta', '11A', '9']<\/code><\/pre><div style=\"height:30px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div><h4>Membaca file JSON<\/h4><p>Sekarang kita akan mencoba membaca file json menggunakan python. Kita akan menggunakan file yang disediakan di bawah untuk kegiatan kali ini. <\/p><p><a rel=\"noreferrer noopener\" href=\"https:\/\/drive.google.com\/file\/d\/1Cx38claLP92b300q2OsFRftArqjBzggA\/view?usp=sharing\" target=\"_blank\">Link Data<\/a><\/p><p>Untuk melakukan pembacaan kita akan memanfaatkan fungsi json.load()<\/p><pre class=\"wp-block-code\"><code>import jsonwith open('country.json') as f: data=json.load(f)<\/code><\/pre><p>Jika kita melakukan print maka akan keluar hasil,<\/p><pre class=\"wp-block-code\"><code>[{'Country': 'Antarctica', 'Slug': 'antarctica', 'ISO2': 'AQ'},{'Country': 'Malawi', 'Slug': 'malawi', 'ISO2': 'MW'}]<\/code><\/pre><p>Misalkan kita hanya ingin mengambil nilai ‘Antartika’, maka kita harus sedikit menelaad posisi data tersebut. Data terluar berada dalam sebuah list dimana negara antartika berada pada urutan pertama. Lalu kita lihat lagi, nilai ‘antartika’ berada pada kunci ‘Country’. Maka jika kita coba tuliskan,<\/p><pre class=\"wp-block-code\"><code>print (data[0])print (data[0]['Country'])<\/code><\/pre><p>Dan akan menghasilkan,<\/p><pre class=\"wp-block-code\"><code>#{'Country': 'Antarctica', 'Slug': 'antarctica', 'ISO2': 'AQ'}#Antartica<\/code><\/pre><p>Jadi sangat mudah untuk bisa mengkonversi data <em>dictionary<\/em> python kedalam JSON. Kenapa ini penting? karena format JSON adalah format yang biasanya dipakai untuk transfer informasi antar mesin atau bahasa. Ini akan sangat berguna salah satunya yang ingin mentransfer data dari <em>backend <\/em>ke <em>frontend <\/em>untuk seorang web developer.<\/p><div style=\"height:61px\" aria-hidden=\"true\" class=\"wp-block-spacer\"><\/div><h3 id=\"sumber-eksternal\">Sumber Eksternal<a class=\"anchorjs-link \" href=\"#sumber-eksternal\" aria-label=\"Anchor\" data-anchorjs-icon=\"#\" style=\"padding-left: 0.375em;\"><\/a><\/h3><p><a href=\"https:\/\/medium.com\/@denihhandoko\/object-oriented-programming-oop-dengan-python-3-9a618df7429e\">https:\/\/medium.com\/@denihhandoko\/object-oriented-programming-oop-dengan-python-3-9a618df7429e<\/a><\/p><p><a rel=\"noreferrer noopener\" href=\"https:\/\/www.json.org\/json-id.html\" target=\"_blank\">JSON<\/a><br><a rel=\"noreferrer noopener\" href=\"https:\/\/jogjaweb.co.id\/blog\/pengertian-dan-kegunaan-json\" target=\"_blank\">Pengenalan JSON – Jogjaweb<\/a><\/p><p><a rel=\"noreferrer noopener\" href=\"https:\/\/www.youtube.com\/watch?v=EluVFXu4GOU\" target=\"_blank\">Apa itu JSON – Web Programming UNPAS<\/a><\/p><p> <\/p><\/div>
